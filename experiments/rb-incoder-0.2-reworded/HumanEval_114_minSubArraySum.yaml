name: HumanEval_114_minSubArraySum
language: rb
prompt: "# Given an array of integers nums, find the minimum sum of any non-empty\
  \ sub-array\n# of nums.\n# Example\n# >>> minSubArraySum.call([2, 3, 4, 1, 2, 4])\n\
  # 1\n# >>> minSubArraySum.call([-1, -2, -3])\n# -6\ndef minSubArraySum(nums)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_minSubArraySum\n\
  \    candidate = method(:minSubArraySum)\n    assert_equal(1, candidate.call([2,\
  \ 3, 4, 1, 2, 4]))\n    assert_equal(-6, candidate.call([-1, -2, -3]))\n    assert_equal(-14,\
  \ candidate.call([-1, -2, -3, 2, -10]))\n    assert_equal(-9999999999999999, candidate.call([-9999999999999999]))\n\
  \    assert_equal(0, candidate.call([0, 10, 20, 1000000]))\n    assert_equal(-6,\
  \ candidate.call([-1, -2, -3, 10, -5]))\n    assert_equal(-6, candidate.call([100,\
  \ -1, -2, -3, 10, -5]))\n    assert_equal(3, candidate.call([10, 11, 13, 8, 3, 4]))\n\
  \    assert_equal(-33, candidate.call([100, -33, 32, -1, 0, -2]))\n    assert_equal(-10,\
  \ candidate.call([-10]))\n    assert_equal(7, candidate.call([7]))\n    assert_equal(-1,\
  \ candidate.call([1, -1]))\n  end\nend\n"
completions: ["  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length-1\n    sum += nums[i]\n   \
    \ if sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n  \
    \  (i..nums.size-1).each do |j|\n      min = min + nums[j] if nums[j] < min\n\
    \    end\n    min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b\
    \ }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(0)\n    end\n\
    \    return min if min > max\n  end\n  nil\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      min = nums.min { |a, b|\
    \ a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    min + max\n  end\nend\n</code>\n<|/ a tags=ruby,arrays |>\n<| c\
    \ |>\nThis solution doesn't work if you have a negative number in the array. Try\
    \ `minSubArraySum.call([-1, -2, -3])`.\n<|/ c |>\n<| c |>\nThanks for pointing\
    \ that out. I fixed the code by adding `min = nums.min { |a, b| a <=> b }` before\
    \ the `until` loop.\n<|/ c |>\n<| a dscore=1 |>\n<code>", "  nums.each do |n|\n\
    \    min = n\n    n.times do |i|\n      min = min > nums[i] || nums[i] > nums[i\
    \ - 1] ? nums[i] : min\n    end\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n\
    \  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n    max =\
    \ num\n    until nums.empty? do\n      min = nums.min {|a, b| a + b}\n      max\
    \ = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min if min > max\n  end\nend", "  nums.sort!\n  min = nums[0]\n  for\
    \ i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    (i..nums.size).each do |j|\n      min = min\
    \ > nums[j] ? min : nums[j]\n    end\n    return min\n  end\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min\
    \ = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      min = nums.min { |a, b| a + b\
    \ }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  nil\nend", "  nums.sort!\n  sum\
    \ = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  return sum\nend", "  nums.each do |num|\n   \
    \ min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n  \
    \    min = num if sum < min\n      max = num if sum > max\n    end\n    min\n\
    \  end\nend", "  nums.each_with_index do |num, i|\n    min = num\n    nums.each_with_index\
    \ do |num2, j|\n      min = num if num2 < min and nums[i] != num2\n    end\n \
    \   return min\n  end\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty?\n      sum = nums.shift\n      next if sum < min or sum\
    \ > max\n      min = sum\n      max = sum\n    end\n    min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend",
  "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i]\
    \ ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(max))\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i]\
    \ ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n\
    \  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty?\n      sum = nums.shift\n      next if sum < min or sum >\
    \ max\n      min = sum\n      max = sum\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  return sum\nend", "  nums.each do |num|\n   \
    \ min = num\n    max = num\n    until nums.empty? do\n      min = nums.min { |a,\
    \ b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\nend", "  nums.each do |n|\n    min\
    \ = n\n    n.times do |i|\n      min = min > nums[i] ? min : nums[i]\n    end\n\
    \    return min\n  end\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n\
    \    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.each_with_index do |num, i|\n \
    \   min = num\n    min = num if nums.size - i == 1\n    min = num if nums.size\
    \ - i == 2\n    min = num if nums.size - i == 3\n    min = num if nums.size -\
    \ i == 4\n    min = num if nums.size - i == 5\n    min = num if nums.size - i\
    \ == 6\n    min = num if nums.size - i == 7\n    min = num if nums.size - i ==\
    \ 8\n    min = num if nums.size - i == 9\n    min = num if nums.size - i == 10\n\
    \    min = num if nums.size - i == 11\n    min = num if nums.size - i == 12\n\
    \    min = num if nums.size - i == 13\n    min = num if nums.size - i == 14\n\
    \    min = num if nums.size - i == 15\n    min = num if nums.size - i == 16\n\
    \    min = num if nums.size - i == 17\n    min = num if nums.size - i == 18\n\
    \    min = num if nums.size - i == 19\n    min = num if nums.size - i == 20\n\
    \    min = num if nums.size - i == 21\n    min = num if nums.size - i == 22\n\
    \    min = num if nums.size - i == 23\n    min = num if nums.size - i == 24\n\
    \    min = num if nums.size - i == 25\n    min = num if nums.size - i == 26\n\
    \    min = num if nums.size - i == 27\n    min = num if nums.size - i == 28\n\
    \    min = num if nums.size - i == 29\n    min = num if nums.size - i == 30\n\
    \    min = num if nums.size - i == 31\n    min = num if nums.size - i == 32\n\
    \    min = num if nums.size - i == 33\n    min = num if nums.size - i == 34\n\
    \    min = num if nums.size - i == 35\n    min = num if nums.size - i == 36\n\
    \    min = num if nums.size - i == 37\n    min = num if nums.size - i == 38\n\
    \    min = num if nums.size - i == 39\n    min = num if nums.size - i == 40\n\
    \    min = num if nums.size - i == 41\n    min = num if nums.size - i == 42\n\
    \    min = num if nums.size - i == 43\n    min = num if nums.size - i == 44\n\
    \    min = num if nums.size - i == 45\n    min = num if nums.size - i == 46\n\
    \    min = num if nums.size - i == 47\n    min = num if nums.size - i == 48\n\
    \    min = num if nums.size - i == 49\n    min = num if num", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = min if sum < min\n      max = max if sum > max\n    end\n    return\
    \ min\n  end\nend", "  nums.each do |num|\n    min = num\n    max = num\n    until\
    \ nums.empty?\n      sum = nums.shift\n      next if sum < min or sum > max\n\
    \      min = sum\n      max = sum\n    end\n    min\n  end\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = sum if sum < min\n      max = sum if sum > max\n    end\n    return\
    \ min if min != max\n  end\n  return nil\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty?\n      sum = nums.shift\n      next if sum < min or sum\
    \ > max\n      min = sum\n      max = sum\n    end\n    min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index do |n, i|\n\
    \    min = nums[i]\n    j = i + 1\n    while j < nums.length\n      min = nums[j]\
    \ if n < min\n      j += 1\n    end\n    min\n  end\nend", "  nums.reduce(:+)\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    min + max\n  end\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length-1\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each_with_index do |num, i|\n    min = num\n    (i..nums.size-1).each do\
    \ |j|\n      min = min > nums[j] ? nums[j] : min\n    end\n    return min\n  end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=ruby,arrays |>\n<code>", "  nums.each\
    \ do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n    end\n   \
    \ return sum if sum < 0\n  end\n  0\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each do |n|\n\
    \    min = n\n    n.times do |i|\n      min = min + nums[i]\n    end\n    return\
    \ min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n   \
    \ sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.reduce(:+)\nend",
  "  nums.each_with_index do |n, i|\n    min = nums[i]\n    min = nums[i] if nums[i]\
    \ > 0\n    min = nums[i] if nums[i] < 0\n    min = nums[i] if nums[i] == 0\n \
    \   min = nums[i] if nums[i] == nil\n    min = nums[i] if nums[i] == false\n \
    \   min = nums[i] if nums[i] == true\n    min = nums[i] if nums[i] == nil\n  \
    \  min = nums[i] if nums[i] == []\n    min = nums[i] if nums[i] == {}\n    min\
    \ = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i] == []\n    min = nums[i]\
    \ if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i]\
    \ == []\n    min = nums[i] if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n\
    \    min = nums[i] if nums[i] == []\n    min = nums[i] if nums[i] == {}\n    min\
    \ = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i] == []\n    min = nums[i]\
    \ if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i]\
    \ == []\n    min = nums[i] if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n\
    \    min = nums[i] if nums[i] == []\n    min = nums[i] if nums[i] == {}\n    min\
    \ = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i] == []\n    min = nums[i]\
    \ if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i]\
    \ == []\n    min = nums[i] if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n\
    \    min = nums[i] if nums[i] == []\n    min = nums[i] if nums[i] == {}\n    min\
    \ = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i] == []\n    min = nums[i]\
    \ if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i]\
    \ == []\n    min = nums[i] if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n\
    \    min = nums[i] if nums[i] == []\n    min = nums[i] if nums[i] == {}\n    min\
    \ = nums[i] if nums[i] == ()\n    min = nums[i] if nums[i] == []\n    min = nums[i]\
    \ if nums[i] == {}\n    min = nums[i] if nums[i] == ()\n    min = nums[i] if num",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min =\
    \ nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.each do |num|\n    min = num\n    max = num\n   \
    \ until nums.empty?\n      sum = nums.shift\n      next if sum < min\n      next\
    \ if sum > max\n      min = sum\n    end\n    return min\n  end\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    min = i if n < min\n    min = i if n == min\
    \ && nums[i + 1] == n\n    nums[i] = min\n  end\n  nums.min\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      if sum < min\n        min = sum\n      elsif sum > max\n        max = sum\n\
    \      else\n        break\n      end\n    end\n    return min\n  end\nend", " \
    \ nums.each do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i]\
    \ ? min : nums[i]\n    end\n    min\n  end\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      sum = nums.shift\n   \
    \   min = min > sum ? min : sum\n      max = max < sum ? max : sum\n    end\n\
    \    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at([nums.index(min), nums.index(max)].min)\n    end\n    return\
    \ min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n   \
    \ sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      sum = nums.shift\n      min = min if sum < min\n      max = max if sum\
    \ > max\n    end\n    return min if min != max\n  end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>", "  nums.each_with_index do |num, i|\n    min = num\n \
    \   min = num if nums.size - i > 1\n    min = num if nums.size - i == 1\n    min\
    \ = num if nums.size - i == 0\n    min = num if nums.size - i == -1\n    min =\
    \ num if nums.size - i == -2\n    min = num if nums.size - i == -3\n    min =\
    \ num if nums.size - i == -4\n    min = num if nums.size - i == -5\n    min =\
    \ num if nums.size - i == -6\n    min = num if nums.size - i == -7\n    min =\
    \ num if nums.size - i == -8\n    min = num if nums.size - i == -9\n    min =\
    \ num if nums.size - i == -10\n    min = num if nums.size - i == -11\n    min\
    \ = num if nums.size - i == -12\n    min = num if nums.size - i == -13\n    min\
    \ = num if nums.size - i == -14\n    min = num if nums.size - i == -15\n    min\
    \ = num if nums.size - i == -16\n    min = num if nums.size - i == -17\n    min\
    \ = num if nums.size - i == -18\n    min = num if nums.size - i == -19\n    min\
    \ = num if nums.size - i == -20\n    min = num if nums.size - i == -21\n    min\
    \ = num if nums.size - i == -22\n    min = num if nums.size - i == -23\n    min\
    \ = num if nums.size - i == -24\n    min = num if nums.size - i == -25\n    min\
    \ = num if nums.size - i == -26\n    min = num if nums.size - i == -27\n    min\
    \ = num if nums.size - i == -28\n    min = num if nums.size - i == -29\n    min\
    \ = num if nums.size - i == -30\n    min = num if nums.size - i == -31\n    min\
    \ = num if nums.size - i == -32\n    min = num if nums.size - i == -33\n    min\
    \ = num if nums.size - i == -34\n    min = num if nums.size - i == -35\n    min\
    \ = num if nums.size - i == -36\n    min = num if nums.size - i == -37\n    min\
    \ = num if nums.size - i == -38\n    min = num if nums.size - i == -39\n    min\
    \ = num if nums.size - i == -40\n    min = num if nums.size - i == -41\n    min\
    \ = num if nums.size - i == -42\n    min = num if nums.size - i == -43\n    min\
    \ = num if nums.size - i == -44\n    min = num", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n   \
    \   sum = nums.shift\n      min = min if sum < min\n      max = max if sum > max\n\
    \    end\n    min\n  end\nend", "  nums.each do |num|\n    min = num\n    max\
    \ = num\n    until nums.empty? do\n      min = nums.min {|a, b| a + b}\n     \
    \ max = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n\
    \  return sum\nend", "  nums.each_with_index do |num, i|\n    min = num\n    min\
    \ = num if nums.size - i > 1\n    min = num if nums.size - i == 1\n    min = num\
    \ if nums.size - i == 2\n    min = num if nums.size - i == 3\n    min = num if\
    \ nums.size - i == 4\n    min = num if nums.size - i == 5\n    min = num if nums.size\
    \ - i == 6\n    min = num if nums.size - i == 7\n    min = num if nums.size -\
    \ i == 8\n    min = num if nums.size - i == 9\n    min = num if nums.size - i\
    \ == 10\n    min = num if nums.size - i == 11\n    min = num if nums.size - i\
    \ == 12\n    min = num if nums.size - i == 13\n    min = num if nums.size - i\
    \ == 14\n    min = num if nums.size - i == 15\n    min = num if nums.size - i\
    \ == 16\n    min = num if nums.size - i == 17\n    min = num if nums.size - i\
    \ == 18\n    min = num if nums.size - i == 19\n    min = num if nums.size - i\
    \ == 20\n    min = num if nums.size - i == 21\n    min = num if nums.size - i\
    \ == 22\n    min = num if nums.size - i == 23\n    min = num if nums.size - i\
    \ == 24\n    min = num if nums.size - i == 25\n    min = num if nums.size - i\
    \ == 26\n    min = num if nums.size - i == 27\n    min = num if nums.size - i\
    \ == 28\n    min = num if nums.size - i == 29\n    min = num if nums.size - i\
    \ == 30\n    min = num if nums.size - i == 31\n    min = num if nums.size - i\
    \ == 32\n    min = num if nums.size - i == 33\n    min = num if nums.size - i\
    \ == 34\n    min = num if nums.size - i == 35\n    min = num if nums.size - i\
    \ == 36\n    min = num if nums.size - i == 37\n    min = num if nums.size - i\
    \ == 38\n    min = num if nums.size - i == 39\n    min = num if nums.size - i\
    \ == 40\n    min = num if nums.size - i == 41\n    min = num if nums.size - i\
    \ == 42\n    min = num if nums.size - i == 43\n    min = num if nums.size - i\
    \ == 44\n    min = num if nums.size - i == 45\n    min = num if nums.size - i\
    \ == 46\n    min = num if nums.size - i == 47\n    min = num if nums.size - i\
    \ == 48\n    min = num if num", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n\
    \    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  min = nums[0]\n\
    \  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n \
    \ min\nend", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n\
    \      sum = nums.shift\n      if sum < min then\n        min = sum\n      elsif\
    \ sum > max then\n        max = sum\n      else\n        break\n      end\n  \
    \  end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min\
    \ = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.each_with_index do |n, i|\n   \
    \ min = nums[i]\n    j = i + 1\n    while j < nums.length && nums[j] < min\n \
    \     min = nums[j]\n      j += 1\n    end\n    nums[i] = min\n  end\n  nums.reduce(:+)\n\
    end", "  nums.each do |num|\n    min = num\n    sum = 0\n    nums.each do |n|\n\
    \      sum += n\n      if sum < min\n        min = sum\n      end\n    end\n \
    \   return min\n  end\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty? do\n      sum = nums.shift\n      min = min if sum < min\n\
    \      max = max if sum > max\n    end\n    return min\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |n|\n    min = n\n\
    \    n.times do |i|\n      min = min > nums[i] || nums[i] > 0 ? min : nums[i]\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  min = nums[0]\n  for i\
    \ in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n  for i in\
    \ 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.each_with_index do |n, i|\n    min = nums[i]\n    max = nums[i]\n    (i..nums.size-1).each\
    \ do |j|\n      min = min > nums[j] ? min : nums[j]\n      max = max < nums[j]\
    \ ? max : nums[j]\n    end\n    min = min > max ? min : max\n  end\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(0)\n    end\n    return min if min > max\n  end\n  nil\n\
    end", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min\
    \ > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.reduce(:+)\nend", " \
    \ nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min if min > max\n\
    \  end\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "  nums.each\
    \ do |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i] || nums[i]\
    \ > 0 ? min : nums[i]\n    end\n    return min\n  end\nend", "  nums.sort!\n \
    \ sum = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n\
    \      sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  min = nums[0]\n\
    \  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n \
    \ min\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min\
    \ = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n   \
    \   sum = 0\n    end\n  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n  \
    \  end\n  end\n  return sum\nend", "  nums.each_with_index do |n, i|\n    min\
    \ = nums[i]\n    j = i + 1\n    while j < nums.length\n      min = min > nums[j]\
    \ ? min : nums[j]\n      j += 1\n    end\n    min = min > n ? min : n\n  end\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n\
    \      sum = nums.shift\n      min = num if sum < min\n      max = num if sum\
    \ > max\n    end\n    return min if min != max\n  end\n  return nil\nend", " \
    \ nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n  \
    \    sum = nums.shift\n      min = num if sum < min\n      max = num if sum >\
    \ max\n    end\n    return min if min != max\n  end\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(nums.index(min))\n    end\n    return min if min >\
    \ max\n  end\n  return nil\nend", "  nums.each do |num|\n    min = num\n    max\
    \ = num\n    until nums.empty?\n      sum = nums.shift\n      sum += num\n   \
    \   if sum < min\n        min = sum\n      elsif sum > max\n        max = sum\n\
    \      end\n    end\n    return min\n  end\nend", "  nums.each do |num|\n    min\
    \ = num\n    max = num\n    until nums.empty? do\n      sum = nums.shift\n   \
    \   min = num if sum < min\n      max = num if sum > max\n    end\n    return\
    \ min if min > max\n  end\n  return nil\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nI like the idea of using recursion to solve this problem. I'm going to try\
    \ this out and see how it works.\n<|/ c |>\n<| c |>\nI added a recursive solution\
    \ to my answer.\n<|/ c |>\n<| c |>\nI added a recursive solution to my answer.\n\
    <|/ c |>\n<| c |>\nI added a recursive solution to my answer.\n<|/ c |>\n<| a\
    \ tags=ruby,arrays |>\n<code>", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.sort!\n  min = nums.first\n  max = nums.last\n  sum = 0\n  for i\
    \ in 1..nums.size\n    sum += nums[i]\n    if sum < min\n      min = sum\n   \
    \ elsif sum > max\n      max = sum\n    end\n  end\n  min\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n  \
    \  sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each_with_index do |n, i|\n    min = nums[i]\n    (i..nums.size-1).each\
    \ do |j|\n      min = min > nums[j] ? min : nums[j]\n    end\n    return min\n\
    \  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum +=\
    \ nums[i]\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n\
    \      nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      min = nums.min {|a, b| a + b}\n      max = nums.max {|a, b| a + b}\n  \
    \    nums.delete_at(nums.index(min))\n    end\n    return min\n  end\nend", " \
    \ nums.each_with_index do |n, i|\n    min = nums[i]\n    (i..nums.size).each do\
    \ |j|\n      min = min > nums[j] ? min : nums[j]\n    end\n    return min\n  end\n\
    end", "  nums.each do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n\
    \    end\n    return sum if sum < 0\n  end\n  0\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ { |a, b| a + b }\n      max = nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min if min > max\n  end\n  return nil\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum = 0\n  for i\
    \ in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  return sum\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty? do\n      min = nums.min { |a, b| a + b }\n      max =\
    \ nums.max { |a, b| a + b }\n      nums.delete_at(nums.index(min))\n    end\n\
    \    return min if min > max\n  end\n  return nil\nend\n</code>\n<|/ a |>\n<|\
    \ c |>\nThis solution does not work if there are negative numbers in the array.\
    \ Try it out with [2,-3,4,-1,-2,-3,-4]\n<|/ c |>\n<| c |>\nThe question states\
    \ that there are no negative numbers in the array. Your solution does not work\
    \ for negative numbers. Try it out with [2,-3,4,-1,-2,-3,-4]\n<|/ c |>\n<| c |>\n\
    The question states that there are no negative numbers in the array. Your solution\
    \ does not work for negative numbers. Try it out with [2,-3,4,-1,-2,-3,-4]\n<|/\
    \ c |>\n<| c |>\nThe question states that there are no negative numbers in the\
    \ array. Your solution does not work for negative numbers. Try it out with [2,-3,4,-1,-2,-3,-4]\n\
    <|/ c |>\n<| c |>\nThe question states that there are no negative numbers in the\
    \ array. Your solution does not work for negative numbers. Try it out with [2,-3,4,-1,-2,-3,-4]\n\
    <|/ c |>\n<| a tags=ruby |>\n<code>", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n  end\n  sum\nend", "  nums.each_with_index do |num, i|\n\
    \    min = num\n    nums.each_with_index do |num2, j|\n      if j > i && num2\
    \ > min\n        min = num2\n      end\n    end\n    return min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n  for i in\
    \ 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |n, i|\n    min = nums[i]\n    (i..nums.size-1).each do |j|\n      min =\
    \ min + nums[j] if nums[j] < min\n    end\n    min\n  end\nend", "  nums.reduce(:+)\n\
    end", "  nums.each_with_index do |n, i|\n    min = nums[i]\n    max = nums[i]\n\
    \    \n    n.times do |j|\n      min = nums[j] if nums[j] < min\n      max = nums[j]\
    \ if nums[j] > max\n    end\n    \n    return min if min > max\n  end\nend", " \
    \ nums.each_with_index do |num, i|\n    min = num\n    nums.slice!(i..-1)\n  \
    \  nums.each do |num|\n      min = min > num ? min : num\n    end\n    return\
    \ min\n  end\nend", "  nums.reduce(:+)\nend", "  nums.each do |num|\n    min =\
    \ num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n      if\
    \ sum < min\n        min = sum\n      elsif sum > max\n        max = sum\n   \
    \   else\n        break\n      end\n    end\n    return min if min != max\n  end\n\
    \  return nil\nend", "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n\
    \    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty? do\n      sum = nums.shift\n\
    \      min = min > sum ? min : sum\n      max = max < sum ? max : sum\n    end\n\
    \    return min\n  end\nend", "  nums.each_with_index do |num, i|\n    min = num\n\
    \    (i..nums.size-1).each do |j|\n      min = min > nums[j] ? min : nums[j]\n\
    \    end\n    return min\n  end\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not\
    \ the right answer. Try it with `[2,3,5,7,11,13]`\n<|/ c |>\n<| c |>\nIt works\
    \ fine for me. Can you please explain why you think it doesn't?\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for `[2,3,5,7,11,13]` because `minSubArraySum([2,3,5,7,11,13])`\
    \ returns `13` instead of `6`.\n<|/ c |>\n<| c |>\nI see. Thanks for pointing\
    \ that out. I updated the answer to fix that.\n<|/ c |>\n<| c |>\nI still don't\
    \ think this is right. Try it with `[2,3,5,7,11,13]`\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "  nums.reduce(:+)\nend", "  nums.sort!\n  sum = 0\n  for i in\
    \ 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n\
    \  end\n  return sum\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\n\
    end", "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\
    \ do\n      min = nums.min { |a, b| a + b }\n      max = nums.max { |a, b| a +\
    \ b }\n      nums.delete_at(0)\n    end\n    return min if min > max\n  end\n\
    \  nil\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum +=\
    \ nums[i]\n  end\n  return sum\nend", "  nums.reduce(:+)\nend", "  nums.sort!\n\
    \  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n \
    \     sum = 0\n    end\n  end\n  return sum\nend", "  nums.reduce(:+)\nend", " \
    \ nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum\
    \ = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  min = nums[0]\n  for i in\
    \ 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.sort!\n  min = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i]\
    \ ? min : nums[i]\n  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.reduce(:+)\nend",
  "  nums.reduce(:+)\nend", "  nums.each do |num|\n    min = num\n    max = num\n\
    \    until nums.empty?\n      sum = nums.shift\n      next if sum < min or sum\
    \ > max\n      min = sum\n      max = sum\n    end\n    return min\n  end\nend",
  "  nums.each do |n|\n    sum = 0\n    n.times do |i|\n      sum += nums[i]\n   \
    \ end\n    return sum if sum < 0\n  end\n  return 0\nend", "  nums.sort!\n  min\
    \ = nums[0]\n  for i in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n\
    \  end\n  min\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n  \
    \  sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend\n\
    </cell>\n<cell>\nminSubArraySum([2, 3, 4, 1, 2, 4])\n</cell>\n<cell>\nminSubArraySum([-1,\
    \ -2, -3])\n</cell>\n<text>\nThe Ruby way", "  nums.each do |num|\n    min = num\n\
    \    max = num\n    until nums.empty? do\n      sum = nums.shift\n      min =\
    \ num if sum < min\n      max = num if sum > max\n    end\n    min\n  end\nend",
  "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  return sum\nend", "  nums.each do\
    \ |n|\n    min = n\n    n.times do |i|\n      min = min > nums[i] ? min : nums[i]\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum += nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  return sum\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each_with_index\
    \ do |num, i|\n    min = num\n    (i..nums.size-1).each do |j|\n      min = min\
    \ + nums[j] if nums[j] < num\n    end\n    return min if min > num\n  end\n  return\
    \ nil\nend", "  nums.sort!\n  min = nums.first\n  for i in 1..nums.size\n    min\
    \ = min > nums[i] ? min + nums[i] : nums[i]\n  end\n  min\nend", "  nums.each\
    \ do |num|\n    min = num\n    max = num\n    until nums.empty? do\n      sum\
    \ = nums.shift\n      min = num if sum < min\n      max = num if sum > max\n \
    \   end\n    return min if min != max\n  end\nend", "  nums.each do |num|\n  \
    \  min = num\n    max = num\n    until nums.empty? do\n      sum = nums.shift\n\
    \      if sum < min then\n        min = sum\n      elsif sum > max then\n    \
    \    max = sum\n      else\n        break\n      end\n    end\n    return min\n\
    \  end\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n    j = i\
    \ + 1\n    while j < nums.length\n      min = min > nums[j] ? min : nums[j]\n\
    \      j += 1\n    end\n    min\n  end\nend", "  nums.sort!\n  sum = 0\n  for\
    \ i in 0...nums.length\n    sum += nums[i]\n  end\n  sum\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty? do\n      min = nums.min\
    \ {|a, b| a + b}\n      max = nums.max {|a, b| a + b}\n      nums.delete_at(nums.index(min))\n\
    \    end\n    return min\n  end\nend", "  nums.sort!\n  min = nums[0]\n  for i\
    \ in 1..nums.length\n    min = min > nums[i] ? min : nums[i]\n  end\n  min\nend",
  "  nums.each do |num|\n    min = num\n    max = num\n    until nums.empty?\n   \
    \   sum = nums.shift\n      if sum < min\n        min = sum\n      elsif sum >\
    \ max\n        max = sum\n      else\n        break\n      end\n    end\n    return\
    \ min\n  end\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n   \
    \ (i..nums.size-1).each do |j|\n      min = min + nums[j] if nums[j] < n\n   \
    \ end\n    return min if min > n\n  end\n  nil\nend", "  nums.each do |n|\n  \
    \  min = n\n    n.times do |i|\n      min = min > nums[i] ? min : nums[i]\n  \
    \  end\n    min\n  end\nend", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n\
    \    sum = sum + nums[i]\n    if sum < 0\n      sum = 0\n    end\n  end\n  sum\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.reduce(:+)\n\
    end", "  nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n\
    \    if sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.each do |num|\n\
    \    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      min = num if sum < min\n      max = num if sum > max\n    end\n    return\
    \ min if min != max\n  end\n  return nil\nend", "  nums.each_with_index do |n,\
    \ i|\n    min = nums[i]\n    (i..nums.size-1).each do |j|\n      min = min + nums[j]\
    \ if nums[j] < min\n    end\n    min\n  end\nend", "  nums.sort!\n  sum = 0\n\
    \  for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend", "  nums.each_with_index do |n, i|\n    min = nums[i]\n\
    \    (i..nums.size).each do |j|\n      min = min + nums[j] if nums[j] < min\n\
    \    end\n    return min if min != 0\n  end\n  return 0\nend", "  nums.each do\
    \ |num|\n    min = num\n    max = num\n    until nums.empty?\n      sum = nums.shift\n\
    \      if sum < min\n        min = sum\n      elsif sum > max\n        max = sum\n\
    \      else\n        break\n      end\n    end\n    return min\n  end\nend", " \
    \ nums.sort!\n  sum = 0\n  for i in 0...nums.length\n    sum += nums[i]\n    if\
    \ sum < 0\n      sum = 0\n    end\n  end\n  sum\nend", "  nums.sort!\n  sum =\
    \ 0\n  for i in 0...nums.length\n    sum = sum + nums[i]\n    if sum < 0\n   \
    \   sum = 0\n    end\n  end\n  sum\nend\n</code>\n<|/ a |>\n<| c |>\nThis is not\
    \ an answer to the question. He asked for a solution in Ruby, not Python.\n<|/\
    \ c |>\n<| c |>\nI believe this to be the best solution in Ruby. I would like\
    \ to see a solution in Python as well, but I haven't found one.\n<|/ c |>\n<|\
    \ c |>\nThis solution is O(n^2) in time and space. Not a good solution for large\
    \ inputs.\n<|/ c |>\n<| c |>\nI believe this to be the best solution in Ruby.\
    \ I would like to see a solution in Python as well, but I haven't found one.\n\
    <|/ c |>\n<| c |>\nThis solution is O(n^2) in time and space. Not a good solution\
    \ for large inputs.\n<|/ c |>\n<| a tags=ruby,python,algorithm |>\n<code>", " \
    \ nums.each do |num|\n    min = num\n    max = num\n    until nums.empty? do\n\
    \      sum = nums.shift\n      min = min > sum ? min : sum\n      max = max <\
    \ sum ? max : sum\n    end\n    min\n  end\nend", "  nums.sort!\n  sum = 0\n \
    \ for i in 0...nums.length\n    sum += nums[i]\n    if sum < 0\n      sum = 0\n\
    \    end\n  end\n  sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
