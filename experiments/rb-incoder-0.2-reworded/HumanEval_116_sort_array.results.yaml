language: rb
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map!\
    \ {|x| x == 0 ? 0 : 1}\n  arr.sort!\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq9qluxgd\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpq9qluxgd.rb:20:in `test_sort_array'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_sort_array\n\
    \     19:     candidate = method(:sort_array)\n  => 20:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     21:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     22:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     23:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 1, 1, 1, 1]>\n\
    \ndiff:\n? [1, 2, 4, 3, 5]\n?     1  1  1  1 \n?     ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009275559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.81 tests/s, 107.81 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.nonzero? ? x.to_i : x.to_s }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmjl7rwr0\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpmjl7rwr0.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.014729766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.89 tests/s, 67.89 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index\
    \ do |x, i|\n    arr[i] = x.to_s(2)\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp310sjeh2\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp310sjeh2.rb:22:in `test_sort_array'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_sort_array\n\
    \     21:     candidate = method(:sort_array)\n  => 22:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     23:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     24:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     25:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009492071 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    105.35 tests/s, 105.35 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |i| i if i.to_s.length == i.to_s.length.to_i }.sort!\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpxtawff02\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpxtawff02.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009367859 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    106.75 tests/s, 106.75 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index\
    \ do |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8huho9_f\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp8huho9_f.rb:22:in `test_sort_array'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_sort_array\n\
    \     21:     candidate = method(:sort_array)\n  => 22:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     23:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     24:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     25:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00913202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.50 tests/s, 109.50 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |i| i.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmprlgspo7i\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmprlgspo7i.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009703382 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.06 tests/s, 103.06 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpytsa4dr9\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpytsa4dr9.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009688788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.21 tests/s, 103.21 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = [arr[i].to_i, e].max\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp1jg_gy26\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp1jg_gy26.rb:22:in `test_sort_array'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_sort_array\n\
    \     21:     candidate = method(:sort_array)\n  => 22:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     23:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     24:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     25:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009555376 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    104.65 tests/s, 104.65 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |i| i.zero? ? i : i.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpu4ouewh9\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpu4ouewh9.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009915134 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    100.86 tests/s, 100.86 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpytsa4dr9\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpytsa4dr9.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009688788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.21 tests/s, 103.21 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpytsa4dr9\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpytsa4dr9.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009688788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.21 tests/s, 103.21 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.nonzero? ? x.to_i : x.to_s }\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpmjl7rwr0\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpmjl7rwr0.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.014729766 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    67.89 tests/s, 67.89 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map!\
    \ {|x| x == 0 ? 0 : 1}\n  arr.sort!\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpq9qluxgd\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpq9qluxgd.rb:20:in `test_sort_array'\n\
    \     17: class TestHumanEval < Test::Unit::TestCase\n     18:   def test_sort_array\n\
    \     19:     candidate = method(:sort_array)\n  => 20:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     21:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     22:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     23:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 1, 1, 1, 1]>\n\
    \ndiff:\n? [1, 2, 4, 3, 5]\n?     1  1  1  1 \n?     ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009275559 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.81 tests/s, 107.81 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index\
    \ do |x, i|\n    arr[i] = x.to_s(2)\n  end\n  arr\nend\n</cell>\n<cell>\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: SyntaxError
  stderr: '/tmp/tmpynnf0sr5.rb:18: syntax error, unexpected ''<'', expecting end-of-input

    </cell>

    ^

    '
  stdout: ''
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |e| e > 0 ? e : -e }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp6c5enuzk\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp6c5enuzk.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009293693 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    107.60 tests/s, 107.60 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpytsa4dr9\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpytsa4dr9.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009688788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.21 tests/s, 103.21 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index\
    \ do |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8huho9_f\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp8huho9_f.rb:22:in `test_sort_array'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_sort_array\n\
    \     21:     candidate = method(:sort_array)\n  => 22:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     23:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     24:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     25:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00913202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.50 tests/s, 109.50 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.each_with_index\
    \ do |x, i|\n    arr[i] = arr[i].to_i\n  end\n  arr\nend\nrequire 'test/unit'\n\
    class TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n    candidate\
    \ = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp8huho9_f\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp8huho9_f.rb:22:in `test_sort_array'\n\
    \     19: class TestHumanEval < Test::Unit::TestCase\n     20:   def test_sort_array\n\
    \     21:     candidate = method(:sort_array)\n  => 22:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     23:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     24:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     25:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.00913202 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    109.50 tests/s, 109.50 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n\
    \  def test_sort_array\n    candidate = method(:sort_array)\n    assert_equal([1,\
    \ 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6,\
    \ -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0, 1, 2, 4,\
    \ 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpytsa4dr9\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpytsa4dr9.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009688788 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.21 tests/s, 103.21 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\n  arr.map\
    \ { |x| x.zero? ? x : x.to_s(2) }\nend\nrequire 'test/unit'\nclass TestHumanEval\
    \ < Test::Unit::TestCase\n  def test_sort_array\n    candidate = method(:sort_array)\n\
    \    assert_equal([1, 2, 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n    assert_equal([-4,\
    \ -2, -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n    assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n    assert_equal([], candidate.call([]))\n\
    \    assert_equal([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77,\
    \ 4, 5, 3, 5, 7, 2, 3, 4]))\n    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3,\
    \ 6, 44, 12, 32, 5]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2,\
    \ 4, 8, 16, 32]))\n    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8,\
    \ 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmpqvnp6x3n\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmpqvnp6x3n.rb:19:in `test_sort_array'\n\
    \     16: class TestHumanEval < Test::Unit::TestCase\n     17:   def test_sort_array\n\
    \     18:     candidate = method(:sort_array)\n  => 19:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     20:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     21:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     22:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[\"1\", \"10\", \"\
    11\", \"100\", \"101\"]>\n\ndiff:\n? [ 1 , 2   , 4   , 3    , 5    ]\n?  \" \"\
    \  \"10\"  \"11\"  \"100\"  \"101\" \n?  + +  ?  ?  ?  ? \n===============================================================================\n\
    \nFinished in 0.009665959 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    103.46 tests/s, 103.46 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
- exit_code: 1
  program: "# In this Kata, you have to sort an array of non-negative integers according\
    \ to\n# number of ones in their binary representation in ascending order.\n# For\
    \ similar number of ones, sort based on decimal value.\n# It must be implemented\
    \ like this:\n# >>> sort_array.call([1, 5, 2, 3, 4])\n# [1, 2, 3, 4, 5]\n# >>>\
    \ sort_array.call([-2, -3, -4, -5, -6])\n# [-6, -5, -4, -3, -2]\n# >>> sort_array.call([1,\
    \ 0, 2, 3, 4])\n# [0, 1, 2, 3, 4]\ndef sort_array(arr)\n  arr.sort!\nend\nrequire\
    \ 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_sort_array\n\
    \    candidate = method(:sort_array)\n    assert_equal([1, 2, 4, 3, 5], candidate.call([1,\
    \ 5, 2, 3, 4]))\n    assert_equal([-4, -2, -6, -5, -3], candidate.call([-2, -3,\
    \ -4, -5, -6]))\n    assert_equal([0, 1, 2, 4, 3], candidate.call([1, 0, 2, 3,\
    \ 4]))\n    assert_equal([], candidate.call([]))\n    assert_equal([2, 2, 4, 4,\
    \ 3, 3, 5, 5, 5, 7, 77], candidate.call([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]))\n\
    \    assert_equal([32, 3, 5, 6, 12, 44], candidate.call([3, 6, 44, 12, 32, 5]))\n\
    \    assert_equal([2, 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n    assert_equal([2,\
    \ 4, 8, 16, 32], candidate.call([2, 4, 8, 16, 32]))\n  end\nend\n"
  status: Exception
  stderr: ''
  stdout: "Loaded suite /tmp/tmp7g2wyv1w\nStarted\nF\n===============================================================================\n\
    Failure: test_sort_array(TestHumanEval)\n/tmp/tmp7g2wyv1w.rb:18:in `test_sort_array'\n\
    \     15: class TestHumanEval < Test::Unit::TestCase\n     16:   def test_sort_array\n\
    \     17:     candidate = method(:sort_array)\n  => 18:     assert_equal([1, 2,\
    \ 4, 3, 5], candidate.call([1, 5, 2, 3, 4]))\n     19:     assert_equal([-4, -2,\
    \ -6, -5, -3], candidate.call([-2, -3, -4, -5, -6]))\n     20:     assert_equal([0,\
    \ 1, 2, 4, 3], candidate.call([1, 0, 2, 3, 4]))\n     21:     assert_equal([],\
    \ candidate.call([]))\n<[1, 2, 4, 3, 5]> expected but was\n<[1, 2, 3, 4, 5]>\n\
    \ndiff:\n? [1, 2, 3, 4, 3, 5]\n===============================================================================\n\
    \nFinished in 0.009042782 seconds.\n-------------------------------------------------------------------------------\n\
    1 tests, 1 assertions, 1 failures, 0 errors, 0 pendings, 0 omissions, 0 notifications\n\
    0% passed\n-------------------------------------------------------------------------------\n\
    110.59 tests/s, 110.59 assertions/s\n"
  timestamp: 1659794803
