name: HumanEval_122_add_elements
language: rb
prompt: "# Given a non-empty array of integers arr and an integer k, return\n# the\
  \ sum of the elements with at most two digits from the first k elements of arr.\n\
  # Example:\n# >>> add_elements.call([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n# 24\n\
  # Constraints:\n# 1. 1 <= len(arr) <= 100\n# 2. 1 <= k <= len(arr)\ndef add_elements(arr,\
  \ k)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add_elements\n\
  \    candidate = method(:add_elements)\n    assert_equal(-4, candidate.call([1,\
  \ -2, -3, 41, 57, 76, 87, 88, 99], 3))\n    assert_equal(0, candidate.call([111,\
  \ 121, 3, 4000, 5, 6], 2))\n    assert_equal(125, candidate.call([11, 21, 3, 90,\
  \ 5, 6, 7, 8, 9], 4))\n    assert_equal(24, candidate.call([111, 21, 3, 4000, 5,\
  \ 6, 7, 8, 9], 4))\n    assert_equal(1, candidate.call([1], 1))\n  end\nend\n"
completions: ["  arr.sort!\n  sum = 0\n  for i in 0...k\n    sum += arr[i]\n  end\n\
    \  sum\nend", "  sum = 0\n  arr.each do |i|\n    sum += i if i.to_s.length <=\
    \ k\n  end\n  sum\nend\n</cell>\n<cell>", "  sum = 0\n  arr.each do |i|\n    sum\
    \ += i if i.to_s.length <= k\n  end\n  sum\nend", "  arr.each_with_index do |e,\
    \ i|\n    arr[i] = e % 10\n    arr[i] = 0 if arr[i] < 2\n  end\n  arr.sum\nend",
  "  sum = 0\n  arr.each do |i|\n    sum += i if i.to_s.length <= k\n  end\n  sum\n\
    end", "  arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n  end\n\
    \  arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n  end\n \
    \ arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do\
    \ |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e,\
    \ i|\n    arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n\
    \    arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n \
    \   arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n  \
    \  arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i]\
    \ = e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] =\
    \ e % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e\
    \ % 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e %\
    \ 10 + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\
    \ + arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10 +\
    \ arr[i] / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i]\
    \ / 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i] /\
    \ 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10 + arr[i] / 10\n \
    \ end\n  arr.each_with_index do |e, i|\n    ", "  sum = 0\n  for i in 0...k\n\
    \    sum = sum + arr[i]\n  end\n  return sum\nend", "  arr.each_with_index do\
    \ |e, i|\n    if i > k\n      break\n    end\n    sum = 0\n    sum = (e % 10)\
    \ + sum\n    sum = (e / 10) + sum\n    arr[i] = sum\n  end\n  arr\nend", "  arr.sort\n\
    \  sum = 0\n  for i in 0..k\n    sum += arr[i]\n  end\n  sum\nend", "  sum = 0\n\
    \  arr.each do |x|\n    if x.to_s.length <= k\n      sum += x\n    end\n  end\n\
    \  return sum\nend", "  arr.each_with_index do |x, i|\n    arr[i] = x.to_s.chars.take(k).join.to_i\n\
    \  end\n  arr.sum\nend", "  arr.sort!\n  sum = 0\n  for i in 0...k\n    sum +=\
    \ arr[i]\n  end\n  sum\nend", "  arr.each_with_index do |e, i|\n    if i > k\n\
    \      break\n    end\n    arr[i] = e + arr[i]\n  end\n  arr.sum\nend", "  arr.each_with_index\
    \ do |e, i|\n    if i > k\n      break\n    end\n    sum = e + arr[i]\n    arr[i]\
    \ = sum % 10\n    sum = (sum - arr[i]) / 10\n  end\n  arr\nend", "  arr.each_with_index\
    \ do |e, i|\n    if i > k\n      break\n    end\n    sum = 0\n    sum = (sum.to_i\
    \ + e.to_i) % 10\n  end\n  sum\nend", "  arr.sort\n  sum = 0\n  for i in 0...k\n\
    \    sum += arr[i]\n  end\n  sum\nend", "  sum = 0\n  arr.each do |i|\n    sum\
    \ += i if i.to_s.length <= k\n  end\n  sum\nend\n</cell>\n<cell>", "  arr.sort!\n\
    \  sum = 0\n  for i in 0...k\n    sum += arr[i]\n  end\n  sum\nend", "  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n   \
    \ arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n\
    \  end\n  arr.each_with_index do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index\
    \ do |e, i|\n    arr[i] = e % 10\n  end\n  arr.each_with_index do |e, i|\n    ",
  "  sum = 0\n  for i in 0...k\n    sum += arr[i]\n  end\n  return sum\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
