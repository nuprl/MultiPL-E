name: HumanEval_86_anti_shuffle
language: rb
prompt: "# Write a function that takes a string and returns an ordered version of\
  \ it.\n# Ordered version of string, is a string where all words (separated by space)\n\
  # are replaced by a new word where all the characters arranged in\n# ascending order\
  \ based on ascii value.\n# Note: You should keep the order of words and blank spaces\
  \ in the sentence.\n# For example:\n# >>> anti_shuffle.call(\"Hi\")\n# \"Hi\"\n\
  # >>> anti_shuffle.call(\"hello\")\n# \"ehllo\"\n# >>> anti_shuffle.call(\"Hello\
  \ World!!!\")\n# \"Hello !!!Wdlor\"\ndef anti_shuffle(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_anti_shuffle\n\
  \    candidate = method(:anti_shuffle)\n    assert_equal(\"Hi\", candidate.call(\"\
  Hi\"))\n    assert_equal(\"ehllo\", candidate.call(\"hello\"))\n    assert_equal(\"\
  bemnru\", candidate.call(\"number\"))\n    assert_equal(\"abcd\", candidate.call(\"\
  abcd\"))\n    assert_equal(\"Hello !!!Wdlor\", candidate.call(\"Hello World!!!\"\
  ))\n    assert_equal(\"\", candidate.call(\"\"))\n    assert_equal(\".Hi My aemn\
  \ is Meirst .Rboot How aer ?ouy\", candidate.call(\"Hi. My name is Mister Robot.\
  \ How are you?\"))\n  end\nend\n"
completions: ["  s.gsub!(/\\s+/, \" \")\n  s.split(\" \").sort.join\nend", "  s.gsub(/\\\
    w+/) { |word| word.chars.sort.join.to_sym }\nend", "  s = s.split(\" \").sort\n\
    \  s.join(\" \")\nend\n</cell>\n<cell>", "  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    w+/) { |w| w.downcase }\n  s.gsub!(/[^a-zA-Z ]/) { |w| w.reverse }\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub", " \
    \ s.split(\" \").sort_by { |word| word.each_char.map { |c| c.ord }.max }.join\n\
    end", "  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\w+/) { |w| w.chars.sort.join.to_sym\
    \ }\n  s.gsub!(/\\s+/, \" \")\nend", "  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    w+/) { |w| w.downcase }\n  s.gsub!(/[a-z]/) { |w| w.upcase }\n  s.gsub!(/[^a-z]/)\
    \ { |w| w.upcase }\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, ", "  s.split(\" \").sort.join(\"\
    \ \")\nend", "  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\w+/) { |word| word.chars.sort.join.to_sym\
    \ }\n  s.gsub!(/\\s+/, \" \")\nend", "  s.downcase!\n  s.gsub!(/\\s+/, \" \")\n\
    \  s.gsub!(/[^a-zA-Z ]/, \"\")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \"\
    \ \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\s+/, ",
  "  s.split(\" \").sort.join(\" \")\nend", "  s.split(\" \").sort!\n  s.split(\"\
    \ \").join\nend\n</cell>\n<cell>", "  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\w+/)\
    \ { |word| word.chars.sort.join.to_s }\n  s.gsub!(/\\s+/, \" \")\nend", "  s.split(\"\
    \ \").sort.join(\" \")\nend", "  s = s.downcase\n  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\\
    w+/) { |word| word.chars.sort_by { |c| c.ord }.join }\n  s.gsub!(/\\s+/, \" \"\
    )\n  s.downcase\nend", "  s.gsub!(/\\s+/, \" \")\n  s.gsub!(/\\w+/) { |word| word.chars.sort.join.to_sym\
    \ }\n  s.gsub!(/\\s+/, \" \")\nend", "  s = s.split(//).sort\n  s.join\nend\n\
    </code>\n<|/ a tags=ruby,string |>\n<| c |>\nThis doesn't work. `anti_shuffle(\"\
    Hello World!!!\")` returns `\"Hello !!!Wdlor\"` instead of `\"Hello World!!!\"\
    `.\n<|/ c |>\n<| c |>\n, you are right, I missed that part. Thanks for pointing\
    \ it out. I've updated my answer.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\w+/) { |word| word.chars.sort.join }\n  s.gsub!(/\\\
    s+/, \" \")\nend", "  s = s.split(\" \").sort\n  s.join(\" \")\nend", "  s.gsub!(/\\\
    s+/, \" \")\n  s.gsub!(/\\w+/) { |word| word.chars.sort.join }\n  s\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
