name: HumanEval_61_correct_bracketing
language: rb
prompt: "# brackets is a string of \"(\" and \")\".\n# return true if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing.call(\"\
  (\")\n# false\n# >>> correct_bracketing.call(\"()\")\n# true\n# >>> correct_bracketing.call(\"\
  (()())\")\n# true\n# >>> correct_bracketing.call(\")(()\")\n# false\ndef correct_bracketing(brackets)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_correct_bracketing\n\
  \    candidate = method(:correct_bracketing)\n    assert_equal(true, candidate.call(\"\
  ()\"))\n    assert_equal(true, candidate.call(\"(()())\"))\n    assert_equal(true,\
  \ candidate.call(\"()()(()())()\"))\n    assert_equal(true, candidate.call(\"()()((()()())())(()()(()))\"\
  ))\n    assert_equal(false, candidate.call(\"((()())))\"))\n    assert_equal(false,\
  \ candidate.call(\")(()\"))\n    assert_equal(false, candidate.call(\"(\"))\n  \
  \  assert_equal(false, candidate.call(\"((((\"))\n    assert_equal(false, candidate.call(\"\
  )\"))\n    assert_equal(false, candidate.call(\"(()\"))\n    assert_equal(false,\
  \ candidate.call(\"()()(()())())(()\"))\n    assert_equal(false, candidate.call(\"\
  ()()(()())()))()\"))\n  end\nend\n"
completions: ["  brackets.scan(/[()]/) do |char|\n    next if char == \")\"\n    next\
    \ if char == \"(\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  brackets == \"\
    \"\nend", "  brackets.scan(/[()]/) do |char|\n    next if char == \"(\" || char\
    \ == \")\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  brackets.empty?\nend",
  "  brackets.chars.each_with_index do |char, index|\n    if char == '('\n      brackets.chars.drop(index).each\
    \ do |char|\n        return false if char != ')'\n      end\n    elsif char ==\
    \ ')'\n      brackets.chars.drop(index).each do |char|\n        return false if\
    \ char != '('\n      end\n    end\n  end\n  true\nend", "  brackets.scan(/[()]/)\
    \ do |opening|\n    brackets.scan(/[)]/) do |closing|\n      opening == closing\
    \ ? true : false\n    end\n  end\nend", "  brackets.chars.each_with_index do |char,\
    \ i|\n    if char == '('\n      brackets.chars.slice!(i)\n      brackets.chars.slice!(i+1)\n\
    \      brackets.chars.slice!(i+2)\n    elsif char == ')'\n      brackets.chars.slice!(i)\n\
    \      brackets.chars.slice!(i+1)\n      brackets.chars.slice!(i+2)\n    end\n\
    \  end\n  brackets.chars.empty?\nend", "  brackets.chars.each do |char|\n    if\
    \ char == '('\n      brackets.chars.each do |other_char|\n        if other_char\
    \ == ')'\n          return false\n        end\n      end\n    end\n  end\n  return\
    \ true\nend", "  brackets.chars.each_with_index do |char, index|\n    if char\
    \ == \"(\" && brackets[index + 1] != \"(\"\n      return false\n    elsif char\
    \ == \")\" && brackets[index + 1] != \")\"\n      return false\n    end\n  end\n\
    \  true\nend", "  brackets.gsub!(/[()]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\\
    (\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n\
    \  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(/[\\(\\)]/, '')\n  brackets.gsub!(",
  "  brackets.scan(/[()]/) do |char|\n    next char if char == \"(\" || char == \"\
    )\"\n    char == \"(\" ? \"(\" : \")\"\n  end\n  brackets.empty?\nend", "  brackets.chars.each_with_index\
    \ do |char, index|\n    if char == \"(\" && brackets[index + 1] != \"(\"\n   \
    \   return false\n    elsif char == \")\" && brackets[index + 1] != \")\"\n  \
    \    return false\n    end\n  end\n  true\nend", "  brackets.gsub!(/\\(/, \"(\"\
    )\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"(\")\n  brackets.gsub!(/\\\
    ]/, \")\")\n  brackets.gsub!(/\\{/, \"(\")\n  brackets.gsub!(/\\}/, \")\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\\
    }/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n \
    \ brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\\
    {/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n \
    \ brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\\
    ]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n \
    \ brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\\
    [/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n  brackets.gsub!(/\\{/, \"{\")\n \
    \ brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\(/, \"(\")\n  brackets.gsub!(/\\\
    )/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n  brackets.gsub!(/\\]/, \"]\")\n \
    \ brackets.gsub!(/\\{/, \"{\")\n  brackets.gsub!(/\\}/, \"}\")\n  brackets.gsub!(/\\\
    (/, \"(\")\n  brackets.gsub!(/\\)/, \")\")\n  brackets.gsub!(/\\[/, \"[\")\n \
    \ brackets.gsub", "  brackets.chars.each_with_index do |char, index|\n    if char\
    \ == \"(\" && brackets[index + 1] == \"(\"\n      brackets[index + 1] = \")\"\n\
    \    elsif char == \")\" && brackets[index + 1] == \")\"\n      brackets[index\
    \ + 1] = \"(\"\n    end\n  end\n  brackets.chars.all? { |char| char == \"(\" ||\
    \ char == \")\" }\nend", "  brackets.chars.each_with_index do |char, index|\n\
    \    if char == '('\n      brackets.chars.each { |b| return false if b != ')'\
    \ } unless index == 0\n    elsif char == ')'\n      brackets.chars.each { |b|\
    \ return false if b != '(' }\n    end\n  end\n  true\nend", "  brackets.chars.each_with_index\
    \ do |char, index|\n    if char == '('\n      brackets.chars.slice!(index..-1)\n\
    \      return false\n    end\n  end\n  true\nend", "  brackets.gsub!(/\\(/, '{')\n\
    \  brackets.gsub!(/\\)/, '}')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n  brackets.gsub!(/\\]/, ')')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n  brackets.gsub!(/\\]/, ')')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n  brackets.gsub!(/\\]/, ')')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n  brackets.gsub!(/\\]/, ')')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n  brackets.gsub!(/\\]/, ')')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n  brackets.gsub!(/\\]/, ')')\n  brackets.gsub!(/\\\
    (/, '(')\n  brackets.gsub!(/\\)/, ')')\n  brackets.gsub!(/\\{/, '[')\n  brackets.gsub!(/\\\
    }/, ']')\n  brackets.gsub!(/\\[/, '(')\n", "  brackets.chars.each_with_index do\
    \ |char, index|\n    if char == '('\n      brackets.chars[index + 1] == '('\n\
    \    elsif char == ')'\n      brackets.chars[index + 1] == ')'\n    end\n  end\n\
    end", "  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n\
    \  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\"\
    )\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\\
    (\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\(\\)]/,\
    \ \"\")\n  brackets.gsub!(/[\\(\\)]/, \"\")\n  brackets.gsub!(/[\\", "  brackets.chars.each_with_index\
    \ do |char, index|\n    if char == '('\n      brackets.chars.each { |c| return\
    \ false if c == ')' unless index == 0 }\n      return true\n    elsif char ==\
    \ ')'\n      brackets.chars.each { |c| return false if c == '(' }\n      return\
    \ true\n    end\n  end\n  false\nend", "  brackets.chars.each do |char|\n    if\
    \ char == \"(\"\n      brackets.gsub!(char, \"(\")\n    elsif char == \")\"\n\
    \      brackets.gsub!(char, \")\")\n    end\n  end\n  brackets.chars.all? { |char|\
    \ char == \"(\" || char == \")\" }\nend", "  brackets.scan(/[()]/) do |char|\n\
    \    next if char == \")\"\n    next if char == \"(\"\n    char == \"(\" ? \"\
    (\" : char == \")\" ? \"(\" : char\n  end\n  true\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
