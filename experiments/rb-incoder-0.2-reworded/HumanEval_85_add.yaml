name: HumanEval_85_add
language: rb
prompt: "# Given a non-empty array of integers lst. add the even elements that are\
  \ at odd indices..\n# Examples:\n# >>> add.call([4, 2, 6, 7])\n# 2\ndef add(lst)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_add\n\
  \    candidate = method(:add)\n    assert_equal(88, candidate.call([4, 88]))\n \
  \   assert_equal(122, candidate.call([4, 5, 6, 7, 2, 122]))\n    assert_equal(0,\
  \ candidate.call([4, 0, 6, 7]))\n    assert_equal(12, candidate.call([4, 4, 6, 8]))\n\
  \  end\nend\n"
completions: ["  even = 0\n  odd = 1\n  for i in lst\n    if i % 2 == 0\n      even\
    \ += i\n    else\n      odd += i\n  end\n  return even+odd\nend", "  even = lst.select\
    \ { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0)\
    \ { |sum, e| sum + e }\nend\n</cell>\n<cell>", "  even = lst.select { |x| x %\
    \ 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0) { |sum, e|\
    \ sum + e }\nend", "  even = lst.select { |x| x % 2 == 0 }\n  odd = lst.select\
    \ { |x| x % 2 != 0 }\n  even.inject(0) { |sum, e| sum + e }\nend", "  even = lst.select\
    \ { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0)\
    \ { |sum, el| sum + el }\nend", "  even = lst.select { |x| x % 2 == 0 }\n  odd\
    \ = lst.select { |x| x % 2 != 0 }\n  even.inject(0) { |sum, e| sum + e }\nend",
  "  even = lst.select { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n\
    \  even.inject(0) { |sum, el| sum + el }\nend", "  even = lst.select { |x| x %\
    \ 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0) { |sum, e|\
    \ sum + e }\nend", "  even = 0\n  odd = 0\n  even = even.call([lst[0]])\n  odd\
    \ = odd.call([lst[1]])\n  even = even.call([lst[2]])\n  odd = odd.call([lst[3]])\n\
    \  even = even.call([lst[4]])\n  odd = odd.call([lst[5]])\n  even = even.call([lst[6]])\n\
    \  odd = odd.call([lst[7]])\n  even = even.call([lst[8]])\n  odd = odd.call([lst[9]])\n\
    \  even = even.call([lst[10]])\n  odd = odd.call([lst[11]])\n  even = even.call([lst[12]])\n\
    \  odd = odd.call([lst[13]])\n  even = even.call([lst[14]])\n  odd = odd.call([lst[15]])\n\
    \  even = even.call([lst[16]])\n  odd = odd.call([lst[17]])\n  even = even.call([lst[18]])\n\
    \  odd = odd.call([lst[19]])\n  even = even.call([lst[20]])\n  odd = odd.call([lst[21]])\n\
    \  even = even.call([lst[22]])\n  odd = odd.call([lst[23]])\n  even = even.call([lst[24]])\n\
    \  odd = odd.call([lst[25]])\n  even = even.call([lst[26]])\n  odd = odd.call([lst[27]])\n\
    \  even = even.call([lst[28]])\n  odd = odd.call([lst[29]])\n  even = even.call([lst[30]])\n\
    \  odd = odd.call([lst[31]])\n  even = even.call([lst[32]])\n  odd = odd.call([lst[33]])\n\
    \  even = even.call([lst[34]])\n  odd = odd.call([lst[35]])\n  even = even.call([lst[36]])\n\
    \  odd = odd.call([lst[37]])\n  even = even.call([lst[38]])\n  odd = odd.call([lst[39]])\n\
    \  even = even.call([lst[40]])\n  odd = odd.call([lst[41]])\n  even = even.call([lst[42]])\n\
    \  odd = odd.", "  even = lst.select { |x| x % 2 == 0 }\n  odd = lst.select {\
    \ |x| x % 2 != 0 }\n  even.inject(0) { |sum, el| sum + el }\nend", "  even = lst.select\
    \ { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0)\
    \ { |sum, e| sum + e }\nend", "  even = lst.select { |x| x % 2 == 0 }\n  odd =\
    \ lst.select { |x| x % 2 != 0 }\n  even.inject(0) { |sum, el| sum + el }\nend\n\
    </cell>\n<cell>", "  even = lst.select { |x| x % 2 == 0 }\n  odd = lst.select\
    \ { |x| x % 2 != 0 }\n  even.inject(0) { |sum, e| sum + e }\nend", "  even = lst.select\
    \ { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0)\
    \ { |sum, e| sum + e }\nend", "  even = lst.select { |x| x % 2 == 0 }\n  odd =\
    \ lst.select { |x| x % 2 != 0 }\n  even.inject(0) { |sum, el| sum + el }\nend",
  "  even = []\n  odd = []\n  for i in lst\n    if i % 2 == 0\n      even << i\n \
    \   else\n      odd << i\n    end\n  end\n  even.inject(:+)\nend", "  even = lst.select\
    \ { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n  even.inject(0)\
    \ { |sum, el| sum + el }\nend\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer.\
    \ I'm a beginner at Ruby, so I appreciate your help. I understand that my code\
    \ was very inefficient, but I wanted to practice using inject and select to improve\
    \ my skills.\n<|/ c |>\n<| c |>\nI added a more efficient version to my answer.\n\
    <|/ c |>\n<| c |>\nThanks again! I appreciate your help.\n<|/ c |>\n<| a tags=ruby\
    \ |>\n<code>", "  even = []\n  odd = []\n  for i in lst\n    if i % 2 == 0\n \
    \     even.push(i)\n    else\n      odd.push(i)\n  end\n  even.inject(:+)\nend",
  "  even = lst.select { |x| x % 2 == 0 }\n  odd = lst.select { |x| x % 2 != 0 }\n\
    \  even.inject(0) { |sum, e| sum + e }\nend\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=ruby |>\n<code>", "  even = lst.select { |x| x % 2 == 0 }\n  odd = lst.select\
    \ { |x| x % 2 != 0 }\n  even.inject(0) { |sum, e| sum + e }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
