name: HumanEval_18_how_many_times
language: rb
prompt: "# Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n# >>> how_many_times.call(\"\", \"a\")\n# 0\n# >>> how_many_times.call(\"\
  aaa\", \"a\")\n# 3\n# >>> how_many_times.call(\"aaaa\", \"aa\")\n# 3\ndef how_many_times(string,\
  \ substring)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_how_many_times\n\
  \    candidate = method(:how_many_times)\n    assert_equal(0, candidate.call(\"\"\
  , \"x\"))\n    assert_equal(4, candidate.call(\"xyxyxyx\", \"x\"))\n    assert_equal(4,\
  \ candidate.call(\"cacacacac\", \"cac\"))\n    assert_equal(1, candidate.call(\"\
  john doe\", \"john\"))\n  end\nend\n"
completions: ["  string.gsub(substring, \"\").length\nend", "  count = 0\n  string.gsub(substring,\
    \ \"\").each_char do |c|\n    count += 1\n  end\n  count\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).length\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).inject(0) do |sum, element|\n\
    \    sum + 1 if element == substring\n  end\nend", "  string.gsub(substring, \"\
    \").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).inject(0)\
    \ do |sum, element|\n    sum + 1 if element == substring\n  end\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.gsub(substring, \"\").each_char.with_index\
    \ do |char, index|\n    count += 1 if string[index..-1].include?(char) \n  end\n\
    \  count\nend", "  string.scan(/#{substring}/).size\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  count =\
    \ 0\n  string.gsub(substring, \"\").each_char do |c|\n    count += 1 if c == substring[0]\n\
    \    count += 1 if c == substring[-1]\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).inject(0) { |sum, s| sum + s.count(substring)\
    \ }\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.split(substring).each do |i|\n  \
    \  count += 1 if i == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.split(substring).each do |word|\n\
    \    count += 1 if word == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\
    \ - string.count(substring)\nend", "  string.gsub(substring, \"\").length\nend",
  "  string.gsub(substring, \"\").length\nend", "  count = 0\n  string.split(substring).each\
    \ do |word|\n    count += 1 if word == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  count =\
    \ 0\n  string.split(substring).each do |word|\n    count += 1 if word == substring\n\
    \  end\n  count\nend", "  string.gsub(substring, \"\").length\nend", "  string.scan(/#{substring}/).size\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).length - string.count(substring)\n\
    end", "  count = 0\n  string.gsub(substring, \"\").each_char do |c|\n    count\
    \ += 1 if c == substring[0]\n    count += 1 if c == substring[-1]\n  end\n  count\n\
    end", "  count = 0\n  string.split(substring).each do |word|\n    count += 1 if\
    \ word == substring\n  end\n  count\nend", "  string.gsub(substring, \"\").length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).inject(0) { |sum, s| sum + s.count(substring)\
    \ }\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.split(substring).each do |word|\n\
    \    count += 1 if word == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.split(substring).each do |word|\n\
    \    count += 1 if word == substring\n  end\n  count\nend", "  string.split(substring).length\n\
    end", "  count = 0\n  string.split(substring).each do |word|\n    count += 1 if\
    \ word == substring\n  end\n  count\nend", "  string.gsub(substring, \"\").length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.split(substring).inject(0) do |sum, element|\n    sum + 1 if element\
    \ != \"\"\n  end\nend", "  string.split(substring).length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  count = 0\n  string.split(substring).each\
    \ do |word|\n    count += 1 if word == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.split(substring).each do |word|\n\
    \    count += 1 if word == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\")\n  string.count(\"a\")\n\
    end", "  string.gsub(substring, \"\").length\nend", "  count = 0\n  string.split(substring).each\
    \ do |word|\n    count += 1 if word == substring\n  end\n  count\nend", "  string.scan(/#{substring}/)\n\
    \  string.scan(/#{substring}+/)\n  string.scan(/#{substring}*+/)\n  string.scan(/#{substring}?+/)\n\
    \  string.scan(/#{substring}+?/)\n  string.scan(/#{substring}*?/)\n  string.scan(/#{substring}??/)\n\
    \  string.scan(/#{substring}+??/)\n  string.scan(/#{substring}*??/)\n  string.scan(/#{substring}???/)\n\
    \  string.scan(/#{substring}+???/)\n  string.scan(/#{substring}*???/)\n  string.scan(/#{substring}????/)\n\
    \  string.scan(/#{substring}+????/)\n  string.scan(/#{substring}*????/)\n  string.scan(/#{substring}?????/)\n\
    \  string.scan(/#{substring}+?????/)\n  string.scan(/#{substring}*?????/)\n  string.scan(/#{substring}??????/)\n\
    \  string.scan(/#{substring}+??????/)\n  string.scan(/#{substring}*??????/)\n\
    \  string.scan(/#{substring}???????/)\n  string.scan(/#{substring}+???????/)\n\
    \  string.scan(/#{substring}*???????/)\n  string.scan(/#{substring}????????/)\n\
    \  string.scan(/#{substring}+????????/)\n  string.scan(/#{substring}*????????/)\n\
    \  string.scan(/#{substring}?????????/)\n  string.scan(/#{substring}+?????????/)\n\
    \  string.scan(/#{substring}*?????????/)\n  string.scan(/#{substring}??????????/)\n\
    \  string.scan(/#{substring}+??????????/)\n  string.scan(/#{substring}*??????????/)\n\
    \  string.scan(/#{substring}???????????/)\n  string.scan(/#{substring}+???????????/)\n\
    \  ", "  string.split(substring).length\nend", "  string.gsub(substring, \"\"\
    ).length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).inject(0) do |sum, element|\n\
    \    sum += 1 if element == substring\n    sum\n  end\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.scan(/#{substring}/).size\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.scan(/#{substring}/).count\n\
    end", "  string.gsub(substring, \"\").length\nend", "  count = 0\n  string.split(substring).each\
    \ do |i|\n    count += 1 if i == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  count = 0\n  string.gsub!(substring, \"\") while string.gsub!(substring,\
    \ \"\") != string\n  count\nend", "  string.gsub(substring, \"\").length\nend",
  "  string.split(substring).inject(0) do |sum, element|\n    sum + 1 if element !=\
    \ \"\"\n  end\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\")\n  string.count(\"a\")\nend", "  string.gsub(substring, \"\").length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  count = 0\n  string.split(substring).each\
    \ do |word|\n    count += 1 if word == substring\n  end\n  count\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\")\n  string.scan(substring).size\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.scan(/#{substring}/).size\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).inject(0) do |sum, element|\n\
    \    sum + 1 if element == substring\n  end\nend", "  string.gsub(substring, \"\
    \").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).length - string.count(substring)\n\
    end", "  count = 0\n  string.split(substring).each do |word|\n    count += 1 if\
    \ word == substring\n  end\n  count\nend", "  string.gsub(substring, \"\").length\n\
    end", "  count = 0\n  string.split(substring).each do |word|\n    count += 1 if\
    \ word == substring\n  end\n  count\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).inject(0) do |sum, element|\n\
    \    sum += 1 if element == substring\n    sum\n  end\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.split(substring).length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  count =\
    \ 0\n  string.split(substring).each do |word|\n    count += 1 if word == substring\n\
    \  end\n  count\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).size\n\
    end", "  count = 0\n  string.split(substring).each do |word|\n    count += 1 if\
    \ word == substring\n  end\n  count\nend", "  string.scan(/#{substring}/).count\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.gsub(substring,\
    \ \"\").length\nend", "  string.gsub(substring, \"\").length\nend", "  string.split(substring).length\n\
    end", "  string.split(substring).length\nend", "  string.split(substring).length\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
