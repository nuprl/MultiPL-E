name: HumanEval_100_make_a_pile
language: rb
prompt: "# Given a positive integer n, you have to make a pile of n levels of stones.\n\
  # The first level has n stones.\n# The number of stones in the next level is:\n\
  # - the next odd number if n is odd.\n# - the next even number if n is even.\n#\
  \ Return the number of stones in each level in an array, where element at index\n\
  # i represents the number of stones in the level (i+1).\n# Examples:\n# >>> make_a_pile.call(3)\n\
  # [3, 5, 7]\ndef make_a_pile(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_make_a_pile\n\
  \    candidate = method(:make_a_pile)\n    assert_equal([3, 5, 7], candidate.call(3))\n\
  \    assert_equal([4, 6, 8, 10], candidate.call(4))\n    assert_equal([5, 7, 9,\
  \ 11, 13], candidate.call(5))\n    assert_equal([6, 8, 10, 12, 14, 16], candidate.call(6))\n\
  \    assert_equal([8, 10, 12, 14, 16, 18, 20, 22], candidate.call(8))\n  end\nend\n"
completions: ["  result = []\n  for i in 1..n\n    result << i + (n+1) % 2 # odd or\
    \ even\n  end\n  result\nend", "  result = []\n  for i in 1..n\n    result <<\
    \ i if i.odd? || i.even?\n  end\n  result\nend", "  result = []\n  for i in 0...n\n\
    \    result << n if n&1 == 1\n    result << n if n&2 == 0\n  end\n  result\nend",
  "  result = []\n  for i in 1..n\n    result << i % 2 ? i : i + 2\n  end\n  result\n\
    end", "  result = []\n  for i in 1..n\n    result.push((n+i).even? ? i : i+1)\n\
    \  end\n  result\nend", "  result = []\n  for i in 0...n\n    result << [n % 2\
    \ == 0 ? n : n + 1]\n    n /= 2\n  end\n  result\nend", "  result = []\n  for\
    \ i in 1..n\n    result << i if i.odd? || i.even?\n  end\n  result\nend", "  result\
    \ = []\n  while n > 0\n    result.push n % 2 == 0 ? n : n + 2\n    n /= 2\n  end\n\
    \  result\nend", "  result = []\n  for i in 1..n\n    result << i if i.odd? ||\
    \ i.even?\n  end\n  result\nend", "  result = []\n  for i in 1..n\n    result\
    \ << i % 2 ? i : i + 2\n  end\n  result\nend", "  result = []\n  for i in 0...n\n\
    \    result << (n % 2 == 0 ? i+1 : i)\n    n /= 2\n  result\nend", "  result =\
    \ []\n  for i in 1..n\n    result << i if i.odd? || i.even?\n  end\n  result\n\
    end", "  result = []\n  for i in 1..n\n    result << i if i.odd? || i.even?\n\
    \  end\n  result\nend", "  result = []\n  for i in 1..n\n    result.push((n+i).even?\
    \ : (n+i).odd? ? i+1 : i+2)\n  end\n  result\nend\n</code>\n<|/ a tags=ruby,arrays\
    \ |>\n<| a dscore=0 |>\n<code>", "  result = []\n  for i in 1..n\n    result <<\
    \ i if i.odd? || i.even?\n  end\n  result\nend", "  result = []\n  for i in 1..n\n\
    \    result << i % 2 ? i : i + 2\n  end\n  result\nend", "  arr = []\n  arr.push\
    \ n\n  while n > 0\n    arr.push n % 2 == 0 ? n : n * 3 + 1\n    n /= 2\n  end\n\
    \  arr\nend", "  result = []\n  for i in 0...n\n    result << i + (i&1).odd? ?\
    \ i.next : i.even? ? i.next.next : 0\n  end\n  result\nend", "  result = []\n\
    \  for i in 1..n\n    result.push(i * 2)\n    result.push(i * 3)\n  end\n  result\n\
    end", "  result = []\n  for i in 0...n\n    if n&1 == 1\n      result << n+1\n\
    \    else\n      result << n\n    end\n  end\n  result\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
