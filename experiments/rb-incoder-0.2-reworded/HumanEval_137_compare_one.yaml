name: HumanEval_137_compare_one
language: rb
prompt: "# Create a function that takes integers, floats, or strings representing\n\
  # real numbers, and returns the larger variable in its given variable type.\n# Return\
  \ nil if the values are equal.\n# Note: If a real number is represented as a string,\
  \ the floating point might be . or ,\n# >>> compare_one.call(1, 2.5)\n# 2.5\n# >>>\
  \ compare_one.call(1, \"2,3\")\n# \"2,3\"\n# >>> compare_one.call(\"5,1\", \"6\"\
  )\n# \"6\"\n# >>> compare_one.call(\"1\", 1)\n# nil\ndef compare_one(a, b)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_compare_one\n\
  \    candidate = method(:compare_one)\n    assert_equal(2, candidate.call(1, 2))\n\
  \    assert_equal(2.5, candidate.call(1, 2.5))\n    assert_equal(3, candidate.call(2,\
  \ 3))\n    assert_equal(6, candidate.call(5, 6))\n    assert_equal(\"2,3\", candidate.call(1,\
  \ \"2,3\"))\n    assert_equal(\"6\", candidate.call(\"5,1\", \"6\"))\n    assert_equal(\"\
  2\", candidate.call(\"1\", \"2\"))\n    assert_equal(nil, candidate.call(\"1\",\
  \ 1))\n  end\nend\n"
completions: ["  case a\n  when Numeric\n    case b\n    when Numeric\n      a > b\
    \ ? a : b\n    else\n      a.to_i > b.to_i ? a : b\n    end\n  when String\n \
    \   case b\n    when Numeric\n      a.to_i > b.to_i ? a : b\n    else\n      a.to_i\
    \ > b.to_i ? a.to_i : b.to_i\n    end\n  when Float\n    case b\n    when Numeric\n\
    \      a > b ? a : b\n    else\n      a.to_f > b.to_f ? a : b\n    end\n  else\n\
    \    nil\n  end\nend", "  if a.kind_of?(Numeric) and b.kind_of?(Numeric)\n   \
    \ if a.to_f == b.to_f\n      return a.to_f\n    elsif a.to_s.include?(\".\")\n\
    \      if b.to_s.include?(\".\")\n        return a.to_f\n      else\n        return\
    \ b.to_f\n      end\n    else\n      if b.to_s.include?(\".\")\n        return\
    \ b.to_f\n      else\n        return a.to_f\n      end\n    end\n  elsif a.kind_of?(String)\
    \ and b.kind_of?(String)\n    if a.to_f == b.to_f\n      return a.to_s\n    elsif\
    \ a.to_s.include?(\".\")\n      if b.to_s.include?(\".\")\n        return a.to_s\n\
    \      else\n        return b.to_s\n      end\n    else\n      if b.to_s.include?(\"\
    .\")\n        return b.to_s\n      else\n        return a.to_s\n      end\n  \
    \  end\n  elsif a.kind_of?(Float) and b.kind_of?(Float)\n    if a.to_f == b.to_f\n\
    \      return a.to_s\n    elsif a.to_s.include?(\".\")\n      if b.to_s.include?(\"\
    .\")\n        return a.to_s\n      else\n        return b.to_s\n      end\n  \
    \  else\n      if b.to_s.include?(\".\")\n        return b.to_s\n      else\n\
    \        return a.to_s\n      end\n    end\n  else\n    return nil\n  end\nend",
  "  if a.kind_of?(Numeric) and b.kind_of?(Numeric)\n    if a.to_f == b.to_f\n   \
    \   a\n    else\n      b\n    end\n  elsif a.kind_of?(String) and b.kind_of?(String)\n\
    \    if a.to_f == b.to_f\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(Float)\
    \ and b.kind_of?(Float)\n    if a.to_f == b.to_f\n      a\n    else\n      b\n\
    \    end\n  else\n    nil\n  end\nend", "  case a\n  when Numeric\n    case b\n\
    \    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f ? a :\
    \ b\n    end\n  when String\n    case b\n    when Numeric\n      a.to_f > b.to_f\
    \ ? a : b\n    else\n      a.to_f > b.to_f ? a.to_s : b.to_s\n    end\n  else\n\
    \    case b\n    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f\
    \ ? a.to_i : b.to_i\n    end\n  end\nend", "  if a.kind_of?(Numeric)\n    if b.kind_of?(Numeric)\n\
    \      return a.to_f > b.to_f\n    end\n  elsif a.kind_of?(String)\n    if b.kind_of?(String)\n\
    \      return a.to_f > b.to_f\n    end\n  end\n  return nil\nend", "  case a\n\
    \  when Numeric\n    case b\n    when Numeric\n      a > b ? a : b\n    else\n\
    \      a.to_f > b.to_f ? a : b\n    end\n  when String\n    case b\n    when Numeric\n\
    \      a.to_f > b.to_f ? a : b\n    else\n      a.to_f > b.to_f ? a.to_s : b.to_s\n\
    \    end\n  else\n    case b\n    when Numeric\n      a.to_f > b.to_f ? a : b\n\
    \    else\n      a.to_f > b.to_f ? a.to_s : b.to_s\n    end\n  end\nend", "  if\
    \ a.is_a?(Numeric) and b.is_a?(Numeric)\n    if a.to_f == b.to_f\n      a\n  \
    \  else\n      b\n    end\n  elsif a.is_a?(String) and b.is_a?(String)\n    if\
    \ a.to_f == b.to_f\n      a\n    else\n      b\n    end\n  elsif a.is_a?(Float)\
    \ and b.is_a?(Float)\n    if a.to_f == b.to_f\n      a\n    else\n      b\n  \
    \  end\n  else\n    nil\n  end\nend", "  case a\n  when Numeric\n    case b\n\
    \    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f ? a :\
    \ b\n    end\n  when String\n    case b\n    when Numeric\n      a.to_f > b.to_f\
    \ ? a : b\n    else\n      a.to_f > b.to_f ? a.to_s : b.to_s\n    end\n  else\n\
    \    case b\n    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f\
    \ ? a.to_s : b.to_s\n    end\n  end\nend", "  if a.kind_of?(Numeric) && b.kind_of?(Numeric)\n\
    \    if a.to_f == b.to_f\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(String)\
    \ && b.kind_of?(String)\n    if a.to_f == b.to_f\n      a\n    else\n      b\n\
    \    end\n  elsif a.kind_of?(Numeric) && b.kind_of?(String)\n    if a.to_f ==\
    \ b.to_f\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(String) && b.kind_of?(Numeric)\n\
    \    if a.to_f == b.to_f\n      a\n    else\n      b\n    end\n  else\n    nil\n\
    \  end\nend", "  if a.kind_of? Numeric\n    if b.kind_of? Numeric\n      return\
    \ a.to_f <=> b.to_f\n    end\n  elsif a.kind_of? String\n    if b.kind_of? String\n\
    \      return a.to_f <=> b.to_f\n    end\n  end\n  return nil\nend", "  if a.kind_of?\
    \ Numeric\n    if b.kind_of? Numeric\n      a.to_f <=> b.to_f\n    else\n    \
    \  a.to_s <=> b\n    end\n  else\n    if b.kind_of? Numeric\n      a <=> b.to_f\n\
    \    else\n      a <=> b\n    end\n  end\nend", "  if a.kind_of?(Float) || b.kind_of?(Float)\n\
    \    if a.kind_of?(Float)\n      a = a.to_f\n      b = b.to_f\n    else\n    \
    \  a = a.to_i\n      b = b.to_i\n    end\n  else\n    if a.kind_of?(Float)\n \
    \     a = a.to_s\n      b = b.to_s\n    else\n      a = a.to_i\n      b = b.to_i\n\
    \    end\n  end\n  if a > b\n    a\n  else\n    b\n  end\nend", "  case a\n  when\
    \ Numeric\n    case b\n    when Numeric\n      a > b ? a : b\n    else\n     \
    \ a.to_i > b.to_i ? a : b\n    end\n  when String\n    case b\n    when Numeric\n\
    \      a.to_i > b.to_i ? a : b\n    else\n      a.to_i > b.to_i ? a.to_s : b.to_s\n\
    \    end\n  when Float\n    case b\n    when Numeric\n      a > b ? a : b\n  \
    \  else\n      a.to_f > b.to_f ? a : b\n    end\n  else\n    nil\n  end\nend",
  "  if a.is_a?(Float)\n    if b.is_a?(Float)\n      compare_floats(a, b)\n    elsif\
    \ b.is_a?(String)\n      compare_floats(a.to_f, b.to_f)\n    else\n      compare_floats(a.to_f,\
    \ b.to_i)\n    end\n  elsif a.is_a?(String)\n    if b.is_a?(Float)\n      compare_floats(a.to_f,\
    \ b.to_f)\n    elsif b.is_a?(String)\n      compare_floats(a.to_i, b.to_i)\n \
    \   else\n      compare_floats(a.to_i, b.to_s)\n    end\n  elsif a.is_a?(Integer)\n\
    \    if b.is_a?(Integer)\n      compare_ints(a, b)\n    elsif b.is_a?(String)\n\
    \      compare_ints(a.to_i, b.to_i)\n    else\n      compare_ints(a.to_i, b.to_s)\n\
    \    end\n  else\n    if b.is_a?(Integer)\n      compare_ints(a, b)\n    elsif\
    \ b.is_a?(String)\n      compare_ints(a.to_i, b.to_i)\n    else\n      compare_ints(a.to_i,\
    \ b.to_s)\n    end\n  end\nend", "  if a.kind_of?(Numeric) && b.kind_of?(Numeric)\n\
    \    if a.to_f == b.to_f\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(String)\
    \ && b.kind_of?(String)\n    if a.to_f == b.to_f\n      a\n    else\n      b\n\
    \    end\n  elsif a.kind_of?(Numeric) && b.kind_of?(String)\n    if a.to_f ==\
    \ b.to_f\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(String) && b.kind_of?(Numeric)\n\
    \    if a.to_f == b.to_f\n      a\n    else\n      b\n    end\n  else\n    nil\n\
    \  end\nend", "  if a.kind_of?(Numeric) and b.kind_of?(Numeric)\n    if a.to_f\
    \ == b.to_f\n      a\n    else\n      b\n    end\n  elsif a.kind_of?(String) and\
    \ b.kind_of?(String)\n    if a.to_f == b.to_f\n      a\n    else\n      b\n  \
    \  end\n  elsif a.kind_of?(Float) and b.kind_of?(Float)\n    if a.to_f == b.to_f\n\
    \      a\n    else\n      b\n    end\n  else\n    nil\n  end\nend", "  case a\n\
    \  when Numeric\n    case b\n    when Numeric\n      a > b ? a : b\n    when String\n\
    \      a.to_i > b.to_i ? a.to_i : b.to_i\n    when Fixnum\n      a > b ? a : b\n\
    \    else\n      nil\n    end\n  when String\n    case b\n    when Numeric\n \
    \     a.to_i > b.to_i ? a.to_i : b.to_i\n    when String\n      a.to_i > b.to_i\
    \ ? a.to_i : b.to_i\n    when Fixnum\n      a.to_i > b.to_i ? a.to_i : b.to_i\n\
    \    else\n      nil\n    end\n  when Fixnum\n    case b\n    when Numeric\n \
    \     a > b ? a : b\n    when String\n      a.to_i > b.to_i ? a.to_i : b.to_i\n\
    \    when Fixnum\n      a > b ? a : b\n    else\n      nil\n    end\n  else\n\
    \    nil\n  end\nend", "  case a\n  when Numeric\n    case b\n    when Numeric\n\
    \      a > b ? a : b\n    else\n      a.to_f > b.to_f ? a : b\n    end\n  when\
    \ String\n    case b\n    when Numeric\n      a.to_f > b.to_f ? a : b\n    else\n\
    \      a.to_f > b.to_f ? a.to_s : b.to_s\n    end\n  when Float\n    case b\n\
    \    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f ? a.to_f\
    \ : b.to_f\n    end\n  else\n    nil\n  end\nend", "  if a.is_a?(Numeric) && b.is_a?(Numeric)\n\
    \    if a.nan? && b.nan?\n      nil\n    elsif a.nan?\n      b\n    elsif b.nan?\n\
    \      a\n    elsif a.infinite? || b.infinite?\n      nil\n    elsif a.infinite?\
    \ && b.infinite?\n      a\n    elsif a.infinite? && !b.infinite?\n      b\n  \
    \  elsif !a.infinite? && b.infinite?\n      a\n    elsif a.infinite? && b.infinite?\
    \ && !a.nan? && !b.nan?\n      a.to_f > b.to_f\n    elsif !a.infinite? && !b.infinite?\
    \ && !a.nan? && !b.nan?\n      a.to_f < b.to_f\n    elsif a.infinite? && b.infinite?\
    \ && !a.nan? && b.nan?\n      a\n    elsif !a.infinite? && !b.infinite? && !a.nan?\
    \ && b.nan?\n      b\n    elsif a.infinite? && !b.infinite? && !a.nan? && !b.nan?\n\
    \      a\n    elsif !a.infinite? && !b.infinite? && !a.nan? && !b.nan?\n     \
    \ b\n    elsif a.infinite? && !b.infinite? && !a.nan? && b.nan?\n      a\n   \
    \ elsif !a.infinite? && !b.infinite? && !a.nan? && b.nan?\n      b\n    elsif\
    \ a.infinite? && !b.infinite? && !a.nan? && !b.nan?\n      a\n    elsif !a.infinite?\
    \ && !b.infinite? && !a.nan? && !b.nan?\n      b\n    elsif a.infinite? && !b.infinite?\
    \ && !a.nan? && b.nan?\n      a\n    elsif !a.infinite? && !b.infinite? && !a.nan?\
    \ && b.nan?\n      b\n    elsif a.infinite? && !b.infinite? && !a.nan? && !b.nan?\n\
    \      a\n    elsif !a.infinite? && !b.infinite? && !a.nan? && !b.nan?\n     \
    \ b\n    elsif a.infinite? && !b.infinite? && !a.nan? && b.nan?\n      a\n   \
    \ elsif !a.infinite? && !b.infinite? && !a.nan? && b.nan?\n      b\n    elsif\
    \ a.infinite? && !b.infinite? && !a.", "  case a\n  when Numeric\n    case b\n\
    \    when Numeric\n      a > b ? a : b\n    else\n      a.to_f > b.to_f ? a :\
    \ b\n    end\n  when String\n    case b\n    when Numeric\n      a.to_f > b.to_f\
    \ ? a : b\n    else\n      a.to_f > b.to_f ? a.to_s : b.to_s\n    end\n  when\
    \ Float\n    case b\n    when Numeric\n      a > b ? a : b\n    else\n      a.to_f\
    \ > b.to_f ? a.to_f : b.to_f\n    end\n  else\n    nil\n  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
