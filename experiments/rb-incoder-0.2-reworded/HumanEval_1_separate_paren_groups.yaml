name: HumanEval_1_separate_paren_groups
language: rb
prompt: "# Input to this function is a string containing multiple groups of nested\
  \ parentheses. Your goal is to\n# separate those group into separate strings and\
  \ return the array of those.\n# Separate groups are balanced (each open brace is\
  \ properly closed) and not nested within each other\n# Ignore any spaces in the\
  \ input string.\n# >>> separate_paren_groups.call(\"( ) (( )) (( )( ))\")\n# [\"\
  ()\", \"(())\", \"(()())\"]\ndef separate_paren_groups(paren_string)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_separate_paren_groups\n\
  \    candidate = method(:separate_paren_groups)\n    assert_equal([\"(()())\", \"\
  ((()))\", \"()\", \"((())()())\"], candidate.call(\"(()()) ((())) () ((())()())\"\
  ))\n    assert_equal([\"()\", \"(())\", \"((()))\", \"(((())))\"], candidate.call(\"\
  () (()) ((())) (((())))\"))\n    assert_equal([\"(()(())((())))\"], candidate.call(\"\
  (()(())((())))\"))\n    assert_equal([\"()\", \"(())\", \"(()())\"], candidate.call(\"\
  ( ) (( )) (( )( ))\"))\n  end\nend\n"
completions: ["  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|(\\([^()]+\\))/).flatten\n\
    end", "  paren_string.split(/\\(|\\)/).map { |x| x.gsub(/\\s+/, \"\") }\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/[()]/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\\
    ))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s+\\)/, \"\"\
    ).gsub(/\\s+\\)/, \"\").gsub(/\\s+\\)/, \"\")\n  end\nend", "  paren_string.scan(/\\\
    s*\\((?!\\))\\s*\\)\\s*\\((?!\\))\\s*\\)\\s*\\((?!\\))/)\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", " \
    \ paren_string.split(/\\(|\\)/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s*\\\
    (([^()]*)\\)\\s*/, \"\\1\")\n  end\nend", "  paren_string.split(/\\(|\\)|\\{|\\\
    }/).reject(&:empty?)\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.split(//).map do |paren_string|\n    paren_string.split(//).map\
    \ do |paren_string|\n      paren_string.split(//).map do |paren_string|\n    \
    \    paren_string.split(//).map do |paren_string|\n          paren_string.split(//).map\
    \ do |paren_string|\n            paren_string.split(//).map do |paren_string|\n\
    \              paren_string.split(//).map do |paren_string|\n                paren_string.split(//).map\
    \ do |paren_string|\n                  paren_string.split(//).map do |paren_string|\n\
    \                    paren_string.split(//).map do |paren_string|\n          \
    \            paren_string.split(//).map do |paren_string|\n                  \
    \      paren_string.split(//).map do |paren_string|\n                        \
    \  paren_string.split(//).map do |paren_string|\n                            paren_string.split(//).map\
    \ do |paren_string|\n                              paren_string.split(//).map\
    \ do |paren_string|\n                                paren_string.split(//).map\
    \ do |paren_string|\n                                  paren_string.split(//).map\
    \ do |paren_string|\n                                    paren_string.split(//).map\
    \ do |paren_string|\n                                      paren_string.split(//).map\
    \ do |paren_string|\n                                        paren_string.split(//).map\
    \ do |paren_string|\n                                          paren_string.split(//).map\
    \ do |paren_string|\n                                            paren_string.split(//).map\
    \ do |paren_string|\n                                              paren_string.split(//).map\
    \ do |paren_string|\n                                                paren_string.split(//).map\
    \ do |paren_string|\n                                                  paren_string.split(//).map\
    \ do |paren_string|\n                                                    paren_string.split(//).map\
    \ do |paren_string|\n                                                      paren_string.split(//).map\
    \ do |paren_string|\n                                                        paren_string.split(//).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.split(//).map do |paren_string|\n                            \
    \                                paren_string.split(//).map do |paren_string|\n\
    \                                                              paren_string.split(//).map\
    \ do |paren_string|\n                                                        \
    \        paren_string.split(//).map do |paren_string|\n                      \
    \                                            paren_string.split(//).map do |paren_string|\n\
    \                                                                    paren_string.split(//).map\
    \ do |paren_string|\n                                                        \
    \              paren_string.split(//).map do |paren_string|\n                \
    \                                                        paren_string.split(//).map\
    \ do |paren_string|\n                                                        \
    \                  paren_string.split(//).map do |paren_string|\n            \
    \                                                                paren_string.split(//).map\
    \ do |paren_string|\n                                                        \
    \                      paren_string.split(//).map do |paren_string|", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/).map { |x| x.first }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*|([^()]+)/).map do |group|\n    group.empty?\
    \ ? nil : group\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|\\\
    s*\\(\\s*([^()]*?)\\s*\\)\\s*/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\\
    ([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\(/,\
    \ \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.scan(/[^()]+/).map {\
    \ |s| s.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\\
    ([^()]*\\))/).flatten\nend", "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\(\\\
    s*\\)\\s*\\)/)\nend", "  paren_string.scan(/[\\(\\)]/).map { |x| x.gsub(/[\\(\\\
    )]/, '') }\nend", "  paren_string.scan(/[^()]+/).map do |paren_string|\n    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n      paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \        paren_string.scan(/[()]/).map do |paren_string|\n          paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n            paren_string.scan(/[()]/).map do |paren_string|\n\
    \              paren_string.scan(/[^()]+/).map do |paren_string|\n           \
    \     paren_string.scan(/[()]/).map do |paren_string|\n                  paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                      paren_string.scan(/[^()]+/).map do |paren_string|\n   \
    \                     paren_string.scan(/[()]/).map do |paren_string|\n      \
    \                    paren_string.scan(/[^()]+/).map do |paren_string|\n     \
    \                       paren_string.scan(/[()]/).map do |paren_string|\n    \
    \                          paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \                                paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                  paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \                                    paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                      paren_string.scan(/[^()]+/).map do |paren_string|\n\
    \                                        paren_string.scan(/[()]/).map do |paren_string|\n\
    \                                          paren_string.scan(/[^()]+/).map do\
    \ |paren_string|\n                                            paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                              paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                                paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                  paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                                    paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                      paren_string.scan(/[^()]+/).map\
    \ do |paren_string|\n                                                        paren_string.scan(/[()]/).map\
    \ do |paren_string|\n                                                        \
    \  paren_string.scan(/[^()]+/).map do |paren_string|\n                       \
    \                                     paren_string.", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)',
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\\
    ([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\(/,\
    \ \"\").gsub(/\\)/, \"\")\n  end\nend", "  paren_string.split(/\\(|\\)|\\{|\\\
    }/).reject(&:empty?)\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)',
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\([^()]*\\))/).flatten\nend", " \
    \ paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, \"\") }\nend",
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\"\
    ) }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map do\
    \ |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s*\\(([^()]*|\\([^()]*\\))*\\\
    )\\s*/, \"\")\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).map { |m| m[0]\
    \ || m[1] }\nend", "  paren_string.scan(/[^()]+/)\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/)\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", " \
    \ paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\nend",
  "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map do |group|\n  \
    \  group.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend",
  "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |group| group.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.scan(/[^\\(\\)]+/).map { |x| x.gsub(/\\s+/, \"\
    \") }\nend", "  paren_string.split(/\\(|\\)/).map { |s| s.gsub(/\\s+/, \"\") }\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map do |group|\n    group.split(\"\
    (\", 2).last.split(\")\", 2).first\n  end\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.split(/\\(|\\)/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\\
    s*/).map { |match| match.captures.first }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/)\nend", " \
    \ paren_string.scan(/[^()]+/)\nend", "  paren_string.split(/\\(|\\)/).reject(&:empty?).map\
    \ { |s| s.gsub(/\\(|\\)/, \"\") }\nend", "  paren_string.scan(/\\s*\\((?!\\))\\\
    )\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map { |match| match[1].split(\"\
    \ \") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |group|\
    \ group.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\\
    s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\((?!\\))\\s*/)\nend",
  "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |match| match[1].split(\" \"\
    ) }\nend", "  paren_string.split(/\\(|\\)/).reject(&:empty?).map { |x| x.gsub(/\\\
    (|\\)/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\
    \").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)',
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|\\s*([^()]*\\([^()]*\\))\\s*/)\nend", "  paren_string.scan(/[\\(\\)]+/).map\
    \ { |s| s.gsub(/[\\(\\)]+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*/).map { |x| x.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend",
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*|([^\\(]+)/).map { |x| x.first }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/)\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).map do |group|\n    group.empty?\
    \ ? nil : group\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\\
    s*/)\nend", "  paren_string.scan(/[\\(\\)]+/)\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|',
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).flatten.compact\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\
    \").gsub(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/, \"\")\n  end\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map { |s| s.gsub(/\\s+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*|(?R))*\\)\\s*/).flatten\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|(\\(([^()]+)\\))/).flatten.compact\n\
    end", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^(]*\\([^()]*\\))/).map do\
    \ |group|\n    group.flatten.compact\n  end\nend", "  paren_string.scan(/\\s*\\\
    (([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*/).flatten\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\\
    ([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s+/,\
    \ \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map { |match| match[1].split(\" \") }\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map\
    \ do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s+\\)/, \"\").gsub(/\\s+\\\
    )/, \"\")\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\\
    )\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\\
    )/, \")\")\n  end\nend", "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\\
    )\\s*\\(\\s*\\)\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map\
    \ { |x| x.gsub(\"(\", \"\").gsub(\")\", \"\") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\\
    )\\s*|([^\\(]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/)\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]+)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/[^\\(\\)]+/)\nend",
  "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.split(//).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[\\(\\)]+/)\nend",
  "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map do |group|\n    group.gsub(/\\\
    s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.scan(/[^\\\
    (\\)]+/)\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).map do |match|\n    match.empty?\
    \ ? match : match.gsub(/\\s+/, \"\")\n  end\nend", "  paren_string.scan(/\\s*\\\
    ((?!\\))\\s*\\)\\s*|\\s*\\((?!\\))\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\\
    )\\s*/).map do |match|\n    match.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\\
    )/, \")\")\n  end\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/,\
    \ \"\") }\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\))*\\)\\s*/).map\
    \ do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\"\
    )\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).map do\
    \ |group|\n    group.empty? ? nil : group\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", "  paren_string.scan(/\\s*\\\
    (([^\\)]+)\\)\\s*|([^\\(]+)/).map do |group|\n    group.empty? ? nil : group\n\
    \  end\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", " \
    \ paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", '  paren_string.scan(/\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*|\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(\s*\)\s*\(',
  "  paren_string.scan(/[()]/)\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\([^()]*\\\
    ))*\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*/).map\
    \ { |group| group.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*|(?R))*\\\
    )\\s*/)\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).map { |m| m[0] ||\
    \ m[1] }\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\(\\)]+/,\
    \ '') }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\n\
    end", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\nend", " \
    \ paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\\
    s*\\(\\s*\\)\\s*\\)/)\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\\
    (\\)]+/, '') }\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map do\
    \ |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\(/, \"(\").gsub(/\\)/, \")\")\n\
    \  end\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\") }\n\
    end", "  paren_string.scan(/\\s*\\(\\s*\\)\\s*|\\s*\\(\\s*\\)\\s*\\(\\s*\\)\\\
    s*/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, \"\
    \") }\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/\\\
    s*\\(([^\\)]+)\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^\\(\\)]+)\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\\
    (/, \"(\").gsub(/\\)/, \")\")\n  end\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*/).map { |m| m[1].split(\" \") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\\
    ([^()]*\\))*\\)\\s*/)\nend", "  paren_string.scan(/\\s*\\((?!\\))\\s*\\)\\s*|\\\
    s*\\((?!\\))\\s*/)\nend", "  paren_string.scan(/[\\(\\)]+/).map { |x| x.gsub(/[\\\
    (\\)]+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\n\
    end", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|(?R))*\\)\\s*|(?<=\\))\\s*/).flatten\nend", "  paren_string.scan(/[\\\
    (\\)]+/).map { |x| x.gsub(/[\\(\\)]+/, '') }\nend", "  paren_string.scan(/\\s*\\\
    (([^\\(\\)]+)\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s+\\\
    )/, \"\").gsub(/\\s+\\)/, \"\")\n  end\nend", "  paren_string.split(//).map {\
    \ |x| x.gsub(/\\(|\\)|\\s/, '') }\nend", "  paren_string.split(//).map { |x| x.gsub(/\\\
    s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|(\\(([^()]*)\\\
    ))/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]+)\\)\\s*|([^(]+)/).flatten\n\
    end", "  paren_string.split(/\\(|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.split(/\\\
    (|\\)/).reject(&:empty?).map { |x| x.gsub!(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\\
    )\\s*|([^()]+)/).map do |group|\n    group.empty? ? nil : group\n  end\nend",
  "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/)\nend", "  paren_string.scan(/[^\\\
    (\\)]+/)\nend", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.split(/\\\
    (|\\)|\\{|\\}/).reject(&:empty?)\nend", "  paren_string.scan(/\\s*\\(([^()]*|\\\
    ([^()]*\\))*\\)\\s*/).map do |group|\n    group.gsub(/\\s+/, \"\").gsub(/\\s*\\\
    (([^()]*|\\([^()]*\\))*\\)\\s*/, \"\")\n  end\nend", "  paren_string.scan(/[\\\
    (\\)]+/)\nend", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |match|\
    \ match.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\\
    s*|(\\(([^()]*)\\))/)\nend", "  paren_string.scan(/[^()]+/)\nend", "  paren_string.scan(/\\\
    s*\\(([^()]*|(?R))*\\)\\s*/).map { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map\
    \ { |x| x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/[^()]+/).map { |x|\
    \ x.gsub(/\\s+/, \"\") }\nend", "  paren_string.scan(/\\s*\\(([^()]*)\\)\\s*|([^()]+)/).flatten.compact\n\
    end", "  paren_string.scan(/\\s*\\(([^\\(\\)]+)\\)\\s*/).map { |x| x.gsub(\"(\"\
    , \"\").gsub(\")\", \"\") }\nend", "  paren_string.split(/\\(|\\)/).reject(&:empty?)\n\
    end", "  paren_string.split(/\\(|\\)|\\{|\\}/)\nend", "  paren_string.scan(/[\\\
    (\\)]/)\nend", "  paren_string.scan(/[^()]+/).map { |x| x.gsub(/\\s+/, '') }\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
