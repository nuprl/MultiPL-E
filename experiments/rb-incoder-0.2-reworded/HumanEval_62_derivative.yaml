name: HumanEval_62_derivative
language: rb
prompt: "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>>\
  \ derivative.call([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative.call([1,\
  \ 2, 3])\n# [2, 6]\ndef derivative(xs)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_derivative\n\
  \    candidate = method(:derivative)\n    assert_equal([1, 4, 12, 20], candidate.call([3,\
  \ 1, 2, 4, 5]))\n    assert_equal([2, 6], candidate.call([1, 2, 3]))\n    assert_equal([2,\
  \ 2], candidate.call([3, 2, 1]))\n    assert_equal([2, 2, 0, 16], candidate.call([3,\
  \ 2, 1, 0, 4]))\n    assert_equal([], candidate.call([1]))\n  end\nend\n"
completions: ["  xs.inject(:+) do |sum, term|\n    sum + term * derivative(term.call(xs))\n\
    \  end\nend", "  xs.inject(:+) do |result, x|\n    result * x\n  end\nend", " \
    \ xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(:+)\
    \ do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0) do |acc, x|\n \
    \   acc.inject(1) do |acc, y|\n      acc * x * y\n    end\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject(:+) do |sum, term|\n   \
    \ sum * term\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend",
  "  xs.inject([0, 1], :+).reduce(:*)\nend", "  xs.inject(0) do |acc, x|\n    acc\
    \ * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n  end\nend", " \
    \ xs.inject(:+) do |sum, term|\n    sum * term\n  end\nend", "  xs.inject(0) do\
    \ |acc, x|\n    acc * x\n  end\nend", "  xs.inject(0) do |acc, x|\n    acc * x\n\
    \  end\nend", "  xs.inject(:+) do |sum, el|\n    sum * el\n  end\nend", "  xs.inject(:+).reduce(:*)\n\
    end", "  xs.inject(:+).reduce(:*)\nend", "  xs.inject([1,1], :+).reduce(:*)\n\
    end", "  xs.inject(:+) do |sum, term|\n    sum + term * derivative(term.call(xs))\n\
    \  end\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
