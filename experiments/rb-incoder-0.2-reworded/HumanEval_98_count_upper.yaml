name: HumanEval_98_count_upper
language: rb
prompt: "# Given a string s, count the number of uppercase vowels in even indices.\n\
  # For example:\n# >>> count_upper.call(\"aBCdEf\")\n# 1\n# >>> count_upper.call(\"\
  abcdefg\")\n# 0\n# >>> count_upper.call(\"dBBE\")\n# 0\ndef count_upper(s)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_count_upper\n\
  \    candidate = method(:count_upper)\n    assert_equal(1, candidate.call(\"aBCdEf\"\
  ))\n    assert_equal(0, candidate.call(\"abcdefg\"))\n    assert_equal(0, candidate.call(\"\
  dBBE\"))\n    assert_equal(0, candidate.call(\"B\"))\n    assert_equal(1, candidate.call(\"\
  U\"))\n    assert_equal(0, candidate.call(\"\"))\n    assert_equal(2, candidate.call(\"\
  EEEE\"))\n  end\nend\n"
completions: ["  s.gsub!(/[AEIOU]/, '')\n  s.each_char.with_index do |c, i|\n    if\
    \ i % 2 == 0 && c.upcase != c\n      0\n    elsif i % 2 == 1 && c.upcase == c\n\
    \      1\n    else\n      0\n    end\n  end\nend", "  s.scan(/[aeiou]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.gsub(/[AEIOU]/, '').length\n\
    end", "  s.gsub(/[AEIOU]/).with_index { |c,i| i % 2 == 0 ? c.upcase : 0 }\nend",
  "  s.scan(/[aeiou]/).inject(0) { |sum, char| sum + 1 if char.upcase }\nend", " \
    \ s.gsub(/[AEIOU]/) do |match|\n    match.to_i.even? ? 1 : 0\n  end\nend", " \
    \ s.chars.each_with_index.inject(0) do |sum, (char, i)|\n    sum + (char.upcase\
    \ ? i : 0)\n  end\nend", "  s.gsub(/[AEIOU]/) { |c| return 0 if c =~ /[AEIOU]/;\
    \ 1 }\nend", "  s.gsub(/[AEIOU]/, '').length\nend", "  s.scan(/[AEIOU]/).inject(0)\
    \ { |sum, char| sum + 1 if char.upcase }\nend", "  s.gsub(/[aeiou]/) { |c| c.upcase\
    \ }.size\nend", "  s.gsub!(/[aeiou]/) do |c|\n    (c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') ? 1 : 0\n  end\n  s.count('e') + s.count('i') + s.count('o')\
    \ + s.count('u')\nend", "  s.gsub(/[AEIOU]/) do |match|\n    match.to_s.size %\
    \ 2 == 0 ? match.to_s.size : 0\n  end\nend", "  s.gsub(/[AEIOU]/) { |c| c == 'A'\
    \ ? 1 : 0 }\nend", "  s.gsub(/[aeiou]/) { |c| c.upcase }.size\nend", "  s.chars.each_with_index.inject(0)\
    \ do |sum, (char, i)|\n    sum + 1 if char.upcase && i.even?\n  end\nend", " \
    \ s.gsub(/[AEIOU]/) do |match|\n    match.to_s.size % 2 == 0 ? match.to_s.size\
    \ : match.to_s.size/2\n  end\nend", "  s.chars.each_with_index.inject(0) do |sum,\
    \ (char, i)|\n    sum + 1 if i % 2 == 0 && char.upcase == char\n  end\nend", " \
    \ s.gsub(/[AEIOU]/) { |c| c == 'A' ? 1 : 0 }\nend", "  s.gsub(/[AEIOU]/) { |c|\
    \ c.upcase }.length\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
