name: HumanEval_36_fizz_buzz
language: rb
prompt: "# Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n# >>> fizz_buzz.call(50)\n# 0\n# >>> fizz_buzz.call(78)\n\
  # 2\n# >>> fizz_buzz.call(79)\n# 3\ndef fizz_buzz(n)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_fizz_buzz\n\
  \    candidate = method(:fizz_buzz)\n    assert_equal(0, candidate.call(50))\n \
  \   assert_equal(2, candidate.call(78))\n    assert_equal(3, candidate.call(79))\n\
  \    assert_equal(3, candidate.call(100))\n    assert_equal(6, candidate.call(200))\n\
  \    assert_equal(192, candidate.call(4000))\n    assert_equal(639, candidate.call(10000))\n\
  \    assert_equal(8026, candidate.call(100000))\n  end\nend\n"
completions: ["  n.to_s.split(\"\").each do |i|\n    if i % 11 == 0 or i % 13 == 0\n\
    \      puts i\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\"\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum,\
    \ digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\"\n\
    \  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n\
    \    sum + 1 if digit == \"7\" || digit == \"8\" || digit == \"9\" || digit ==\
    \ \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\").each do |i|\n\
    \    if i.to_s.include?(\"7\")\n      puts i.to_s.count(\"7\")\n    elsif i.to_s.include?(\"\
    11\")\n      puts i.to_s.count(\"11\")\n    elsif i.to_s.include?(\"13\")\n  \
    \    puts i.to_s.count(\"13\")\n    else\n      puts i.to_s.count(\"0\")\n   \
    \ end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0\
    \ or i.to_i % 13 == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index do |digit, i|\n    digit.to_i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i :\
    \ i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero? ? i : i.zero?\
    \ ? i : i.zero? ? i : i.zero? ? i : i.", "  n.to_s.split(\"\").each do |i|\n \
    \   next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next\
    \ if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"\
    1\")\n    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n\
    \    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next\
    \ if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"\
    8\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"0\")\n\
    \    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"2\")\n    next\
    \ if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"\
    5\")\n    next if i.to_s.include?(\"6\")\n    next if i.to_s.include?(\"7\")\n\
    \    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"9\")\n    next\
    \ if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n    next if i.to_s.include?(\"\
    2\")\n    next if i.to_s.include?(\"3\")\n    next if i.to_s.include?(\"4\")\n\
    \    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"6\")\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n    next if i.to_s.include?(\"\
    9\")\n    next if i.to_s.include?(\"0\")\n    next if i.to_s.include?(\"1\")\n\
    \    next if i.to_s.include?(\"2\")\n    next if i.to_s.include?(\"3\")\n    next\
    \ if i.to_s.include?(\"4\")\n    next if i.to_s.include?(\"5\")\n    next if i.to_s.include?(\"\
    6\")\n    next if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"8\")\n\
    \    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?", "  n.to_s.split(\"\
    \").each do |i|\n    if i.to_s.include?(\"7\") && i.to_s.include?(\"8\") && i.to_s.include?(\"\
    9\") && i.to_s.include?(\"11\") && i.to_s.include?(\"13\")\n      return 0\n \
    \   end\n  end\n  return 1\nend", "  n.to_s.split(\"\").each do |i|\n    next\
    \ if i.to_s.include?(\"7\")\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"\
    11\")\n    next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend\n\
    </code>\n<|/ a tags=ruby |>\n<| c |>\nThanks for the answer. I am not allowed\
    \ to use any gems. I am just allowed to use basic ruby methods. I appreciate your\
    \ help though.\n<|/ c |>\n<| c |>\nI added a solution without gems.\n<|/ c |>\n\
    <| c |>\nThanks again. I appreciate your help.\n<|/ c |>\n<| a tags=ruby |>\n\
    <code>", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.include?(\"7\"\
    )\n    next if i.to_s.include?(\"9\")\n    next if i.to_s.include?(\"11\")\n \
    \   next if i.to_s.include?(\"13\")\n    puts i.to_s.to_i\n  end\nend", "  n.to_s.split(\"\
    \").each_with_index.inject(0) do |sum, digit|\n    sum + 1 if digit == \"7\" ||\
    \ digit == \"8\" || digit == \"9\" || digit == \"11\" || digit == \"13\"\n  end\n\
    end", "  n.to_s.split(\"\").each do |i|\n    if i.to_i % 11 == 0 or i.to_i % 13\
    \ == 0\n      puts i.to_i\n    end\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + case digit\n      when \"7\" then 1\n      when \"\
    8\" then 2\n      when \"9\" then 3\n      when \"0\" then 4\n      else 5\n \
    \   end\n  end\nend", "  n.to_s.split(\"\").each do |i|\n    next if i.to_s.to_i\
    \ == 7\n    next if i.to_s.to_i == 11 || i.to_s.to_i == 13\n    puts i.to_s.to_i\n\
    \  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0) do |sum, digit|\n\
    \    sum + 1 if digit == 7\n  end\nend", "  n.to_s.split(\"\").each_with_index.inject(0)\
    \ do |sum, digit|\n    sum + 1 if digit == \"7\" || digit == \"8\" || digit ==\
    \ \"9\" || digit == \"11\" || digit == \"13\"\n  end\nend", "  n.to_s.split(\"\
    \").each do |digit|\n    digit = digit.to_i\n    if digit % 11 == 0 || digit %\
    \ 13 == 0\n      puts digit\n    end\n  end\nend", "  n.to_s.split(\"\").each\
    \ do |digit|\n    if digit == \"7\" || digit == \"7\"\n      0\n    elsif digit\
    \ == \"8\" || digit == \"8\"\n      1\n    elsif digit == \"9\" || digit == \"\
    9\"\n      2\n    elsif digit == \"11\" || digit == \"11\"\n      3\n    elsif\
    \ digit == \"13\" || digit == \"13\"\n      4\n    elsif digit == \"14\" || digit\
    \ == \"14\"\n      5\n    elsif digit == \"15\" || digit == \"15\"\n      6\n\
    \    elsif digit == \"16\" || digit == \"16\"\n      7\n    elsif digit == \"\
    17\" || digit == \"17\"\n      8\n    elsif digit == \"18\" || digit == \"18\"\
    \n      9\n    elsif digit == \"19\" || digit == \"19\"\n      10\n    elsif digit\
    \ == \"20\" || digit == \"20\"\n      11\n    elsif digit == \"21\" || digit ==\
    \ \"21\"\n      12\n    elsif digit == \"22\" || digit == \"22\"\n      13\n \
    \   elsif digit == \"23\" || digit == \"23\"\n      14\n    elsif digit == \"\
    24\" || digit == \"24\"\n      15\n    elsif digit == \"25\" || digit == \"25\"\
    \n      16\n    elsif digit == \"26\" || digit == \"26\"\n      17\n    elsif\
    \ digit == \"27\" || digit == \"27\"\n      18\n    elsif digit == \"28\" || digit\
    \ == \"28\"\n      19\n    elsif digit == \"29\" || digit == \"29\"\n      20\n\
    \    elsif digit == \"30\" || digit == \"30\"\n      21\n    elsif digit == \"\
    31\" || digit == \"31\"\n      22\n    elsif digit == \"32\" || digit == \"32\"\
    \n      23\n    elsif digit == \"33\" || digit == \"33\"\n      24\n    elsif\
    \ digit == \"34\" || digit == \"34\"\n      25\n    elsif digit == \"35\" || digit\
    \ == \"35\"\n      26\n    elsif digit == \"36\" || digit == \"36\"\n      27\n\
    \    elsif digit == \"37\" || digit == \"37\"\n      28\n    elsif digit == \"\
    38\" || digit == \"38\"\n      29\n    elsif digit == \"39\" || digit == \"39\"\
    \n      30\n    elsif digit == \"40\" || digit ", "  n.to_s.split(\"\").each do\
    \ |i|\n    if i % 11 == 0 || i % 13 == 0\n      puts i.to_s\n    end\n  end\n\
    end"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
