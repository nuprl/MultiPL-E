name: HumanEval_49_modp
language: rb
prompt: "# Return 2^n modulo p (be aware of numerics).\n# >>> modp.call(3, 5)\n# 3\n\
  # >>> modp.call(1101, 101)\n# 2\n# >>> modp.call(0, 101)\n# 1\n# >>> modp.call(3,\
  \ 11)\n# 8\n# >>> modp.call(100, 101)\n# 1\ndef modp(n, p)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_modp\n\
  \    candidate = method(:modp)\n    assert_equal(3, candidate.call(3, 5))\n    assert_equal(2,\
  \ candidate.call(1101, 101))\n    assert_equal(1, candidate.call(0, 101))\n    assert_equal(8,\
  \ candidate.call(3, 11))\n    assert_equal(1, candidate.call(100, 101))\n    assert_equal(4,\
  \ candidate.call(30, 5))\n    assert_equal(3, candidate.call(31, 5))\n  end\nend\n"
completions: ["  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n >\
    \ 0\n    n, r = divmod (n, p)\n    if r == 0\n      return n\n    p -= 1\n  end\n\
    \  raise \"modp overflow\"\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\nend", " \
    \ return ((n % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return ((n
    % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n +=\
    \ p\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p >>= 1\n    if n\
    \ & 1 == 1\n      n -= 1\n      p -= 1\n    end\n  end\n  return p\nend", "  n\
    \ = (n.to_i if n.kind_of?(Fixnum) || n.kind_of?(Bignum) else\n    n.to_s.to_i\
    \ if n.kind_of?(String) else\n    n.to_s.to_i if n.kind_of?(Fixnum) else\n   \
    \ n.to_s.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_i if n.kind_of?(Bignum) else\n    n.to_i if n.kind_of?(Fixnum) else\n",
  "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n > 0\n    n -=\
    \ p\n    p = p % n\n  end\n  return n\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  "  return ((n & -p) << p) + (n & p)\nend", '  return ((n % p) + p) % p', "  n =\
    \ n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', "  n = (n.to_i if n.kind_of?(Fixnum) || n.kind_of?(Bignum)\
    \ else\n    n.to_s.to_i if n.kind_of?(String) else\n    n.to_s.to_i).abs\n  p\
    \ = p.to_i\n  while p > 0\n    q, r = n / p, n % p\n    n = q\n    p = r\n  end\n\
    \  n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n\
    \ == 0\n    return 0\n  while n > 0\n    n >>= 1\n    p -= 1\n  end\n  p += 1\n\
    \  while p > 1\n    p >>= 1\n    n -= 1\n  end\n  return n\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  r = n % p\n  if r == 0\n    r == -p\n  else\n    r = p + r\n\
    \  end\n  r.to_i\nend", "  n = (n.to_i if n.respond_to?(:to_i)) ? n : n.to_int\n\
    \  p = (p.to_i if p.respond_to?(:to_i)) ? p : p.to_int\n  if n <= 0\n    0\n \
    \ elsif n >= p\n    p\n  else\n    (p % n).to_i\n  end\nend", "  return ((n %\
    \ p) + p) % p\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', "  n = (n.to_i if n.kind_of?(Fixnum) else\n    Bignum.new(n.to_s.to_i\
    \ if n.kind_of?(String) else\n      n.to_s.to_i).pow(n).modulo(p))\n  n.to_s\n\
    end", "  return ((n % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  while n > p\n    n -= p\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n  while\
    \ n > 0\n    n -= p\n    p = p >> 1\n  end\n  n\nend", '  return ((n % p) + p)
    % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', "  n = (n.to_i if n.respond_to?(:to_i)) ? n : n.to_s\n  p\
    \ = (p.to_i if p.respond_to?(:to_i)) ? p : p.to_s\n  n = n.to_i\n  p = p.to_i\n\
    \  r = n % p\n  if r == 0\n    r\n  else\n    modp(r, p) * (p - 1)\n  end\nend",
  '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n\
    \ -= p if n >= p else n\n  end\n  n\nend", "  n = (n % p + p) % p\n  if n < 0\n\
    \    n += p\n  end\n  return n\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n
    % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', " \
    \ r = 0\n  while n > p\n    r = r * 2 % p\n    n /= p\n  r\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n\
    \ < 0\n    n += p\n  return n\nend", "  n = n.to_i\n  p = p.to_i\n  while n >\
    \ 0\n    n -= p\n    p = p >> 1\n  end\n  n\nend", "  return ((n % p) + p) % p\n\
    end", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n > p\n\
    \    n -= p\n  while n < 0\n    n += p\n  return n\nend", "  n = n.to_i\n  p =\
    \ p.to_i\n  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n\
    \    n += p\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n \
    \ p = p.to_i\n  while n > p\n    n -= p\n  end\n  n\nend", '  return ((n % p)
    + p) % p', "  return ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  if\
    \ n == 0\n    return 0\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  return\
    \ n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n ==\
    \ 0\n    return 0\n  while n != 0\n    n >>= 1\n    p -= 1\n  end\n  p += 1\n\
    \  while p >= 2\n    p >>= 1\n  end\n  return p\nend", '  return ((n % p) + p)
    % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n != 0\n\
    \    n >>= 1\n    p >>= 1\n    if n & 1 == 1\n      n -= 1\n      p -= 1\n   \
    \ end\n  end\n  return p\nend", "  n = (n.to_i if n.is_a?(Fixnum) else\n     \
    \  n.to_s if n.is_a?(String) else\n       n.to_f if n.is_a?(BigDecimal) else\n\
    \       n.to_s if n.is_a?(Numeric) else\n       n.to_s if n.is_a?(TrueClass) else\n\
    \       n.to_s if n.is_a?(FalseClass) else\n       n.to_i)\n  p = p.to_i\n  if\
    \ p > 0 and n > 0\n    n %= p\n  elsif p < 0 and n > 0\n    n %= -p\n  elsif p\
    \ > 0 and n < 0\n    n %= p\n  elsif p < 0 and n < 0\n    n %= -p\n  end\n  n\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n
    % p) + p) % p', '  return ((n & -p) ^ n) & p', '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n & -p) == 0) ^\
    \ (n & n)\nend", "  n = (n.to_i if n.is_a?(Integer) else n).abs\n  p = p.to_i\n\
    \  while p > 0\n    q, r = divmod(n, p)\n    n = q\n    p = r\n  end\n  n\nend",
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) +\
    \ p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p\
    \ = p % n\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return\
    \ 0\n  while n != 0\n    n >>= 1\n    p >>= 1\n    if n % p == 0\n      return\
    \ n\n  return n\nend", "  n = (n.to_i if n.kind_of?(Fixnum) || n.kind_of?(Bignum)\
    \ else\n    n.to_s.to_i if n.kind_of?(String) else\n    n.to_s.to_i).abs\n  p\
    \ = p.to_i\n  while n != 0\n    n >>= 1\n    p -= 1\n  end\n  p += 1\n  p %= p\n\
    \  p += 1 if n > 0\n  p -= 1 if n < 0\n  p\nend", "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p >>= 1\n    if n\
    \ & 1 == 1\n      n -= 1\n      p -= 1\n    end\n  end\n  return p\nend", '  return
    ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n \
    \   p = p % n\n  end\n  n\nend", '  return ((n % p) + p) % p', '  return ((n %
    p) + p) % p', "  n = (n.to_i if n.kind_of?(Fixnum) else\n    Bignum.new(n.to_s.to_i,\
    \ p).to_i)\n  p = Bignum.new(p)\n  r = Bignum.new(0)\n  while n > p\n    r = r.next\n\
    \    n -= p\n  end\n  r\nend", '  return ((n % p) + p) % p', '  return ((n % p)
    + p) % p', "  return ((n % p) + p) % p\nend", '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n\
    \  while n > 0\n    n -= p if n >= p else n\n  end\n  n\nend", "  n = (n.to_i\
    \ if n.respond_to?(:to_i)) ? n : n.to_s\n  p = (p.to_i if p.respond_to?(:to_i))\
    \ ? p : p.to_s\n  raise ArgumentError, \"negative modulus\" if n < 0\n  raise\
    \ ArgumentError, \"zero modulus\" if n == 0\n  raise ArgumentError, \"modulus\
    \ is zero\" if p == 0\n  raise ArgumentError, \"modulus is greater than modulus\"\
    \ if p > n\n  raise ArgumentError, \"modulus is less than modulus\" if p < n\n\
    \  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0\n  raise ArgumentError, \"modulus is greater than\
    \ modulus\" if p > n\n  raise ArgumentError, \"modulus is less than modulus\"\
    \ if p < n\n  raise ArgumentError, \"modulus is negative\" if n < 0\n  raise ArgumentError,\
    \ \"modulus is zero\" if n == 0", "  return ((n % p) + p) % p\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  while n > p\n    n -= p\n  end\n  n\nend", "  n = n.to_i\n  p\
    \ = p.to_i\n  if n == 0\n    return 0\n  while n > 0\n    n -= p\n    p = p %\
    \ n\n  end\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p\
    \ = p.to_i\n  r = n % p\n  if r == 0\n    return n\n  else\n    return r + p\n\
    end", "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n > 0\n\
    \    n -= p\n    p /= 2\n  end\n  n\nend", "  n = (n.to_i if n.kind_of?(Fixnum)\
    \ else\n    n.to_s if n.kind_of?(Bignum))\n  p = p.to_i\n  r = p % n\n  (r ==\
    \ 0) ? r : r + n\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p)
    % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = (n %\
    \ p).to_i\n  return n if n < p else (p - n) % p\nend", '  return ((n % p) + p)
    % p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    p -= 1\n  while p > 0\n    p -= 1\n    if n %\
    \ p == 0\n      return n\n    n /= p\n  end\n  return n\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n  n\nend", '  return
    ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", "  n = (n.to_i if n.kind_of?(Fixnum)\
    \ || n.kind_of?(Bignum)) ? n : n.to_s\n  p = p.to_i\n  while p > 1\n    p -= 1\n\
    \    n %= p\n  end\n  n\nend", "  n = (n % p).to_i\n  n = (n + (p / 2)) % p\n\
    \  n = (n + (p / 4)) % p\n  n = (n + (p / 8)) % p\n  n = (n + (p / 16)) % p\n\
    \  n = (n + (p / 32)) % p\n  n = (n + (p / 64)) % p\n  n = (n + (p / 128)) % p\n\
    \  n\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", " \
    \ n = (n.to_i if n.is_a?(Fixnum) || n.is_a?(Bignum) else\n    n.to_s.to_i if n.is_a?(String)\
    \ else\n    n.to_s.to_i if n.is_a?(Numeric))\n  p = p.to_i\n  if p > n\n    p\
    \ % n\n  else\n    (p % n) + n\n  end\nend", "  return ((n % p) + p) % p\nend",
  "  n = (n % p).to_i\n  return n if n < p else p\nend", "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n +=\
    \ p\n  return n\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  while n > 0\n    n -= p\n    p %= p\n  end\n  n\nend", '  return ((n % p) +
    p) % p', '  return ((n % p) + p) % p', "  n = (n.to_i if n.kind_of?(Fixnum) else\n\
    \    n.to_s if n.kind_of?(Bignum) else\n    n.to_f if n.kind_of?(Float) else\n\
    \    n).abs\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n\
    \  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n\
    \  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if\
    \ p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if\
    \ p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n \
    \ p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n\
    \  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n\
    \  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if\
    \ p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if\
    \ p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n \
    \ p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n\
    \  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n\
    \  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if\
    \ p > n\n  p %= n\n  p += 1 if p < 0\n  p -= 1 if p > n\n  p %= ", '  return ((n
    % p) + p) % p', "  return ((n % p) + p) % p\nend", "  return ((n % p) + p) % p\n\
    end", "  n = (n.to_i if n.kind_of?(Fixnum) else\n    BigDecimal.new(n).to_i if\
    \ n.kind_of?(BigDecimal) else\n    n.to_i).abs\n  p = BigDecimal.new(p).to_i\n\
    \  while n >= p\n    n -= p\n  end\n  n\nend", '  return ((n % p) + p) % p', " \
    \ return ((n & -p) == n) ? n : ((n & -p) == p) ? p : ((n & -p) == p ^ n) ? p :\
    \ n\nend", "  n = (n % p + p) % p\n  return n\nend", "  return ((n % p) + p) %\
    \ p\nend", "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p if n % p ==\
    \ 0\n    p = p >> 1\n  end\n  n\nend", '  return ((n % p) + p) % p', "  return\
    \ ((n % p) + p) % p\nend", "  n = n.to_i\n  p = p.to_i\n  if n < 0\n    n += p\n\
    \  else\n    n %= p\n  end\n  return n\nend", '  return ((n % p) + p) % p', " \
    \ n = n.to_i\n  p = p.to_i\n  r = p - 1\n  while r > 0\n    r, r = r.divmod(n)\n\
    \  end\n  r\nend", '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  while n > p\n    n -= p\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n  while\
    \ n > 0\n    n -= p\n    p %= p\n  end\n  n\nend", "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p >>= 1\n    if n\
    \ & 1 == 1\n      n -= 1\n      p -= 1\n    end\n  end\n  return p\nend", '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = (n.to_i if n.is_a?(Fixnum)\
    \ else\n       n.to_s if n.is_a?(String) else\n       n.to_f if n.is_a?(BigDecimal)\
    \ else\n       n.to_s if n.is_a?(Numeric))\n  p = p.to_i\n  r = p % n\n  if r\
    \ == 0\n    r\n  else\n    modp(r, n)\n  end\nend", '  return ((n % p) + p) %
    p', '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n
    % p) + p) % p', "  return ((n % p) + p) % p\nend", "  return ((n % p) + p) % p\n\
    end", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n\
    \  p = p.to_i\n  r = n % p\n  if r == 0\n    r == p\n  else\n    r\n  end\nend",
  '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return ((n % p) +
    p) % p', "  return ((n % p) + p) % p\nend", "  return ((n % p) + p) % p\nend",
  '  return ((n & -p) ^ n) & -p', '  return ((n % p) + p) % p', "  n = (n % p + p)\
    \ % p\n  return n\nend", "  return ((n % p) + p) % p\nend", '  return ((n % p)
    + p) % p', '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return
    ((n % p) + p) % p', "  n = (n.to_i if n.is_a?(Fixnum) else\n       n.to_s if n.is_a?(String)\
    \ else\n       n.to_f if n.is_a?(BigDecimal) else\n       n.to_s if n.is_a?(Numeric))\n\
    \  p = p.to_i\n  if p < 0\n    raise ArgumentError.new(\"modulus must be positive\"\
    )\n  while p > 0\n    q, r = divmod(n, p)\n    if r == 0\n      return q\n   \
    \ n, p = p, r\n  end\n  raise ArgumentError.new(\"modulus is too large\")\nend",
  "  n = n.to_i\n  p = p.to_i\n  while n > 0\n    n -= p\n    p = p % n\n  end\n \
    \ n\nend", '  return ((n % p) + p) % p', '  return ((n % p) + p) % p', '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n +=\
    \ p\n  return n\nend", '  return ((n % p) + p) % p', "  return ((n % p) + p) %\
    \ p\nend", "  return ((n & -p) == 0) ^ ((n & p) == p)\nend", '  return ((n % p)
    + p) % p', "  n = n.to_i\n  p = p.to_i\n  if n == 0\n    return 0\n  while n >\
    \ p\n    n -= p\n  while n < 0\n    n += p\n  return n\nend", "  n = n.to_i\n\
    \  p = p.to_i\n  if n == 0\n    return 0\n  while n != 0\n    n >>= 1\n    p >>=\
    \ 1\n    if n & 1 == 1\n      n -= 1\n      p -= 1\n    end\n  end\n  return p\n\
    end", '  return ((n % p) + p) % p', "  return ((n % p) + p) % p\nend", '  return
    ((n % p) + p) % p', '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n\
    \  if n == 0\n    return 0\n  while n > p\n    n -= p\n  while n < 0\n    n +=\
    \ p\n  return n\nend", "  return ((n % p) + p) % p\nend", "  return ((n % p) +\
    \ p) % p\nend", "  return ((n % p) + p) % p\nend", '  return ((n % p) + p) % p',
  '  return ((n % p) + p) % p', "  n = n.to_i\n  p = p.to_i\n  while n > p\n    n\
    \ -= p\n  end\n  n\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
