name: HumanEval_9_rolling_max
language: rb
prompt: "# From a given array of integers, generate an array of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max.call([1, 2, 3,\
  \ 2, 3, 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\ndef rolling_max(numbers)\n"
tests: "require 'test/unit'\nclass TestHumanEval < Test::Unit::TestCase\n  def test_rolling_max\n\
  \    candidate = method(:rolling_max)\n    assert_equal([], candidate.call([]))\n\
  \    assert_equal([1, 2, 3, 4], candidate.call([1, 2, 3, 4]))\n    assert_equal([4,\
  \ 4, 4, 4], candidate.call([4, 3, 2, 1]))\n    assert_equal([3, 3, 3, 100, 100],\
  \ candidate.call([3, 2, 3, 100, 3]))\n  end\nend\n"
completions: ["  numbers.reduce(:<<)\nend", "  numbers.each_with_index.map { |number,\
    \ index| number > numbers[index] ? number : numbers[index] }\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.inject(0) do |max, (number, index)|\n    max\
    \ = number if number > max\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.length - 1\n\
    \    max\n  end\nend", "  numbers.each_cons(2) do |a, b|\n    next if a.nil? ||\
    \ b.nil?\n    next if a.last < b.last\n    a.last < b.last ? a.last : b.last\n\
    \  end\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max << number if index == numbers.size - 1\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |rolling_max, (number, index)|\n    rolling_max << number if rolling_max.last\
    \ < number || index == 0\n    rolling_max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if index == 0\n    max\n  end\n\
    end", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend", "  numbers.each_with_index.inject(0) do |max,\
    \ (number, index)|\n    max = number if index == 0\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max = number if number > max\n    max\n  end\n\
    end", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n    max\
    \ << number if index > 0\n    max\n  end\nend", "  numbers.reduce(:<<)\nend",
  "  numbers.each_with_index.inject(0) { |max, (number, index)| max > number ? max\
    \ : number }\nend", "  numbers.each_with_index.inject([]) do |max, (number, index)|\n\
    \    max = max << number if number > max[-1]\n    max\n  end\nend", "  numbers.each_with_index.inject([])\
    \ do |max, (number, index)|\n    max << number if index == numbers.size - 1\n\
    \    max\n  end\nend", "  numbers.each_with_index.inject([]) do |max, (number,\
    \ index)|\n    max << number if index > 0\n    max\n  end\nend", "  numbers.reduce(:<<)\n\
    end", "  numbers.each_with_index.map { |number, index| number > numbers[index]\
    \ ? number : numbers[index] }\nend"]
stop_tokens:
- "\nclass"
- "\ndef"
- "\n#"
- "\n\n"
