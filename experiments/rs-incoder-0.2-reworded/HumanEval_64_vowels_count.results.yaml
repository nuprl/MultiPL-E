language: rs
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_end_index\
    \ = s.len();\n    for &c in s.chars() {\n        if c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u' {\n            vowel_count += 1;\n        } else\
    \ {\n            if vowel_end_index == 0 {\n                vowel_end_index =\
    \ s.len() - 1;\n            }\n            if c == s[vowel_end_index] {\n    \
    \            vowel_end_index -= 1;\n            }\n        }\n    }\n    vowel_count\n\
    }\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo2t2f0yp.rs:13:9\n   |\n\
    13 |     for &c in s.chars() {\n   |         ^^    --------- this expression has\
    \ type `char`\n   |         |\n   |         expected `char`, found reference\n\
    \   |\n   = note:   expected type `char`\n           found reference `&_`\n\n\
    error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpo2t2f0yp.rs:20:21\n\
    \   |\n20 |             if c == s[vowel_end_index] {\n   |                   \
    \  ^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_end_pos\
    \ = 0;\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            vowel_count += 1;\n        } else {\n\
    \            if vowel_end_pos == 0 {\n                vowel_end_pos = s.len()\
    \ - 1;\n            }\n            if vowel_end_pos == c {\n                vowel_count\
    \ += 1;\n            }\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n\
    \    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn7_eeets.rs:20:33\n   |\n\
    20 |             if vowel_end_pos == c {\n   |                               \
    \  ^ expected `usize`, found `char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowels = vec!['a'..'u'];\n    let mut vowel_count\
    \ = 0;\n    for c in s.chars() {\n        if vowels.contains(&c) {\n         \
    \   vowel_count += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n \
    \   let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbqq6cadv.rs:14:28\n   |\n\
    14 |         if vowels.contains(&c) {\n   |                            ^^ expected\
    \ struct `std::ops::Range`, found `char`\n   |\n   = note: expected reference\
    \ `&std::ops::Range<char>`\n              found reference `&char`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index2 = s.len();\n    let mut vowel_end_index3\
    \ = s.len();\n    let mut vowel_end_index4 = s.len();\n    let mut vowel_end_index5\
    \ = s.len();\n    let mut vowel_end_index6 = s.len();\n    let mut vowel_end_index7\
    \ = s.len();\n    let mut vowel_end_index8 = s.len();\n    let mut vowel_end_index9\
    \ = s.len();\n    let mut vowel_end_index10 = s.len();\n    let mut vowel_end_index11\
    \ = s.len();\n    let mut vowel_end_index12 = s.len();\n    let mut vowel_end_index13\
    \ = s.len();\n    let mut vowel_end_index14 = s.len();\n    let mut vowel_end_index15\
    \ = s.len();\n    let mut vowel_end_index16 = s.len();\n    let mut vowel_end_index17\
    \ = s.len();\n    let mut vowel_end_index18 = s.len();\n    let mut vowel_end_index19\
    \ = s.len();\n    let mut vowel_end_index20 = s.len();\n    let mut vowel_end_index21\
    \ = s.len();\n    let mut vowel_end_index22 = s.len();\n    let mut vowel_end_index23\
    \ = s.len();\n    let mut vowel_end_index24 = s.len();\n    let mut vowel_end_index25\
    \ = s.len();\n    let mut vowel_end_index26 = s.len();\n    let mut vowel_end_index27\
    \ = s.len();\n    let mut vowel_end_index28 = s.len();\n    let mut vowel_end_index29\
    \ = s.len();\n    let mut vowel_end_index30 = s.len();\n    let mut vowel_end_index31\
    \ = s.len();\n    let mut vowel_end_index32 = s.len();\n    let mut vowel_end_index33\
    \ = s.len();\n    let mut vowel_end_index34 = s.len();\n    let mut vowel_end_index35\
    \ = s.len();\n    let mut vowel_end_index36 = s.len();\n    let mut vowel_end_index37\
    \ = s.len();\n    let mut vowel_end_index38 = s.len();\n    let mut vowel_end_index39\
    \ = s.len();\n    let mut vowel_end_index40 = s.len\n}\n\nfn main() {\n    let\
    \ candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")),\
    \ 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmputcgrgef.rs:51:38\n   |\n\
    51 |     let mut vowel_end_index40 = s.len\n   |                             \
    \         ^ help: add `;` here\n52 | }\n   | - unexpected token\n\nerror[E0615]:\
    \ attempted to take value of method `len` on type `String`\n  --> /tmp/tmputcgrgef.rs:51:35\n\
    \   |\n51 |     let mut vowel_end_index40 = s.len\n   |                      \
    \             ^^^ method, not a field\n   |\nhelp: use parentheses to call the\
    \ method\n   |\n51 |     let mut vowel_end_index40 = s.len()\n   |           \
    \                           ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmputcgrgef.rs:10:31\n\
    \   |\n10 | fn vowels_count(s: String) -> isize {\n   |    ------------      \
    \         ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0308, E0615.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n}\n\nfn main() {\n    let\
    \ candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")),\
    \ 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12fjdo_2.rs:10:31\n   |\n\
    10 | fn vowels_count(s: String) -> isize {\n   |    ------------             \
    \  ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_chars =\
    \ HashSet::new();\n    for c in s.chars() {\n        if c.is_vowel() {\n     \
    \       vowel_chars.insert(c);\n        }\n    }\n    for c in vowel_chars {\n\
    \        vowel_count += 1;\n    }\n    vowel_count\n}\n\nfn main() {\n    let\
    \ candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")),\
    \ 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `HashSet`\n  -->\
    \ /tmp/tmpd_zdy8xv.rs:12:27\n   |\n12 |     let mut vowel_chars = HashSet::new();\n\
    \   |                           ^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::HashSet;\n   |\n\nerror[E0599]:\
    \ no method named `is_vowel` found for type `char` in the current scope\n  -->\
    \ /tmp/tmpd_zdy8xv.rs:14:14\n   |\n14 |         if c.is_vowel() {\n   |      \
    \        ^^^^^^^^ method not found in `char`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_pos = 0;\n\
    \    let mut vowel_end_pos = 0;\n    let mut vowel_end_pos = s.len();\n    let\
    \ mut vowel_end_pos = s.len();\n    while vowel_pos < s.len() {\n        if s[vowel_pos]\
    \ == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos] == 'o'\
    \ || s[vowel_pos] == 'u' {\n            vowel_count += 1;\n        }\n       \
    \ vowel_pos += 1;\n    }\n    return vowel_count;\n}\n\nfn main() {\n    let candidate\
    \ = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n  \
    \  assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe6m51mum.rs:17:12\n\
    \   |\n17 |         if s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos]\
    \ == 'i' || s[vowel_pos] == 'o' || s[vowel_pos] == 'u' {\n   |            ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpe6m51mum.rs:17:35\n   |\n17 |         if s[vowel_pos]\
    \ == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos] == 'o'\
    \ || s[vowel_pos] == 'u' {\n   |                                   ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpe6m51mum.rs:17:58\n   |\n17 |         if s[vowel_pos]\
    \ == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos] == 'o'\
    \ || s[vowel_pos] == 'u' {\n   |                                             \
    \             ^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpe6m51mum.rs:17:81\n\
    \   |\n17 |         if s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos]\
    \ == 'i' || s[vowel_pos] == 'o' || s[vowel_pos] == 'u' {\n   |               \
    \                                                                  ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpe6m51mum.rs:17:104\n   |\n17 |         if\
    \ s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos]\
    \ == 'o' || s[vowel_pos] == 'u' {\n   |                                      \
    \                                                                  ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is no"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_pos = 0;\n\
    \    let mut vowel_end = s.len();\n    while vowel_pos < vowel_end {\n       \
    \ if s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos]\
    \ == 'o' || s[vowel_pos] == 'u' {\n            vowel_count += 1;\n        }\n\
    \        vowel_pos += 1;\n    }\n    vowel_count\n}\n\nfn main() {\n    let candidate\
    \ = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")), 2);\n  \
    \  assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq3yv3tqg.rs:15:12\n\
    \   |\n15 |         if s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos]\
    \ == 'i' || s[vowel_pos] == 'o' || s[vowel_pos] == 'u' {\n   |            ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpq3yv3tqg.rs:15:35\n   |\n15 |         if s[vowel_pos]\
    \ == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos] == 'o'\
    \ || s[vowel_pos] == 'u' {\n   |                                   ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpq3yv3tqg.rs:15:58\n   |\n15 |         if s[vowel_pos]\
    \ == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos] == 'o'\
    \ || s[vowel_pos] == 'u' {\n   |                                             \
    \             ^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   = help:\
    \ the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq3yv3tqg.rs:15:81\n\
    \   |\n15 |         if s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos]\
    \ == 'i' || s[vowel_pos] == 'o' || s[vowel_pos] == 'u' {\n   |               \
    \                                                                  ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpq3yv3tqg.rs:15:104\n   |\n15 |         if\
    \ s[vowel_pos] == 'a' || s[vowel_pos] == 'e' || s[vowel_pos] == 'i' || s[vowel_pos]\
    \ == 'o' || s[vowel_pos] == 'u' {\n   |                                      \
    \                                                                  ^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is no"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_pos = 0;\n\
    \    let mut vowel_end_pos = 0;\n    let mut vowel_end_pos_count = 0;\n    let\
    \ mut vowel_end_pos_count_max = 0;\n    let mut vowel_end_pos_count_min = 0;\n\
    \    let mut vowel_end_pos_count_sum = 0;\n    let mut vowel_end_pos_count_count_max\
    \ = 0;\n    let mut vowel_end_pos_count_count_min = 0;\n    let mut vowel_end_pos_count_count_sum\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_max = 0;\n    let mut vowel_end_pos_count_count_count_min\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_sum = 0;\n    let mut vowel_end_pos_count_count_count_count_max\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_min = 0;\n    let mut\
    \ vowel_end_pos_count_count_count_count_sum = 0;\n    let mut vowel_end_pos_count_count_count_count_count_max\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_min = 0;\n   \
    \ let mut vowel_end_pos_count_count_count_count_count_sum = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_max\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_min = 0;\n\
    \    let mut vowel_end_pos_count_count_count_count_count_count_sum = 0;\n    let\
    \ mut vowel_end_pos_count_count_count_count_count_count_count_max = 0;\n    let\
    \ mut vowel_end_pos_count_count_count_count_count_count_count_min = 0;\n    let\
    \ mut vowel_end_pos_count_count_count_count_count_count_count_sum = 0;\n    let\
    \ mut vowel_end_pos_count_count_count_count_count_count_count_count_max = 0;\n\
    \    let mut vowel_end_pos_count_count_count_count_count_count_count_count_min\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_sum\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_count_max\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_count_min\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_count_sum\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_count_max\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_count_count_min\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_count_count_sum\
    \ = 0;\n    let mut vowel_end_pos_count_count_count_count_count_count_count_count_\n\
    }\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4rhkhard.rs:45:75\n   |\n\
    45 |     let mut vowel_end_pos_count_count_count_count_count_count_count_count_\n\
    \   |                                                                        \
    \   ^ help: add `;` here\n46 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4rhkhard.rs:10:31\n   |\n10 | fn vowels_count(s: String)\
    \ -> isize {\n   |    ------------               ^^^^^ expected `isize`, found\
    \ `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail or\
    \ `return` expression\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_flag = false;\n\
    \    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            vowel_flag = true;\n        }\n        if c ==\
    \ 'y' && !vowel_flag {\n            vowel_flag = true;\n        }\n        if\
    \ c == 'y' && vowel_flag {\n            vowel_flag = false;\n        }\n     \
    \   if c == 'a' && vowel_flag {\n            vowel_count += 1;\n        }\n  \
    \  }\n    vowel_count\n}\n\nfn main() {\n    let candidate = vowels_count;\n \
    \   assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `2`', /tmp/tmp4s2s_zh9.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    for c in s.chars() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       vowel_count += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n\
    \    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpeyz7fols.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_chars =\
    \ vec![];\n    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u' {\n            vowel_chars.push(c);\n        }\n   \
    \     if c == 'y' {\n            vowel_chars.push(c);\n        }\n    }\n    for\
    \ c in vowel_chars {\n        vowel_count += 1;\n    }\n    vowel_count\n}\n\n\
    fn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpzc7vrwjf.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_flag = false;\n\
    \    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            vowel_flag = true;\n        }\n        if c ==\
    \ 'y' && !vowel_flag {\n            vowel_flag = true;\n        }\n        if\
    \ vowel_flag {\n            vowel_count += 1;\n        }\n    }\n    vowel_count\n\
    }\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `2`', /tmp/tmpjg_0foas.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    for c in s.chars() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       vowel_count += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n\
    \    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpeyz7fols.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    for c in s.chars() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       vowel_count += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n\
    \    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpeyz7fols.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_flag = false;\n\
    \    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            vowel_flag = true;\n        }\n        if c ==\
    \ 'y' && !vowel_flag {\n            vowel_flag = true;\n        }\n        if\
    \ vowel_flag {\n            vowel_count += 1;\n        }\n    }\n    vowel_count\n\
    }\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `2`', /tmp/tmpjg_0foas.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_flag = false;\n\
    \    for c in s.chars() {\n        if c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u' {\n            vowel_flag = true;\n        }\n        if c ==\
    \ 'y' && !vowel_flag {\n            vowel_flag = true;\n        }\n        if\
    \ vowel_flag {\n            vowel_count += 1;\n        }\n    }\n    vowel_count\n\
    }\n\nfn main() {\n    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"\
    abcde\")), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `2`', /tmp/tmpjg_0foas.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n    let mut vowel_end_index\
    \ = s.len();\n    let mut vowel_end_index = s.len();\n}\n\nfn main() {\n    let\
    \ candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\")),\
    \ 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12fjdo_2.rs:10:31\n   |\n\
    10 | fn vowels_count(s: String) -> isize {\n   |    ------------             \
    \  ^^^^^ expected `isize`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 101
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    let mut vowel_count = 0;\n    for c in s.chars() {\n\
    \        if c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' {\n     \
    \       vowel_count += 1;\n        }\n    }\n    vowel_count\n}\n\nfn main() {\n\
    \    let candidate = vowels_count;\n    assert_eq!(candidate(String::from(\"abcde\"\
    )), 2);\n    assert_eq!(candidate(String::from(\"Alone\")), 3);\n    assert_eq!(candidate(String::from(\"\
    key\")), 2);\n    assert_eq!(candidate(String::from(\"bye\")), 1);\n    assert_eq!(candidate(String::from(\"\
    keY\")), 2);\n    assert_eq!(candidate(String::from(\"bYe\")), 1);\n    assert_eq!(candidate(String::from(\"\
    ACEDY\")), 3);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `3`', /tmp/tmpeyz7fols.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
- exit_code: 1
  program: "/// Write a function vowels_count which takes a string representing\n\
    /// a word as input and returns the number of vowels in the string.\n/// Vowels\
    \ in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n/// vowel, but\
    \ only when it is at the end of the given word.\n/// Example:\n/// >>> vowels_count(String::from(\"\
    abcde\"))\n/// 2\n/// >>> vowels_count(String::from(\"ACEDY\"))\n/// 3\nfn vowels_count(s:\
    \ String) -> isize {\n    s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u').count()\n}\n\nfn main() {\n    let candidate = vowels_count;\n\
    \    assert_eq!(candidate(String::from(\"abcde\")), 2);\n    assert_eq!(candidate(String::from(\"\
    Alone\")), 3);\n    assert_eq!(candidate(String::from(\"key\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bye\")), 1);\n    assert_eq!(candidate(String::from(\"keY\")), 2);\n    assert_eq!(candidate(String::from(\"\
    bYe\")), 1);\n    assert_eq!(candidate(String::from(\"ACEDY\")), 3);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:28\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                            ^^ no implementation\
    \ for `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:40\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                        ^^ no\
    \ implementation for `&char == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&char`\n\nerror[E0277]: can't compare `&char` with `char`\n\
    \  --> /tmp/tmpjlfnxgaa.rs:11:52\n   |\n11 |     s.chars().filter(|c| c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u').count()\n   |             \
    \                                       ^^ no implementation for `&char == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&char`\n\
    \nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:64\n\
    \   |\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u').count()\n   |                                             \
    \                   ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0277]:\
    \ can't compare `&char` with `char`\n  --> /tmp/tmpjlfnxgaa.rs:11:76\n   |\n11\
    \ |     s.chars().filter(|c| c == 'a' || c == 'e' || c == 'i' || c == 'o' || c\
    \ == 'u').count()\n   |                                                      \
    \                      ^^ no implementation for `&char == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `&char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjlfnxgaa.rs:11:5\n   |\n10 | fn vowels_count(s:\
    \ String) -> isize {\n   |                               ----- expected `isize`\
    \ because of return type\n11 |     s.chars().filter(|c| c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u')"
  stdout: ''
  timestamp: 1659747037
