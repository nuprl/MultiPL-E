language: rs
name: HumanEval_54_same_chars
results:
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0[i] != s1[i] {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq3c70v86.rs:20:12\n\
    \   |\n20 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpq3c70v86.rs:20:21\n   |\n20 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp99jakwj6.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    \    = note: the matched value is of type `Option<(usize, char)>`\nhelp: you might\
    \ want to use `if let` to ignore the variant that isn't matched\n    |\n18  |\
    \         if let Some((i1, c1)) = s1_iter.next() { /* */ }\n    |\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp99jakwj6.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp99jakwj6.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0.chars().nth(i) != s1.chars().nth(i) {\n            return false;\n\
    \        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp2van52l.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars();\n    let mut\
    \ s1_iter = s1.chars();\n    while let Some(mut s0) = s0_iter.next() {\n     \
    \   if let Some(mut s1) = s1_iter.next() {\n            if s0.eq_ignore_ascii_case(s1)\
    \ {\n                s0_iter.next();\n                s1_iter.next();\n      \
    \      } else {\n                return false;\n            }\n        } else\
    \ {\n            return false;\n        }\n    }\n    true\n}\n\nfn main() {\n\
    \    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo9wrr_cc.rs:19:40\n   |\n\
    19 |             if s0.eq_ignore_ascii_case(s1) {\n   |                      \
    \                  ^^\n   |                                        |\n   |   \
    \                                     expected `&char`, found `char`\n   |   \
    \                                     help: consider borrowing here: `&s1`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0[i] != s1[i] {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    i == s0.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpo1fs4gta.rs:20:12\n\
    \   |\n20 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpo1fs4gta.rs:20:21\n   |\n20 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    let mut same = true;\n   \
    \ while let (Some(i0), Some(i1)) = (s0_iter.next(), s1_iter.next()) {\n      \
    \  if i0.1 != i1.1 {\n            same = false;\n            break;\n        }\n\
    \    }\n    same\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp3mukcj90.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp588vjs2n.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp588vjs2n.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx346f0d8.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx346f0d8.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx346f0d8.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx346f0d8.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp588vjs2n.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp588vjs2n.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpu37y32hw.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmpu37y32hw.rs:21:27\n   |\n21 |         } else if s0[i]\
    \ < s1[j] {\n   |                           ^^^^^ `String` cannot be indexed by\
    \ `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars();\n    let mut\
    \ s1_iter = s1.chars();\n    while let Some(mut s0_ch) = s0_iter.next() {\n  \
    \      if let Some(mut s1_ch) = s1_iter.next() {\n            if s0_ch != s1_ch\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    return false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp8cl_ou8c.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp99jakwj6.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    \    = note: the matched value is of type `Option<(usize, char)>`\nhelp: you might\
    \ want to use `if let` to ignore the variant that isn't matched\n    |\n18  |\
    \         if let Some((i1, c1)) = s1_iter.next() { /* */ }\n    |\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp99jakwj6.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp99jakwj6.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp99jakwj6.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    \    = note: the matched value is of type `Option<(usize, char)>`\nhelp: you might\
    \ want to use `if let` to ignore the variant that isn't matched\n    |\n18  |\
    \         if let Some((i1, c1)) = s1_iter.next() { /* */ }\n    |\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp99jakwj6.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp99jakwj6.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0[i] != s1[i] {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpq3c70v86.rs:20:12\n\
    \   |\n20 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpq3c70v86.rs:20:21\n   |\n20 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    let mut same = true;\n   \
    \ while let Some((i0, c0)) = s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n\
    \        if c0 != c1 {\n            same = false;\n            break;\n      \
    \  }\n    }\n    same\n}\n\nfn main() {\n    let candidate = same_chars;\n   \
    \ assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp9zdhatxd.rs:19:13\n    |\n19  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    \    = note: the matched value is of type `Option<(usize, char)>`\nhelp: you might\
    \ want to use `if let` to ignore the variant that isn't matched\n    |\n19  |\
    \         if let Some((i1, c1)) = s1_iter.next() { /* */ }\n    |\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp9zdhatxd.rs:18:21\n   |\n18 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp9zdhatxd.rs:19:19\n\
    \   |\n19 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0.chars().nth(i) != s1.chars().nth(i) {\n            return false;\n\
    \        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp2van52l.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    let mut i = 0;\n    while\
    \ i < s0.len() && i < s1.len() {\n        if s0_iter.next().unwrap().1 != s1_iter.next().unwrap().1\
    \ {\n            return false;\n        }\n        i += 1;\n    }\n    i == s0.len()\
    \ && i == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpodfsa8k0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp588vjs2n.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp588vjs2n.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx346f0d8.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx346f0d8.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx346f0d8.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx346f0d8.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp99jakwj6.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    \    = note: the matched value is of type `Option<(usize, char)>`\nhelp: you might\
    \ want to use `if let` to ignore the variant that isn't matched\n    |\n18  |\
    \         if let Some((i1, c1)) = s1_iter.next() { /* */ }\n    |\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp99jakwj6.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp99jakwj6.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx346f0d8.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx346f0d8.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp588vjs2n.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp588vjs2n.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        while let Some((i1, c1)) = s1_iter.next() {\n    \
    \        if c0 != c1 {\n                return false;\n            }\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6918p_l0.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpx346f0d8.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpx346f0d8.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0.chars().nth(i) != s1.chars().nth(i) {\n      \
    \      return false;\n        }\n        i += 1;\n    }\n    i == s0.len() &&\
    \ i == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp5acivt9x.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp588vjs2n.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp588vjs2n.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    for i in 0..s0.len() {\n        if s0[i] != s1[i] {\n   \
    \         return false;\n        }\n    }\n    return true;\n}\n\nfn main() {\n\
    \    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpkbhpipli.rs:19:12\n\
    \   |\n19 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpkbhpipli.rs:19:21\n   |\n19 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp99jakwj6.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    \    = note: the matched value is of type `Option<(usize, char)>`\nhelp: you might\
    \ want to use `if let` to ignore the variant that isn't matched\n    |\n18  |\
    \         if let Some((i1, c1)) = s1_iter.next() { /* */ }\n    |\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp99jakwj6.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp99jakwj6.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars();\n    let mut\
    \ s1_iter = s1.chars();\n    while let Some(mut s0) = s0_iter.next() {\n     \
    \   if let Some(mut s1) = s1_iter.next() {\n            if s0 != s1 {\n      \
    \          return false;\n            }\n        } else {\n            return\
    \ false;\n        }\n    }\n    true\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1uu8h1vi.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else {\n            return false;\n     \
    \   }\n    }\n    i == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpt2k9hkvr.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpt2k9hkvr.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp6weh0tsb.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749752
