name: HumanEval_131_digits
language: rs
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n/// 1\n\
  /// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!(candidate(5),\
  \ 5);\n    assert_eq!(candidate(54), 5);\n    assert_eq!(candidate(120), 1);\n \
  \   assert_eq!(candidate(5014), 5);\n    assert_eq!(candidate(98765), 315);\n  \
  \  assert_eq!(candidate(5576543), 2625);\n    assert_eq!(candidate(2468), 0);\n\
  }\n"
completions: ["    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else\
    \ {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n % 10\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n       \
    \ n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n  \
    \      0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n  \
    \      digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n / 2\n    }", "    let mut product = 1;\n    for digit in n.digits().take(n.len()\
    \ / 2) {\n        product *= digit;\n    }\n    if product % 2 == 0 {\n      \
    \  0\n    } else {\n        product\n    }", "    let mut product = 1;\n    for\
    \ d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n    \
    \    }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n       \
    \ n / 2\n    }", "    let mut product = 1;\n    for digit in n.digits().take(n.len()\
    \ / 2) {\n        product *= digit;\n    }\n    if product % 2 == 0 {\n      \
    \  0\n    } else {\n        product\n    }", "    let mut product = 1;\n    for\
    \ digit in n.digits() {\n        if digit % 2 == 0 {\n            product *= digit;\n\
    \        }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n / 2\n    }", "    let mut product = 1;\n    for d in n.digits() as\
    \ isize {\n        if d % 2 == 1 {\n            product *= d;\n        }\n   \
    \ }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n /\
    \ 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n \
    \   }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", "    if n % 2\
    \ == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n      \
    \  0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n    while\
    \ n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n      \
    \  0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n    for\
    \ digit in n.digits() {\n        if digit % 2 == 1 {\n            product *= digit;\n\
    \        }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n / 2\n    }", "    let mut product = 1;\n    for d in n.digits() as\
    \ isize {\n        if d % 2 == 1 {\n            product *= d;\n        }\n   \
    \ }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  '    n.checked_mul(2).unwrap()', "    let mut product = 1;\n    while n > 0 {\n\
    \        product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n     \
    \   0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n\
    \    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n % 10\n    }", "    let mut product = 1;\n    for d in\
    \ n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n        }\n\
    \    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n   \
    \     product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2\
    \ == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n \
    \   while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    let mut product = 1;\n    for digit in\
    \ n.to_string().chars().filter(|c| c != '0').take(10) {\n        product *= digit\
    \ as isize;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    let mut product = 1;\n    let mut digits = n.to_digits();\n\
    \    while !digits.is_empty() {\n        if digits.len() % 2 == 1 {\n        \
    \    product *= digits.last().unwrap();\n        }\n        digits.remove(digits.len()\
    \ - 1);\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n % 10\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n     \
    \   digits(n / 2)\n    }", "    let mut product = 1;\n    while n > 0 {\n    \
    \    product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n % 2\
    \ == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n      \
    \  0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        n\n \
    \   } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n % 10\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n       \
    \ n / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n        product\
    \ *= n % 10;\n        n /= 10;\n    }\n    if n == 0 {\n        product\n    }\
    \ else {\n        0\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    let mut product = 1;\n    for digit in n.digits().take(n.digits()\
    \ - 1) {\n        if digit % 2 == 1 {\n            product *= digit;\n       \
    \ }\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n    \
    \    digits(n / 2)\n    }", "    let mut product = 1;\n    for &d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    match n % 10 {\n        0 => 1,\n        1 => 1,\n        2\
    \ => 1,\n        3 => 2,\n        4 => 3,\n        5 => 4,\n        6 => 5,\n\
    \        7 => 6,\n        8 => 7,\n        9 => 8,\n        _ => 0,\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n      \
    \  0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n    for\
    \ d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n    \
    \    }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n       \
    \ n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n\
    \ / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    match n % 10 {\n        0 => n,\n        1 => 1,\n        _ => digits(n / 10)\
    \ * 10 + n % 10,\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n    \
    \    n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n /\
    \ 2\n    }", "    let mut product = 1;\n    for &d in n.to_string().chars().skip(1)\
    \ {\n        product *= d;\n    }\n    if product % 2 == 0 {\n        0\n    }\
    \ else {\n        product\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n  \
    \      n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ % 10\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n        0\n    }", "  \
    \  if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut\
    \ product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    if n == 0 {\n        product\n    } else {\n        0\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product\
    \ *= n % 10;\n            n /= 10;\n        } else {\n            product *= n\
    \ % 10;\n            n /= 10;\n        }\n    }\n    product", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n % 10\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n      \
    \  0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n \
    \   } else {\n        n / 2\n    }", "    let mut product = 1;\n    for digit\
    \ in n.digits().take(n.len() / 2) {\n        product *= digit;\n    }\n    if\
    \ product % 2 == 0 {\n        0\n    } else {\n        product\n    }", "    if\
    \ n % 2 == 0 {\n        0\n    } else {\n        n % 10\n    }", "    let mut\
    \ product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n\
    \    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        n\n    } else {\n        digits(n / 2)\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n \
    \   for digit in n.digits() {\n        if digit % 2 == 0 {\n            product\
    \ *= digit;\n        } else {\n            return 0;\n        }\n    }\n    product",
  "    n.checked_mul(2).expect(\"n must be positive\")\n        .checked_div(10).expect(\"\
    n must be positive\")\n        .checked_div(10).expect(\"n must be positive\"\
    )\n        .unwrap_or(0)", "    if n % 2 == 0 {\n        0\n    } else {\n   \
    \     n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    let mut product = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n\
    \            product *= n % 10;\n        }\n        n /= 10;\n    }\n    product",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n \
    \   for d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n\
    \        }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n      \
    \  n % 10\n    }", "    let mut product = 1;\n    for digit in n.digits().cloned()\
    \ {\n        if digit % 2 == 1 {\n            product *= digit;\n        }\n \
    \   }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n\
    \    }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n % 2 ==\
    \ 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut product =\
    \ 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n % 10;\n\
    \        }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n    \
    \    0\n    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n   \
    \     if n % 2 == 1 {\n            product *= n % 10;\n            n /= 10;\n\
    \        } else {\n            product *= n % 10;\n            n /= 10;\n    \
    \    }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    let mut product = 1;\n    let mut digits = n.to_digits();\n\
    \    while digits.len() > 0 {\n        if digits.len() % 2 == 1 {\n          \
    \  product *= digits.pop().unwrap();\n        } else {\n            product *=\
    \ digits.pop().unwrap();\n            product *= digits.pop().unwrap();\n    \
    \    }\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n \
    \       n / 2\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n       \
    \ n / 2\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n        0\n  \
    \  }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let\
    \ mut product = 1;\n    for digit in n.digits() {\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n    }\n    product", "    if n % 2\
    \ == 0 {\n        n\n    } else {\n        0\n    }", "    let mut product = 1;\n\
    \    for d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n\
    \        }\n    }\n    product", "    let mut product = 1;\n    while n > 0 {\n\
    \        product *= n % 10;\n        n /= 10;\n    }\n    product", "    if n\
    \ % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut product\
    \ = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n %\
    \ 10;\n        }\n        n /= 10;\n    }\n    product", "    let mut product\
    \ = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n            product *= n %\
    \ 10;\n        }\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n\
    \        0\n    } else {\n        n / 2\n    }", "    let mut product = 1;\n \
    \   for d in n.digits() {\n        if d % 2 == 1 {\n            product *= d;\n\
    \        }\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n\
    \        digits(n / 2)\n    }", "    let mut product = 1;\n    for digit in n.digits().cloned()\
    \ {\n        if digit % 2 == 0 {\n            product *= digit;\n        }\n \
    \   }\n    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n\
    \ % 10\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    if n\
    \ % 2 == 0 {\n        n\n    } else {\n        digits(n / 2)\n    }", "    let\
    \ mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /=\
    \ 10;\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n  \
    \      0\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        n * digits(n / 2)\n    } else {\n     \
    \   0\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    debug_assert!(n % 2 == 0);\n    let mut product = 1;\n    for d in n.digits()\
    \ as isize {\n        product *= d;\n    }\n    product", "    let mut product\
    \ = 1;\n    for digit in n.digits().take(n.len() / 2) {\n        product *= digit;\n\
    \    }\n    if product % 2 == 0 {\n        0\n    } else {\n        product\n\
    \    }", "    let mut product = 1;\n    while n > 0 {\n        product *= n %\
    \ 10;\n        n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n\
    \    } else {\n        n / 2\n    }", "    let mut product = 1;\n    while n >\
    \ 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n    product", "  \
    \  if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }", "    let mut\
    \ product = 1;\n    let mut digits = n.to_string().chars().collect::<Vec<_>>();\n\
    \    for d in digits {\n        if d % 2 == 1 {\n            product *= d;\n \
    \       }\n    }\n    product", "    if n % 2 == 0 {\n        n\n    } else {\n\
    \        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        n\n    } else {\n\
    \        digits(n / 2)\n    }", "    if n % 2 == 0 {\n        0\n    } else {\n\
    \        n / 2\n    }", "    let mut product = 1;\n    while n > 0 {\n       \
    \ product *= n % 10;\n        n /= 10;\n    }\n    product", "    let mut product\
    \ = 1;\n    while n > 0 {\n        product *= n % 10;\n        n /= 10;\n    }\n\
    \    product", "    if n % 2 == 0 {\n        0\n    } else {\n        n % 10\n\
    \    }", "    if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }",
  "    let mut product = 1;\n    while n > 0 {\n        product *= n % 10;\n     \
    \   n /= 10;\n    }\n    product", "    if n % 2 == 0 {\n        0\n    } else\
    \ {\n        n % 10\n    }", "    let mut product = 1;\n    for d in n.digits()\
    \ {\n        if d % 2 == 1 {\n            product *= d;\n        }\n    }\n  \
    \  product", "    let mut product = 1;\n    while n > 0 {\n        if n % 2 ==\
    \ 1 {\n            product *= n % 10;\n            n /= 10;\n        } else {\n\
    \            product *= n % 10;\n            n /= 10;\n        }\n    }\n    product",
  "    let mut product = 1;\n    while n > 0 {\n        if n % 2 == 1 {\n        \
    \    product *= n % 10;\n        }\n        n /= 10;\n    }\n    product", " \
    \   if n % 2 == 0 {\n        0\n    } else {\n        n / 2\n    }"]
stop_tokens:
- "\n}"
