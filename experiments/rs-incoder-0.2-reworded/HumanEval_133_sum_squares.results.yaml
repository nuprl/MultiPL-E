language: rs
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.round() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpg35z7p1z.rs:16:42\n   |\n16 |     lst.iter().map(|x| x.round() as f64).sum::<isize>()\n\
    \   |                                          ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for num in lst {\n        sum += num * num;\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qbnlle1.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp551rhk4e.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.round() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8txa3hmw.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.round() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0).ceil() as f64;\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnv2ksc80.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp551rhk4e.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powi(2);\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdtu1wrpz.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx92icv7m.rs:20:12\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpfbftqkvo.rs:16:45\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64\
    \ * x).sum::<isize>()\n   |                                             ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfiu1jpkn.rs:18:13\n\
    \   |\n18 |         sum += x * x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powi(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpomi6ifzd.rs:18:13\n\
    \   |\n18 |         sum += x.powi(2);\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst {\n        sum += v * v;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp12ici0a2.rs:18:13\n\
    \   |\n18 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpc2_v9t6g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.pow(2);\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpamwts4a9.rs:18:18\n   |\n18 |         sum += x.pow(2);\n\
    \   |                  ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpamwts4a9.rs:20:5\n\
    \   |\n15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n20 |     sum\n\
    \   |     ^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpfbftqkvo.rs:16:45\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64\
    \ * x).sum::<isize>()\n   |                                             ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpc2_v9t6g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for num in lst {\n        sum += num * num;\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1qbnlle1.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.pow(2);\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpamwts4a9.rs:18:18\n   |\n18 |         sum += x.pow(2);\n\
    \   |                  ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpamwts4a9.rs:20:5\n\
    \   |\n15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n20 |     sum\n\
    \   |     ^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75go6911.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp551rhk4e.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpfbftqkvo.rs:16:45\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64\
    \ * x).sum::<isize>()\n   |                                             ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp551rhk4e.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75go6911.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for v in lst.iter() {\n        sum += v * v;\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpluaaiid1.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpfbftqkvo.rs:16:45\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64\
    \ * x).sum::<isize>()\n   |                                             ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfiu1jpkn.rs:18:13\n\
    \   |\n18 |         sum += x * x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst.iter() {\n        sum += v * v;\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphb3y2yrc.rs:18:13\n\
    \   |\n18 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpc2_v9t6g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powi(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpomi6ifzd.rs:18:13\n\
    \   |\n18 |         sum += x.powi(2);\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for num in lst.iter() {\n        sum += num * num;\n    }\n    sum.round();\n\
    \    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxjfjc1zi.rs:21:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n21 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst {\n        sum += v * v;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp12ici0a2.rs:18:13\n\
    \   |\n18 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx92icv7m.rs:20:12\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.pow(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpw6axw2ch.rs:18:18\n   |\n18 |         sum += x.pow(2);\n\
    \   |                  ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfiu1jpkn.rs:18:13\n\
    \   |\n18 |         sum += x * x;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powi(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpomi6ifzd.rs:18:13\n\
    \   |\n18 |         sum += x.powi(2);\n   |             ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75go6911.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst {\n        sum += v * v;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp12ici0a2.rs:18:13\n\
    \   |\n18 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpc2_v9t6g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpfbftqkvo.rs:16:45\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64\
    \ * x).sum::<isize>()\n   |                                             ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst {\n        sum += v * v;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp12ici0a2.rs:18:13\n\
    \   |\n18 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpors2l23e.rs:16:41\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64).sum::<isize>()\n\
    \   |                                         ^^^ the trait `Sum<f64>` is not\
    \ implemented for `isize`\n   |\n   = help: the following implementations were\
    \ found:\n             <isize as Sum<&'a isize>>\n             <isize as Sum>\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp551rhk4e.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpc2_v9t6g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for x in lst {\n        sum += x.powf(2);\n    }\n    sum\n}\n\nfn\
    \ main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgel7adjn.rs:18:23\n   |\n\
    18 |         sum += x.powf(2);\n   |                       ^\n   |           \
    \            |\n   |                       expected `f64`, found integer\n   |\
    \                       help: use a float literal: `2.0`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpgel7adjn.rs:18:13\n   |\n18 |\
    \         sum += x.powf(2);\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.pow(2.0);\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `pow` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpn6qp8h7a.rs:18:18\n   |\n18 |         sum += x.pow(2.0);\n\
    \   |                  ^^^ help: there is an associated function with a similar\
    \ name: `powf`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn6qp8h7a.rs:20:5\n\
    \   |\n15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                   \
    \               ----- expected `isize` because of return type\n...\n20 |     sum\n\
    \   |     ^^^ expected `isize`, found floating-point number\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x.powf(2.0);\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx92icv7m.rs:20:12\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     return sum;\n\
    \   |            ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0.0;\n    for x in lst {\n        sum += x * x;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75go6911.rs:20:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n...\n20 |     sum\n  \
    \ |     ^^^ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 101
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as isize).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `14`', /tmp/tmpc2_v9t6g.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf66gm0hz.rs:16:5\n   |\n\
    15 | fn sum_squares(lst: Vec<f64>) -> isize {\n   |                          \
    \        ----- expected `isize` because of return type\n16 |     lst.iter().map(|x|\
    \ x.ceil() as f64).sum::<f64>()\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `f64`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    let mut sum\
    \ = 0;\n    for v in lst {\n        sum += v * v;\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1.0, 2.0,\
    \ 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 3.0, 5.0, 7.0]), 84);\n    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n\
    \    assert_eq!(candidate(vec![-2.4, 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0,\
    \ 1.0, 15.0, 2.0]), 10230);\n    assert_eq!(candidate(vec![10000.0, 10000.0]),\
    \ 200000000);\n    assert_eq!(candidate(vec![-1.4, 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4,\
    \ 17.9, 18.9, 19.9]), 1086);\n    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp12ici0a2.rs:18:13\n\
    \   |\n18 |         sum += v * v;\n   |             ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x.ceil() as f64 * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmpfbftqkvo.rs:16:45\n   |\n16 |     lst.iter().map(|x| x.ceil() as f64\
    \ * x).sum::<isize>()\n   |                                             ^^^ the\
    \ trait `Sum<f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749257
- exit_code: 1
  program: "/// You are given a vector of numbers.\n/// You need to return the sum\
    \ of squared numbers in the given vector,\n/// round each element in the vector\
    \ to the upper int(Ceiling) first.\n/// Examples:\n/// >>> lst(vec![1.0, 2.0,\
    \ 3.0])\n/// 14\n/// >>> lst(vec![1.0, 4.0, 9.0])\n/// 98\n/// >>> lst(vec![1.0,\
    \ 3.0, 5.0, 7.0])\n/// 84\n/// >>> lst(vec![1.4, 4.2, 0.0])\n/// 29\n/// >>> lst(vec![-2.4,\
    \ 1.0, 1.0])\n/// 6\nfn sum_squares(lst: Vec<f64>) -> isize {\n    lst.iter().map(|x|\
    \ x * x).sum::<isize>()\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1.0, 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0,\
    \ 2.0, 3.0]), 14);\n    assert_eq!(candidate(vec![1.0, 3.0, 5.0, 7.0]), 84);\n\
    \    assert_eq!(candidate(vec![1.4, 4.2, 0.0]), 29);\n    assert_eq!(candidate(vec![-2.4,\
    \ 1.0, 1.0]), 6);\n    assert_eq!(candidate(vec![100.0, 1.0, 15.0, 2.0]), 10230);\n\
    \    assert_eq!(candidate(vec![10000.0, 10000.0]), 200000000);\n    assert_eq!(candidate(vec![-1.4,\
    \ 4.6, 6.3]), 75);\n    assert_eq!(candidate(vec![-1.4, 17.9, 18.9, 19.9]), 1086);\n\
    \    assert_eq!(candidate(vec![0.0]), 0);\n    assert_eq!(candidate(vec![-1.0]),\
    \ 1);\n    assert_eq!(candidate(vec![-1.0, 1.0, 0.0]), 2);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `isize: Sum<f64>` is not satisfied\n  -->\
    \ /tmp/tmp4c6uwnla.rs:16:31\n   |\n16 |     lst.iter().map(|x| x * x).sum::<isize>()\n\
    \   |                               ^^^ the trait `Sum<f64>` is not implemented\
    \ for `isize`\n   |\n   = help: the following implementations were found:\n  \
    \           <isize as Sum<&'a isize>>\n             <isize as Sum>\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749257
