name: HumanEval_105_by_length
language: rs
prompt: "/// Given a vector of integers, sort the integers that are between 1 and\
  \ 9 inclusive,\n/// reverse the resulting vector, and then replace each digit by\
  \ its corresponding name from\n/// \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
  , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n/// For example:\n/// >>> by_length(vec![2,\
  \ 1, 1, 4, 5, 8, 2, 3])\n/// vec![String::from(\"Eight\"), String::from(\"Five\"\
  ), String::from(\"Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"\
  Two\"), String::from(\"One\"), String::from(\"One\")]\n/// If the vector is empty,\
  \ return an empty vector:\n/// >>> by_length(vec![])\n/// vec![]\n/// If the vector\
  \ has any strange number ignore it:\n/// >>> by_length(vec![1, -1, 55])\n/// vec![String::from(\"\
  One\")]\nfn by_length(arr: Vec<isize>) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = by_length;\n    assert_eq!(candidate(vec![2,\
  \ 1, 1, 4, 5, 8, 2, 3]), vec![String::from(\"Eight\"), String::from(\"Five\"), String::from(\"\
  Four\"), String::from(\"Three\"), String::from(\"Two\"), String::from(\"Two\"),\
  \ String::from(\"One\"), String::from(\"One\")]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
  \ Vec::<String>::new());\n    assert_eq!(candidate(vec![1, -1, 55]), vec![String::from(\"\
  One\")]);\n    assert_eq!(candidate(vec![1, -1, 3, 2]), vec![String::from(\"Three\"\
  ), String::from(\"Two\"), String::from(\"One\")]);\n    assert_eq!(candidate(vec![9,\
  \ 4, 8]), vec![String::from(\"Nine\"), String::from(\"Eight\"), String::from(\"\
  Four\")]);\n}\n"
completions: []
stop_tokens:
- "\n}"
