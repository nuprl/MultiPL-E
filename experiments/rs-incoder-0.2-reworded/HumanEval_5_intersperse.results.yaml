language: rs
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpmkwf1jnt.rs:9:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp40rv9_x0.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp_c8uikh3.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, delimeter);\n  \
    \  numbers_clone.insert(0, 0);\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 7, 0]`,\n right: `[]`', /tmp/tmpxkovkq3q.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_rs6nazb.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_rs6nazb.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp1szl4_es.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp_c8uikh3.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdadnldvq.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdadnldvq.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number == last_number {\n            last_delimeter += 1;\n       \
    \ } else {\n            result.push(last_number);\n            result.push(last_delimeter);\n\
    \            last_number = number;\n            last_delimeter = delimeter;\n\
    \        }\n    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplwefrb4s.rs:16:25\n   |\n\
    16 |             result.push(last_delimeter);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplwefrb4s.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| {\n        if n % delimeter ==\
    \ 0 {\n            Some(n / delimeter)\n        } else {\n            None\n \
    \       }\n    });\n    numbers_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppa9ex62g.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     numbers_iter.collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(0) {\n  \
    \      result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpurum1si3.rs:9:39\n  |\n9 |\
    \     while numbers_iter.next() != Some(0) {\n  |                            \
    \           ^\n  |                                       |\n  |              \
    \                         expected `&isize`, found integer\n  |              \
    \                         help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpurum1si3.rs:11:21\n   |\n11 |         result.push(delimeter);\n\
    \   |                     ^^^^^^^^^\n   |                     |\n   |        \
    \             expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpurum1si3.rs:14:5\n   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n   |                                               \
    \           ---------- expected `Vec<isize>` because of return type\n...\n14 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpxuoiwhqz.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_delimeter = delimeter;\n\
    \    loop {\n        let next = numbers_iter.next();\n        if let Some(next)\
    \ = next {\n            result.push(next);\n            current_delimeter += 1;\n\
    \        }\n        else {\n            break;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6iwggbap.rs:20:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n20 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\
    \    let mut result = vec![];\n    for i in 0..numbers.len() - 1 {\n        result.push(numbers_copy[i]);\n\
    \        result.push(delimeter);\n        result.push(numbers_copy[i + 1]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n --> /tmp/tmpbh9yxwf_.rs:7:9\n\
    \  |\n7 |     let mut numbers_copy = numbers;\n  |         ----^^^^^^^^^^^^\n\
    \  |         |\n  |         help: remove this `mut`\n  |\n  = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `numbers`\n --> /tmp/tmpbh9yxwf_.rs:9:17\n\
    \  |\n6 | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n  |                ------- move occurs because `numbers` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n7 |     let mut numbers_copy = numbers;\n\
    \  |                            ------- value moved here\n8 |     let mut result\
    \ = vec![];\n9 |     for i in 0..numbers.len() - 1 {\n  |                 ^^^^^^^\
    \ value borrowed here after move\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp3gq6_rlv.rs:9:5\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^^------^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |             |      |\n  |     |             |      immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp_7grnztn.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpuuv2zkrr.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuuv2zkrr.rs:11:21\n   |\n11 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuuv2zkrr.rs:13:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp_c8uikh3.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(0) {\n  \
    \      result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp81_i6ty5.rs:10:41

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ \n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_t26vq.rs:70:25\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                                    \
    \ - closing delimiter possibly meant for this\n...\n70 |     numbers_clone.insert(0,\
    \ \n   |                         ^ unclosed delimiter\n71 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpai_t26vq.rs:70:19\n     |\n70   |     numbers_clone.insert(0,\
    \ \n     |                   ^^^^^^ - supplied 1 argument\n     |            \
    \       |\n     |                   expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpai_t26vq.rs:70:5\n\
    \   |\n6  |   fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                            ----------\
    \ expected `Vec<isize>` because of return type\n...\n70 | /     numbers_clone.insert(0,\
    \ \n71 | | }\n   | |_^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\nnote: method `insert`\
    \ modifies its receiver in-place\n  --> /tmp/tmpai_t26vq.rs:70:19\n   |\n70 |\
    \     numbers_clone.insert(0, \n   |     ------------- ^^^^^^ this call modifies\
    \ `numbers_clone` in-place\n   |     |\n   |     you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `insert`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp1szl4_es.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdadnldvq.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdadnldvq.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp31ofn88u.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp31ofn88u.rs:14:23\n   |\n14 |         last_number\
    \ = number;\n   |                       ^^^^^^\n   |                       |\n\
    \   |                       expected enum `Option`, found `&isize`\n   |     \
    \                  help: try using a variant of the expected enum: `Some(number)`\n\
    \   |\n   = note:   expected enum `Option<&isize>`\n           found reference\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp31ofn88u.rs:16:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp40rv9_x0.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&numbers_clone);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpv6n782fd.rs:9:5\n  |\n9 |     numbers_clone.extend_from_slice(&numbers_clone);\n\
    \  |     ^^^^^^^^^^^^^^-----------------^--------------^\n  |     |          \
    \   |                 |\n  |     |             |                 immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpyo0a15aq.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmph0y5kxdq.rs:9:5\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^^------^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |             |      |\n  |     |             |      immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next().is_some() {\n   \
    \     result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjmj81c68.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjmj81c68.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.next());\n        result.push(delimeter);\n\
    \    }\n    result.extend_from_slice(numbers_iter);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8runuh3b.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected enum `Option`, found\
    \ `isize`\n   |                     help: try using a variant of the expected\
    \ enum: `Some(delimeter)`\n   |\n   = note: expected enum `Option<isize>`\n  \
    \            found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8runuh3b.rs:13:30\n\
    \   |\n13 |     result.extend_from_slice(numbers_iter);\n   |                \
    \              ^^^^^^^^^^^^ expected `&[Option<isize>]`, found struct `Cloned`\n\
    \   |\n   = note: expected reference `&[Option<isize>]`\n                 found\
    \ struct `Cloned<std::slice::Iter<'_, isize>>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8runuh3b.rs:14:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     result\n   |     ^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ \n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_t26vq.rs:70:25\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                                    \
    \ - closing delimiter possibly meant for this\n...\n70 |     numbers_clone.insert(0,\
    \ \n   |                         ^ unclosed delimiter\n71 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpai_t26vq.rs:70:19\n     |\n70   |     numbers_clone.insert(0,\
    \ \n     |                   ^^^^^^ - supplied 1 argument\n     |            \
    \       |\n     |                   expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpai_t26vq.rs:70:5\n\
    \   |\n6  |   fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                            ----------\
    \ expected `Vec<isize>` because of return type\n...\n70 | /     numbers_clone.insert(0,\
    \ \n71 | | }\n   | |_^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\nnote: method `insert`\
    \ modifies its receiver in-place\n  --> /tmp/tmpai_t26vq.rs:70:19\n   |\n70 |\
    \     numbers_clone.insert(0, \n   |     ------------- ^^^^^^ this call modifies\
    \ `numbers_clone` in-place\n   |     |\n   |     you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `insert`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdadnldvq.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdadnldvq.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp40rv9_x0.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(delimeter));\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpu4t9sdvw.rs:9:69\n  |\n9 |\
    \     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(delimeter));\n\
    \  |                                                                     ^^^^^^^^^\
    \ expected `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(delimeter.try_into().unwrap()));\n\
    \  |                                                                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(&numbers_clone[1..]);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpw_jtrly2.rs:9:5\n  |\n9 |     numbers_clone.extend(&numbers_clone[1..]);\n\
    \  |     ^^^^^^^^^^^^^^------^^-------------^^^^^^\n  |     |             |  \
    \     |\n  |     |             |       immutable borrow occurs here\n  |     |\
    \             immutable borrow later used by call\n  |     mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpqd5z3_32.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpyaz90udg.rs:9:11\n  |\n9 |\
    \     while numbers_iter.next() {\n  |           ^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found enum `Option`\n  |\n  = note: expected type `bool`\n         \
    \    found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyaz90udg.rs:11:21\n\
    \   |\n11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyaz90udg.rs:13:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0wknr2v.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo0wknr2v.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.cloned().next().unwrap());\n        result.push(delimeter);\n\
    \    }\n    result.extend(numbers_iter);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n  --> /tmp/tmpdjw6dogr.rs:10:34\n   |\n10 |       \
    \  result.push(numbers_iter.cloned().next().unwrap());\n   |                 \
    \                 ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected\
    \ reference `&isize`\n              found reference `&&_`\n   = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: the method `next` exists for struct `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpdjw6dogr.rs:10:43\n\
    \   |\n10 |           result.push(numbers_iter.cloned().next().unwrap());\n  \
    \ |                                             ^^^^ method cannot be called on\
    \ `Cloned<Cloned<std::slice::Iter<'_, isize>>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Cloned<std::slice::Iter<'_,\
    \ isize>> as Iterator>::Item = &_`\n           which is required by `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\
    \    numbers_copy.extend(vec![delimeter; numbers_copy.len()]);\n    numbers_copy.extend(vec![delimeter;\
    \ numbers_copy.len()]);\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 3, 2, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]`,\n right: `[5, 8, 6, 8, 3,\
    \ 8, 2]`', /tmp/tmpeuxkqep0.rs:16:5\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpt8nijiql.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number != last_number {\n            result.push(last_number);\n  \
    \          last_number = number;\n            last_delimeter = delimeter;\n  \
    \      }\n        last_delimeter += 1;\n        result.push(last_delimeter);\n\
    \    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc74zcyd0.rs:18:21\n   |\n\
    18 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpc74zcyd0.rs:21:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ \n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_t26vq.rs:70:25\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                                    \
    \ - closing delimiter possibly meant for this\n...\n70 |     numbers_clone.insert(0,\
    \ \n   |                         ^ unclosed delimiter\n71 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpai_t26vq.rs:70:19\n     |\n70   |     numbers_clone.insert(0,\
    \ \n     |                   ^^^^^^ - supplied 1 argument\n     |            \
    \       |\n     |                   expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpai_t26vq.rs:70:5\n\
    \   |\n6  |   fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                            ----------\
    \ expected `Vec<isize>` because of return type\n...\n70 | /     numbers_clone.insert(0,\
    \ \n71 | | }\n   | |_^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\nnote: method `insert`\
    \ modifies its receiver in-place\n  --> /tmp/tmpai_t26vq.rs:70:19\n   |\n70 |\
    \     numbers_clone.insert(0, \n   |     ------------- ^^^^^^ this call modifies\
    \ `numbers_clone` in-place\n   |     |\n   |     you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `insert`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl5nlnzvb.rs:19:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpfkeq0x1r.rs:9:19\n\
    \  |\n9 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                   ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut current_number = 0;\n    while let\
    \ Some(number) = numbers_iter.next() {\n        result.push(number);\n       \
    \ if current_number != 0 {\n            result.push(delimeter);\n        }\n \
    \       current_number += number;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppav9aoch.rs:13:25\n   |\n\
    13 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppav9aoch.rs:17:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut delimeter_iter = delimeter.iter();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        if let Some(delimeter) = delimeter_iter.next() {\n            result.push(delimeter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpl63rbr7o.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl63rbr7o.rs:16:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    while let Some(number) = {\n        let mut current = last_number;\n    \
    \    last_number = number;\n        result.push(current);\n        if numbers_iter.next().is_some()\
    \ {\n            result.push(delimeter);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `result`\n  --> /tmp/tmp93w0bx2p.rs:18:5\n \
    \  |\n18 |     result\n   |     ^^^^^^\n   |     |\n   |     expected `{`\n  \
    \ |     help: try placing this code inside a block: `{ result }`\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        if number == last_number {\n            result.push(last_delimeter);\n\
    \            last_delimeter = delimeter;\n        } else {\n            result.push(number);\n\
    \            last_delimeter = delimeter;\n        }\n        last_number = number;\n\
    \    }\n    result.push(last_delimeter);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp1rdw4fk_.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for number in numbers_iter.by_ref() {\n   \
    \     result.push(number);\n        result.push(delimeter);\n        result.push(number);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp68jo7k19.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp68jo7k19.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpjomqgadu.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&numbers_clone.iter().cloned());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkblna6i1.rs:9:37\n  |\n9 |\
    \     numbers_clone.extend_from_slice(&numbers_clone.iter().cloned());\n  |  \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected slice\
    \ `[isize]`, found struct `Cloned`\n  |\n  = note: expected reference `&[isize]`\n\
    \             found reference `&Cloned<std::slice::Iter<'_, isize>>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len()]);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2));\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmp13bc_f3o.rs:10:5\n   |\n10 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2));\n   |     ^^^^^^^^^^^^^^------^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |     |             |      |\n   |     |             |      immutable borrow\
    \ occurs here\n   |     |             immutable borrow later used by call\n  \
    \ |     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp_c8uikh3.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\
    \    numbers_copy.extend(vec![delimeter; numbers_copy.len()]);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 3, 2, 8, 8, 8, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpy5u1ifkx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut current_number = 0;\n    while let\
    \ Some(number) = numbers_iter.next() {\n        result.push(current_number);\n\
    \        result.push(number);\n        current_number = number;\n    }\n    result.push(current_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz2vvc0k8.rs:12:21\n   |\n\
    12 |         result.push(number);\n   |                     ^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \       result.push(*number);\n   |                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz2vvc0k8.rs:13:26\n   |\n13 |         current_number =\
    \ number;\n   |                          ^^^^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n13 |         current_number\
    \ = *number;\n   |                          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(0) {\n  \
    \      result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp81_i6ty5.rs:10:41

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.cloned().next().unwrap());\n        result.push(delimeter);\n\
    \    }\n    result.extend(numbers_iter);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n  --> /tmp/tmpdjw6dogr.rs:10:34\n   |\n10 |       \
    \  result.push(numbers_iter.cloned().next().unwrap());\n   |                 \
    \                 ^^^^^^ expected `isize`, found reference\n   |\n   = note: expected\
    \ reference `&isize`\n              found reference `&&_`\n   = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0599]: the method `next` exists for struct `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>`, but its trait bounds were not satisfied\n  --> /tmp/tmpdjw6dogr.rs:10:43\n\
    \   |\n10 |           result.push(numbers_iter.cloned().next().unwrap());\n  \
    \ |                                             ^^^^ method cannot be called on\
    \ `Cloned<Cloned<std::slice::Iter<'_, isize>>>` due to unsatisfied trait bounds\n\
    \   |\n   = note: the following trait bounds were not satisfied:\n           `<Cloned<std::slice::Iter<'_,\
    \ isize>> as Iterator>::Item = &_`\n           which is required by `Cloned<Cloned<std::slice::Iter<'_,\
    \ isize>>>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&numbers[1..]);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''range start index 1 out of range for slice
    of length 0'', /tmp/tmpp403gsqv.rs:9:38

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmg0e2mwi.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmg0e2mwi.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpxuoiwhqz.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpt1o3u38q.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpt1o3u38q.rs:11:21\n   |\n11 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt1o3u38q.rs:14:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmp6_dgs2iq.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut delimeter_iter = delimeter.iter();\n\
    \    while numbers_iter.any() || delimeter_iter.any() {\n        if numbers_iter.any()\
    \ {\n            result.push(numbers_iter.next().unwrap());\n        }\n     \
    \   if delimeter_iter.any() {\n            result.push(delimeter_iter.next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpa9gr9cs4.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n    --> /tmp/tmpa9gr9cs4.rs:10:24\n     |\n10   |     while numbers_iter.any()\
    \ || delimeter_iter.any() {\n     |                        ^^^- supplied 0 arguments\n\
    \     |                        |\n     |                        expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpa9gr9cs4.rs:11:25\n\
    \     |\n11   |         if numbers_iter.any() {\n     |                      \
    \   ^^^- supplied 0 arguments\n     |                         |\n     |      \
    \                   expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa9gr9cs4.rs:18:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(&numbers_clone[1..]);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpw_jtrly2.rs:9:5\n  |\n9 |     numbers_clone.extend(&numbers_clone[1..]);\n\
    \  |     ^^^^^^^^^^^^^^------^^-------------^^^^^^\n  |     |             |  \
    \     |\n  |     |             |       immutable borrow occurs here\n  |     |\
    \             immutable borrow later used by call\n  |     mutable borrow occurs\
    \ here\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        if number == last_number {\n            last_delimeter += 1;\n  \
    \      } else {\n            result.push(last_number);\n            result.push(last_delimeter);\n\
    \            last_number = number;\n            last_delimeter = delimeter;\n\
    \        }\n    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nrz5uk1.rs:16:25\n   |\n\
    16 |             result.push(last_delimeter);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4nrz5uk1.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqnuapsc1.rs:9:11\n  |\n9 |\
    \     while numbers_iter.next() {\n  |           ^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found enum `Option`\n  |\n  = note: expected type `bool`\n         \
    \    found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqnuapsc1.rs:11:21\n\
    \   |\n11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpqnuapsc1.rs:14:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp4hnd3xq_.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpfkeq0x1r.rs:9:19\n\
    \  |\n9 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                   ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for n in numbers_iter.by_ref() {\n        result.push(*n);\n\
    \        if result.len() > delimeter {\n            result.push(delimeter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkowhf6k4.rs:11:27\n   |\n\
    11 |         if result.len() > delimeter {\n   |                           ^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n11 |         if\
    \ result.len() > delimeter.try_into().unwrap() {\n   |                       \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpmkwf1jnt.rs:9:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp4hnd3xq_.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp40rv9_x0.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&vec![delimeter; numbers_clone.len()]);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 3, 2, 8, 8, 8, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpc9019tw7.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for n in numbers_iter.by_ref() {\n        result.push(*n);\n\
    \        result.push(delimeter);\n        result.push(*n);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 5, 6, 8, 6, 3, 8, 3, 2, 8, 2]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpx28iirjj.rs:20:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, numbers_clone.first());\n    numbers_clone.insert(0,\
    \ numbers_clone.last());\n    numbers_clone.insert(numbers_clone.len() - 1, delimeter);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpr98sn1lr.rs:8:29\n  |\n8 |\
    \     numbers_clone.insert(0, numbers_clone.first());\n  |                   \
    \          ^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n  |\n\
    \  = note: expected type `isize`\n             found enum `Option<&isize>`\n\n\
    error[E0308]: mismatched types\n --> /tmp/tmpr98sn1lr.rs:9:29\n  |\n9 |     numbers_clone.insert(0,\
    \ numbers_clone.last());\n  |                             ^^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found enum `Option`\n  |\n  = note: expected type `isize`\n\
    \             found enum `Option<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number != last_number {\n            result.push(last_number);\n  \
    \          last_number = number;\n            last_delimeter = delimeter;\n  \
    \      } else {\n            last_delimeter += 1;\n        }\n        result.push(last_delimeter);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxznw3jy9.rs:19:21\n   |\n\
    19 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxznw3jy9.rs:21:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp4any42k6.rs:9:5\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^^------^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |             |      |\n  |     |             |      immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpsrn_796m.rs:9:19\n\
    \  |\n9 |     numbers_clone.extend(numbers_clone.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                   ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpmkwf1jnt.rs:9:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpfkeq0x1r.rs:9:19\n\
    \  |\n9 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                   ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpt8nijiql.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpt1o3u38q.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpt1o3u38q.rs:11:21\n   |\n11 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt1o3u38q.rs:14:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpjomqgadu.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp5lahtgj8.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers_clone.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone.insert(0, delimeter);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 0]`,\n right: `[]`', /tmp/tmpen6vbk25.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next().is_some() {\n   \
    \     result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjmj81c68.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjmj81c68.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(0) {\n  \
    \      result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp81_i6ty5.rs:10:41

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \        .map(|(a, b)| a + delimeter + b)\n        .collect()\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmp3sx06it9.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \  |                         ^^^^^^ expected `isize`, found reference\n  |\n \
    \ = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0599]:\
    \ the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but\
    \ its trait bounds were not satisfied\n  --> /tmp/tmp3sx06it9.rs:7:34\n   |\n\
    7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n  \
    \ |                                    ^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = note: the following trait bounds\
    \ were not satisfied:\n           `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           which is\
    \ required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\nerror[E0271]:\
    \ type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item == &_`\n\
    \ --> /tmp/tmp3sx06it9.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned())\n\
    \  |                                                          ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0271, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number != last_number + 1 {\n  \
    \          result.push(last_number);\n            last_number = number;\n    \
    \    }\n        result.push(number);\n    }\n    result.push(last_number);\n \
    \   result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6jtbc681.rs:11:19\n\
    \   |\n11 |         if number != last_number + 1 {\n   |                   ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6jtbc681.rs:18:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n18 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.next());\n    }\n    result.extend(numbers_iter);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `Vec<Option<isize>>: Extend<isize>` is not\
    \ satisfied\n  --> /tmp/tmpt7d2izm0.rs:12:12\n   |\n12 |     result.extend(numbers_iter);\n\
    \   |            ^^^^^^ the trait `Extend<isize>` is not implemented for `Vec<Option<isize>>`\n\
    \   |\n   = help: the following implementations were found:\n             <Vec<T,\
    \ A> as Extend<&'a T>>\n             <Vec<T, A> as Extend<T>>\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt7d2izm0.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<Option<isize>>`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0, 0);\n    numbers_clone.insert(0,\
    \ \n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpai_t26vq.rs:70:25\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                                    \
    \ - closing delimiter possibly meant for this\n...\n70 |     numbers_clone.insert(0,\
    \ \n   |                         ^ unclosed delimiter\n71 | }\n   | ^ mismatched\
    \ closing delimiter\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpai_t26vq.rs:70:19\n     |\n70   |     numbers_clone.insert(0,\
    \ \n     |                   ^^^^^^ - supplied 1 argument\n     |            \
    \       |\n     |                   expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpai_t26vq.rs:70:5\n\
    \   |\n6  |   fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                            ----------\
    \ expected `Vec<isize>` because of return type\n...\n70 | /     numbers_clone.insert(0,\
    \ \n71 | | }\n   | |_^ expected struct `Vec`, found `()`\n   |\n   = note: expected\
    \ struct `Vec<isize>`\n           found unit type `()`\nnote: method `insert`\
    \ modifies its receiver in-place\n  --> /tmp/tmpai_t26vq.rs:70:19\n   |\n70 |\
    \     numbers_clone.insert(0, \n   |     ------------- ^^^^^^ this call modifies\
    \ `numbers_clone` in-place\n   |     |\n   |     you probably want to use this\
    \ value after calling the method...\n   = note: ...instead of the `()` output\
    \ of method `insert`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0061, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpl43q0e13.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for number in numbers_iter.by_ref() {\n   \
    \     result.push(number);\n        result.push(delimeter);\n        result.push(number);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp68jo7k19.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp68jo7k19.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = (numbers_iter.next(), last_number) {\n        result.push(number);\n\
    \        result.push(delimeter);\n        last_number = number;\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpurdnox9u.rs:10:15\n   |\n\
    10 |     while let Some(number) = (numbers_iter.next(), last_number) {\n   | \
    \              ^^^^^^^^^^^^   ---------------------------------- this expression\
    \ has type `(Option<&isize>, Option<&isize>)`\n   |               |\n   |    \
    \           expected tuple, found enum `Option`\n   |\n   = note: expected tuple\
    \ `(Option<&isize>, Option<&isize>)`\n               found enum `Option<_>`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpurdnox9u.rs:13:23\n   |\n13 |  \
    \       last_number = number;\n   |                       ^^^^^^ expected enum\
    \ `Option`, found `isize`\n   |\n   = note: expected enum `Option<&isize>`\n \
    \             found type `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpanqm1g9q.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n  |     ^^^^^^^^^^^^^------^------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut delimeter_iter = delimeter.iter();\n\
    \    let mut delimeter_next = delimeter_iter.next();\n    while let Some(next)\
    \ = delimeter_next {\n        result.push(numbers_iter.next().unwrap());\n   \
    \     result.push(next);\n        delimeter_next = delimeter_iter.next();\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpibex1dou.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpibex1dou.rs:16:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpmkwf1jnt.rs:9:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\
    \    numbers_copy.extend(vec![delimeter; numbers_copy.len()]);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 3, 2, 8, 8, 8, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpy5u1ifkx.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number != last_number + 1 {\n  \
    \          result.push(last_number);\n            last_number = number;\n    \
    \    }\n        result.push(number);\n    }\n    result.push(last_number);\n \
    \   result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6jtbc681.rs:11:19\n\
    \   |\n11 |         if number != last_number + 1 {\n   |                   ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6jtbc681.rs:18:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n18 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmp4hnd3xq_.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() - 1);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len()]);\n    numbers_clone.extend(numbers);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmp5w7klktk.rs:8:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747390
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo0wknr2v.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpo0wknr2v.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(item) = numbers_iter.next()\
    \ {\n        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd8pgm8b4.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd8pgm8b4.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len()]);\n    numbers_clone.extend(numbers_clone.split_last().unwrap());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `(&isize, &[isize])` is not an iterator\n  --> /tmp/tmpm528ih_m.rs:10:26\n\
    \   |\n10 |     numbers_clone.extend(numbers_clone.split_last().unwrap());\n \
    \  |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(&isize, &[isize])`\
    \ is not an iterator\n   |\n   = help: the trait `Iterator` is not implemented\
    \ for `(&isize, &[isize])`\n   = note: required because of the requirements on\
    \ the impl of `IntoIterator` for `(&isize, &[isize])`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:25\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                         ^^^^^^ expected\
    \ `isize`, found reference\n  |\n  = note:   expected type `isize`\n         \
    \ found reference `&_`\n\nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n --> /tmp/tmpwtzu2u1p.rs:7:58\n  |\n7 |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n  |                                      \
    \                    ^^^^^^ expected `isize`, found reference\n  |\n  = note:\
    \   expected type `isize`\n          found reference `&_`\n\nerror[E0599]: the\
    \ method `skip` exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its\
    \ trait bounds were not satisfied\n  --> /tmp/tmpwtzu2u1p.rs:7:67\n   |\n7  |\
    \       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \                                ^^^^ method cannot be called on `Cloned<std::vec::IntoIter<isize>>`\
    \ due to unsatisfied trait bounds\n   |\n   = no"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpojmo4rh9.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747389
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpuuv2zkrr.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuuv2zkrr.rs:11:21\n   |\n11 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuuv2zkrr.rs:13:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747388
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input vector `numbers'\n/// >>> intersperse(vec![], 4)\n/// vec![]\n/// >>>\
    \ intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwsd93cz.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjwsd93cz.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747388
