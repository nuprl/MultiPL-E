language: rs
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpvyleq7k1.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmpvyleq7k1.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpvyleq7k1.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmpvyleq7k1.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for &d in &nums_copy {\n            sum += d;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpy1vnelgf.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmpy1vnelgf.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|&x| {\n   |       -         -----------\
    \ ^^^^ immutable borrow occurs here\n   |       |         |\n   |  _____|    \
    \     mutable borrow later used by call\n   | |\n13 | |         let mut sum =\
    \ 0;\n14 | |         for &d in &nums_copy {\n   | |                    ---------\
    \ second borrow occurs due to use of `nums_copy` in closure\n15 | |          \
    \   sum += d;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______-\
    \ mutable borrow occurs here\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x + sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrt7dtf7.rs:17:66\n   |\n\
    17 |         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                                                                  ^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps41mheys.rs:18:70\n   |\n\
    18 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x +\
    \ sum).unwrap());\n   |                                                      \
    \                ^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n    let mut\
    \ min_sum_pos = 0;\n    let mut max_sum = nums.iter().max().unwrap();\n    let\
    \ mut max_sum_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n  \
    \  let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_pos = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_pos = 0;\n    let \n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp6a2tsq67.rs:59:1\n  \
    \ |\n59 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n    let mut\
    \ max_sum = nums.iter().max().unwrap();\n\n    while nums_copy.len() > 0 {\n \
    \       let mut min_num = nums_copy.iter().min().unwrap();\n        let mut max_num\
    \ = nums_copy.iter().max().unwrap();\n        let mut min_idx = nums_sorted.iter().position(|&x|\
    \ x == min_num).unwrap();\n        let mut max_idx = nums_sorted.iter().position(|&x|\
    \ x == max_num).unwrap();\n        let mut min_sum = nums_sorted[min_idx].checked_add(&sum).unwrap();\n\
    \        let mut max_sum = nums_sorted[max_idx].checked_add(&sum).unwrap();\n\n\
    \        if min_sum < max_sum {\n            nums_sorted.swap(min_idx, max_idx);\n\
    \            nums_sorted.swap(min_idx, max_idx);\n        }\n\n        sum +=\
    \ nums_copy.pop().unwrap();\n    }\n\n    nums_sorted\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplic2i7ls.rs:20:65\n   |\n\
    20 |         let mut min_idx = nums_sorted.iter().position(|&x| x == min_num).unwrap();\n\
    \   |                                                                 ^^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n20 |         let mut min_idx = nums_sorted.iter().position(|&x| x == *min_num).unwrap();\n\
    \   |                                                                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplic2i7ls.rs:21:65\n   |\n21 |         let mut\
    \ max_idx = nums_sorted.iter().position(|&x| x == max_num).unwrap();\n   |   \
    \                                                              ^^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    21 |         let mut max_idx = nums_sorted.iter().position(|&x| x == *max_num).unwrap();\n\
    \   |                                                                 +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplic2i7ls.rs:22:60\n   |\n22 |         let mut\
    \ min_sum = nums_sorted[min_idx].checked_add(&sum).unwrap();\n   |           \
    \                                                 ^^^^ expected `isize`, found\
    \ `&{integer}`\n   |\nhelp: consider removing the borrow\n   |\n22 -         let\
    \ mut min_sum = nums_sorted[min_idx].checked_add(&sum).unwrap();\n22 +       \
    \  let mut min_sum = nums_sorted[min_idx].checked_add(sum).unwrap();\n   | \n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmplic2i7ls.rs:23:60\n   |\n23 |  \
    \       let mut max_sum = nums_sorted[max_idx].checked_add(&sum).unwrap();\n \
    \  |                                                            ^^^^ expected\
    \ `isize`, found `&{integer}`\n   |\nhelp: consider removing the borrow\n   |\n\
    23 -         let mut max_sum = nums_sorted[max_idx].checked_add(&sum).unwrap();\n\
    23 +         let mut max_sum = nums_sorted[max_idx].checked_add(sum).unwrap();\n\
    \   | \n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        let mut digit = 0;\n        while nums_copy[index] >= 10 {\n        \
    \    digit += nums_copy[index] / 10;\n            index += 1;\n        }\n   \
    \     nums_sorted[index] = digit;\n        sum += digit;\n        index += 1;\n\
    \    }\n    nums_sorted.sort_by_key(|&x| sum + x);\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 0, 1, 11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpi655vb71.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut min_sum = 0;\n    let mut min_idx = nums.len() - 1;\n    let mut\
    \ max_idx = nums.len() - 1;\n\n    while nums_copy.len() > 0 {\n        sum +=\
    \ nums_copy.pop().unwrap();\n        if sum > max_sum {\n            max_sum =\
    \ sum;\n            max_idx = nums_copy.len() - 1;\n        }\n        if sum\
    \ < min_sum {\n            min_sum = sum;\n            min_idx = nums_copy.len()\
    \ - 1;\n        }\n    }\n\n    let mut nums_copy = nums.clone();\n    let mut\
    \ sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx\
    \ = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\n    while nums_copy.len()\
    \ > 0 {\n        sum += nums_copy.pop().unwrap();\n        if sum > max_sum {\n\
    \            max_sum = sum;\n            max_idx = nums_copy.len() - 1;\n    \
    \    }\n        if sum < min_sum {\n            min_sum = sum;\n            min_idx\
    \ = nums_copy.len() - 1;\n        }\n    }\n\n    if min_sum == max_sum {\n  \
    \      return nums;\n    }\n\n    if min_sum < 0 {\n        nums[min_idx] = -nums[min_idx];\n\
    \    }\n\n    if max_sum > 0 {\n        nums[max_idx] = -nums[max_idx];\n    }\n\
    \n    nums[min_idx..max_idx + 1]\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvlk7pj3r.rs:61:5\n   |\n\
    10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |              \
    \                           ---------- expected `Vec<isize>` because of return\
    \ type\n...\n61 |     nums[min_idx..max_idx + 1]\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_vec()`\n   |     |\n   |     expected\
    \ struct `Vec`, found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \               found slice `[isize]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &i in nums_sorted\
    \ {\n        sum += i;\n    }\n    nums_sorted.sort_by_key(|&i| {\n        sum\
    \ - i;\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp222nznao.rs:13:9\n   |\n\
    13 |     for &i in nums_sorted {\n   |         ^^    ----------- this expression\
    \ has type `Option<isize>`\n   |         |\n   |         expected `isize`, found\
    \ reference\n   |         help: you can probably remove the explicit borrow: `i`\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    let\
    \ mut min_sum = 0;\n    let mut min_index = 0;\n    for i in nums_copy {\n   \
    \     sum += i;\n        if sum > max_sum {\n            max_sum = sum;\n    \
    \        max_index = i;\n        }\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_index = i;\n        }\n    }\n    for i in nums_copy\
    \ {\n        if i == max_index {\n            nums_sorted.swap(i, max_index);\n\
    \        }\n        if i == min_index {\n            nums_sorted.swap(i, min_index);\n\
    \        }\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjg5nftgw.rs:31:30\n   |\n\
    31 |             nums_sorted.swap(i, max_index);\n   |                       \
    \       ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n31 |      \
    \       nums_sorted.swap(i.try_into().unwrap(), max_index);\n   |            \
    \                   ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpjg5nftgw.rs:31:33\n   |\n31 |             nums_sorted.swap(i, max_index);\n\
    \   |                                 ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n31 |             nums_sorted.swap(i, max_index.try_into().unwrap());\n\
    \   |                                          ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjg5nftgw.rs:34:30\n   |\n34 |             nums_sorted.swap(i,\
    \ min_index);\n   |                              ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n34 |             nums_sorted.swap(i.try_into().unwrap(),\
    \ min_index);\n   |                               ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjg5nftgw.rs:34:33\n   |\n34 |             nums_sorted.swap(i,\
    \ min_index);\n   |                                 ^^^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n34 |             nums_sorted.swap(i,\
    \ min_index.try_into().unwrap());\n   |                                      \
    \    ++++++++++++++++++++\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    let mut result = vec![];\n    while sum > 0 {\n    \
    \    let mut index = nums_copy.len();\n        while index > 0 {\n           \
    \ if nums_copy[index - 1] > sum {\n                index -= 1;\n            }\
    \ else {\n                break;\n            }\n        }\n        result.push(nums_copy[index]);\n\
    \        sum -= nums_copy[index];\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpx68s04xj.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut max_index = 0;\n    let mut min_sum = 0;\n    let mut min_index =\
    \ 0;\n    for i in nums_copy {\n        sum += i;\n        if sum > max_sum {\n\
    \            max_sum = sum;\n            max_index = i;\n        }\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n            min_index = i;\n  \
    \      }\n    }\n    nums_copy.swap_remove(max_index);\n    nums_copy.swap_remove(min_index);\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3zygfklv.rs:28:27\n   |\n\
    28 |     nums_copy.swap_remove(max_index);\n   |                           ^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |     nums_copy.swap_remove(max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3zygfklv.rs:29:27\n   |\n29 |     nums_copy.swap_remove(min_index);\n\
    \   |                           ^^^^^^^^^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n29 |     nums_copy.swap_remove(min_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpcu3kj0k9.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmpcu3kj0k9.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmpcu3kj0k9.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmpcu3kj0k9.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ min_idx = -1;\n    let mut max_idx = -1;\n    let mut min_sum_idx = -1;\n  \
    \  let mut max_sum_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx\
    \ = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n\
    \    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let\
    \ mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx\
    \ = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n\
    \    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let\
    \ mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx\
    \ = -1;\n    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n\
    \    let mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let\
    \ mut max_sum_idx_idx = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx\
    \ = -1;\n    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n\
    \    let mut min_sum_idx_idx = -1;\n    let mut max_sum_idx_idx = -1;\n    let\
    \ mut min_sum_idx_idx = -1;\n\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp991jzur.rs:10:41\n   |\n\
    10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n        } else {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x > sum).unwrap());\n            index += 1;\n\
    \        }\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp_e6fjv2p.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp_e6fjv2p.rs:21:37\n   |\n21 |\
    \             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x > sum).unwrap());\n\
    \   |             ------------------------^^^^^^^^^^^^^^^^^^---------------------------------\n\
    \   |             |           |           |\n   |             |           |  \
    \         immutable borrow occurs here\n   |             |           mutable borrow\
    \ later used by call\n   |             mutable borrow occurs here\n   |\nhelp:\
    \ try adding a local storing this argument...\n  --> /tmp/tmp_e6fjv2p.rs:21:37\n\
    \   |\n21 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n   |                                     ^^^^^^^^^^^^^^^^^^\n\
    help: ...and then using that local as the argument to this call\n  --> /tmp/tmp_e6fjv2p.rs:21:13\n\
    \   |\n21 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp0pyi2634.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmp0pyi2634.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmp0pyi2634.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmp0pyi2634.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in &nums_copy {\n            sum += n.checked_mul(10).unwrap();\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpy4_0l6dt.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmpy4_0l6dt.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -         -----------\
    \ ^^^ immutable borrow occurs here\n   |       |         |\n   |  _____|     \
    \    mutable borrow later used by call\n   | |\n13 | |         let mut sum = 0;\n\
    14 | |         for &n in &nums_copy {\n   | |                    --------- second\
    \ borrow occurs due to use of `nums_copy` in closure\n15 | |             sum +=\
    \ n.checked_mul(10).unwrap();\n16 | |         }\n17 | |         sum\n18 | |  \
    \   });\n   | |______- mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in &nums_copy {\n            sum += *n as isize;\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpa9ww13ck.rs:15:20\n\
    \   |\n15 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        let digit = nums_copy[index].unwrap();\n\
    \        sum += digit;\n        if sum > 0 {\n            nums_copy[index] = nums_copy[index].clone()\
    \ + 1;\n        } else {\n            sum -= digit;\n        }\n        index\
    \ += 1;\n    }\n    nums_copy.sort_by_key(|&x| x.partial_cmp(&sum).unwrap());\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpihb0tmmc.rs:15:38\n   |\n15 |         let digit = nums_copy[index].unwrap();\n\
    \   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while nums_sorted.len() > 0 {\n  \
    \      sum += nums_sorted.pop();\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n        }\n        nums_sorted.push(index);\n    }\n\
    \    nums_sorted.reverse();\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `Option<isize>` to `{integer}`\n  --> /tmp/tmp4xct367s.rs:16:13\n\
    \   |\n16 |         sum += nums_sorted.pop();\n   |             ^^ no implementation\
    \ for `{integer} += Option<isize>`\n   |\n   = help: the trait `AddAssign<Option<isize>>`\
    \ is not implemented for `{integer}`\n   = help: the following other types implement\
    \ trait `AddAssign<Rhs>`:\n             <f32 as AddAssign<&f32>>\n           \
    \  <f32 as AddAssign>\n             <f64 as AddAssign<&f64>>\n             <f64\
    \ as AddAssign>\n             <i128 as AddAssign<&i128>>\n             <i128 as\
    \ AddAssign>\n             <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n\
    \           and 20 others\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n            continue;\n        }\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpvees2_6k.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpvees2_6k.rs:22:33\n   |\n22 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \        }\n        if sum > 0 {\n            nums_sorted[index] = nums_copy[index];\n\
    \        }\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp5_ivje6b.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut num_sum = 0;\n    let mut num_digits = 0;\n    let mut num_digits_sum =\
    \ 0;\n    let mut num_digits_index = 0;\n    let mut num_digits_sum_index = 0;\n\
    \    let mut num_digits_index2 = 0;\n    let mut num_digits_sum_index2 = 0;\n\
    \    let mut num_digits_index3 = 0;\n    let mut num_digits_sum_index3 = 0;\n\
    \    let mut num_digits_index4 = 0;\n    let mut num_digits_sum_index4 = 0;\n\
    \    let mut num_digits_index5 = 0;\n    let mut num_digits_sum_index5 = 0;\n\
    \    let mut num_digits_index6 = 0;\n    let mut num_digits_sum_index6 = 0;\n\
    \    let mut num_digits_index7 = 0;\n    let mut num_digits_sum_index7 = 0;\n\
    \    let mut num_digits_index8 = 0;\n    let mut num_digits_sum_index8 = 0;\n\
    \    let mut num_digits_index9 = 0;\n    let mut num_digits_sum_index9 = 0;\n\
    \    let mut num_digits_index10 = 0;\n    let mut num_digits_sum_index10 = 0;\n\
    \    let mut num_digits_index11 = 0;\n    let mut num_digits_sum_index11 = 0;\n\
    \    let mut num_digits_index12 = 0;\n    let mut num_digits_sum_index12 = 0;\n\
    \    let mut num_digits_index13 = 0;\n    let mut num_digits_sum_index13 = 0;\n\
    \    let mut num_digits_index14 = 0;\n    let mut num_digits_sum_index14 = 0;\n\
    \    let mut num_digits_index15 = 0;\n    let mut num_digits_sum_index15 = 0;\n\
    \    let mut num_digits_index16 = 0;\n    let mut num_digits_sum_index16 = 0;\n\
    \    let mut num_digits_index17 = 0;\n    let mut num_digits_sum_index17 = 0;\n\
    \    let mut num_digits_index18 = 0;\n    let mut num_digits_sum_index18 = 0;\n\
    \    let mut num_digits_index19 = 0;\n    let mut num_digits_sum_index19 = 0;\n\
    \    let mut num_digits_index20 = 0;\n    let mut num_digits_sum_index20 = 0;\n\
    \    let mut num_digits_index21 = 0;\n    let mut num_digits_sum_index21 = 0;\n\
    \    let mut num_digits_index22 = 0;\n    let mut num_digits_sum_index22 = 0;\n\
    \    let mut num_digits_index23 = 0;\n    let mut num_digits_\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphz6hj7rg.rs:61:24\n   |\n\
    61 |     let mut num_digits_\n   |                        ^ help: add `;` here\n\
    62 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphz6hj7rg.rs:10:41\n\
    \   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sorted = nums_sorted.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut nums_sorted = nums_sorted.sort_by_key(|&x| {\n        let mut sum = 0;\n\
    \        for x in nums_copy {\n            sum += x;\n        }\n        sum\n\
    \    });\n    nums_sorted.reverse();\n    nums_sorted\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `reverse` found for unit type `()` in the\
    \ current scope\n  --> /tmp/tmp043as8eq.rs:21:17\n   |\n21 |     nums_sorted.reverse();\n\
    \   |                 ^^^^^^^ method not found in `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp043as8eq.rs:22:5\n   |\n10 | fn order_by_points(nums: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                         ---------- expected\
    \ `Vec<isize>` because of return type\n...\n22 |     nums_sorted\n   |     ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter()\
    \ {\n        sum += *i;\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe2gssc2a.rs:15:26\n   |\n\
    15 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x > sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums_copy[i];\n        if sum > max_sum\
    \ {\n            max_sum = sum;\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..nums.len() {\n        if nums_copy[i] > 0 {\n            nums_sorted[max_index]\
    \ = nums_copy[i];\n            nums_copy[i] = 0;\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpw2yq5srd.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp5lb6hz26.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp5lb6hz26.rs:18:37\n   |\n18 |\
    \             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |             ----------- ----        ^^^^^^^^^^^ immutable borrow occurs\
    \ here\n   |             |           |\n   |             |           mutable borrow\
    \ later used by call\n   |             mutable borrow occurs here\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    let mut max_sum = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums.iter\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpet895pd9.rs:38:32\n   |\n\
    38 |     let mut max_idx = nums.iter\n   |                                ^ help:\
    \ add `;` here\n39 | }\n   | - unexpected token\n\nerror[E0615]: attempted to\
    \ take value of method `iter` on type `Vec<isize>`\n  --> /tmp/tmpet895pd9.rs:38:28\n\
    \   |\n38 |     let mut max_idx = nums.iter\n   |                            ^^^^\
    \ method, not a field\n   |\nhelp: use parentheses to call the method\n   |\n\
    38 |     let mut max_idx = nums.iter()\n   |                                ++\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpet895pd9.rs:10:41\n   |\n10 |\
    \ fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut i = 0;\n    while i < nums_copy.len() {\n        sum\
    \ += nums_copy[i];\n        if sum < 0 {\n            sum = 0;\n        }\n  \
    \      i += 1;\n    }\n    while i < nums_copy.len() {\n        sum -= nums_copy[i];\n\
    \        if sum < 0 {\n            sum = 0;\n        }\n        nums_sorted[i]\
    \ = nums_copy[i];\n        i += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmptpsy1fhk.rs:35:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &i in &nums_copy {\n            sum += i;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp9xqyryb0.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmp9xqyryb0.rs:12:27\n\
    \   |\n12 |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ immutable borrow occurs here\n   |     |         |\n   |     |         mutable\
    \ borrow later used by call\n   |     mutable borrow occurs here\n13 |       \
    \  let mut sum = 0;\n14 |         for &i in &nums_copy {\n   |               \
    \     --------- second borrow occurs due to use of `nums_copy` in closure\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += *x;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmphfxk08_d.rs:15:20\n\
    \   |\n15 |             sum += *x;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &n in nums_copy {\n\
    \        sum += n;\n    }\n    nums_copy.sort_by_key(|&n| {\n        sum - n\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0wcai_67.rs:13:9\n   |\n\
    13 |     for &n in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while nums_copy.len() > 0 {\n    \
    \    sum += nums_copy.remove(0);\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n        }\n        nums_sorted.insert(index, sum);\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, 11, 12, 1, 1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`',\
    \ /tmp/tmpnvcxi0t6.rs:28:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpb0fblic3.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpb0fblic3.rs:14:18\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ captured outer variable\n...\n14 |         for x in nums_copy {\n   |      \
    \            ^^^^^^^^^ move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_copy\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_copy` because\
    \ it is borrowed\n  --> /tmp/tmpb0fblic3.rs:12:27\n   |\n12 |     nums_copy.sort_by_key(|&x|\
    \ {\n   |     --------- ----------- ^^^^ move out of `nums_copy` occurs here\n\
    \   |     |         |\n   |     |         borrow later used by call\n   |    \
    \ borrow of `nums_copy` occurs here\n13 |         let mut sum = 0;\n14 |     \
    \    for x in nums_copy {\n   |                  --------- move occurs due to\
    \ use in closure\n\nerror[E0382]: use of moved value: `nums_copy`\n  --> /tmp/tmpb0fblic3.rs:19:5\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12 |     nums_copy.sort_by_key(|&x| {\n   |              \
    \             ---- value moved into closure here\n13 |         let mut sum = 0;\n\
    14 |         for x in nums_copy {\n   |                  --------- variable moved\
    \ due to use in closure\n...\n19 |     nums_copy\n   |     ^^^^^^^^^ value used\
    \ here after move\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0382, E0505, E0507.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        let digit = nums_copy[index] / 10;\n\
    \        sum += digit;\n        if sum > 0 {\n            nums_copy[index] -=\
    \ digit * 10;\n        } else {\n            sum += digit;\n        }\n      \
    \  index += 1;\n    }\n    nums_copy.sort_by_key(|&x| x.partial_cmp(&sum).unwrap());\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-11, -12, 1, 1, -1]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpk_xosres.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut max_index = 0;\n    for i in nums_copy {\n        sum += *i;\n  \
    \      if sum > max_sum {\n            max_sum = sum;\n            max_index =\
    \ i;\n        }\n    }\n    nums_copy.swap_remove(max_index);\n    nums_copy.sort_unstable();\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmprml9wmpa.rs:16:16\n\
    \   |\n16 |         sum += *i;\n   |                ^^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprml9wmpa.rs:22:27\n   |\n22 |     nums_copy.swap_remove(max_index);\n\
    \   |                           ^^^^^^^^^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n22 |     nums_copy.swap_remove(max_index.try_into().unwrap());\n\
    \   |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x;\n   \
    \ });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp7lptnkg3.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x;\n    });\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpq3a8p1r0.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9t3zvmhm.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp9t3zvmhm.rs:17:33\n   |\n17 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &num in &nums_sorted\
    \ {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|&num| {\n      \
    \  sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 1, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpisiw3pot.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < nums_sorted.len() {\n        sum += nums_sorted[i];\n        i += 1;\n \
    \   }\n    let mut j = 0;\n    while j < nums_sorted.len() {\n        if sum <\
    \ 0 {\n            nums_sorted.swap(j, j + 1);\n            sum -= nums_sorted[j];\n\
    \        } else {\n            sum += nums_sorted[j];\n        }\n        j +=\
    \ 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, -1, -11, -12, 1]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmppj3erl6d.rs:33:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums_copy.len()\
    \ {\n        nums_sum += nums_copy[nums_index];\n        nums_index += 1;\n  \
    \      while nums_index < nums_copy.len() {\n            if nums_sum > nums_copy[nums_index]\
    \ {\n                nums_sorted.swap(nums_index, nums_index);\n             \
    \   nums_sum -= nums_copy[nums_index];\n                nums_index += 1;\n   \
    \         }\n            nums_index += 1;\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp06eus5qg.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x;\n   \
    \ });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp7lptnkg3.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for &d in &nums_copy {\n            sum += d;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpy1vnelgf.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmpy1vnelgf.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|&x| {\n   |       -         -----------\
    \ ^^^^ immutable borrow occurs here\n   |       |         |\n   |  _____|    \
    \     mutable borrow later used by call\n   | |\n13 | |         let mut sum =\
    \ 0;\n14 | |         for &d in &nums_copy {\n   | |                    ---------\
    \ second borrow occurs due to use of `nums_copy` in closure\n15 | |          \
    \   sum += d;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______-\
    \ mutable borrow occurs here\n\nerror: aborting due to previous error; 1 warning\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        let digit = nums_copy[index] / 10;\n\
    \        sum += digit;\n        nums_copy[index] -= digit * 10;\n        index\
    \ += 1;\n    }\n    nums_copy.sort_by_key(|&x| sum);\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, -1, -1, -2]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpvw58z8s9.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in &nums {\n            sum += *x;\n        }\n\
    \        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp17cjcmf6.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut num_sum = 0;\n    let mut num_sum_index = 0;\n    let mut num_sum_index2\
    \ = 0;\n    let mut num_sum_index3 = 0;\n    let mut num_sum_index4 = 0;\n   \
    \ let mut num_sum_index5 = 0;\n    let mut num_sum_index6 = 0;\n    let mut num_sum_index7\
    \ = 0;\n    let mut num_sum_index8 = 0;\n    let mut num_sum_index9 = 0;\n   \
    \ let mut num_sum_index10 = 0;\n    let mut num_sum_index11 = 0;\n    let mut\
    \ num_sum_index12 = 0;\n    let mut num_sum_index13 = 0;\n    let mut num_sum_index14\
    \ = 0;\n    let mut num_sum_index15 = 0;\n    let mut num_sum_index16 = 0;\n \
    \   let mut num_sum_index17 = 0;\n    let mut num_sum_index18 = 0;\n    let mut\
    \ num_sum_index19 = 0;\n    let mut num_sum_index20 = 0;\n    let mut num_sum_index21\
    \ = 0;\n    let mut num_sum_index22 = 0;\n    let mut num_sum_index23 = 0;\n \
    \   let mut num_sum_index24 = 0;\n    let mut num_sum_index25 = 0;\n    let mut\
    \ num_sum_index26 = 0;\n    let mut num_sum_index27 = 0;\n    let mut num_sum_index28\
    \ = 0;\n    let mut num_sum_index29 = 0;\n    let mut num_sum_index30 = 0;\n \
    \   let mut num_sum_index31 = 0;\n    let mut num_sum_index32 = 0;\n    let mut\
    \ num_sum_index33 = 0;\n    let mut num_sum_index34 = 0;\n    let mut num_sum_index35\
    \ = 0;\n    let mut num_sum_index36 = 0;\n    let mut num_sum_index37 = 0;\n \
    \   let mut num_sum_index38 = 0;\n    let mut num_sum_index39 = 0;\n    let mut\
    \ num_sum_index40 = 0;\n    let mut num_sum_index41 = 0;\n    let mut num_sum_index42\
    \ = 0;\n    let mut num_sum_index43 = 0;\n    let mut num_sum_index44 = 0;\n \
    \   let mut num_sum_index45 = 0;\n    let mut num_sum_index46 = 0;\n    let mut\
    \ num_sum_index47 = 0;\n    let mut num_sum_index48 = 0;\n    let mut num_sum_index49\
    \ = 0;\n    let mut num_sum_index50 = 0;\n    let mut num_sum_index51 = 0;\n \
    \   let mut num_sum_index52 = 0;\n    let mut num_sum_index53 = 0;\n    let mut\
    \ num_sum_index54 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpmmfjdc06.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for num in nums_sorted\
    \ {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|x| {\n        sum\
    \ - x;\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmpayhytjt8.rs:16:5\n\
    \    |\n11  |     let mut nums_sorted = nums.clone();\n    |         ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_sorted\
    \ {\n    |                -----------\n    |                |\n    |         \
    \       `nums_sorted` moved due to this implicit call to `.into_iter()`\n    |\
    \                help: consider borrowing to avoid moving into the for loop: `&nums_sorted`\n\
    ...\n16  |     nums_sorted.sort_by_key(|x| {\n    |     ^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_sorted`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp0pyi2634.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmp0pyi2634.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmp0pyi2634.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmp0pyi2634.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = 0;\n\
    \    let mut min_idx = 0;\n    let mut max_idx = 0;\n    let mut max_sum = 0;\n\
    \    for &i in nums_copy {\n        sum += i;\n        if sum < min_sum {\n  \
    \          min_sum = sum;\n            min_idx = i;\n        }\n        if sum\
    \ > max_sum {\n            max_sum = sum;\n            max_idx = i;\n        }\n\
    \    }\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(max_idx);\n\
    \    nums_copy.sort_by_key(|&i| {\n        sum - i;\n    });\n    nums_copy\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk2e8q46e.rs:17:9\n   |\n\
    17 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpk2e8q46e.rs:31:15\n   |\n31 |  \
    \       sum - i;\n   |               ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpk2e8q46e.rs:31:13\n   |\n\
    31 |         sum - i;\n   |             ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_unstable_by_key(|x| {\n  \
    \      let mut sum = 0;\n        for x in nums_sorted {\n            sum += *x;\n\
    \        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmp9q_xtj9k.rs:15:20\n\
    \   |\n15 |             sum += *x;\n   |                    ^^\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0614`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n            continue;\n        }\n        nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == sum).unwrap());\n        index += 1;\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpvees2_6k.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpvees2_6k.rs:22:33\n   |\n22 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &num in nums_copy {\n\
    \        sum += num;\n    }\n    nums_copy.sort_by_key(|&num| {\n        sum -\
    \ num\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqh0v9pv.rs:13:9\n   |\n\
    13 |     for &num in nums_copy {\n   |         ^^^^    --------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n        } else {\n            nums_sorted[index] = sum;\n\
    \            index += 1;\n            sum = 0;\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpea2d0qtl.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x;\n    });\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpq3a8p1r0.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut num_sum = 0;\n    let mut num_sum_index = 0;\n    let mut num_sum_index2\
    \ = 0;\n    let mut num_sum_index3 = 0;\n    let mut num_sum_index4 = 0;\n   \
    \ let mut num_sum_index5 = 0;\n    let mut num_sum_index6 = 0;\n    let mut num_sum_index7\
    \ = 0;\n    let mut num_sum_index8 = 0;\n    let mut num_sum_index9 = 0;\n   \
    \ let mut num_sum_index10 = 0;\n    let mut num_sum_index11 = 0;\n    let mut\
    \ num_sum_index12 = 0;\n    let mut num_sum_index13 = 0;\n    let mut num_sum_index14\
    \ = 0;\n    let mut num_sum_index15 = 0;\n    let mut num_sum_index16 = 0;\n \
    \   let mut num_sum_index17 = 0;\n    let mut num_sum_index18 = 0;\n    let mut\
    \ num_sum_index19 = 0;\n    let mut num_sum_index20 = 0;\n    let mut num_sum_index21\
    \ = 0;\n    let mut num_sum_index22 = 0;\n    let mut num_sum_index23 = 0;\n \
    \   let mut num_sum_index24 = 0;\n    let mut num_sum_index25 = 0;\n    let mut\
    \ num_sum_index26 = 0;\n    let mut num_sum_index27 = 0;\n    let mut num_sum_index28\
    \ = 0;\n    let mut num_sum_index29 = 0;\n    let mut num_sum_index30 = 0;\n \
    \   let mut num_sum_index31 = 0;\n    let mut num_sum_index32 = 0;\n    let mut\
    \ num_sum_index33 = 0;\n    let mut num_sum_index34 = 0;\n    let mut num_sum_index35\
    \ = 0;\n    let mut num_sum_index36 = 0;\n    let mut num_sum_index37 = 0;\n \
    \   let mut num_sum_index38 = 0;\n    let mut num_sum_index39 = 0;\n    let mut\
    \ num_sum_index40 = 0;\n    let mut num_sum_index41 = 0;\n    let mut num_sum_index42\
    \ = 0;\n    let mut num_sum_index43 = 0;\n    let mut num_sum_index44 = 0;\n \
    \   let mut num_sum_index45 = 0;\n    let mut num_sum_index46 = 0;\n    let mut\
    \ num_sum_index47 = 0;\n    let mut num_sum_index48 = 0;\n    let mut num_sum_index49\
    \ = 0;\n    let mut num_sum_index50 = 0;\n    let mut num_sum_index51 = 0;\n \
    \   let mut num_sum_index52 = 0;\n    let mut num_sum_index53 = 0;\n    let mut\
    \ num_sum_index54 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpmmfjdc06.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sorted = nums_sorted.iter().cloned().collect::<Vec<_>>();\n    let\
    \ mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n  \
    \  let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \    let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n  --> /tmp/tmppd8tk5pa.rs:14:51\n   |\n14 |     let mut nums_sorted\
    \ = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n   |              \
    \                                     ^^^^^^ expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0599]: the method `collect` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmppd8tk5pa.rs:14:60\n \
    \  |\n14 |       let mut nums_sorted = nums_sorted.into_iter().cloned().collect::<Vec<_>>();\n\
    \   |                                                              ^^^^^^^ method\
    \ cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait\
    \ bounds\n   |\n   = note: the following trait bounds were not satisfied:\n  \
    \         `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppd8tk5pa.rs:10:41\n\
    \   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for &i in &nums {\n            sum += i;\n        }\n\
    \        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpdaxv56ql.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_unstable_by_key(|&x| {\n \
    \       let mut sum = 0;\n        for x in &nums {\n            sum += *x;\n \
    \       }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpv47uoeee.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while nums_copy.len() > 0 {\n    \
    \    sum += nums_copy.pop().unwrap();\n        if sum < 0 {\n            sum =\
    \ 0;\n        }\n        if index == nums_sorted.len() {\n            index =\
    \ 0;\n        }\n        if sum == nums_sorted[index].unwrap() {\n           \
    \ nums_sorted.swap(index, index + 1);\n        }\n        index += 1;\n    }\n\
    \    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `unwrap` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpkxyyyg92.rs:23:38\n   |\n23 |         if sum == nums_sorted[index].unwrap()\
    \ {\n   |                                      ^^^^^^ method not found in `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums.iter().fold(0,\
    \ |sum, num| sum + num);\n    let mut min_idx = nums.iter().cloned().min_by_key(|&x|\
    \ {\n        sum += x;\n        sum\n    });\n    let mut max_idx = nums.iter().cloned().max_by_key(|&x|\
    \ {\n        sum += x;\n        sum\n    });\n    while min_sum != sum {\n   \
    \     if min_sum < sum {\n            min_sum -= nums_copy[min_idx];\n       \
    \     min_idx += 1;\n        } else {\n            sum -= nums_copy[max_idx];\n\
    \            max_idx += 1;\n        }\n    }\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(max_idx);\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `Option<isize>`\n\
    \  --> /tmp/tmphbs6fpol.rs:24:24\n   |\n24 |             min_sum -= nums_copy[min_idx];\n\
    \   |                        ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `Option<isize>`\n   = note: required because of the requirements\
    \ on the impl of `Index<Option<isize>>` for `Vec<isize>`\n\nerror[E0368]: binary\
    \ assignment operation `+=` cannot be applied to type `Option<isize>`\n  --> /tmp/tmphbs6fpol.rs:25:13\n\
    \   |\n25 |             min_idx += 1;\n   |             -------^^^^^\n   |   \
    \          |\n   |             cannot use `+=` on type `Option<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `Option<isize>`\n  --> /tmp/tmphbs6fpol.rs:27:20\n\
    \   |\n27 |             sum -= nums_copy[max_idx];\n   |                    ^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `Option<isize>`\n   = note:\
    \ required because of the requirements on the impl of `Index<Option<isize>>` for\
    \ `Vec<isize>`\n\nerror[E0368]: binary assignment operation `+=` cannot be applied\
    \ to type `Option<isize>`\n  --> /tmp/tmphbs6fpol.rs:28:13\n   |\n28 |       \
    \      max_idx += 1;\n   |             -------^^^^^\n   |             |\n   |\
    \             cannot use `+=` on type `Option<isize>`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmphbs6fpol.rs:31:27\n   |\n31 |     nums_copy.swap_remove(min_idx);\n\
    \   |                           ^^^^^^^ expected `usize`, found enum `Option`\n\
    \   |\n   = note: expected type `usize`\n              found enum `Option<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmphbs6fpol.rs:32:27\n   |\n32 |\
    \     nums_copy.swap_remove(max_idx);\n   |                           ^^^^^^^\
    \ expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<isize>`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E036"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = std::i32::MAX;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n\
    \    let mut min_idx = \n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpqtfkzi0l.rs:59:1\n\
    \   |\n59 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp0pyi2634.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmp0pyi2634.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmp0pyi2634.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmp0pyi2634.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for n in nums_sorted\
    \ {\n        sum += n;\n        nums_sorted.swap_remove(|n| {\n            n >=\
    \ sum\n        });\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp01hvz9zu.rs:15:33\n   |\n\
    15 |           nums_sorted.swap_remove(|n| {\n   |  _________________________________^\n\
    16 | |             n >= sum\n17 | |         });\n   | |_________^ expected `usize`,\
    \ found closure\n   |\n   = note: expected type `usize`\n           found closure\
    \ `[closure@/tmp/tmp01hvz9zu.rs:15:33: 17:10]`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in nums_sorted {\n            sum += x;\n      \
    \  }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpo46p3q7f.rs:12:30\n   |\n\
    12 |     nums_sorted.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_sorted`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpo46p3q7f.rs:14:18\n\
    \   |\n11 |     let mut nums_sorted = nums.clone();\n   |         ---------------\
    \ captured outer variable\n...\n14 |         for x in nums_sorted {\n   |    \
    \              ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_sorted\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted`\
    \ because it is borrowed\n  --> /tmp/tmpo46p3q7f.rs:12:29\n   |\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n13 |         let mut sum = 0;\n14 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpo46p3q7f.rs:19:5\n   |\n11 |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n13 |\
    \         let mut sum = 0;\n14 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n19 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        let digit = nums_copy[index] / 10;\n        sum += digit;\n        nums_sorted[index]\
    \ = sum;\n        index += 1;\n    }\n    nums_sorted.sort_by_key(|&x| x);\n \
    \   nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, 0, 0, 1, 1]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp2l7e6opo.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums_copy.len();\n\
    \    let mut min_idx = nums_copy.len();\n    let mut min_value = nums_copy[0];\n\
    \    let mut min_idx = nums_copy.len();\n    let mut min_value = nums_copy[0];\n\
    \    for &i in nums_copy {\n        sum += i;\n        if sum < min_sum {\n  \
    \          min_sum = sum;\n            min_idx = i;\n            min_value = nums_copy[i];\n\
    \        }\n    }\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n\
    \    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_idx);\n  \
    \  nums_copy.swap_remove(min_idx);\n    nums_copy.swap\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhcw5b0b.rs:18:9\n   |\n\
    18 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0615]: attempted to take value of method `swap` on type `Vec<isize>`\n\
    \  --> /tmp/tmpbhcw5b0b.rs:66:15\n   |\n66 |     nums_copy.swap\n   |        \
    \       ^^^^ method, not a field\n   |\nhelp: use parentheses to call the method\n\
    \   |\n66 |     nums_copy.swap(_, _)\n   |                   ++++++\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut i = 0;\n    while i < nums_copy.len() {\n        sum\
    \ += nums_copy[i];\n        i += 1;\n    }\n    let mut j = 0;\n    while j <\
    \ nums_sorted.len() {\n        if sum < nums_sorted[j] {\n            nums_sorted.swap(j,\
    \ j + 1);\n        }\n        j += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/slice/mod.rs:566:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for num in nums_sorted\
    \ {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num| {\n       \
    \ sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmp8kdxhcxt.rs:16:5\n\
    \    |\n11  |     let mut nums_sorted = nums.clone();\n    |         ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_sorted\
    \ {\n    |                -----------\n    |                |\n    |         \
    \       `nums_sorted` moved due to this implicit call to `.into_iter()`\n    |\
    \                help: consider borrowing to avoid moving into the for loop: `&nums_sorted`\n\
    ...\n16  |     nums_sorted.sort_by_key(|num| {\n    |     ^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_sorted`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp87l3leh7.rs:13:9\n   |\n\
    13 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in nums_sorted {\n            sum += x;\n      \
    \  }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpo46p3q7f.rs:12:30\n   |\n\
    12 |     nums_sorted.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_sorted`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpo46p3q7f.rs:14:18\n\
    \   |\n11 |     let mut nums_sorted = nums.clone();\n   |         ---------------\
    \ captured outer variable\n...\n14 |         for x in nums_sorted {\n   |    \
    \              ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_sorted\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted`\
    \ because it is borrowed\n  --> /tmp/tmpo46p3q7f.rs:12:29\n   |\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n13 |         let mut sum = 0;\n14 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpo46p3q7f.rs:19:5\n   |\n11 |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n13 |\
    \         let mut sum = 0;\n14 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n19 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while nums_copy.len() > 0 {\n    \
    \    sum += nums_copy.pop().unwrap();\n        if sum > 0 {\n            nums_sorted.push(index);\n\
    \            index += 1;\n        }\n    }\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpzrnlowu3.rs:27:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &d in &nums_copy {\n            sum += d;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp1a1u56a_.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmp1a1u56a_.rs:12:27\n\
    \   |\n12 |     nums_copy.sort_by_key(|x| {\n   |     --------- ----------- ^^^\
    \ immutable borrow occurs here\n   |     |         |\n   |     |         mutable\
    \ borrow later used by call\n   |     mutable borrow occurs here\n13 |       \
    \  let mut sum = 0;\n14 |         for &d in &nums_copy {\n   |               \
    \     --------- second borrow occurs due to use of `nums_copy` in closure\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: -1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ index + 1);\n            index += 1;\n        }\n    }\n    nums_sorted\n}\n\
    \nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748281
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i;\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_4xi2fh.rs:13:9\n   |\n\
    13 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1; // increment index\n    }\n    nums_copy.sort_by_key(|x| {\n   \
    \     sum - x;\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmptn56a9ta.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = 0;\n\
    \    let mut max_sum = 0;\n    let mut min_idx = nums.len();\n    let mut max_idx\
    \ = nums.len();\n\n    for &i in nums_copy {\n        sum += i;\n        if sum\
    \ < min_sum {\n            min_sum = sum;\n            min_idx = i;\n        }\n\
    \        if sum > max_sum {\n            max_sum = sum;\n            max_idx =\
    \ i;\n        }\n    }\n\n    let mut nums_copy = nums.clone();\n    let mut sum\
    \ = 0;\n    let mut min_sum = 0;\n    let mut max_sum = 0;\n    let mut min_idx\
    \ = nums.len();\n    let mut max_idx = nums.len();\n\n    for &i in nums_copy\
    \ {\n        sum += i;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n        if sum > max_sum {\n           \
    \ max_sum = sum;\n            max_idx = i;\n        }\n    }\n\n    let mut nums_copy\
    \ = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ max_sum = 0;\n    let mut min_idx = nums.len();\n    let mut max_idx = nums.len();\n\
    \n    for &i in nums_copy {\n        sum += i;\n        if sum < min_sum {\n \
    \           min_sum = sum;\n            min_idx = i;\n        }\n        if sum\
    \ > max_sum {\n            max_sum = sum;\n            max_idx = i;\n        }\n\
    \    }\n\n    let mut nums_copy = nums.clone();\n    let mut sum = 0;\n    let\
    \ mut min_sum = 0;\n    let mut max_sum = 0;\n    let mut min_idx = nums.len();\n\
    \    let mut max_idx = nums.len();\n\n    for &i in nums_copy {\n        sum +=\
    \ i;\n        if sum < min_sum {\n            min_sum = sum;\n            min_idx\
    \ = i;\n        }\n        if sum > max_sum {\n            max_sum = sum;\n  \
    \          max_idx = i;\n        }\n    }\n\n    let mut nums_copy = nums.clone();\n\
    \    let mut sum = 0;\n    let mut min_sum = 0;\n    let mut max_sum = 0;\n  \
    \  let mut min_idx = nums.len();\n    let mut max_idx = nums.len();\n\n    for\
    \ &i in nums_copy {\n        sum += i;\n        if sum < min_sum {\n         \
    \   min_sum = sum;\n            min_idx = i;\n        }\n        if sum > max_sum\
    \ {\n            max_sum = sum;\n            max_idx = i;\n        }\n    }\n\n\
    \    let mut nums_copy = nums.clone();\n    let mu\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n   --> /tmp/tmp_muusj62.rs:107:11\n   \
    \ |\n107 |     let mu\n    |           ^ help: add `;` here\n108 | }\n    | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_muusj62.rs:18:9\n\
    \   |\n18 |     for &i in nums_copy {\n   |         ^^    --------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp_muusj62.rs:37:9\n   |\n37 |   \
    \  for &i in nums_copy {\n   |         ^^    --------- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_muusj62.rs:56:9\n   |\n56 |     for &i in nums_copy\
    \ {\n   |         ^^    --------- this expression has type `isize`\n   |     \
    \    |\n   |         expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_muusj62.rs:75:9\n   |\n75 |     for &i in nums_copy {\n   |  \
    \       ^^    --------- this expression has type `isize`\n   |         |\n   |\
    \         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_muusj62.rs:94:9\n   |\n94 |     for &i in nums_copy {\n   |  \
    \       ^^    --------- this expression has type `isize`\n   |         |\n   |\
    \         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_muusj62.rs:10:41\n   |\n10 | fn order_by_points(nums: Vec<isize>)\
    \ -> Vec<isize> {\n   |    ---------------                      ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 7 previo"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx = nums.len();\n\
    \    let mut max_sum = 0;\n    let mut max_idx = nums.len();\n    for idx in 0..nums.len()\
    \ {\n        sum += nums_copy[idx];\n        if sum < min_sum {\n            min_sum\
    \ = sum;\n            min_idx = idx;\n        }\n        if sum > max_sum {\n\
    \            max_sum = sum;\n            max_idx = idx;\n        }\n    }\n  \
    \  if min_sum == max_sum {\n        nums_sorted = nums.clone();\n    } else {\n\
    \        nums_sorted.swap_remove(min_idx);\n        nums_sorted.swap_remove(max_idx);\n\
    \        nums_sorted.sort_unstable();\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-11, -1, 1]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp4j89kpsb.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9t3zvmhm.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp9t3zvmhm.rs:17:33\n   |\n17 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp87l3leh7.rs:13:9\n   |\n\
    13 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &n in nums_copy {\n\
    \        sum += n;\n    }\n    nums_copy.sort_by_key(|&n| {\n        sum - n\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0wcai_67.rs:13:9\n   |\n\
    13 |     for &n in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index +=\n            match nums_copy[index] % 10 {\n                0 => 1,\n\
    \                1 => 2,\n                2 => 3,\n                3 => 4,\n \
    \               4 => 5,\n                5 => 6,\n                6 => 7,\n  \
    \              7 => 8,\n                8 => 9,\n                _ => panic!(\"\
    Invalid input\"),\n            };\n    }\n    nums_copy.sort_by_key(|&x| sum -\
    \ x);\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''Invalid input'', /tmp/tmp1_a8afyw.rs:27:22

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter()\
    \ {\n        sum += *i;\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe2gssc2a.rs:15:26\n   |\n\
    15 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x > sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9t3zvmhm.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp9t3zvmhm.rs:17:33\n   |\n17 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut num_sum = 0;\n    let mut num_sum_index = 0;\n    let mut num_sum_index2\
    \ = 0;\n    let mut num_sum_index3 = 0;\n    let mut num_sum_index4 = 0;\n   \
    \ let mut num_sum_index5 = 0;\n    let mut num_sum_index6 = 0;\n    let mut num_sum_index7\
    \ = 0;\n    let mut num_sum_index8 = 0;\n    let mut num_sum_index9 = 0;\n   \
    \ let mut num_sum_index10 = 0;\n    let mut num_sum_index11 = 0;\n    let mut\
    \ num_sum_index12 = 0;\n    let mut num_sum_index13 = 0;\n    let mut num_sum_index14\
    \ = 0;\n    let mut num_sum_index15 = 0;\n    let mut num_sum_index16 = 0;\n \
    \   let mut num_sum_index17 = 0;\n    let mut num_sum_index18 = 0;\n    let mut\
    \ num_sum_index19 = 0;\n    let mut num_sum_index20 = 0;\n    let mut num_sum_index21\
    \ = 0;\n    let mut num_sum_index22 = 0;\n    let mut num_sum_index23 = 0;\n \
    \   let mut num_sum_index24 = 0;\n    let mut num_sum_index25 = 0;\n    let mut\
    \ num_sum_index26 = 0;\n    let mut num_sum_index27 = 0;\n    let mut num_sum_index28\
    \ = 0;\n    let mut num_sum_index29 = 0;\n    let mut num_sum_index30 = 0;\n \
    \   let mut num_sum_index31 = 0;\n    let mut num_sum_index32 = 0;\n    let mut\
    \ num_sum_index33 = 0;\n    let mut num_sum_index34 = 0;\n    let mut num_sum_index35\
    \ = 0;\n    let mut num_sum_index36 = 0;\n    let mut num_sum_index37 = 0;\n \
    \   let mut num_sum_index38 = 0;\n    let mut num_sum_index39 = 0;\n    let mut\
    \ num_sum_index40 = 0;\n    let mut num_sum_index41 = 0;\n    let mut num_sum_index42\
    \ = 0;\n    let mut num_sum_index43 = 0;\n    let mut num_sum_index44 = 0;\n \
    \   let mut num_sum_index45 = 0;\n    let mut num_sum_index46 = 0;\n    let mut\
    \ num_sum_index47 = 0;\n    let mut num_sum_index48 = 0;\n    let mut num_sum_index49\
    \ = 0;\n    let mut num_sum_index50 = 0;\n    let mut num_sum_index51 = 0;\n \
    \   let mut num_sum_index52 = 0;\n    let mut num_sum_index53 = 0;\n    let mut\
    \ num_sum_index54 = 0;\n    let mut \n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpmmfjdc06.rs:69:1\n\
    \   |\n69 | }\n   | ^ expected identifier\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for num in nums_copy {\n\
    \        sum += num;\n    }\n    nums_copy.sort_by_key(|num| {\n        sum -\
    \ num\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpr7kx_910.rs:16:5\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_copy\
    \ {\n    |                ---------\n    |                |\n    |           \
    \     `nums_copy` moved due to this implicit call to `.into_iter()`\n    |   \
    \             help: consider borrowing to avoid moving into the for loop: `&nums_copy`\n\
    ...\n16  |     nums_copy.sort_by_key(|num| {\n    |     ^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n    let mut\
    \ min_sum_index = 0;\n    let mut max_sum = nums.iter().max().unwrap();\n    let\
    \ mut max_sum_index = 0;\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut min_num_index = 0;\n    let mut max_num = nums.iter().max().unwrap();\n\
    \    let mut max_num_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap();\n\
    \    let mut min_num_copy_index = 0;\n    let mut max_num_copy = nums.iter().max().unwrap();\n\
    \    let mut max_num_copy_index = 0;\n    let mut min_num_copy = nums.iter().min().unwrap\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpnwhm_hec.rs:54:52\n   |\n\
    54 |     let mut min_num_copy = nums.iter().min().unwrap\n   |               \
    \                                     ^ help: add `;` here\n55 | }\n   | - unexpected\
    \ token\n\nerror[E0615]: attempted to take value of method `unwrap` on type `Option<&isize>`\n\
    \  --> /tmp/tmpnwhm_hec.rs:54:46\n   |\n54 |     let mut min_num_copy = nums.iter().min().unwrap\n\
    \   |                                              ^^^^^^ method, not a field\n\
    \   |\nhelp: use parentheses to call the method\n   |\n54 |     let mut min_num_copy\
    \ = nums.iter().min().unwrap()\n   |                                         \
    \           ++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnwhm_hec.rs:10:41\n\
    \   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0615.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut max_index = 0;\n    let mut min_sum = 0;\n    let mut min_index =\
    \ 0;\n    for i in nums_copy.iter() {\n        sum += *i;\n        if sum > max_sum\
    \ {\n            max_sum = sum;\n            max_index = i;\n        }\n     \
    \   if sum < min_sum {\n            min_sum = sum;\n            min_index = i;\n\
    \        }\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.swap_remove(min_index);\n\
    \    nums_copy.swap_remove(max_index);\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjavr91og.rs:21:25\n   |\n\
    21 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |  \
    \           max_index = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpjavr91og.rs:25:25\n   |\n25 |             min_index = i;\n\
    \   |                         ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n25 |             min_index = *i;\n\
    \   |                         +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort();\n\
    \    let mut index = 0;\n    while index < nums_copy.len() {\n        nums_copy[index]\
    \ -= sum;\n        index += 1\n    }\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 11, 13, 23]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpzp6pqwg9.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy.iter()\
    \ {\n        sum += *i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum\
    \ - i\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 1, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm_lylrz0.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    for i in nums_copy {\n        sum += i;\n        nums_sorted.remove(&i);\n\
    \    }\n    nums_sorted.sort_by_key(|&x| {\n        sum - x;\n    });\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf0umzpu8.rs:16:28\n   |\n\
    16 |         nums_sorted.remove(&i);\n   |                            ^^ expected\
    \ `usize`, found `&isize`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpf86g2siv.rs:19:17\n   |\n19 |         sum\
    \ - x.to_digits(10)\n   |                 ^^^^^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut min_sum = 0;\n    let mut max_index = -1;\n    let mut min_index\
    \ = -1;\n    let mut max_value = nums_copy[0];\n    let mut min_value = nums_copy[0];\n\
    \    for i in 0..nums_copy.len() {\n        let value = nums_copy[i];\n      \
    \  sum += value;\n        if value > max_value {\n            max_value = value;\n\
    \            max_index = i;\n        }\n        if value < min_value {\n     \
    \       min_value = value;\n            min_index = i;\n        }\n    }\n   \
    \ for i in 0..nums_copy.len() {\n        let value = nums_copy[i];\n        let\
    \ mut new_sum = 0;\n        for j in 0..i {\n            new_sum += nums_copy[j];\n\
    \        }\n        if new_sum > sum {\n            nums_copy[i] = max_index;\n\
    \            sum += max_value - nums_copy[i];\n        } else {\n            nums_copy[i]\
    \ = min_index;\n            sum += min_value - nums_copy[i];\n        }\n    }\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpmv545et6.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpmv545et6.rs:16:25\n   |\n16 |     let mut\
    \ min_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmv545et6.rs:38:28\n\
    \   |\n38 |             nums_copy[i] = max_index;\n   |                      \
    \      ^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpmv545et6.rs:41:28\n   |\n41 |             nums_copy[i] = min_index;\n\
    \   |                            ^^^^^^^^^ expected `isize`, found `usize`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x;\n    });\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpq3a8p1r0.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx = nums.len();\n\
    \    let mut min_val = nums.len();\n    let mut max_val = nums.len();\n    let\
    \ mut max_idx = nums.len();\n    for &i in nums_copy {\n        sum += i;\n  \
    \      if sum < min_sum {\n            min_sum = sum;\n            min_idx = i;\n\
    \        }\n        if sum > max_sum {\n            max_sum = sum;\n         \
    \   max_idx = i;\n        }\n    }\n    while nums_sorted.len() > 0 {\n      \
    \  let mut min_idx = nums_sorted.len();\n        let mut min_val = nums_sorted.len();\n\
    \        let mut max_val = nums_sorted.len();\n        let mut max_idx = nums_sorted.len();\n\
    \        for &i in nums_sorted {\n            sum += i;\n            if sum <\
    \ min_sum {\n                min_sum = sum;\n                min_idx = i;\n  \
    \          }\n            if sum > max_sum {\n                max_sum = sum;\n\
    \                max_idx = i;\n            }\n        }\n        if min_sum ==\
    \ max_sum {\n            nums_sorted.remove(&min_idx);\n        } else {\n   \
    \         nums_sorted.remove(&min_idx);\n            nums_sorted.remove(&max_idx);\n\
    \        }\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max_sum` in this scope\n  --> /tmp/tmpz6xnpgam.rs:25:18\n\
    \   |\n25 |         if sum > max_sum {\n   |                  ^^^^^^^ help: a\
    \ local variable with a similar name exists: `min_sum`\n\nerror[E0425]: cannot\
    \ find value `max_sum` in this scope\n  --> /tmp/tmpz6xnpgam.rs:26:13\n   |\n\
    26 |             max_sum = sum;\n   |             ^^^^^^^ help: a local variable\
    \ with a similar name exists: `min_sum`\n\nerror[E0425]: cannot find value `max_sum`\
    \ in this scope\n  --> /tmp/tmpz6xnpgam.rs:41:22\n   |\n41 |             if sum\
    \ > max_sum {\n   |                      ^^^^^^^ help: a local variable with a\
    \ similar name exists: `min_sum`\n\nerror[E0425]: cannot find value `max_sum`\
    \ in this scope\n  --> /tmp/tmpz6xnpgam.rs:42:17\n   |\n42 |                 max_sum\
    \ = sum;\n   |                 ^^^^^^^ help: a local variable with a similar name\
    \ exists: `min_sum`\n\nerror[E0425]: cannot find value `max_sum` in this scope\n\
    \  --> /tmp/tmpz6xnpgam.rs:46:23\n   |\n46 |         if min_sum == max_sum {\n\
    \   |                       ^^^^^^^ help: a local variable with a similar name\
    \ exists: `min_sum`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz6xnpgam.rs:19:9\n\
    \   |\n19 |     for &i in nums_copy {\n   |         ^^    --------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpz6xnpgam.rs:35:13\n   |\n35 |  \
    \       for &i in nums_sorted {\n   |             ^^    ----------- this expression\
    \ has type `isize`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpz6xnpgam.rs:47:32\n  \
    \ |\n47 |             nums_sorted.remove(&min_idx);\n   |                    \
    \            ^^^^^^^^ expected `usize`, found `&usize`\n   |\nhelp: consider removing\
    \ the borrow\n   |\n47 -             nums_sorted.remove(&min_idx);\n47 +     \
    \        nums_sorted.remove(min_idx);\n   | "
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for n in nums_copy {\n\
    \        sum += n % 10;\n    }\n    nums_copy.sort_by_key(|n| {\n        sum -\
    \ n % 10\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpg52o09mv.rs:16:5\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for n in nums_copy {\n\
    \    |              ---------\n    |              |\n    |              `nums_copy`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums_copy`\n...\n16\
    \  |     nums_copy.sort_by_key(|n| {\n    |     ^^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_copy`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i;\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_4xi2fh.rs:13:9\n   |\n\
    13 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        match sum {\n            0 => nums_sorted.swap_remove(index),\n\
    \            x => nums_sorted.swap_remove(index),\n        }\n        index +=\
    \ 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptb5mlzi7.rs:17:9\n   |\n\
    17 | /         match sum {\n18 | |             0 => nums_sorted.swap_remove(index),\n\
    19 | |             x => nums_sorted.swap_remove(index),\n20 | |         }\n  \
    \ | |         ^- help: consider using a semicolon here\n   | |_________|\n   |\
    \           expected `()`, found `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx = nums.len();\n\
    \    let mut max_sum = 0;\n    let mut max_idx = nums.len();\n    for &i in nums_copy\
    \ {\n        sum += i;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n        if sum > max_sum {\n           \
    \ max_sum = sum;\n            max_idx = i;\n        }\n    }\n    nums_sorted.sort_by_key(|&i|\
    \ {\n        sum += i;\n        sum\n    });\n    nums_sorted.swap_remove(min_idx);\n\
    \    nums_sorted.swap_remove(max_idx);\n    nums_sorted\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvayhwab6.rs:18:9\n   |\n\
    18 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvayhwab6.rs:30:16\n   |\n30 |  \
    \       sum += i;\n   |                ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmpvayhwab6.rs:30:13\n   |\n\
    30 |         sum += i;\n   |             ^^ no implementation for `usize += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `usize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9t3zvmhm.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp9t3zvmhm.rs:17:33\n   |\n17 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x + sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrt7dtf7.rs:17:66\n   |\n\
    17 |         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                                                                  ^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9t3zvmhm.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp9t3zvmhm.rs:17:33\n   |\n17 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in &nums_copy {\n            sum += *n as isize;\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpa9ww13ck.rs:15:20\n\
    \   |\n15 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|&x| {\n        let\
    \ mut sum = 0;\n        for x in &nums {\n            sum += *x;\n        }\n\
    \        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpf7ampo4f.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: -1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums_copy.len()\
    \ {\n        nums_sum += nums_copy[nums_index];\n        while nums_sum > 0 {\n\
    \            nums_sorted[nums_index] = nums_copy[nums_index];\n            nums_sum\
    \ -= nums_copy[nums_index];\n            nums_index += 1;\n        }\n    }\n\
    \    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659748281
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x|\
    \ {\n        sum += x;\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-1, -11, -12, 11, 1]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp55lppopq.rs:28:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpb0fblic3.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpb0fblic3.rs:14:18\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ captured outer variable\n...\n14 |         for x in nums_copy {\n   |      \
    \            ^^^^^^^^^ move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_copy\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_copy` because\
    \ it is borrowed\n  --> /tmp/tmpb0fblic3.rs:12:27\n   |\n12 |     nums_copy.sort_by_key(|&x|\
    \ {\n   |     --------- ----------- ^^^^ move out of `nums_copy` occurs here\n\
    \   |     |         |\n   |     |         borrow later used by call\n   |    \
    \ borrow of `nums_copy` occurs here\n13 |         let mut sum = 0;\n14 |     \
    \    for x in nums_copy {\n   |                  --------- move occurs due to\
    \ use in closure\n\nerror[E0382]: use of moved value: `nums_copy`\n  --> /tmp/tmpb0fblic3.rs:19:5\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12 |     nums_copy.sort_by_key(|&x| {\n   |              \
    \             ---- value moved into closure here\n13 |         let mut sum = 0;\n\
    14 |         for x in nums_copy {\n   |                  --------- variable moved\
    \ due to use in closure\n...\n19 |     nums_copy\n   |     ^^^^^^^^^ value used\
    \ here after move\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0382, E0505, E0507.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for num in nums_copy {\n\
    \        sum += num;\n    }\n    let mut nums_copy = nums_copy.clone();\n    nums_copy.sort_by_key(|&num|\
    \ {\n        sum - num\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpwdhl4rtr.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpwdhl4rtr.rs:16:25\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_copy\
    \ {\n    |                ---------\n    |                |\n    |           \
    \     `nums_copy` moved due to this implicit call to `.into_iter()`\n    |   \
    \             help: consider borrowing to avoid moving into the for loop: `&nums_copy`\n\
    ...\n16  |     let mut nums_copy = nums_copy.clone();\n    |                 \
    \        ^^^^^^^^^ value borrowed here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `nums_copy`\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i;\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpyehdgwkn.rs:16:5\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for i in nums_copy {\n\
    \    |              ---------\n    |              |\n    |              `nums_copy`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums_copy`\n...\n16\
    \  |     nums_copy.sort_by_key(|&i| {\n    |     ^^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_copy`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut max_index = 0;\n    for i in nums_copy {\n        sum += i;\n   \
    \     if sum > max_sum {\n            max_sum = sum;\n            max_index =\
    \ i;\n        }\n    }\n    nums_copy.swap_remove(max_index);\n    nums_copy.sort_by_key(|x|\
    \ x.partial_cmp(&max_sum).unwrap());\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk8n7wraj.rs:22:27\n   |\n\
    22 |     nums_copy.swap_remove(max_index);\n   |                           ^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n22 |     nums_copy.swap_remove(max_index.try_into().unwrap());\n\
    \   |                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in &nums_copy {\n            sum += *n as isize;\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpa9ww13ck.rs:15:20\n\
    \   |\n15 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums_copy.iter().min().unwrap();\n\
    \    let mut max_sum = nums_copy.iter().max().unwrap();\n    let mut min_idx =\
    \ nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx = nums_copy.iter().max_by_key(|&x|\
    \ x).unwrap();\n    let mut min_idx = nums_copy.iter().min_by_key(|&x| x).unwrap();\n\
    \    let mut max_idx = nums_copy.iter().max_by_key(|&x| x).unwrap();\n    let\
    \ mut min_idx = nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums_copy.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums_copy.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums_copy.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let\
    \ mut max_idx = nums_copy.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx\
    \ = nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx = nums_copy.iter().max_by_key(|&x|\
    \ x).unwrap();\n    let mut min_idx = nums_copy.iter().min_by_key(|&x| x).unwrap();\n\
    \    let mut max_idx = nums_copy.iter().max_by_key(|&x| x).unwrap();\n    let\
    \ mut min_idx = nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx\
    \ = nums_copy.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx = nums_copy.iter().min_by_key(|&x|\
    \ x).unwrap();\n    let mut max_idx = nums_copy.iter().max_by_key(|&x| x).unwrap();\n\
    \    let mut min_idx = nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let\
    \ mut max_idx = nums_copy.iter().max_by_key(|&x| x).unwrap();\n    let mut min_idx\
    \ = nums_copy.iter().min_by_key(|&x| x).unwrap();\n    let mut max_idx = nums_copy.iter().max_by_key(|&x|\
    \ x).unwrap();\n    let mut min_\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph5wx2k89.rs:37:17\n   |\n\
    37 |     let mut min_\n   |                 ^ help: add `;` here\n38 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph5wx2k89.rs:10:41\n\
    \   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums.len()\
    \ {\n        let mut nums_digit = 0;\n        while nums_index < nums.len() {\n\
    \            nums_digit += nums_copy[nums_index];\n            nums_index += 1;\n\
    \        }\n        nums_sum += nums_digit;\n        nums_sorted.swap_remove(nums_index);\n\
    \    }\n    nums_sorted.sort_unstable();\n    nums_sorted\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''swap_remove index (is 5) should be < len
    (is 5)'', library/alloc/src/vec/mod.rs:1295:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut num_sum = 0;\n    let mut num_sum_index = 0;\n    let mut num_sum_indexes:\
    \ Vec<isize> = Vec::new();\n    let mut num_sum_indexes_sorted: Vec<isize> = Vec::new();\n\
    \    while nums_copy.len() > 0 {\n        let mut num_sum_indexes: Vec<isize>\
    \ = Vec::new();\n        let mut num_sum_indexes_sorted: Vec<isize> = Vec::new();\n\
    \        for num in nums_copy {\n            let num_digits = num % 10;\n    \
    \        num_sum += num_digits;\n            num_sum_indexes.push(num_sum_index);\n\
    \            num_sum_index += 1;\n        }\n        nums_sorted.sort_unstable_by_key(|&num|\
    \ num_sum_indexes.iter().position(|&index| nums_copy[index] == num).unwrap());\n\
    \        for num in nums_copy {\n            let num_digits = num % 10;\n    \
    \        num_sum_indexes.remove(num_sum_indexes.iter().position(|&index| nums_copy[index]\
    \ == num).unwrap());\n            num_sum += num_digits;\n        }\n        nums_copy\
    \ = nums_sorted;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwdrxogob.rs:26:90\n\
    \   |\n26 |         nums_sorted.sort_unstable_by_key(|&num| num_sum_indexes.iter().position(|&index|\
    \ nums_copy[index] == num).unwrap());\n   |                                  \
    \                                                        ^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwdrxogob.rs:29:77\n\
    \   |\n29 |             num_sum_indexes.remove(num_sum_indexes.iter().position(|&index|\
    \ nums_copy[index] == num).unwrap());\n   |                                  \
    \                                           ^^^^^^^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &num in nums_sorted\
    \ {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|&num| {\n      \
    \  sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvb3gt_y1.rs:13:9\n   |\n\
    13 |     for &num in nums_sorted {\n   |         ^^^^    ----------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1; // skip the digit already processed\n    }\n    let mut nums_copy\
    \ = nums.clone();\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        if nums_copy[index] > sum {\n            nums_copy[index], nums_copy[index\
    \ + 1] = nums_copy[index + 1], nums_copy[index];\n        }\n        index +=\
    \ 1; // skip the digit already processed\n    }\n    nums_copy\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n\
    \  --> /tmp/tmp8kjdcels.rs:22:29\n   |\n22 |             nums_copy[index], nums_copy[index\
    \ + 1] = nums_copy[index + 1], nums_copy[index];\n   |                       \
    \      ^ expected one of `.`, `;`, `?`, `}`, or an operator\n\nerror: aborting\
    \ due to previous error\n\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for &d in &nums_sorted {\n            sum += d;\n    \
    \    }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmphynmu8vs.rs:12:30\n   |\n\
    12 |     nums_sorted.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_sorted`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmphynmu8vs.rs:12:29\n\
    \   |\n12 |     nums_sorted.sort_by_key(|x| {\n   |     ----------- -----------\
    \ ^^^ immutable borrow occurs here\n   |     |           |\n   |     |       \
    \    mutable borrow later used by call\n   |     mutable borrow occurs here\n\
    13 |         let mut sum = 0;\n14 |         for &d in &nums_sorted {\n   |   \
    \                 ----------- second borrow occurs due to use of `nums_sorted`\
    \ in closure\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &i in nums_copy {\n            sum += i;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnqgffmei.rs:14:13\n   |\n\
    14 |         for &i in nums_copy {\n   |             ^^    --------- this expression\
    \ has type `isize`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    let mut nums_sum_index =\
    \ 0;\n    let mut nums_sum_index2 = 0;\n    let mut nums_sum_index3 = 0;\n   \
    \ let mut nums_sum_index4 = 0;\n    let mut nums_sum_index5 = 0;\n    let mut\
    \ nums_sum_index6 = 0;\n    let mut nums_sum_index7 = 0;\n    let mut nums_sum_index8\
    \ = 0;\n    let mut nums_sum_index9 = 0;\n    let mut nums_sum_index10 = 0;\n\
    \    let mut nums_sum_index11 = 0;\n    let mut nums_sum_index12 = 0;\n    let\
    \ mut nums_sum_index13 = 0;\n    let mut nums_sum_index14 = 0;\n    let mut nums_sum_index15\
    \ = 0;\n    let mut nums_sum_index16 = 0;\n    let mut nums_sum_index17 = 0;\n\
    \    let mut nums_sum_index18 = 0;\n    let mut nums_sum_index19 = 0;\n    let\
    \ mut nums_sum_index20 = 0;\n    let mut nums_sum_index21 = 0;\n    let mut nums_sum_index22\
    \ = 0;\n    let mut nums_sum_index23 = 0;\n    let mut nums_sum_index24 = 0;\n\
    \    let mut nums_sum_index25 = 0;\n    let mut nums_sum_index26 = 0;\n    let\
    \ mut nums_sum_index27 = 0;\n    let mut nums_sum_index28 = 0;\n    let mut nums_sum_index29\
    \ = 0;\n    let mut nums_sum_index30 = 0;\n    let mut nums_sum_index31 = 0;\n\
    \    let mut nums_sum_index32 = 0;\n    let mut nums_sum_index33 = 0;\n    let\
    \ mut nums_sum_index34 = 0;\n    let mut nums_sum_index35 = 0;\n    let mut nums_sum_index36\
    \ = 0;\n    let mut nums_sum_index37 = 0;\n    let mut nums_sum_index38 = 0;\n\
    \    let mut nums_sum_index39 = 0;\n    let mut nums_sum_index40 = 0;\n    let\
    \ mut nums_sum_index41 = 0;\n    let mut nums_sum_index42 = 0;\n    let mut nums_sum_index43\
    \ = 0;\n    let mut nums_sum_index44 = 0;\n    let mut nums_sum_index45 = 0;\n\
    \    let mut nums_sum_index46 = 0;\n    let mut nums_sum_index47 = 0;\n    let\
    \ mut nums_sum_index48 = 0;\n\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxs_v493g.rs:10:41\n   |\n\
    10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \        }\n        if sum > 0 {\n            nums_sorted[index] = nums_copy[index];\n\
    \        }\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n  \
    \  let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp5_ivje6b.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        let digit = nums_copy[index].to_digit();\n\
    \        sum += digit;\n        if sum > 0 {\n            nums_copy[index] = digit\
    \ - 1;\n        } else {\n            nums_copy[index] = digit;\n        }\n \
    \       index += 1;\n    }\n    nums_copy.sort_by_key(|&x| x.to_digit());\n  \
    \  nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digit` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpex66dr_a.rs:15:38\n   |\n15 |         let digit\
    \ = nums_copy[index].to_digit();\n   |                                      ^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `to_digit` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmpex66dr_a.rs:24:34\n   |\n\
    24 |     nums_copy.sort_by_key(|&x| x.to_digit());\n   |                     \
    \             ^^^^^^^^ method not found in `isize`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for &i in &nums_copy {\n            sum += i;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpk11hx0wd.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmpk11hx0wd.rs:12:27\n\
    \   |\n12 |     nums_copy.sort_by_key(|&x| {\n   |     --------- ----------- ^^^^\
    \ immutable borrow occurs here\n   |     |         |\n   |     |         mutable\
    \ borrow later used by call\n   |     mutable borrow occurs here\n13 |       \
    \  let mut sum = 0;\n14 |         for &i in &nums_copy {\n   |               \
    \     --------- second borrow occurs due to use of `nums_copy` in closure\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &n in nums_sorted\
    \ {\n        sum += n;\n    }\n    let mut i = 0;\n    while i < nums_sorted.len()\
    \ {\n        if sum < nums_sorted[i] {\n            nums_sorted.swap(i, nums_sorted.len()\
    \ - 1);\n            i += 1;\n        } else {\n            i += 1;\n        }\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp00p25soq.rs:13:9\n   |\n\
    13 |     for &n in nums_sorted {\n   |         ^^    ----------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x;\n   \
    \ });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp7lptnkg3.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums_copy.len()\
    \ {\n        let mut nums_sum_copy = nums_sum;\n        while nums_sum_copy >\
    \ 0 {\n            if nums_copy[nums_index] < nums_sum_copy {\n              \
    \  nums_sorted.swap(nums_index, nums_index + 1);\n                nums_sum_copy\
    \ -= nums_copy[nums_index];\n                nums_index += 1;\n            }\n\
    \            else {\n                break;\n            }\n        }\n      \
    \  nums_sum += nums_copy[nums_index];\n        nums_index += 1;\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /rustc/59eed8a2aac0230a8b53e89d4e99d55912ba6b35/library/core/src/slice/mod.rs:566:36

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1\n    }\n    let mut result = vec![];\n    while sum > 0 {\n     \
    \   let mut index = nums_copy.len();\n        while index > 0 {\n            if\
    \ nums_copy[index - 1] > sum {\n                index -= 1;\n            } else\
    \ {\n                break;\n            }\n        }\n        result.push(nums_copy[index]);\n\
    \        sum -= nums_copy[index];\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp9im54sf0.rs:36:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpwnu7sqrd.rs:19:17\n   |\n19 |         sum - x.to_digits(10)\n\
    \   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx = nums.len();\n\
    \    let mut max_sum = 0;\n    let mut max_idx = nums.len();\n\n    for i in nums.iter()\
    \ {\n        sum += *i;\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n        if sum > max_sum {\n           \
    \ max_sum = sum;\n            max_idx = i;\n        }\n    }\n\n    for i in 0..nums.len()\
    \ {\n        let mut j = i;\n        while j > 0 && nums_copy[j - 1] > nums_copy[j]\
    \ {\n            nums_sorted[j] = nums_copy[j - 1];\n            j -= 1;\n   \
    \     }\n        nums_sorted[j] = nums_copy[j];\n    }\n\n    for i in 0..nums.len()\
    \ {\n        nums_sorted[i] = nums_sorted[min_idx];\n    }\n\n    for i in 0..nums.len()\
    \ {\n        nums_sorted[max_idx] = nums_sorted[i];\n    }\n\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4fzsif9f.rs:23:23\n   |\n\
    23 |             min_idx = i;\n   |                       ^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4fzsif9f.rs:27:23\n\
    \   |\n27 |             max_idx = i;\n   |                       ^ expected `usize`,\
    \ found `&isize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpb0fblic3.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpb0fblic3.rs:14:18\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ captured outer variable\n...\n14 |         for x in nums_copy {\n   |      \
    \            ^^^^^^^^^ move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_copy\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_copy` because\
    \ it is borrowed\n  --> /tmp/tmpb0fblic3.rs:12:27\n   |\n12 |     nums_copy.sort_by_key(|&x|\
    \ {\n   |     --------- ----------- ^^^^ move out of `nums_copy` occurs here\n\
    \   |     |         |\n   |     |         borrow later used by call\n   |    \
    \ borrow of `nums_copy` occurs here\n13 |         let mut sum = 0;\n14 |     \
    \    for x in nums_copy {\n   |                  --------- move occurs due to\
    \ use in closure\n\nerror[E0382]: use of moved value: `nums_copy`\n  --> /tmp/tmpb0fblic3.rs:19:5\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12 |     nums_copy.sort_by_key(|&x| {\n   |              \
    \             ---- value moved into closure here\n13 |         let mut sum = 0;\n\
    14 |         for x in nums_copy {\n   |                  --------- variable moved\
    \ due to use in closure\n...\n19 |     nums_copy\n   |     ^^^^^^^^^ value used\
    \ here after move\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0382, E0505, E0507.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter()\
    \ {\n        sum += *i;\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu3wzke6m.rs:15:26\n   |\n\
    15 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \        }\n        index += 1;\n    }\n    while index < nums_copy.len() {\n\
    \        let mut index = index;\n        while index < nums_copy.len() {\n   \
    \         if nums_copy[index] > 0 {\n                nums_sorted[index] = nums_copy[index];\n\
    \                index += 1;\n                break;\n            }\n        \
    \    index += 1;\n        }\n    }\n    nums_sorted\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp0hmrvmua.rs:38:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp0pyi2634.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmp0pyi2634.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmp0pyi2634.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmp0pyi2634.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums.len()\
    \ {\n        nums_sum += nums_copy[nums_index];\n        nums_index += 1;\n  \
    \      while nums_sum > 0 {\n            nums_sum -= nums_copy[nums_index];\n\
    \            nums_index += 1;\n        }\n        nums_sorted.push(nums_index);\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprkncqwr2.rs:22:26\n   |\n\
    22 |         nums_sorted.push(nums_index);\n   |                          ^^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n22 |         nums_sorted.push(nums_index.try_into().unwrap());\n\
    \   |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x;\n   \
    \ });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp7lptnkg3.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x + sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplrt7dtf7.rs:17:66\n   |\n\
    17 |         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x + sum).unwrap());\n\
    \   |                                                                  ^^^^^^^\
    \ expected `bool`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i;\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk_4xi2fh.rs:13:9\n   |\n\
    13 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum_of_digits = nums.iter().map(|&x|\
    \ x as isize).sum();\n    let mut index = 0;\n    while sum_of_digits > 0 {\n\
    \        if nums_sorted[index] > 0 {\n            sum_of_digits -= nums_sorted[index];\n\
    \        } else {\n            nums_sorted.swap(index, index + 1);\n         \
    \   sum_of_digits -= nums_sorted[index];\n        }\n        index += 1;\n   \
    \ }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpuj5ijyjb.rs:12:9\n\
    \   |\n12 |     let mut sum_of_digits = nums.iter().map(|&x| x as isize).sum();\n\
    \   |         ^^^^^^^^^^^^^^^^^ consider giving `sum_of_digits` a type\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits().unwrap().sum()\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmp1nun9mqw.rs:19:17\n   |\n19 |         sum\
    \ - x.to_digits().unwrap().sum()\n   |                 ^^^^^^^^^ method not found\
    \ in `&isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for num in nums_copy {\n\
    \        sum += num;\n    }\n    nums_copy.sort_by_key(|num| {\n        sum -\
    \ num\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpr7kx_910.rs:16:5\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_copy\
    \ {\n    |                ---------\n    |                |\n    |           \
    \     `nums_copy` moved due to this implicit call to `.into_iter()`\n    |   \
    \             help: consider borrowing to avoid moving into the for loop: `&nums_copy`\n\
    ...\n16  |     nums_copy.sort_by_key(|num| {\n    |     ^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in nums_sorted {\n            sum += x;\n      \
    \  }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpo46p3q7f.rs:12:30\n   |\n\
    12 |     nums_sorted.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_sorted`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpo46p3q7f.rs:14:18\n\
    \   |\n11 |     let mut nums_sorted = nums.clone();\n   |         ---------------\
    \ captured outer variable\n...\n14 |         for x in nums_sorted {\n   |    \
    \              ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_sorted\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted`\
    \ because it is borrowed\n  --> /tmp/tmpo46p3q7f.rs:12:29\n   |\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n13 |         let mut sum = 0;\n14 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpo46p3q7f.rs:19:5\n   |\n11 |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n13 |\
    \         let mut sum = 0;\n14 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n19 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut max_index = 0;\n    let mut min_sum = 0;\n    let mut min_index =\
    \ 0;\n    for i in nums_copy.iter() {\n        sum += *i;\n        if sum > max_sum\
    \ {\n            max_sum = sum;\n            max_index = i;\n        }\n     \
    \   if sum < min_sum {\n            min_sum = sum;\n            min_index = i;\n\
    \        }\n    }\n    nums_copy.swap_remove(max_index);\n    nums_copy.swap_remove(min_index);\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbt3iwuql.rs:21:25\n   |\n\
    21 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |  \
    \           max_index = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbt3iwuql.rs:25:25\n   |\n25 |             min_index = i;\n\
    \   |                         ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n25 |             min_index = *i;\n\
    \   |                         +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for &i in &nums_copy {\n            sum += i;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpk11hx0wd.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0502]: cannot borrow `nums_copy`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmpk11hx0wd.rs:12:27\n\
    \   |\n12 |     nums_copy.sort_by_key(|&x| {\n   |     --------- ----------- ^^^^\
    \ immutable borrow occurs here\n   |     |         |\n   |     |         mutable\
    \ borrow later used by call\n   |     mutable borrow occurs here\n13 |       \
    \  let mut sum = 0;\n14 |         for &i in &nums_copy {\n   |               \
    \     --------- second borrow occurs due to use of `nums_copy` in closure\n\n\
    error: aborting due to previous error; 1 warning emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter()\
    \ {\n        sum += *i;\n        nums_sorted.swap(i, nums_sorted.iter().position(|&x|\
    \ x > sum).unwrap());\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe2gssc2a.rs:15:26\n   |\n\
    15 |         nums_sorted.swap(i, nums_sorted.iter().position(|&x| x > sum).unwrap());\n\
    \   |                          ^ expected `usize`, found `&isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpm1jamt1n.rs:19:17\n   |\n19 |         sum - x.to_digits(10)\n\
    \   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp0pyi2634.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmp0pyi2634.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmp0pyi2634.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmp0pyi2634.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    let\
    \ mut min_sum = 0;\n    let mut min_index = 0;\n    for i in 0..nums.len() {\n\
    \        sum += nums_copy[i];\n        if sum > max_sum {\n            max_sum\
    \ = sum;\n            max_index = i;\n        }\n        if sum < min_sum {\n\
    \            min_sum = sum;\n            min_index = i;\n        }\n    }\n  \
    \  for i in 0..nums.len() {\n        if nums_copy[i] < nums[min_index] {\n   \
    \         nums_sorted.swap(i, min_index);\n        }\n        if nums_copy[i]\
    \ > nums[max_index] {\n            nums_sorted.swap(i, max_index);\n        }\n\
    \    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp_z9agw2s.rs:42:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    let mut nums_sum_index =\
    \ 0;\n    let mut nums_sum_index2 = 0;\n    let mut nums_sum_index3 = 0;\n   \
    \ let mut nums_sum_index4 = 0;\n    let mut nums_sum_index5 = 0;\n    let mut\
    \ nums_sum_index6 = 0;\n    let mut nums_sum_index7 = 0;\n    let mut nums_sum_index8\
    \ = 0;\n    let mut nums_sum_index9 = 0;\n    let mut nums_sum_index10 = 0;\n\
    \    let mut nums_sum_index11 = 0;\n    let mut nums_sum_index12 = 0;\n    let\
    \ mut nums_sum_index13 = 0;\n    let mut nums_sum_index14 = 0;\n    let mut nums_sum_index15\
    \ = 0;\n    let mut nums_sum_index16 = 0;\n    let mut nums_sum_index17 = 0;\n\
    \    let mut nums_sum_index18 = 0;\n    let mut nums_sum_index19 = 0;\n    let\
    \ mut nums_sum_index20 = 0;\n    let mut nums_sum_index21 = 0;\n    let mut nums_sum_index22\
    \ = 0;\n    let mut nums_sum_index23 = 0;\n    let mut nums_sum_index24 = 0;\n\
    \    let mut nums_sum_index25 = 0;\n    let mut nums_sum_index26 = 0;\n    let\
    \ mut nums_sum_index27 = 0;\n    let mut nums_sum_index28 = 0;\n    let mut nums_sum_index29\
    \ = 0;\n    let mut nums_sum_index30 = 0;\n    let mut nums_sum_index31 = 0;\n\
    \    let mut nums_sum_index32 = 0;\n    let mut nums_sum_index33 = 0;\n    let\
    \ mut nums_sum_index34 = 0;\n    let mut nums_sum_index35 = 0;\n    let mut nums_sum_index36\
    \ = 0;\n    let mut nums_sum_index37 = 0;\n    let mut nums_sum_index38 = 0;\n\
    \    let mut nums_sum_index39 = 0;\n    let mut nums_sum_index40 = 0;\n    let\
    \ mut nums_sum_index41 = 0;\n    let mut nums_sum_index42 = 0;\n    let mut nums_sum_index43\
    \ = 0;\n    let mut nums_sum_index44 = 0;\n    let mut nums_sum_index45 = 0;\n\
    \    let mut nums_sum_index46 = 0;\n    let mut nums_sum_index47 = 0;\n    let\
    \ mut nums_sum_index48 = 0;\n\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxs_v493g.rs:10:41\n   |\n\
    10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n    let mut\
    \ max_sum = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().min().unwrap();\n\
    \    let mut max_idx = nums.iter().max().unwrap();\n    let mut min_idx = nums.iter().\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpdr5ssj89.rs:49:1\n   |\n49\
    \ | }\n   | ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmpdr5ssj89.rs:48:35\n\
    \   |\n48 |     let mut min_idx = nums.iter().\n   |                         \
    \          ^ help: add `;` here\n49 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdr5ssj89.rs:10:41\n   |\n10 | fn order_by_points(nums:\
    \ Vec<isize>) -> Vec<isize> {\n   |    ---------------                      ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index +=\n            if nums_copy[index] > 0 {\n                1\n       \
    \     } else {\n                -1\n            };\n    }\n    nums_copy.sort_by_key(|&x|\
    \ {\n        sum - x.to_digits().unwrap().sum()\n    });\n    nums_copy\n}\n\n\
    fn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdcy7xajv.rs:20:17\n\
    \   |\n20 |                 -1\n   |                 ^^ the trait `Neg` is not\
    \ implemented for `usize`\n\nerror[E0599]: no method named `to_digits` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmpdcy7xajv.rs:24:17\n   |\n24\
    \ |         sum - x.to_digits().unwrap().sum()\n   |                 ^^^^^^^^^\
    \ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1; // skip the digit to compare\n    }\n    nums_copy.sort_by_key(|&x|\
    \ {\n        sum - x;\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpocn6dvkl.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &num in nums_copy {\n\
    \        sum += num;\n    }\n    nums_copy.sort_by_key(|&num| {\n        sum -\
    \ num\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqh0v9pv.rs:13:9\n   |\n\
    13 |     for &num in nums_copy {\n   |         ^^^^    --------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n        } else {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n            index += 1;\n\
    \            sum = 0;\n        }\n    }\n    nums_sorted\n}\n\nfn main() {\n \
    \   let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6na7jxw4.rs:21:70\n   |\n\
    21 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x +\
    \ sum).unwrap());\n   |                                                      \
    \                ^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum_of_digits = nums.iter().map(|x|\
    \ x.digits()).sum();\n    let mut index = 0;\n    while sum_of_digits != 0 {\n\
    \        if sum_of_digits < nums_sorted[index].digits() {\n            index +=\
    \ 1;\n        }\n        nums_sorted.swap(index, nums_sorted.len());\n       \
    \ sum_of_digits -= nums_sorted[index].digits();\n        index -= 1;\n    }\n\
    \    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for reference `&isize` in\
    \ the current scope\n  --> /tmp/tmp3p8us1_i.rs:12:51\n   |\n12 |     let mut sum_of_digits\
    \ = nums.iter().map(|x| x.digits()).sum();\n   |                             \
    \                      ^^^^^^ method not found in `&isize`\n\nerror[E0599]: no\
    \ method named `digits` found for type `isize` in the current scope\n  --> /tmp/tmp3p8us1_i.rs:15:47\n\
    \   |\n15 |         if sum_of_digits < nums_sorted[index].digits() {\n   |   \
    \                                            ^^^^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp3p8us1_i.rs:19:45\n   |\n19 |         sum_of_digits -=\
    \ nums_sorted[index].digits();\n   |                                         \
    \    ^^^^^^ method not found in `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in nums_copy {\n            sum += n.to_digits();\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp856qagnt.rs:14:13\n   |\n\
    14 |         for &n in nums_copy {\n   |             ^^    --------- this expression\
    \ has type `isize`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpwnu7sqrd.rs:19:17\n   |\n19 |         sum - x.to_digits(10)\n\
    \   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = 0;\n\
    \    let mut min_idx = nums.len();\n    let mut min_val = nums.len();\n    for\
    \ i in nums_copy.iter() {\n        sum += *i;\n        if sum < min_sum {\n  \
    \          min_sum = sum;\n            min_idx = i;\n            min_val = *i;\n\
    \        }\n    }\n    nums_copy.swap_remove(min_idx);\n    nums_copy.swap_remove(min_val);\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpui1hx_bx.rs:20:23\n   |\n\
    20 |             min_idx = i;\n   |                       ^ expected `usize`,\
    \ found `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpui1hx_bx.rs:21:23\n\
    \   |\n21 |             min_val = *i;\n   |                       ^^ expected\
    \ `usize`, found `isize`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for reference `&isize`\
    \ in the current scope\n  --> /tmp/tmpf86g2siv.rs:19:17\n   |\n19 |         sum\
    \ - x.to_digits(10)\n   |                 ^^^^^^^^^ method not found in `&isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut min_sum = 0;\n    let mut\
    \ max_index = -1;\n    let mut min_index = -1;\n    for i in nums_copy.iter()\
    \ {\n        sum += *i;\n        if sum > max_sum {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n        if sum < min_sum {\n         \
    \   min_sum = sum;\n            min_index = i;\n        }\n    }\n    for i in\
    \ nums_copy.iter_mut() {\n        *i = *max_index;\n    }\n    for i in nums_sorted.iter_mut()\
    \ {\n        *i = *min_index;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp96n_86jh.rs:22:25\n   |\n\
    22 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |  \
    \           max_index = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp96n_86jh.rs:26:25\n   |\n26 |             min_index = i;\n\
    \   |                         ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n26 |             min_index = *i;\n\
    \   |                         +\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmp96n_86jh.rs:30:14\n   |\n30 |         *i = *max_index;\n   |  \
    \            ^^^^^^^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmp96n_86jh.rs:33:14\n   |\n33 |         *i = *min_index;\n   |  \
    \            ^^^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        let digit = nums_copy[index];\n  \
    \      sum += digit;\n        if sum > 0 {\n            nums_copy[index] = sum\
    \ % 10;\n            sum += nums_copy[index];\n        }\n        index += 1;\n\
    \    }\n    nums_copy.sort_by_key(|x| x.0);\n    nums_copy\n}\n\nfn main() {\n\
    \    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1,\
    \ -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0609]: no field `0` on type `&isize`\n  --> /tmp/tmpq33l5d72.rs:23:33\n\
    \   |\n23 |     nums_copy.sort_by_key(|x| x.0);\n   |                        \
    \         ^\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0609`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for i in nums_sorted.iter()\
    \ {\n        sum += *i;\n    }\n    for i in nums_sorted.iter_mut() {\n      \
    \  *i -= sum;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 23, 11, 1, 0]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpd3b_912w.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x.to_digits(10)\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpm1jamt1n.rs:19:17\n   |\n19 |         sum - x.to_digits(10)\n\
    \   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1; // increment index\n    }\n    nums_copy.sort_by_key(|&x| {\n  \
    \      sum - x;\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpuey0ll4_.rs:26:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for num in nums_sorted\
    \ {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num| {\n       \
    \ sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmp8kdxhcxt.rs:16:5\n\
    \    |\n11  |     let mut nums_sorted = nums.clone();\n    |         ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_sorted\
    \ {\n    |                -----------\n    |                |\n    |         \
    \       `nums_sorted` moved due to this implicit call to `.into_iter()`\n    |\
    \                help: consider borrowing to avoid moving into the for loop: `&nums_sorted`\n\
    ...\n16  |     nums_sorted.sort_by_key(|num| {\n    |     ^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_sorted`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut max_sum = 0;\n    let mut\
    \ min_idx = 0;\n    let mut max_idx = 0;\n    let mut min_idx2 = 0;\n    let mut\
    \ max_idx2 = 0;\n    let mut min_idx3 = 0;\n    let mut max_idx3 = 0;\n    let\
    \ mut min_idx4 = 0;\n    let mut max_idx4 = 0;\n    let mut min_idx5 = 0;\n  \
    \  let mut max_idx5 = 0;\n    let mut min_idx6 = 0;\n    let mut max_idx6 = 0;\n\
    \    let mut min_idx7 = 0;\n    let mut max_idx7 = 0;\n    let mut min_idx8 =\
    \ 0;\n    let mut max_idx8 = 0;\n    let mut min_idx9 = 0;\n    let mut max_idx9\
    \ = 0;\n    let mut min_idx10 = 0;\n    let mut max_idx10 = 0;\n    let mut min_idx11\
    \ = 0;\n    let mut max_idx11 = 0;\n    let mut min_idx12 = 0;\n    let mut max_idx12\
    \ = 0;\n    let mut min_idx13 = 0;\n    let mut max_idx13 = 0;\n    let mut min_idx14\
    \ = 0;\n    let mut max_idx14 = 0;\n    let mut min_idx15 = 0;\n    let mut max_idx15\
    \ = 0;\n    let mut min_idx16 = 0;\n    let mut max_idx16 = 0;\n    let mut min_idx17\
    \ = 0;\n    let mut max_idx17 = 0;\n    let mut min_idx18 = 0;\n    let mut max_idx18\
    \ = 0;\n    let mut min_idx19 = 0;\n    let mut max_idx19 = 0;\n    let mut min_idx20\
    \ = 0;\n    let mut max_idx20 = 0;\n    let mut min_idx21 = 0;\n    let mut max_idx21\
    \ = 0;\n    let mut min_idx22 = 0;\n    let mut max_idx22 = 0;\n    let mut min_idx23\
    \ = 0;\n    let mut max_idx23 = 0;\n    let mut min_idx24 = 0;\n    let mut max_idx24\
    \ = 0;\n    let mut min_idx25 = 0;\n    let mut max_idx25 = 0;\n    let mut min_idx26\
    \ = 0;\n    let mut max_idx26 = 0;\n    let mut min_idx27 = 0;\n    let mut max_idx27\
    \ = 0;\n    let mut min_idx28 = 0;\n    let mut max_idx28 = 0;\n    let mut min_idx29\
    \ = 0;\n    let mut max_idx29 = 0;\n    let mut min_idx30 = 0;\n    let mut max_idx30\
    \ = 0;\n    let \n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmppvgv0olx.rs:77:1\n  \
    \ |\n77 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut min_sum = nums.iter().min().unwrap();\n\
    \    let mut max_sum = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = nums.iter().max().unwrap();\n    let mut min_num = nums.iter().min().unwrap();\n\
    \    let mut max_num = num\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpde9a4vpr.rs:48:26\n   |\n\
    48 |     let mut max_num = num\n   |                          ^ help: add `;`\
    \ here\n49 | }\n   | - unexpected token\n\nerror[E0425]: cannot find value `num`\
    \ in this scope\n  --> /tmp/tmpde9a4vpr.rs:48:23\n   |\n48 |     let mut max_num\
    \ = num\n   |                       ^^^ help: a local variable with a similar\
    \ name exists: `nums`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpde9a4vpr.rs:10:41\n\
    \   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |    ---------------\
    \                      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in nums_sorted {\n            sum += x;\n      \
    \  }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpo46p3q7f.rs:12:30\n   |\n\
    12 |     nums_sorted.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_sorted`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpo46p3q7f.rs:14:18\n\
    \   |\n11 |     let mut nums_sorted = nums.clone();\n   |         ---------------\
    \ captured outer variable\n...\n14 |         for x in nums_sorted {\n   |    \
    \              ^^^^^^^^^^^ move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_sorted\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_sorted`\
    \ because it is borrowed\n  --> /tmp/tmpo46p3q7f.rs:12:29\n   |\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |     ----------- ----------- ^^^ move out of `nums_sorted` occurs here\n\
    \   |     |           |\n   |     |           borrow later used by call\n   |\
    \     borrow of `nums_sorted` occurs here\n13 |         let mut sum = 0;\n14 |\
    \         for x in nums_sorted {\n   |                  ----------- move occurs\
    \ due to use in closure\n\nerror[E0382]: use of moved value: `nums_sorted`\n \
    \ --> /tmp/tmpo46p3q7f.rs:19:5\n   |\n11 |     let mut nums_sorted = nums.clone();\n\
    \   |         --------------- move occurs because `nums_sorted` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n12 |     nums_sorted.sort_by_key(|x|\
    \ {\n   |                             --- value moved into closure here\n13 |\
    \         let mut sum = 0;\n14 |         for x in nums_sorted {\n   |        \
    \          ----------- variable moved due to use in closure\n...\n19 |     nums_sorted\n\
    \   |     ^^^^^^^^^^^ value used here after move\n\nerror: aborting due to 3 previous\
    \ errors; 1 warning emitted\n\nSome errors have detailed explanations: E0382,\
    \ E0505, E0507.\nFor more information about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut max_sum = 0;\n\
    \    let mut max_index = 0;\n    let mut min_sum = 0;\n    let mut min_index =\
    \ 0;\n    for i in nums_copy {\n        sum += i;\n        if sum > max_sum {\n\
    \            max_sum = sum;\n            max_index = i;\n        }\n        if\
    \ sum < min_sum {\n            min_sum = sum;\n            min_index = i;\n  \
    \      }\n    }\n    nums_copy.swap_remove(max_index);\n    nums_copy.swap_remove(min_index);\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3zygfklv.rs:28:27\n   |\n\
    28 |     nums_copy.swap_remove(max_index);\n   |                           ^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |     nums_copy.swap_remove(max_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3zygfklv.rs:29:27\n   |\n29 |     nums_copy.swap_remove(min_index);\n\
    \   |                           ^^^^^^^^^ expected `usize`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n29 |     nums_copy.swap_remove(min_index.try_into().unwrap());\n\
    \   |                                    ++++++++++++++++++++\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        let num = nums_copy[index];\n        let digits = nums_copy[index..].iter().map(|&x|\
    \ x % 10).collect::<Vec<_>>();\n        let mut digits_sum = digits.iter().sum::<isize>();\n\
    \        if digits_sum > sum {\n            sum = digits_sum;\n            nums_sorted\
    \ = nums_copy;\n        }\n        if digits_sum == sum {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x == num).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpu66x606r.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpu66x606r.rs:18:13\n\
    \   |\n18 |         let mut digits_sum = digits.iter().sum::<isize>();\n   | \
    \            ----^^^^^^^^^^\n   |             |\n   |             help: remove\
    \ this `mut`\n\nerror[E0382]: borrow of moved value: `nums_copy`\n  --> /tmp/tmpu66x606r.rs:15:19\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n...\n15 |     while index < nums_copy.len() {\n   |      \
    \             ^^^^^^^^^ value borrowed here after move\n...\n21 |            \
    \ nums_sorted = nums_copy;\n   |                           --------- value moved\
    \ here, in previous iteration of loop\n\nerror[E0502]: cannot borrow `nums_sorted`\
    \ as immutable because it is also borrowed as mutable\n  --> /tmp/tmpu66x606r.rs:24:37\n\
    \   |\n24 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == num).unwrap());\n   |             ----------- ----        ^^^^^^^^^^^ immutable\
    \ borrow occurs here\n   |             |           |\n   |             |     \
    \      mutable borrow later used by call\n   |             mutable borrow occurs\
    \ here\n\nerror: aborting due to 2 previous errors; 2 warnings emitted\n\nSome\
    \ errors have detailed explanations: E0382, E0502.\nFor more information about\
    \ an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    let\
    \ mut min_sum = 0;\n    let mut min_index = 0;\n    for i in 0..nums.len() {\n\
    \        sum += nums_copy[i];\n        if sum > max_sum {\n            max_sum\
    \ = sum;\n            max_index = i;\n        }\n        if sum < min_sum {\n\
    \            min_sum = sum;\n            min_index = i;\n        }\n    }\n  \
    \  for i in 0..nums.len() {\n        if nums_copy[i] > 0 {\n            nums_sorted[max_index]\
    \ = nums_copy[i];\n            nums_copy[i] = 0;\n        }\n    }\n    for i\
    \ in 0..nums_sorted.len() {\n        if nums_sorted[i] > 0 {\n            nums_sorted[min_index]\
    \ = nums_sorted[i];\n            nums_sorted[i] = 0;\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 0, -1, -11, 0]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpbh4pxw6s.rs:46:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1; // skip the digit we already have\n    }\n    let mut nums_copy\
    \ = nums_copy.clone();\n    nums_copy.sort();\n    let mut index = 0;\n    while\
    \ index < nums_copy.len() {\n        if nums_copy[index] == sum {\n          \
    \  nums_copy[index] = index;\n        }\n        index += 1; // skip the digit\
    \ we already have\n    }\n    nums_copy\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ykb411u.rs:23:32\n   |\n\
    23 |             nums_copy[index] = index;\n   |                             \
    \   ^^^^^ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &num in nums_sorted\
    \ {\n        sum += num;\n    }\n    let mut i = 0;\n    while i < nums_sorted.len()\
    \ {\n        if nums_sorted[i] < 0 {\n            nums_sorted[i] = -nums_sorted[i];\n\
    \            nums_sorted.swap(i, nums_sorted.len() - 1 - i);\n        }\n    \
    \    i += 1;\n    }\n    nums_sorted.sort_unstable_by_key(|&num| sum - num);\n\
    \    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2vgbhzt4.rs:13:9\n   |\n\
    13 |     for &num in nums_sorted {\n   |         ^^^^    ----------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for &i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum - i\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp87l3leh7.rs:13:9\n   |\n\
    13 |     for &i in nums_copy {\n   |         ^^    --------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x;\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpiiviuy9f.rs:16:5\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for i in nums_copy {\n\
    \    |              ---------\n    |              |\n    |              `nums_copy`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums_copy`\n...\n16\
    \  |     nums_copy.sort_by_key(|x| {\n    |     ^^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_copy`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    while nums_index < nums.len()\
    \ {\n        nums_sum += nums_copy[nums_index];\n        nums_index += 1;\n  \
    \      while nums_index < nums.len() {\n            if nums_sum > nums_copy[nums_index]\
    \ {\n                nums_sorted.swap(nums_index, nums_index - 1);\n         \
    \       nums_sum += nums_copy[nums_index];\n                nums_index += 1;\n\
    \            }\n            nums_index += 1;\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -1, 11, -12, -11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpuj4m7hvz.rs:32:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in &mut sorted_nums {\n            sum += *x;\n\
    \        }\n        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpp2fbeqst.rs:12:30\n   |\n\
    12 |     sorted_nums.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0499]: cannot borrow `sorted_nums`\
    \ as mutable more than once at a time\n  --> /tmp/tmpp2fbeqst.rs:12:29\n   |\n\
    12 |     sorted_nums.sort_by_key(|x| {\n   |     ----------- ----------- ^^^ second\
    \ mutable borrow occurs here\n   |     |           |\n   |     |           first\
    \ borrow later used by call\n   |     first mutable borrow occurs here\n13 | \
    \        let mut sum = 0;\n14 |         for x in &mut sorted_nums {\n   |    \
    \                   ----------- second borrow occurs due to use of `sorted_nums`\
    \ in closure\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0499`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp0pyi2634.rs:12:28\n   |\n\
    12 |     nums_copy.sort_by_key(|x| {\n   |                            ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n   --> /tmp/tmp0pyi2634.rs:14:18\n\
    \    |\n11  |       let mut nums_copy = nums.clone();\n    |           -------------\
    \ captured outer variable\n12  |       nums_copy.sort_by_key(|x| {\n    |  ___________________________-\n\
    13  | |         let mut sum = 0;\n14  | |         for x in nums_copy {\n    |\
    \ |                  ^^^^^^^^^\n    | |                  |\n    | |          \
    \        `nums_copy` moved due to this implicit call to `.into_iter()`\n    |\
    \ |                  move occurs because `nums_copy` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n15  | |             sum += x;\n16  | |\
    \         }\n17  | |         sum\n18  | |     });\n    | |_____- captured by this\
    \ `FnMut` closure\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_copy`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n14  |   \
    \      for x in &nums_copy {\n    |                  +\n\nerror[E0505]: cannot\
    \ move out of `nums_copy` because it is borrowed\n  --> /tmp/tmp0pyi2634.rs:12:27\n\
    \   |\n12 |       nums_copy.sort_by_key(|x| {\n   |       -                  \
    \   ^^^ move out of `nums_copy` occurs here\n   |  _____|\n   | |\n13 | |    \
    \     let mut sum = 0;\n14 | |         for x in nums_copy {\n   | |          \
    \        --------- move occurs due to use in closure\n15 | |             sum +=\
    \ x;\n16 | |         }\n17 | |         sum\n18 | |     });\n   | |______- borrow\
    \ of `nums_copy` occurs here\n\nerror[E0382]: use of moved value: `nums_copy`\n\
    \  --> /tmp/tmp0pyi2634.rs:19:5\n   |\n11 |     let mut nums_copy = nums.clone();\n\
    \   |         ------------- move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trai"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in &nums_copy {\n            sum += n.digits().sum();\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpp61996bg.rs:15:22\n   |\n15 |             sum += n.digits().sum();\n\
    \   |                      ^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps41mheys.rs:18:70\n   |\n\
    18 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x +\
    \ sum).unwrap());\n   |                                                      \
    \                ^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        nums_sorted.swap(index, nums_sorted.iter().position(|&x|\
    \ x == sum).unwrap());\n        index += 1;\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmp9t3zvmhm.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmp9t3zvmhm.rs:17:33\n   |\n17 |\
    \         nums_sorted.swap(index, nums_sorted.iter().position(|&x| x == sum).unwrap());\n\
    \   |         ----------- ----        ^^^^^^^^^^^ immutable borrow occurs here\n\
    \   |         |           |\n   |         |           mutable borrow later used\
    \ by call\n   |         mutable borrow occurs here\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy {\n\
    \        sum += i;\n    }\n    nums_copy.sort_by_key(|x| {\n        sum - x;\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_copy`\n   --> /tmp/tmpiiviuy9f.rs:16:5\n\
    \    |\n11  |     let mut nums_copy = nums.clone();\n    |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for i in nums_copy {\n\
    \    |              ---------\n    |              |\n    |              `nums_copy`\
    \ moved due to this implicit call to `.into_iter()`\n    |              help:\
    \ consider borrowing to avoid moving into the for loop: `&nums_copy`\n...\n16\
    \  |     nums_copy.sort_by_key(|x| {\n    |     ^^^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `nums_copy`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|&x| {\n        let mut\
    \ sum = 0;\n        for x in nums_copy {\n            sum += x;\n        }\n \
    \       sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpb0fblic3.rs:12:29\n   |\n\
    12 |     nums_copy.sort_by_key(|&x| {\n   |                             ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums_copy`, a captured variable in an `FnMut` closure\n  --> /tmp/tmpb0fblic3.rs:14:18\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ captured outer variable\n...\n14 |         for x in nums_copy {\n   |      \
    \            ^^^^^^^^^ move occurs because `nums_copy` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums_copy\
    \ {\n   |                  +\n\nerror[E0505]: cannot move out of `nums_copy` because\
    \ it is borrowed\n  --> /tmp/tmpb0fblic3.rs:12:27\n   |\n12 |     nums_copy.sort_by_key(|&x|\
    \ {\n   |     --------- ----------- ^^^^ move out of `nums_copy` occurs here\n\
    \   |     |         |\n   |     |         borrow later used by call\n   |    \
    \ borrow of `nums_copy` occurs here\n13 |         let mut sum = 0;\n14 |     \
    \    for x in nums_copy {\n   |                  --------- move occurs due to\
    \ use in closure\n\nerror[E0382]: use of moved value: `nums_copy`\n  --> /tmp/tmpb0fblic3.rs:19:5\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         -------------\
    \ move occurs because `nums_copy` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12 |     nums_copy.sort_by_key(|&x| {\n   |              \
    \             ---- value moved into closure here\n13 |         let mut sum = 0;\n\
    14 |         for x in nums_copy {\n   |                  --------- variable moved\
    \ due to use in closure\n...\n19 |     nums_copy\n   |     ^^^^^^^^^ value used\
    \ here after move\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0382, E0505, E0507.\nFor more information\
    \ about an error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    nums_copy.sort_by_key(|&x| {\n        sum - x.to_digits().unwrap().sum()\n\
    \    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpz_b6br_e.rs:19:17\n   |\n19 |         sum - x.to_digits().unwrap().sum()\n\
    \   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    nums_sorted.sort_unstable_by_key(|x| {\n  \
    \      let mut sum = 0;\n        for &i in &nums_sorted {\n            sum +=\
    \ i;\n        }\n        sum\n    });\n    nums_sorted\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmpcx9l3486.rs:12:39\n   |\n\
    12 |     nums_sorted.sort_unstable_by_key(|x| {\n   |                        \
    \               ^ help: if this is intentional, prefix it with an underscore:\
    \ `_x`\n   |\n   = note: `#[warn(unused_variables)]` on by default\n\nerror[E0502]:\
    \ cannot borrow `nums_sorted` as immutable because it is also borrowed as mutable\n\
    \  --> /tmp/tmpcx9l3486.rs:12:38\n   |\n12 |     nums_sorted.sort_unstable_by_key(|x|\
    \ {\n   |     ----------- -------------------- ^^^ immutable borrow occurs here\n\
    \   |     |           |\n   |     |           mutable borrow later used by call\n\
    \   |     mutable borrow occurs here\n13 |         let mut sum = 0;\n14 |    \
    \     for &i in &nums_sorted {\n   |                    ----------- second borrow\
    \ occurs due to use of `nums_sorted` in closure\n\nerror: aborting due to previous\
    \ error; 1 warning emitted\n\nFor more information about this error, try `rustc\
    \ --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for num in nums_sorted\
    \ {\n        sum += num;\n    }\n    nums_sorted.sort_by_key(|num| {\n       \
    \ sum - num\n    });\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `nums_sorted`\n   --> /tmp/tmp8kdxhcxt.rs:16:5\n\
    \    |\n11  |     let mut nums_sorted = nums.clone();\n    |         ---------------\
    \ move occurs because `nums_sorted` has type `Vec<isize>`, which does not implement\
    \ the `Copy` trait\n12  |     let mut sum = 0;\n13  |     for num in nums_sorted\
    \ {\n    |                -----------\n    |                |\n    |         \
    \       `nums_sorted` moved due to this implicit call to `.into_iter()`\n    |\
    \                help: consider borrowing to avoid moving into the for loop: `&nums_sorted`\n\
    ...\n16  |     nums_sorted.sort_by_key(|num| {\n    |     ^^^^^^^^^^^ value borrowed\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `nums_sorted`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x + sum).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps41mheys.rs:18:70\n   |\n\
    18 |             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x +\
    \ sum).unwrap());\n   |                                                      \
    \                ^^^^^^^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut max_sum = 0;\n    let mut\
    \ min_idx = nums.len() - 1;\n    let mut max_idx = nums.len() - 1;\n    while\
    \ nums_sorted.len() > 0 {\n        let mut min_idx = nums_sorted.len() - 1;\n\
    \        let mut max_idx = nums_sorted.len() - 1;\n        while nums_sorted[min_idx]\
    \ > 0 {\n            min_idx -= 1;\n        }\n        while nums_sorted[max_idx]\
    \ < 0 {\n            max_idx += 1;\n        }\n        let mut min_sum = nums_sorted[min_idx];\n\
    \        let mut max_sum = nums_sorted[max_idx];\n        while min_sum + max_sum\
    \ > sum {\n            if min_sum > max_sum {\n                min_sum -= 1;\n\
    \                min_idx -= 1;\n            } else {\n                max_sum\
    \ += 1;\n                max_idx += 1;\n            }\n        }\n        nums_sorted.swap(min_idx,\
    \ max_idx);\n        sum += max_sum;\n        min_sum += nums_sorted[min_idx];\n\
    \        max_sum += nums_sorted[max_idx];\n    }\n    nums_sorted.reverse();\n\
    \    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 5 but the
    index is 5'', /tmp/tmp4860six9.rs:24:15

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in nums {\n            sum += x;\n        }\n  \
    \      sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `x`\n  --> /tmp/tmp1cogekbd.rs:12:30\n   |\n\
    12 |     sorted_nums.sort_by_key(|x| {\n   |                              ^ help:\
    \ if this is intentional, prefix it with an underscore: `_x`\n   |\n   = note:\
    \ `#[warn(unused_variables)]` on by default\n\nerror[E0507]: cannot move out of\
    \ `nums`, a captured variable in an `FnMut` closure\n  --> /tmp/tmp1cogekbd.rs:14:18\n\
    \   |\n10 | fn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n   |       \
    \             ---- captured outer variable\n...\n14 |         for x in nums {\n\
    \   |                  ^^^^ move occurs because `nums` has type `Vec<isize>`,\
    \ which does not implement the `Copy` trait\n   |\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content\n   |\n14 |         for x in &nums {\n\
    \   |                  +\n\nerror: aborting due to previous error; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    for\
    \ i in nums_copy.iter() {\n        sum += *i;\n        if sum > max_sum {\n  \
    \          max_sum = sum;\n            max_index = i;\n        }\n    }\n    for\
    \ i in nums_copy.iter_mut() {\n        *i = *max_index;\n    }\n    nums_sorted.sort_unstable();\n\
    \    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n   \
    \ assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp99_twxgc.rs:20:25\n   |\n\
    20 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n20 |  \
    \           max_index = *i;\n   |                         +\n\nerror[E0614]: type\
    \ `{integer}` cannot be dereferenced\n  --> /tmp/tmp99_twxgc.rs:24:14\n   |\n\
    24 |         *i = *max_index;\n   |              ^^^^^^^^^^\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0614.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    let\
    \ mut min_sum = 0;\n    let mut min_index = 0;\n    for i in nums_copy.iter()\
    \ {\n        sum += *i;\n        if sum > max_sum {\n            max_sum = sum;\n\
    \            max_index = i;\n        }\n        if sum < min_sum {\n         \
    \   min_sum = sum;\n            min_index = i;\n        }\n    }\n    for i in\
    \ nums_copy.iter_mut() {\n        *i = *max_index;\n    }\n    for i in nums_sorted.iter_mut()\
    \ {\n        *i = *min_index;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvgp5sqny.rs:22:25\n   |\n\
    22 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n22 |  \
    \           max_index = *i;\n   |                         +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpvgp5sqny.rs:26:25\n   |\n26 |             min_index = i;\n\
    \   |                         ^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n26 |             min_index = *i;\n\
    \   |                         +\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmpvgp5sqny.rs:30:14\n   |\n30 |         *i = *max_index;\n   |  \
    \            ^^^^^^^^^^\n\nerror[E0614]: type `{integer}` cannot be dereferenced\n\
    \  --> /tmp/tmpvgp5sqny.rs:33:14\n   |\n33 |         *i = *min_index;\n   |  \
    \            ^^^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0614.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    let mut index = 0;\n  \
    \  while index < nums_copy.len() {\n        sum += nums_copy[index];\n       \
    \ index += 1;\n    }\n    let mut nums_copy = nums.clone();\n    nums_copy.sort();\n\
    \    let mut index = 0;\n    while index < nums_copy.len() {\n        nums_copy[index]\
    \ -= sum;\n        index += 1;\n    }\n    nums_copy\n}\n\nfn main() {\n    let\
    \ candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[0, 1, 11, 13, 23]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp0ecx1bkp.rs:30:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_sorted = nums.clone();\n    let mut sum = 0;\n    for &num in nums_sorted\
    \ {\n        sum += num;\n    }\n    let mut i = 0;\n    while i < nums_sorted.len()\
    \ {\n        let mut j = i;\n        while j < nums_sorted.len() && nums_sorted[j]\
    \ == sum {\n            j += 1\n        }\n        if j > i {\n            nums_sorted.swap(i,\
    \ j);\n            i += 1;\n        }\n    }\n    nums_sorted\n}\n\nfn main()\
    \ {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11,\
    \ -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnjwwxiwb.rs:13:9\n   |\n\
    13 |     for &num in nums_sorted {\n   |         ^^^^    ----------- this expression\
    \ has type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &i in nums_copy {\n            sum += i;\n        }\n\
    \        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnqgffmei.rs:14:13\n   |\n\
    14 |         for &i in nums_copy {\n   |             ^^    --------- this expression\
    \ has type `isize`\n   |             |\n   |             expected `isize`, found\
    \ reference\n   |\n   = note:   expected type `isize`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum > 0 {\n            nums_sorted.swap(index,\
    \ nums_sorted.iter().position(|&x| x > sum).unwrap());\n        }\n        index\
    \ += 1;\n    }\n    nums_sorted\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpivs7jadj.rs:11:9\n\
    \   |\n11 |     let mut nums_copy = nums.clone();\n   |         ----^^^^^^^^^\n\
    \   |         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0502]: cannot borrow `nums_sorted` as immutable because\
    \ it is also borrowed as mutable\n  --> /tmp/tmpivs7jadj.rs:18:37\n   |\n18 |\
    \             nums_sorted.swap(index, nums_sorted.iter().position(|&x| x > sum).unwrap());\n\
    \   |             ----------- ----        ^^^^^^^^^^^ immutable borrow occurs\
    \ here\n   |             |           |\n   |             |           mutable borrow\
    \ later used by call\n   |             mutable borrow occurs here\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut index = 0;\n    while index < nums_copy.len() {\n\
    \        sum += nums_copy[index];\n        if sum < 0 {\n            sum = 0;\n\
    \            index += 1;\n        }\n        if sum > 0 {\n            nums_sorted[index]\
    \ = sum;\n            index += 1;\n        }\n    }\n    nums_sorted\n}\n\nfn\
    \ main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 12, 11, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp0if8j_si.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut sum = 0;\n    for i in nums_copy.iter()\
    \ {\n        sum += *i;\n    }\n    nums_copy.sort_by_key(|&i| {\n        sum\
    \ - i\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate = order_by_points;\n\
    \    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n\
    \    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
    \ 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463,\
    \ 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98, 2, -3]), vec![-3, -32,\
    \ -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n    assert_eq!(candidate(vec![0,\
    \ 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4, 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[11, 1, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpm_lylrz0.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    nums_copy.sort_by_key(|x| {\n        let mut\
    \ sum = 0;\n        for &n in &nums_copy {\n            sum += *n as isize;\n\
    \        }\n        sum\n    });\n    nums_copy\n}\n\nfn main() {\n    let candidate\
    \ = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `isize` cannot be dereferenced\n  --> /tmp/tmpa9ww13ck.rs:15:20\n\
    \   |\n15 |             sum += *n as isize;\n   |                    ^^\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0614`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut max_sum = 0;\n    let mut max_index = 0;\n    for\
    \ i in 0..nums.len() {\n        sum += nums_copy[i];\n        if sum > max_sum\
    \ {\n            max_sum = sum;\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..nums.len() {\n        if nums_copy[i] > 0 {\n            nums_sorted[max_index]\
    \ = nums_copy[i];\n            nums_copy[i] = 0;\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpw2yq5srd.rs:34:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748275
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ sorted_nums = nums.clone();\n    sorted_nums.sort_by_key(|x| {\n        let\
    \ mut sum = 0;\n        for x in &nums {\n            sum += *x;\n        }\n\
    \        sum\n    });\n    sorted_nums\n}\n\nfn main() {\n    let candidate =\
    \ order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11, -12]), vec![-1,\
    \ -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 11, -1, -11, -12]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmp17cjcmf6.rs:24:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748276
- exit_code: 1
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut nums_sum = 0;\n    let mut nums_index = 0;\n    let mut nums_sum_index =\
    \ 0;\n    while nums_sum < nums_copy.len() {\n        nums_sum += nums_copy[nums_sum_index];\n\
    \        nums_sum_index += 1;\n        if nums_sum == nums_copy.len() {\n    \
    \        nums_sum = 0;\n            nums_sum_index = 0;\n        }\n    }\n  \
    \  while nums_sum_index < nums_copy.len() {\n        nums_sum += nums_copy[nums_sum_index];\n\
    \        nums_sum_index += 1;\n        if nums_sum == nums_copy.len() {\n    \
    \        nums_sum = 0;\n            nums_sum_index = 0;\n        }\n    }\n  \
    \  while nums_index < nums_copy.len() {\n        nums_sum += nums_copy[nums_index];\n\
    \        nums_index += 1;\n        if nums_sum == nums_copy.len() {\n        \
    \    nums_sum = 0;\n            nums_index = 0;\n        }\n    }\n    while nums_sum_index\
    \ < nums_copy.len() {\n        nums_sum += nums_copy[nums_sum_index];\n      \
    \  nums_sum_index += 1;\n        if nums_sum == nums_copy.len() {\n          \
    \  nums_sum = 0;\n            nums_sum_index = 0;\n        }\n    }\n    while\
    \ nums_index < nums_copy.len() {\n        nums_sum += nums_copy[nums_index];\n\
    \        nums_index += 1;\n        if nums_sum == nums_copy.len() {\n        \
    \    nums_sum = 0;\n            nums_index = 0;\n        }\n    }\n    nums_sorted.sort_unstable_by_key(|&x|\
    \ x.partial_cmp(&nums_sum).unwrap());\n    nums_sorted\n}\n\nfn main() {\n   \
    \ let candidate = order_by_points;\n    assert_eq!(candidate(vec![1, 11, -1, -11,\
    \ -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6, 53,\
    \ 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_rjg5i6j.rs:17:21\n   |\n\
    17 |         nums_sum += nums_copy[nums_sum_index];\n   |                    \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `usize`\n  --> /tmp/tmp_rjg5i6j.rs:17:18\n   |\n17 | \
    \        nums_sum += nums_copy[nums_sum_index];\n   |                  ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_rjg5i6j.rs:25:21\n\
    \   |\n25 |         nums_sum += nums_copy[nums_sum_index];\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmp_rjg5i6j.rs:25:18\n   |\n\
    25 |         nums_sum += nums_copy[nums_sum_index];\n   |                  ^^\
    \ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_rjg5i6j.rs:33:21\n\
    \   |\n33 |         nums_sum += nums_copy[nums_index];\n   |                 \
    \    ^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `usize`\n  --> /tmp/tmp_rjg5i6j.rs:33:18\n   |\n33 | \
    \        nums_sum += nums_copy[nums_index];\n   |                  ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_rjg5i6j.rs:41:21\n\
    \   |\n41 |         nums_sum += nums_copy[nums_sum_index];\n   |             \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmp_rjg5i6j.rs:41:18\n   |\n\
    41 |         nums_sum += nums_copy[nums_sum_index];\n   |                  ^^\
    \ no implementation for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_rjg5i6j.rs:49:21\n\
    \   |\n49 |         nums_sum += nums_copy[nums_index];\n   |"
  stdout: ''
  timestamp: 1659748277
- exit_code: 101
  program: "/// Write a function which sorts the given vector of integers\n/// in\
    \ ascending order according to the sum of their digits.\n/// Note: if there are\
    \ several items with similar sum of their digits,\n/// order them based on their\
    \ index in original vector.\n/// For example:\n/// >>> order_by_points(vec![1,\
    \ 11, -1, -11, -12])\n/// vec![-1, -11, 1, -12, 11]\n/// >>> order_by_points(vec![])\n\
    /// vec![]\nfn order_by_points(nums: Vec<isize>) -> Vec<isize> {\n    let mut\
    \ nums_copy = nums.clone();\n    let mut nums_sorted = nums.clone();\n    let\
    \ mut sum = 0;\n    let mut min_sum = 0;\n    let mut min_idx = 0;\n    let mut\
    \ max_idx = 0;\n    let mut max_sum = 0;\n    for i in 0..nums.len() {\n     \
    \   sum += nums_copy[i];\n        if sum < min_sum {\n            min_sum = sum;\n\
    \            min_idx = i;\n        }\n        if sum > max_sum {\n           \
    \ max_sum = sum;\n            max_idx = i;\n        }\n    }\n    for i in 0..nums.len()\
    \ {\n        if i != min_idx {\n            nums_sorted[min_idx] = nums_copy[i];\n\
    \        }\n    }\n    for i in 0..nums.len() {\n        if i != max_idx {\n \
    \           nums_sorted[max_idx] = nums_copy[i];\n        }\n    }\n    nums_sorted\n\
    }\n\nfn main() {\n    let candidate = order_by_points;\n    assert_eq!(candidate(vec![1,\
    \ 11, -1, -11, -12]), vec![-1, -11, 1, -12, 11]);\n    assert_eq!(candidate(vec![1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]), vec![0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, -11, -32, 43, 54, -98,\
    \ 2, -3]), vec![-3, -32, -98, -11, 1, 2, 43, 54]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]), vec![1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]);\n\
    \    assert_eq!(candidate(vec![0, 6, 6, -76, -21, 23, 4]), vec![-76, -21, 0, 4,\
    \ 23, 6, 6]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, -12, -1, -11, -11]`,\n right: `[-1, -11, 1, -12, 11]`', /tmp/tmpzd0ukq5f.rs:44:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659748277
