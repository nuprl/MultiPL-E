language: rs
name: HumanEval_15_string_sequence
results:
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsa2qstyv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).as_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu3kzf6rf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).as_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu3kzf6rf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmphfuoxtlq.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..=n).collect())\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp3qif94qd.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..=n).collect())\n\
    \  |                                 ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `collect`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmp3qif94qd.rs:7:40\n    |\n7   |       String::from(format!(\"{} \", 0..=n).collect())\n\
    \    |                                          ^^^^^^^ method cannot be called\
    \ on `String` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<String>())\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpuslv4bka.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..=n).collect())\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp3qif94qd.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..=n).collect())\n\
    \  |                                 ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `collect`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmp3qif94qd.rs:7:40\n    |\n7   |       String::from(format!(\"{} \", 0..=n).collect())\n\
    \    |                                          ^^^^^^^ method cannot be called\
    \ on `String` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).as_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu3kzf6rf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsa2qstyv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkq83opyt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpkq83opyt.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkq83opyt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpkq83opyt.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpu_gpjhul.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n)\n  |     \
    \               ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).collect::<String>()\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmps2s9dgc8.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).collect::<String>()\n\
    \  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: the method `collect` exists\
    \ for struct `String`, but its trait bounds were not satisfied\n   --> /tmp/tmps2s9dgc8.rs:7:26\n\
    \    |\n7   |       format!(\"{}\", 0..=n).collect::<String>()\n    |        \
    \                    ^^^^^^^ method cannot be called on `String` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsa2qstyv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..=n).join(\" \"))\n\
    }\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp1qugvny9.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..=n).join(\"\
    \ \"))\n  |                                 ^^^^^ `RangeInclusive<isize>` cannot\
    \ be formatted with the default formatter\n  |\n  = help: the trait `std::fmt::Display`\
    \ is not implemented for `RangeInclusive<isize>`\n  = note: in format strings\
    \ you may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note:\
    \ this error originates in the macro `$crate::__export::format_args` (in Nightly\
    \ builds, run with -Z macro-backtrace for more info)\n\nerror[E0599]: no method\
    \ named `join` found for struct `String` in the current scope\n --> /tmp/tmp1qugvny9.rs:7:40\n\
    \  |\n7 |     String::from(format!(\"{} \", 0..=n).join(\" \"))\n  |         \
    \                               ^^^^ method not found in `String`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).as_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu3kzf6rf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..=n).collect())\n}\n\n\
    fn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmphhwua73e.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..=n).collect())\n\
    \  |                                ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `collect`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmphhwua73e.rs:7:39\n    |\n7   |       String::from(format!(\"{}\", 0..=n).collect())\n\
    \    |                                         ^^^^^^^ method cannot be called\
    \ on `String` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(\"0 1 2 3 4 5\")\n        .split_whitespace()\n\
    \        .collect::<Vec<_>>()\n        .join(\" \")\n        .to_string()\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 1 2 3 4 5\"`,\n right: `\"0\"`', /tmp/tmplkv2kc9w.rs:16:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..=n).collect())\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp3qif94qd.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..=n).collect())\n\
    \  |                                 ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `collect`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmp3qif94qd.rs:7:40\n    |\n7   |       String::from(format!(\"{} \", 0..=n).collect())\n\
    \    |                                          ^^^^^^^ method cannot be called\
    \ on `String` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmphfuoxtlq.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsa2qstyv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmphfuoxtlq.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpu_gpjhul.rs:7:20\n  |\n7 |     format!(\"{} \", 0..n)\n  |     \
    \               ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsa2qstyv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmphfuoxtlq.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n).to_string()\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpduc49k6j.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n).to_string()\n\
    \  |                   ^^^^ `std::ops::Range<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `std::ops::Range<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkq83opyt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpkq83opyt.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).map(|i| i.to_string()).collect::<Vec<_>>().join(\"\
    \ \"))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"0\"`', /tmp/tmpsa2qstyv.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..=n).join(\" \")\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpkq83opyt.rs:7:19\n  |\n7 |     format!(\"{}\", 0..=n).join(\" \"\
    )\n  |                   ^^^^^ `RangeInclusive<isize>` cannot be formatted with\
    \ the default formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented\
    \ for `RangeInclusive<isize>`\n  = note: in format strings you may be able to\
    \ use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror[E0599]: no method named `join` found\
    \ for struct `String` in the current scope\n --> /tmp/tmpkq83opyt.rs:7:26\n  |\n\
    7 |     format!(\"{}\", 0..=n).join(\" \")\n  |                          ^^^^\
    \ method not found in `String`\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).as_str())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpu3kzf6rf.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", n).trim())\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmp3ak7hbnb.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmphfuoxtlq.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp2ikf0ejl.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..n))\n\
    \  |                                 ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{}\", 0..n))\n}\n\nfn main()\
    \ {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpxes0nyee.rs:7:32\n  |\n7 |     String::from(format!(\"{}\", 0..n))\n\
    \  |                                ^^^^ `std::ops::Range<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `std::ops::Range<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"\
    ))\n}\n\nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `join` exists for struct `Vec<isize>`, but its\
    \ trait bounds were not satisfied\n --> /tmp/tmphfuoxtlq.rs:7:46\n  |\n7 |   \
    \  format!(\"{}\", (0..n).collect::<Vec<_>>().join(\" \"))\n  |              \
    \                                ^^^^ method cannot be called on `Vec<isize>`\
    \ due to unsatisfied trait bounds\n  |\n  = note: the following trait bounds were\
    \ not satisfied:\n          `<[isize] as Join<_>>::Output = _`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", n.to_string())\n}\n\nfn main() {\n \
    \   let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"3\"`,\n right: `\"0 1 2 3\"`', /tmp/tmpw319hbjv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    String::from(format!(\"{} \", 0..=n).collect())\n}\n\
    \nfn main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: `RangeInclusive<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmp3qif94qd.rs:7:33\n  |\n7 |     String::from(format!(\"{} \", 0..=n).collect())\n\
    \  |                                 ^^^^^ `RangeInclusive<isize>` cannot be formatted\
    \ with the default formatter\n  |\n  = help: the trait `std::fmt::Display` is\
    \ not implemented for `RangeInclusive<isize>`\n  = note: in format strings you\
    \ may be able to use `{:?}` (or {:#?} for pretty-print) instead\n  = note: this\
    \ error originates in the macro `$crate::__export::format_args` (in Nightly builds,\
    \ run with -Z macro-backtrace for more info)\n\nerror[E0599]: the method `collect`\
    \ exists for struct `String`, but its trait bounds were not satisfied\n   -->\
    \ /tmp/tmp3qif94qd.rs:7:40\n    |\n7   |       String::from(format!(\"{} \", 0..=n).collect())\n\
    \    |                                          ^^^^^^^ method cannot be called\
    \ on `String` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `String: Iterator`\n         \
    \   which is required by `&mut String: Iterator`\n            `str: Iterator`\n\
    \            which is required by `&mut str: Iterator`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 101
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{} \", n.to_string())\n}\n\nfn main() {\n\
    \    let candidate = string_sequence;\n    assert_eq!(candidate(0), String::from(\"\
    0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"0 \"`,\n right: `\"0\"`', /tmp/tmpxtzh5uak.rs:12:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747202
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", (0..n).collect::<String>())\n}\n\nfn\
    \ main() {\n    let candidate = string_sequence;\n    assert_eq!(candidate(0),\
    \ String::from(\"0\"));\n    assert_eq!(candidate(3), String::from(\"0 1 2 3\"\
    ));\n    assert_eq!(candidate(10), String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `String` cannot be built from an iterator\
    \ over elements of type `isize`\n --> /tmp/tmp5ack7srr.rs:7:26\n  |\n7 |     format!(\"\
    {}\", (0..n).collect::<String>())\n  |                          ^^^^^^^ value\
    \ of type `String` cannot be built from `std::iter::Iterator<Item=isize>`\n  |\n\
    \  = help: the trait `FromIterator<isize>` is not implemented for `String`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
- exit_code: 1
  program: "/// Return a string containing space-delimited numbers starting from 0\
    \ upto n inclusive.\n/// >>> string_sequence(0)\n/// String::from(\"0\")\n///\
    \ >>> string_sequence(5)\n/// String::from(\"0 1 2 3 4 5\")\nfn string_sequence(n:\
    \ isize) -> String {\n    format!(\"{}\", 0..n)\n}\n\nfn main() {\n    let candidate\
    \ = string_sequence;\n    assert_eq!(candidate(0), String::from(\"0\"));\n   \
    \ assert_eq!(candidate(3), String::from(\"0 1 2 3\"));\n    assert_eq!(candidate(10),\
    \ String::from(\"0 1 2 3 4 5 6 7 8 9 10\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `std::ops::Range<isize>` doesn't implement `std::fmt::Display`\n\
    \ --> /tmp/tmpn5isvhfr.rs:7:19\n  |\n7 |     format!(\"{}\", 0..n)\n  |      \
    \             ^^^^ `std::ops::Range<isize>` cannot be formatted with the default\
    \ formatter\n  |\n  = help: the trait `std::fmt::Display` is not implemented for\
    \ `std::ops::Range<isize>`\n  = note: in format strings you may be able to use\
    \ `{:?}` (or {:#?} for pretty-print) instead\n  = note: this error originates\
    \ in the macro `$crate::__export::format_args` (in Nightly builds, run with -Z\
    \ macro-backtrace for more info)\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747201
