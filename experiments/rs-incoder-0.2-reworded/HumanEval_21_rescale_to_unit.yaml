name: HumanEval_21_rescale_to_unit
language: rs
prompt: "/// Given vector of numbers (of at least two elements), apply a linear transform\
  \ to that vector,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit(vec![1.0, 2.0, 3.0, 4.0, 5.0])\n/// vec![0.0,\
  \ 0.25, 0.5, 0.75, 1.0]\nfn rescale_to_unit(numbers: Vec<f64>) -> Vec<f64> {\n"
tests: "}\n\nfn main() {\n    let candidate = rescale_to_unit;\n    assert_eq!(candidate(vec![2.0,\
  \ 49.9]), vec![0.0, 1.0]);\n    assert_eq!(candidate(vec![100.0, 49.9]), vec![1.0,\
  \ 0.0]);\n    assert_eq!(candidate(vec![1.0, 2.0, 3.0, 4.0, 5.0]), vec![0.0, 0.25,\
  \ 0.5, 0.75, 1.0]);\n    assert_eq!(candidate(vec![2.0, 1.0, 5.0, 3.0, 4.0]), vec![0.25,\
  \ 0.0, 1.0, 0.5, 0.75]);\n    assert_eq!(candidate(vec![12.0, 11.0, 15.0, 13.0,\
  \ 14.0]), vec![0.25, 0.0, 1.0, 0.5, 0.75]);\n}\n"
completions: ["    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for\
    \ n in numbers {\n        if n < min {\n            min = n;\n        }\n    \
    \    if n > max {\n            max = n;\n        }\n    }\n    let mut scale =\
    \ 1.0 * (max - min);\n    if scale == 0.0 {\n        scale = 0.1;\n    }\n   \
    \ let mut new_numbers = Vec::new();\n    for n in numbers {\n        new_numbers.push((n\
    \ - min) / scale);\n    }\n    new_numbers", "    let mut min_value = numbers[0];\n\
    \    let mut max_value = numbers[0];\n    for n in numbers {\n        if n < min_value\
    \ {\n            min_value = n;\n        }\n        if n > max_value {\n     \
    \       max_value = n;\n        }\n    }\n    let mut new_numbers = Vec::new();\n\
    \    new_numbers.extend_from_slice(&[min_value]);\n    new_numbers.extend_from_slice(&[max_value]);\n\
    \    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) / scale);\n    }\n    new_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ number in numbers {\n        if number < min_value {\n            min_value\
    \ = number;\n        }\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for\
    \ number in numbers {\n        let new_number = (number - min_value) / (max_value\
    \ - min_value) as f64;\n        new_numbers.push(new_number);\n    }\n    new_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = max_value - min_value;\n    for n in numbers {\n  \
    \      *n -= min_value;\n        *n /= scale;\n    }\n    numbers", "    let mut\
    \ min = numbers[0];\n    let mut max = numbers[0];\n    for &n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for &n in numbers {\n        *n /= scale;\n    }\n    numbers", "    let\
    \ mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n\
    \        if n < min {\n            min = n;\n        }\n        if n > max {\n\
    \            max = n;\n        }\n    }\n    let mut scale = 1.0 * (max - min);\n\
    \    for n in numbers {\n        n -= min;\n        n /= scale;\n    }\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 / (max -\
    \ min);\n    for n in numbers {\n        *n -= min;\n        *n *= scale;\n  \
    \  }\n    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut new_numbers\
    \ = Vec::new();\n    for n in numbers {\n        let mut new_n = n;\n        if\
    \ new_n < min {\n            new_n -= min;\n        }\n        if new_n > max\
    \ {\n            new_n -= max;\n        }\n        new_numbers.push(new_n);\n\
    \    }\n    new_numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    for n in numbers {\n        *n /= scale;\n    }\n\
    \    numbers", "    let mut min = numbers[0];\n    let mut max = numbers[0];\n\
    \    for n in numbers {\n        if n < min {\n            min = n;\n        }\n\
    \        if n > max {\n            max = n;\n        }\n    }\n    let mut scale\
    \ = (max - min).recip();\n    let mut new_numbers = Vec::new();\n    for n in\
    \ numbers {\n        new_numbers.push((n - min) * scale);\n    }\n    new_numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = 1.0 * max / min;\n\
    \    numbers.iter().for_each(|n| {\n        *n /= scale;\n    });\n    numbers",
  "    let mut min = numbers[0];\n    let mut max = numbers[0];\n    for n in numbers\
    \ {\n        if n < min {\n            min = n;\n        }\n        if n > max\
    \ {\n            max = n;\n        }\n    }\n    let mut scale = (max - min).recip();\n\
    \    let mut result = Vec::new();\n    for n in numbers {\n        result.push((n\
    \ - min) * scale);\n    }\n    result", "    let mut min = numbers[0];\n    let\
    \ mut max = numbers[0];\n    for n in numbers {\n        if n < min {\n      \
    \      min = n;\n        }\n        if n > max {\n            max = n;\n     \
    \   }\n    }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n\
    \        let mut new_n = n;\n        if new_n < min {\n            new_n -= min;\n\
    \        }\n        if new_n > max {\n            new_n -= max;\n        }\n \
    \       new_numbers.push(new_n);\n    }\n    new_numbers", "    let mut min =\
    \ numbers[0];\n    let mut max = numbers[0];\n    for n in numbers {\n       \
    \ if n < min {\n            min = n;\n        }\n        if n > max {\n      \
    \      max = n;\n        }\n    }\n    let mut scale = 1.0f64 / max - min;\n \
    \   for n in numbers {\n        *n -= min;\n        *n *= scale;\n    }\n    numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut scale = (max_value - min_value).recip();\n    for n in numbers\
    \ {\n        *n -= min_value;\n        *n *= scale;\n    }\n    numbers", "  \
    \  let mut min_number = numbers[0];\n    let mut max_number = numbers[0];\n  \
    \  for number in numbers {\n        if number < min_number {\n            min_number\
    \ = number;\n        }\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    let mut new_numbers = Vec::new();\n    for\
    \ number in numbers {\n        let new_number = (number - min_number) / (max_number\
    \ - min_number);\n        new_numbers.push(new_number);\n    }\n    new_numbers",
  "    let mut min_value = numbers[0];\n    let mut max_value = numbers[0];\n    for\
    \ n in numbers {\n        if n < min_value {\n            min_value = n;\n   \
    \     }\n        if n > max_value {\n            max_value = n;\n        }\n \
    \   }\n    let mut new_numbers = Vec::new();\n    for n in numbers {\n       \
    \ let new_value = ((n - min_value) / (max_value - min_value)) * 2.0 - 1.0;\n \
    \       new_numbers.push(new_value);\n    }\n    new_numbers", "    let mut min_number\
    \ = numbers.iter().min().unwrap();\n    let mut max_number = numbers.iter().max().unwrap();\n\
    \    min_number = min_number / max_number;\n    max_number = max_number / min_number;\n\
    \    numbers.iter().map(|x| x / max_number).collect()"]
stop_tokens:
- "\n}"
