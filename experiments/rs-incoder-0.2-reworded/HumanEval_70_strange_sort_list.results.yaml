name: HumanEval_70_strange_sort_list
language: rs
results:
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut vec = Vec::new();\n    let mut min\
    \ = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    vec.push(min);\n\
    \    while min_idx != max_idx {\n        vec.push(lst.swap_remove(min_idx));\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    vec\n}\n\nfn main()\
    \ {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiue7mdxj.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpiue7mdxj.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiue7mdxj.rs:19:18\n   |\n19 |         vec.push(lst.swap_remove(min_idx));\n\
    \   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n   |                  |\n   |\
    \                  expected `&isize`, found `isize`\n   |                  help:\
    \ consider borrowing here: `&lst.swap_remove(min_idx)`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiue7mdxj.rs:20:49\n   |\n20 |         min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n20 |         min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiue7mdxj.rs:21:49\n   |\n21 |         max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |         max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpiue7mdxj.rs:23:5\n   |\n11 | fn strange_sort"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = Vec::new();\n    let\
    \ mut min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst\
    \ {\n        if value < min_value {\n            min_value = value;\n        }\n\
    \        if value > max_value {\n            max_value = value;\n        }\n \
    \   }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n        if value < min_value {\n     \
    \       min_value = value;\n        }\n        if value > max_value {\n      \
    \      max_value = value;\n        }\n    }\n    let mut min_value = min_value;\n\
    \    let mut max_value = max_value;\n    for value in lst {\n        if value\
    \ < min_value {\n            min_value = value;\n        }\n        if value >\
    \ max_value {\n            max_value = value;\n        }\n    }\n    let mut min_value\
    \ = min_value;\n    let mut max_value = max_value;\n    for value in lst {\n \
    \       if value < min_value {\n            min_value = value;\n        }\n  \
    \      if value > max_value {\n            max_value = value;\n        }\n   \
    \ }\n    let mut min_value = min_value;\n    let mut max_value = max_value;\n\
    \    for value in lst {\n        if value < min_value {\n            min_value\
    \ = value;\n        }\n        if value > max_value {\n            max_value =\
    \ value;\n        }\n    }\n    let mut min_value = min_value;\n    let mut max_value\
    \ = max_value;\n    for value in lst {\n\n}\n\nfn main() {\n    let candidate\
    \ = strange_sort_list;\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4,\
    \ 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9, 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5,\
    \ 5, 5, 5]), vec![5, 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]),\
    \ vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5,\
    \ 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpx90w1rdj.rs:130:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n116 | \n117 | }\n    | - ...as it matches this but\
    \ it has different indentation\n...\n130 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpx90w1rdj.rs:11:42\n   |\n11 | fn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n   |    -----------------                     ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst;\n    sorted_list.sort();\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpakrdx50p.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value == min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value == max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp5vuq4b4t.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value == min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value == max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpz0vsx8us.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp642o2dzi.rs:137:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    119 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n...\n124 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n137 | }\n    |   ^\n\nerror: expected `{`, found\
    \ `}`\n   --> /tmp/tmp642o2dzi.rs:124:1\n    |\n123 |         if value > max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp642o2dzi.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min = lst[0];\n    let mut max = lst[0];\n\
    \    for el in lst.iter().rev() {\n        if el < min {\n            min = el;\n\
    \        }\n        if el > max {\n            max = el;\n        }\n    }\n \
    \   let mut result = vec![];\n    for el in lst.iter() {\n        if el == min\
    \ {\n            result.push(max);\n        } else {\n            result.push(el);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa66vdb00.rs:15:17\n   |\n\
    15 |         if el < min {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found `isize`\n   |                 help:\
    \ consider borrowing here: `&min`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa66vdb00.rs:16:19\n\
    \   |\n12 |     let mut min = lst[0];\n   |                   ------ expected\
    \ due to this value\n...\n16 |             min = el;\n   |                   ^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             min = *el;\n   |                   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa66vdb00.rs:18:17\n   |\n18 |         if el\
    \ > max {\n   |                 ^^^\n   |                 |\n   |            \
    \     expected `&isize`, found `isize`\n   |                 help: consider borrowing\
    \ here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa66vdb00.rs:19:19\n\
    \   |\n13 |     let mut max = lst[0];\n   |                   ------ expected\
    \ due to this value\n...\n19 |             max = el;\n   |                   ^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n19 |             max = *el;\n   |                   +\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpa66vdb00.rs:24:15\n   |\n\
    24 |         if el == min {\n   |               ^^ no implementation for `&isize\
    \ == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n   = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \             f32\n             f64\n             i128\n             i16\n   \
    \          i32\n             i64\n             i8\n             isize\n      \
    \     and 6 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa66vdb00.rs:27:25\n\
    \   |\n27 |             result.push(el);\n   |                         ^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    27 |             result.push(*el);\n   |                         +\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have det"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst;\n    sorted_list.sort();\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp1atdesvw.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst;\n    sorted_list.sort();\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpjl5t0wnl.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value == min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value == max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmpbjsnhkop.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpt78v1bsy.rs:137:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    119 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n...\n124 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n137 | }\n    |   ^\n\nerror: expected `{`, found\
    \ `}`\n   --> /tmp/tmpt78v1bsy.rs:124:1\n    |\n123 |         if value > max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt78v1bsy.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut min\
    \ = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| x == max).unwrap();\n    let mut min_idx =\
    \ min_idx as usize;\n    let mut max_idx = max_idx as usize;\n    let mut i =\
    \ 0;\n    while i < lst.len() {\n        if min_idx < max_idx {\n            result.push(lst[min_idx]);\n\
    \            min_idx += 1;\n        } else {\n            result.push(lst[max_idx]);\n\
    \            max_idx -= 1;\n        }\n        i += 1;\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp_vwuxiw5.rs:35:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value == min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value == max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst`\n   --> /tmp/tmp83poisdh.rs:23:18\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                   --- move occurs because `lst` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n15  |     for value in lst {\n   \
    \ |                  --- `lst` moved due to this implicit call to `.into_iter()`\n\
    ...\n23  |     for value in lst {\n    |                  ^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `lst`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n15  |     for value in &lst\
    \ {\n    |                  +\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst;\n    sorted_list.sort();\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmp8soqri_f.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = lst;\n    sorted_list.sort();\n\
    \    sorted_list\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n \
    \   assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpgaj0njit.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n    let mut min\
    \ = lst.iter().min().unwrap();\n    let mut max = lst.iter().max().unwrap();\n\
    \    let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n    let mut\
    \ max_idx = lst.iter().position(|x| *x == max).unwrap();\n    while min_idx !=\
    \ max_idx {\n        let tmp = min;\n        min = max;\n        max = tmp;\n\
    \        min_idx = lst.iter().position(|x| *x == min).unwrap();\n        max_idx\
    \ = lst.iter().position(|x| *x == max).unwrap();\n    }\n    lst.sort_unstable();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4icwjtrf.rs:15:53\n   |\n\
    15 |     let mut min_idx = lst.iter().position(|x| *x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |     let\
    \ mut min_idx = lst.iter().position(|x| *x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp4icwjtrf.rs:16:53\n   |\n16 |     let mut max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 \
    \    ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |     let mut max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                     +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4icwjtrf.rs:21:49\n   |\n21 |         min_idx = lst.iter().position(|x|\
    \ *x == min).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n21 |         min_idx = lst.iter().position(|x| *x == *min).unwrap();\n\
    \   |                                                 +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp4icwjtrf.rs:22:49\n   |\n22 |         max_idx = lst.iter().position(|x|\
    \ *x == max).unwrap();\n   |                                                 ^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n22 |         max_idx = lst.iter().position(|x| *x == *max).unwrap();\n\
    \   |                                                 +\n\nerror: aborting due\
    \ to 4 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut lst = lst.to_vec();\n    lst.sort();\n\
    \    lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 2, 3, 4]`,\n right: `[1, 4, 2, 3]`', /tmp/tmpkvn2bbga.rs:19:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut min = lst.iter().min().unwrap();\n\
    \    let mut max = lst.iter().max().unwrap();\n    let mut min_idx = lst.iter().position(|&x|\
    \ x == min).unwrap();\n    let mut max_idx = lst.iter().position(|&x| x == max).unwrap();\n\
    \    let mut new_lst = vec![];\n    while min_idx != max_idx {\n        new_lst.push(lst[min_idx]);\n\
    \        min_idx += 1;\n    }\n    new_lst.extend(lst.iter().skip(min_idx).take(max_idx\
    \ - min_idx));\n    new_lst\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprw9err4v.rs:14:53\n   |\n\
    14 |     let mut min_idx = lst.iter().position(|&x| x == min).unwrap();\n   |\
    \                                                     ^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |     let\
    \ mut min_idx = lst.iter().position(|&x| x == *min).unwrap();\n   |          \
    \                                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprw9err4v.rs:15:53\n   |\n15 |     let mut max_idx = lst.iter().position(|&x|\
    \ x == max).unwrap();\n   |                                                  \
    \   ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the\
    \ borrow\n   |\n15 |     let mut max_idx = lst.iter().position(|&x| x == *max).unwrap();\n\
    \   |                                                     +\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut sorted_list = vec![];\n    let mut\
    \ min_value = lst[0];\n    let mut max_value = lst[0];\n    for value in lst {\n\
    \        if value < min_value {\n            min_value = value;\n        }\n \
    \       if value > max_value {\n            max_value = value;\n        }\n  \
    \  }\n    for value in lst {\n        if value < min_value {\n            sorted_list.push(value);\n\
    \        }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_value {\n            sorted_list.push(value);\n\
    \        }\n    }\n    for value in lst {\n        if value < min_value {\n  \
    \          sorted_list.push(value);\n        }\n        if value > max_value {\n\
    \            sorted_list.push(value);\n        }\n    }\n    for value in lst\
    \ {\n        if value < min_value {\n            sorted_list.push(value);\n  \
    \      }\n        if value > max_\n}\n\nfn main() {\n    let candidate = strange_sort_list;\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5,\
    \ 6, 7, 8, 9]), vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3,\
    \ 4, 5]), vec![1, 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9,\
    \ 1]), vec![1, 9, 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5,\
    \ 5, 5, 5]);\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6,\
    \ 4, 5]);\n    assert_eq!(candidate(vec![0, 2, 2, 2, 5, 5, -5, -5]), vec![-5,\
    \ 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]), vec![111111]);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpt291ujex.rs:137:3\n\
    \    |\n11  | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    119 |     for value in lst {\n    |                      - this delimiter might\
    \ not be properly closed...\n...\n124 | }\n    | - ...as it matches this but it\
    \ has different indentation\n...\n137 | }\n    |   ^\n\nerror: expected `{`, found\
    \ `}`\n   --> /tmp/tmpt291ujex.rs:124:1\n    |\n123 |         if value > max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt291ujex.rs:11:42\n\
    \   |\n11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |    -----------------\
    \                     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \   |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given vector of integers, return vector in strange order.\n/// Strange\
    \ sorting, is when you start with the minimum value,\n/// then maximum of the\
    \ remaining integers, then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1,\
    \ 2, 3, 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n\
    /// vec![5, 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// vec![]\nfn strange_sort_list(lst:\
    \ Vec<isize>) -> Vec<isize> {\n    let mut res = vec![];\n    let mut min = lst.iter().min().unwrap();\n\
    \    let mut max = lst.iter().max().unwrap();\n    let mut min_idx = lst.iter().position(|x|\
    \ x == min).unwrap();\n    let mut max_idx = lst.iter().position(|x| x == max).unwrap();\n\
    \    while min_idx != max_idx {\n        res.push(min);\n        res.push(max);\n\
    \        min = lst.iter().nth(min_idx).unwrap();\n        max_idx = lst.iter().position(|x|\
    \ x == max).unwrap();\n    }\n    res.push(min);\n    res.push(max);\n    res\n\
    }\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 4, 2, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9]),\
    \ vec![5, 9, 6, 8, 7]);\n    assert_eq!(candidate(vec![1, 2, 3, 4, 5]), vec![1,\
    \ 5, 2, 4, 3]);\n    assert_eq!(candidate(vec![5, 6, 7, 8, 9, 1]), vec![1, 9,\
    \ 5, 8, 6, 7]);\n    assert_eq!(candidate(vec![5, 5, 5, 5]), vec![5, 5, 5, 5]);\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4, 5, 6, 7, 8]), vec![1, 8, 2, 7, 3, 6, 4, 5]);\n    assert_eq!(candidate(vec![0,\
    \ 2, 2, 2, 5, 5, -5, -5]), vec![-5, 5, -5, 5, 0, 2, 2, 2]);\n    assert_eq!(candidate(vec![111111]),\
    \ vec![111111]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6z78fsrr.rs:25:5\n   |\n\
    11 | fn strange_sort_list(lst: Vec<isize>) -> Vec<isize> {\n   |             \
    \                             ---------- expected `Vec<isize>` because of return\
    \ type\n...\n25 |     res\n   |     ^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
