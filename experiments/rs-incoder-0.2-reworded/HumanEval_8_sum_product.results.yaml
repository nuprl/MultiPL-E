language: rs
name: HumanEval_8_sum_product
results:
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for number in numbers {\n        sum += number;\n        product *=\
    \ number;\n    }\n    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), (0, 1));\n    assert_eq!(candidate(vec![1,\
    \ 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100, 0]), (100, 0));\n    assert_eq!(candidate(vec![3,\
    \ 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]), (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
- exit_code: 0
  program: "/// For a given vector of integers, return a tuple consisting of a sum\
    \ and a product of all the integers in a vector.\n/// Empty sum should be equal\
    \ to 0 and empty product should be equal to 1.\n/// >>> sum_product(vec![])\n\
    /// (0, 1)\n/// >>> sum_product(vec![1, 2, 3, 4])\n/// (10, 24)\nfn sum_product(numbers:\
    \ Vec<isize>) -> (isize, isize) {\n    let mut sum = 0;\n    let mut product =\
    \ 1;\n    for n in numbers {\n        sum += n;\n        product *= n;\n    }\n\
    \    (sum, product)\n}\n\nfn main() {\n    let candidate = sum_product;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ (0, 1));\n    assert_eq!(candidate(vec![1, 1, 1]), (3, 1));\n    assert_eq!(candidate(vec![100,\
    \ 0]), (100, 0));\n    assert_eq!(candidate(vec![3, 5, 7]), (15, 105));\n    assert_eq!(candidate(vec![10]),\
    \ (10, 10));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749558
