language: rs
name: HumanEval_142_sum_squares
results:
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry % 3 == 0 && entry % 4 == 0 {\n            sum +=\
    \ entry;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmp4ctpyrrd.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        } else if\
    \ i % 4 == 0 {\n            sum += i * i;\n        } else {\n            sum +=\
    \ i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9wut15tn.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkejzv7b1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum\
    \ += x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmprmfy4evr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpa0r5f3w7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry % 3 == 0 {\n            sum += entry * entry;\n \
    \       } else if entry % 4 == 0 {\n            sum += entry * entry;\n      \
    \  } else {\n            sum += entry;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp3iu6m7iy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n     \
    \   if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpf0p4vaso.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n\
    \        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpyvmi9nkb.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n     \
    \   if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpf0p4vaso.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp33ocaz8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp33ocaz8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 && x % 4 == 0 {\n            sum += x;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4,\
    \ 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpp4g37bik.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += *i;\n        }\n \
    \       if i % 4 == 0 {\n            sum += *i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpc0j0qln8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += *i;\n        }\n \
    \       if i % 4 == 0 {\n            sum += *i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpc0j0qln8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum\
    \ += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpsgxvtyca.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for v in\
    \ lst {\n        if v % 3 == 0 {\n            sum += v * v;\n        }\n     \
    \   if v % 4 == 0 {\n            sum += v * v;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgbgk59cw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for v in\
    \ lst {\n        if v % 3 == 0 {\n            sum += v * v;\n        }\n     \
    \   if v % 4 == 0 {\n            sum += v * v;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgbgk59cw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += *i;\n        }\n \
    \       if i % 4 == 0 {\n            sum += *i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpc0j0qln8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry % 3 == 0 {\n            sum += entry * entry;\n \
    \       } else if entry % 4 == 0 {\n            sum += entry * entry;\n      \
    \  } else {\n            sum += entry;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp3iu6m7iy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        } else if\
    \ i % 4 == 0 {\n            sum += i * i;\n        } else {\n            sum +=\
    \ i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpjvee6bh4.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkw__m9u.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for e in\
    \ lst {\n        if e % 3 == 0 {\n            sum += e * e;\n        } else if\
    \ e % 4 == 0 {\n            sum += e * e * e;\n        } else {\n            sum\
    \ += e;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpt0ubkly9.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n     \
    \   if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpf0p4vaso.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp93o4eu8f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkw__m9u.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 && x % 4 == 0 {\n            sum += x;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpss0jz2xn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkw__m9u.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum\
    \ += x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpsgxvtyca.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9y7ep50v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry % 3 == 0 {\n            sum += entry * entry;\n \
    \       } else if entry % 4 == 0 {\n            sum += entry * entry;\n      \
    \  } else {\n            sum += entry;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp3iu6m7iy.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpc8h0qkv_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum\
    \ += x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmprmfy4evr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp33ocaz8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxoi3030l.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpc8h0qkv_.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpa0r5f3w7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkejzv7b1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for v in\
    \ lst {\n        if v % 3 == 0 {\n            sum += v * v;\n        }\n     \
    \   if v % 4 == 0 {\n            sum += v * v;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgbgk59cw.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp82r1folf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkw__m9u.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n     \
    \   if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmp2m53ymxt.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n     \
    \   if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpf0p4vaso.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9y7ep50v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry.is_multiple_of_three() {\n            sum += entry.squared();\n\
    \        }\n        if entry.is_multiple_of_four() {\n            sum += entry.cubed();\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_multiple_of_three` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp3lps1fw1.rs:15:18\n   |\n15 |         if\
    \ entry.is_multiple_of_three() {\n   |                  ^^^^^^^^^^^^^^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `squared` found for type\
    \ `isize` in the current scope\n  --> /tmp/tmp3lps1fw1.rs:16:26\n   |\n16 |  \
    \           sum += entry.squared();\n   |                          ^^^^^^^ method\
    \ not found in `isize`\n\nerror[E0599]: no method named `is_multiple_of_four`\
    \ found for type `isize` in the current scope\n  --> /tmp/tmp3lps1fw1.rs:18:18\n\
    \   |\n18 |         if entry.is_multiple_of_four() {\n   |                  ^^^^^^^^^^^^^^^^^^^\
    \ method not found in `isize`\n\nerror[E0599]: no method named `cubed` found for\
    \ type `isize` in the current scope\n  --> /tmp/tmp3lps1fw1.rs:19:26\n   |\n19\
    \ |             sum += entry.cubed();\n   |                          ^^^^^ method\
    \ not found in `isize`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4,\
    \ 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpi0k5ugz4.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp33ocaz8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkejzv7b1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkejzv7b1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 && x % 4 == 0 {\n            sum += x;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpss0jz2xn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp858plrfp.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4,\
    \ 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyhw67yz1.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in\
    \ lst {\n        if n % 3 == 0 {\n            sum += n * n;\n        } else if\
    \ n % 4 == 0 {\n            sum += n * n * n;\n        } else {\n            sum\
    \ += n;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpf8wp8x3_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry % 3 == 0 {\n            sum += entry;\n        }\n\
    \        if entry % 4 == 0 {\n            sum += entry;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmprcivjc0d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxoi3030l.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp33ocaz8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp93o4eu8f.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in\
    \ lst {\n        if n % 3 == 0 && n % 4 == 0 {\n            sum += n;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpmhqt5hpf.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphkw__m9u.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxoi3030l.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in\
    \ lst {\n        if n % 3 == 0 {\n            sum += n * n;\n        }\n     \
    \   if n % 4 == 0 {\n            sum += n * n * n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpfb6_gl86.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in\
    \ lst {\n        if n % 3 == 0 {\n            sum += n * n;\n        } else if\
    \ n % 4 == 0 {\n            sum += n * n * n;\n        } else {\n            sum\
    \ += n;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpf8wp8x3_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    return sum;\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpa0r5f3w7.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9y7ep50v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp9y7ep50v.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for n in\
    \ lst {\n        if n % 3 == 0 {\n            sum += n * n;\n        } else if\
    \ n % 4 == 0 {\n            sum += n * n * n;\n        } else {\n            sum\
    \ += n;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpf8wp8x3_.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 && i % 4 == 0 {\n            sum += i;\n      \
    \  }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n   \
    \ assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4,\
    \ 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyhw67yz1.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x;\n        } else {\n            sum +=\
    \ x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate =\
    \ sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpkejzv7b1.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        }\n     \
    \   if x % 4 == 0 {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmpgb_if6v6.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i;\n        }\n  \
    \      if i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpd6333ch9.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmp33ocaz8f.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x * x;\n        } else if\
    \ x % 4 == 0 {\n            sum += x * x * x;\n        } else {\n            sum\
    \ += x;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmprmfy4evr.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for entry\
    \ in lst {\n        if entry % 3 == 0 {\n            sum += entry;\n        }\n\
    \        if entry % 4 == 0 {\n            sum += entry;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmprcivjc0d.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 {\n            sum += x;\n        }\n        if\
    \ x % 4 == 0 {\n            sum += x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmp4xtuqxcl.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 1
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for &i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4zp5hu7s.rs:14:9\n   |\n\
    14 |     for &i in lst {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749043
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\
    \ else if i % 4 == 0 {\n            sum += i * i;\n        } else {\n        \
    \    sum += i;\n        }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate\
    \ = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `6`', /tmp/tmpfdawuwlw.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for x in\
    \ lst {\n        if x % 3 == 0 && x % 4 == 0 {\n            sum += x;\n      \
    \  }\n    }\n    return sum;\n}\n\nfn main() {\n    let candidate = sum_squares;\n\
    \    assert_eq!(candidate(vec![1, 2, 3]), 6);\n    assert_eq!(candidate(vec![1,\
    \ 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()), 0);\n    assert_eq!(candidate(vec![1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n    assert_eq!(candidate(vec![-1,\
    \ -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56, -99, 1, 0, -2]),\
    \ 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0, 0, -1]), 0);\n \
    \   assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12,\
    \ -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1, -3, 17, -1, -15,\
    \ 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]), -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `6`', /tmp/tmpss0jz2xn.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst {\n        if i % 3 == 0 {\n            sum += i;\n        }\n        if\
    \ i % 4 == 0 {\n            sum += i;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1, 2, 3]),\
    \ 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `6`', /tmp/tmpgdasj_3j.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
- exit_code: 101
  program: "/// \"\n/// This function will take a vector of integers. For all entries\
    \ in the vector, the function shall square the integer entry if its index is a\
    \ \n/// multiple of 3 and will cube the integer entry if its index is a multiple\
    \ of 4 and not a multiple of 3. The function will not \n/// change the entries\
    \ in the vector whose indexes are not a multiple of 3 or 4. The function shall\
    \ then return the sum of all entries. \n/// Examples:\n/// >>> lst\n/// vec![1,\
    \ 2, 3]\n/// >>> lst\n/// vec![]\n/// >>> lst\n/// vec![-1, -5, 2, -1, -5]\nfn\
    \ sum_squares(lst: Vec<isize>) -> isize {\n    let mut sum = 0;\n    for i in\
    \ lst.iter() {\n        if i % 3 == 0 {\n            sum += i * i;\n        }\n\
    \        if i % 4 == 0 {\n            sum += i * i;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = sum_squares;\n    assert_eq!(candidate(vec![1,\
    \ 2, 3]), 6);\n    assert_eq!(candidate(vec![1, 4, 9]), 14);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![1, 1, 1, 1, 1, 1, 1, 1, 1]), 9);\n    assert_eq!(candidate(vec![-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]), -3);\n    assert_eq!(candidate(vec![0]), 0);\n\
    \    assert_eq!(candidate(vec![-1, -5, 2, -1, -5]), -126);\n    assert_eq!(candidate(vec![-56,\
    \ -99, 1, 0, -2]), 3030);\n    assert_eq!(candidate(vec![-1, 0, 0, 0, 0, 0, 0,\
    \ 0, -1]), 0);\n    assert_eq!(candidate(vec![-16, -9, -2, 36, 36, 26, -20, 25,\
    \ -40, 20, -4, 12, -26, 35, 37]), -14196);\n    assert_eq!(candidate(vec![-1,\
    \ -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]),\
    \ -1448);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `6`', /tmp/tmppv0ndyl8.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749044
