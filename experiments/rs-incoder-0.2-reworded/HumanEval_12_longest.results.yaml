language: rs
name: HumanEval_12_longest
results:
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = String::new();\n    for s in strings {\n        if\
    \ s.len() > max_len.len() {\n            max_len = s;\n        }\n    }\n    Some(max_len)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmpl7rolper.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if len > max_len {\n            max_len = len;\n\
    \            max_index = -1;\n        }\n        if len == max_len {\n       \
    \     max_index = strings.iter().position(|&s| s == &s).unwrap();\n        }\n\
    \    }\n    if max_index >= 0 {\n        Some(strings[max_index])\n    } else\
    \ {\n        None\n    }\n}\n\nfn main() {\n    let candidate = longest;\n   \
    \ assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpan08xu2v.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `String` with `&String`\n  --> /tmp/tmpan08xu2v.rs:22:56\n\
    \   |\n22 |             max_index = strings.iter().position(|&s| s == &s).unwrap();\n\
    \   |                                                        ^^ no implementation\
    \ for `String == &String`\n   |\n   = help: the trait `PartialEq<&String>` is\
    \ not implemented for `String`\n\nerror[E0277]: the trait bound `usize: Neg` is\
    \ not satisfied\n  --> /tmp/tmpan08xu2v.rs:14:25\n   |\n14 |     let mut max_index\
    \ = -1;\n   |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n  -->\
    \ /tmp/tmpan08xu2v.rs:19:25\n   |\n19 |             max_index = -1;\n   |    \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    let mut max_len = strings.len();\n\n    for s in strings\
    \ {\n        if s.len() > max_len {\n            max_len = s.len();\n        \
    \    longest = s;\n        }\n    }\n\n    Some(longest)\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpkgn9ncf1.rs:14:23\n\
    \   |\n14 |     let mut longest = strings[0];\n   |                       ^^^^^^^^^^\n\
    \   |                       |\n   |                       move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                    help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplavu2dx1.rs:16:23\n   |\n\
    16 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|&len| len\
    \ == len).first())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `first` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpmterw8mt.rs:14:89\n   |\n14 |         .and_then(|len| strings.iter().map(|s|\
    \ s.len()).max().filter(|&len| len == len).first())\n   |                    \
    \                                                                     ^^^^^ method\
    \ not found in `Option<usize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest_len\
    \ = strings[0].len();\n    for s in strings {\n        if s.len() > longest_len\
    \ {\n            longest_len = s.len();\n        }\n    }\n    Some(strings[strings.iter().position(|s|\
    \ s.len() == longest_len).unwrap()])\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `strings`\n   --> /tmp/tmpfps5i_cs.rs:19:10\n\
    \    |\n9   | fn longest(strings: Vec<String>) -> Option<String> {\n    |    \
    \        ------- move occurs because `strings` has type `Vec<String>`, which does\
    \ not implement the `Copy` trait\n...\n14  |     for s in strings {\n    |   \
    \           -------\n    |              |\n    |              `strings` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&strings`\n...\n19  |     Some(strings[strings.iter().position(|s|\
    \ s.len() == longest_len).unwrap()])\n    |          ^^^^^^^ value borrowed here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `strings`\n\nerror[E0507]: cannot move out of index of `Vec<String>`\n\
    \  --> /tmp/tmpfps5i_cs.rs:19:10\n   |\n19 |     Some(strings[strings.iter().position(|s|\
    \ s.len() == longest_len).unwrap()])\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ move occurs because value has type `String`, which does not implement the `Copy`\
    \ trait\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0382, E0507.\nFor more information about an error, try `rustc\
    \ --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpvm37duo7.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().fold(None, |mut acc, s| {\n        if acc.is_none() {\n\
    \            acc = Some(s);\n        } else if acc.unwrap().len() < s.len() {\n\
    \            acc = Some(s);\n        }\n        acc\n    })\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxyxu3_k2.rs:12:24\n   |\n\
    12 |             acc = Some(s);\n   |                        ^- help: try using\
    \ a conversion method: `.to_string()`\n   |                        |\n   |   \
    \                     expected struct `String`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxyxu3_k2.rs:14:24\n   |\n14 |             acc\
    \ = Some(s);\n   |                        ^- help: try using a conversion method:\
    \ `.to_string()`\n   |                        |\n   |                        expected\
    \ struct `String`, found `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n    let mut longest_str = String::new();\n\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n            longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `Some(\"x\")`', /tmp/tmp3gnf2v9c.rs:33:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|&s| s == max_len).unwrap();\n        }\n    }\n\n\
    \    Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9cebl9b.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpd9cebl9b.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n\n    for s in strings {\n        if s.len()\
    \ > longest_len {\n            longest_len = s.len();\n        }\n    }\n\n  \
    \  strings.iter().max_by_key(|s| s.len() as usize).cloned()\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `strings`\n    --> /tmp/tmpf8fxwmqq.rs:25:5\n\
    \     |\n9    | fn longest(strings: Vec<String>) -> Option<String> {\n     | \
    \           ------- move occurs because `strings` has type `Vec<String>`, which\
    \ does not implement the `Copy` trait\n...\n19   |     for s in strings {\n  \
    \   |              -------\n     |              |\n     |              `strings`\
    \ moved due to this implicit call to `.into_iter()`\n     |              help:\
    \ consider borrowing to avoid moving into the for loop: `&strings`\n...\n25  \
    \ |     strings.iter().max_by_key(|s| s.len() as usize).cloned()\n     |     ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n     |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `strings`\n     = note: borrow occurs due\
    \ to deref coercion to `[String]`\nnote: deref defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n\n    Some(longest)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7jbgy2x1.rs:17:23\n   |\n\
    17 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.len(),\n\
    \        strings.iter().map(|s| s.len()).sum(),\n    );\n    for s in strings\
    \ {\n        if s.len() > longest_len {\n            longest_len = s.len();\n\
    \        }\n    }\n    if longest_len == 0 {\n        return None;\n    }\n  \
    \  strings.iter().max_by_key(|s| s.len()).unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpltdjeta1.rs:22:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n22 |     strings.iter().max_by_key(|s| s.len()).unwrap()\n   |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `&String`\n   |\n   = note:   expected enum `Option<String>`\n           found\
    \ reference `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|&s| s == max_len).unwrap();\n        }\n    }\n \
    \   Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprkybapen.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprkybapen.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = String::new();\n    let mut max_index = -1;\n    for\
    \ &s in strings {\n        if s.len() > max_len.len() {\n            max_len =\
    \ s;\n            max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \        }\n    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp18406tq2.rs:12:9\n   |\n\
    12 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmp18406tq2.rs:15:55\n\
    \   |\n15 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n\nerror[E0277]: the trait bound `usize: Neg` is not\
    \ satisfied\n  --> /tmp/tmp18406tq2.rs:11:25\n   |\n11 |     let mut max_index\
    \ = -1;\n   |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpti6700wo.rs:51:13\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n51 |         .map(|\n   |             ^ unclosed delimiter\n\
    52 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `|`, found `)`\n\
    \  --> /tmp/tmpti6700wo.rs:52:1\n   |\n51 |         .map(|\n   |             \
    \  - expected `|`\n52 | }\n   | ^ unexpected token\n\nerror: aborting due to 2\
    \ previous errors\n\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpcyt6pnel.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|&s| s == max_len).unwrap();\n        }\n    }\n \
    \   Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6wwjmh2e.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp6wwjmh2e.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n    for s in strings {\n        if s.len() >\
    \ max_len {\n            max_len = s.len();\n        }\n    }\n    strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).map(|s| s).next()\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2tl99z15.rs:22:34\n   |\n\
    22 |     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s).next()\n \
    \  |                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0599]: no method named `next` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmp2tl99z15.rs:22:64\n   |\n22 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).map(|s| s).next()\n   |                              \
    \                                  ^^^^ method not found in `Option<&String>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 0
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = 0;\n    let mut longest_str = String::new();\n\n    for s in strings {\n \
    \       if s.len() > longest_len {\n            longest_len = s.len();\n     \
    \       longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .min()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmptlguyfgg.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmptlguyfgg.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                acc = Some(s);\n            } else\
    \ {\n                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp41pu05h3.rs:14:28\n   |\n\
    14 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp41pu05h3.rs:18:32\n   |\n18 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp28hcjeid.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp28hcjeid.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().filter_map(|s| s.len() ==\
    \ len).max().cloned())\n        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpnlo_4n_k.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnlo_4n_k.rs:15:50\n   |\n15 |         .map(|len|\
    \ strings.iter().filter_map(|s| s.len() == len).max().cloned())\n   |        \
    \                                          ^^^^^^^^^^^^^^\n   |              \
    \                                    |\n   |                                 \
    \                 expected enum `Option`, found `bool`\n   |                 \
    \                                 help: try using a variant of the expected enum:\
    \ `Some(s.len() == len)`\n   |\n   = note: expected enum `Option<_>`\n       \
    \       found type `bool`\n\nerror[E0034]: multiple applicable items in scope\n\
    \  --> /tmp/tmpnlo_4n_k.rs:15:72\n   |\n15 |         .map(|len| strings.iter().filter_map(|s|\
    \ s.len() == len).max().cloned())\n   |                                      \
    \                                  ^^^^^^ multiple `cloned` found\n   |\n   =\
    \ note: candidate #1 is defined in an impl for the type `Option<&T>`\n   = note:\
    \ candidate #2 is defined in an impl for the type `Option<&mut T>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0034, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0034`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings {\n        if s.len() > longest.len() {\n\
    \            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp63h1l5ad.rs:13:23\n\
    \   |\n13 |     let mut longest = strings[0];\n   |                       ^^^^^^^^^^\n\
    \   |                       |\n   |                       move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                    help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings {\n        if s.len() > longest.len() {\n\
    \            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmp63h1l5ad.rs:13:23\n\
    \   |\n13 |     let mut longest = strings[0];\n   |                       ^^^^^^^^^^\n\
    \   |                       |\n   |                       move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                    help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                acc = Some(s);\n            } else\
    \ {\n                if acc.unwrap().len() < s.len() {\n                    acc\
    \ = Some(s);\n                }\n            }\n            acc\n        })\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6f69l63r.rs:14:28\n   |\n\
    14 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6f69l63r.rs:17:32\n   |\n17 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq2m1sjb.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |      \
    \                            ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .unwrap_or(0)\n        })\n        .and_then(|len| strings.iter().map(|s|\
    \ s.len()).max().unwrap_or(0))\n        .and_then(|len| strings\n            .iter()\n\
    \            .map(|s| s.to_owned())\n            .max())\n        .and_then(|len|\
    \ strings\n            .iter()\n            .map(|s| s.to_owned())\n         \
    \   .max())\n        .and_then(|len| strings\n            .iter()\n          \
    \  .map(|s| s.to_owned())\n            .max())\n        .and_then(|len| strings\n\
    \            .iter()\n            .map(|s| s.to_owned())\n            .max())\n\
    \        .and_then(|len| strings\n            .iter()\n            .map(|s| s.to_owned())\n\
    \            .max())\n        .and_then(|len| strings\n            .iter()\n \
    \           .map(|s| s.to_owned())\n            .max())\n        .and_then(|len|\
    \ strings\n            .iter()\n            .map(|s| s.to_owned())\n         \
    \   .max())\n        .and_then(|len| strings\n            .iter()\n          \
    \  .map(|s| s.to_owned())\n            .max())\n        .and_then(|len| strings\n\
    \            .iter()\n            .map(|s| s.to_owned())\n            .max())\n\
    \        .and_then(|len| strings\n            .iter()\n            .map(|s| s.to_owned())\n\
    \            .max())\n        .and_then(|len| strings\n            .iter()\n \
    \           .map(|s| s.to_owned())\n            .max())\n        .and_then(|len|\
    \ strings\n            .iter()\n            .map(|s| s.to_owned())\n         \
    \   .max())\n        .and_then(|len| strings\n            .iter()\n          \
    \  .map(|s| s.to_owned())\n            .max())\n        .and_then(|len| strings\n\
    \            .iter()\n            .map(|s| s.to_owned())\n            .max())\n\
    \        .and_then(|len| strings\n            .iter()\n            .map(|s| s.to_owned())\n\
    \            .max())\n        .and_then(|len| strings\n            .iter()\n \
    \           .map(|s| s.to_owned())\n            .max())\n\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpse_lliku.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n    let mut longest_str = None;\n    for s in\
    \ strings {\n        if s.len() > longest_len {\n            longest_len = s.len();\n\
    \            longest_str = Some(s);\n        }\n    }\n    longest_str\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"x\")`', /tmp/tmpgv9tsveg.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n    Some(max_len.clone())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvu3qz9th.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpvu3qz9th.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:54\n   |\n\
    10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n   |        \
    \                                              ^^^^ expected `&String`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&String`\n             \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:5\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:54\n   |\n\
    10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n   |        \
    \                                              ^^^^ expected `&String`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&String`\n             \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:5\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    for s in strings {\n  \
    \      if s.len() > max_len {\n            max_len = s.len();\n        }\n   \
    \ }\n    if max_len == 0 {\n        return None;\n    }\n    strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).next()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1pmy4rge.rs:22:34\n   |\n\
    22 |     strings.iter().max_by(|a, b| a.len() < b.len()).next()\n   |        \
    \                          ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0599]: no method named `next` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmp1pmy4rge.rs:22:53\n   |\n22 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).next()\n   |                                         \
    \            ^^^^ method not found in `Option<&String>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfv41_6vl.rs:18:27\n   |\n\
    18 |             longest_len = s.len();\n   |                           ^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut max, string| {\n \
    \           if string.length() > max.as_ref().unwrap().len() {\n             \
    \   max = Some(string);\n            }\n            max\n        })\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for reference `&String` in\
    \ the current scope\n  --> /tmp/tmp8obneo7x.rs:13:23\n   |\n13 |             if\
    \ string.length() > max.as_ref().unwrap().len() {\n   |                      \
    \ ^^^^^^ method not found in `&String`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8obneo7x.rs:14:28\n   |\n14 |                 max = Some(string);\n\
    \   |                            ^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                            |\n   |                    \
    \        expected struct `String`, found `&String`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv61uh6gx.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpv61uh6gx.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, string| {\n \
    \           let len = string.len();\n            if len > acc.as_ref().unwrap().len()\
    \ {\n                Some(string.clone())\n            } else {\n            \
    \    acc\n            }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpqq5ehdia.rs:14:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .unwrap_or(0)\n        })\n        .map(|len| strings.iter().take(len).collect::<Vec<_>>().join(\"\
    ,\"))\n        .cloned()\n        .or_else(|| strings.iter().map(String::from).collect::<Vec<_>>().join(\"\
    ,\"))\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpmg6rsg3z.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `join` exists for struct `Vec<&String>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpmg6rsg3z.rs:22:65\n   |\n22 |         .map(|len|\
    \ strings.iter().take(len).collect::<Vec<_>>().join(\",\"))\n   |            \
    \                                                     ^^^^ method cannot be called\
    \ on `Vec<&String>` due to unsatisfied trait bounds\n   |\n   = note: the following\
    \ trait bounds were not satisfied:\n           `<[&String] as Join<_>>::Output\
    \ = _`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:54\n   |\n\
    10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n   |        \
    \                                              ^^^^ expected `&String`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&String`\n             \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:5\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|s| s == max_len).unwrap();\n        }\n    }\n\n\
    \    Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx3qgqr6u.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpx3qgqr6u.rs:19:55\n\
    \   |\n19 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n\nerror[E0277]: the trait bound `usize: Neg` is not\
    \ satisfied\n  --> /tmp/tmpx3qgqr6u.rs:15:25\n   |\n15 |     let mut max_index\
    \ = -1;\n   |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n\n    for s in strings {\n        if s.len()\
    \ > max_len {\n            max_len = s.len();\n        }\n    }\n\n    strings.iter().max_by_key(|s|\
    \ s.len() as usize).map(|s| s).ok()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpmhhzamc0.rs:25:64\n   |\n25 |     strings.iter().max_by_key(|s|\
    \ s.len() as usize).map(|s| s).ok()\n   |                                    \
    \                            ^^ help: there is an associated function with a similar\
    \ name: `or`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|len| len\
    \ == len).last())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `last` exists for enum `Option<usize>`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpa6gkc8hv.rs:14:88\n    |\n14\
    \  |           .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|len|\
    \ len == len).last())\n    |                                                 \
    \                                         ^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n\n    for s in strings {\n        if s.len()\
    \ > longest_len {\n            longest_len = s.len();\n        }\n    }\n\n  \
    \  strings.iter().max_by_key(|s| s.len() as usize).map(|s| s).ok()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmp1w15ngrh.rs:25:64\n   |\n25 |     strings.iter().max_by_key(|s|\
    \ s.len() as usize).map(|s| s).ok()\n   |                                    \
    \                            ^^ help: there is an associated function with a similar\
    \ name: `or`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|&len| len\
    \ == len).first())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `first` found for enum `Option` in the current\
    \ scope\n  --> /tmp/tmpmterw8mt.rs:14:89\n   |\n14 |         .and_then(|len| strings.iter().map(|s|\
    \ s.len()).max().filter(|&len| len == len).first())\n   |                    \
    \                                                                     ^^^^^ method\
    \ not found in `Option<usize>`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplavu2dx1.rs:16:23\n   |\n\
    16 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|s| s == max_len).unwrap();\n        }\n    }\n\n\
    \    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzswsdzmj.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpzswsdzmj.rs:19:55\n\
    \   |\n19 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n\nerror[E0277]: the trait bound `usize: Neg` is not\
    \ satisfied\n  --> /tmp/tmpzswsdzmj.rs:15:25\n   |\n15 |     let mut max_index\
    \ = -1;\n   |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     if s.len() > max_len.len() {\n            max_len = s;\n            max_index\
    \ = strings.iter().position(|s| s == max_len).unwrap();\n        }\n    }\n  \
    \  Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyear2ius.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpyear2ius.rs:18:55\n\
    \   |\n18 |             max_index = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n\nerror[E0277]: the trait bound `usize: Neg` is not\
    \ satisfied\n  --> /tmp/tmpyear2ius.rs:14:25\n   |\n14 |     let mut max_index\
    \ = -1;\n   |                         ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq2m1sjb.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |      \
    \                            ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::Ordering::default();\n    let mut longest_str\
    \ = String::new();\n    for s in strings {\n        if longest_len > s.len() {\n\
    \            longest_len = s.len();\n            longest_str = s;\n        }\n\
    \    }\n    longest_str.ok()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no variant or associated item named `default` found for enum\
    \ `std::cmp::Ordering` in the current scope\n  --> /tmp/tmpsk72uwyz.rs:10:47\n\
    \   |\n10 |     let mut longest_len = std::cmp::Ordering::default();\n   |   \
    \                                            ^^^^^^^ variant or associated item\
    \ not found in `std::cmp::Ordering`\n\nerror[E0599]: no method named `ok` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpsk72uwyz.rs:18:17\n\
    \   |\n18 |     longest_str.ok()\n   |                 ^^ method not found in\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    for s in strings {\n  \
    \      if s.len() > max_len {\n            max_len = s.len();\n        }\n   \
    \ }\n    if max_len == 0 {\n        return None;\n    }\n    strings.iter().max_by_key(|s|\
    \ s.len()).unwrap()\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2tvue9e.rs:22:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n22 |     strings.iter().max_by_key(|s| s.len()).unwrap()\n   |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `&String`\n   |\n   = note:   expected enum `Option<String>`\n           found\
    \ reference `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtoawr13.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpjtoawr13.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut max, &str| {\n   \
    \         if max.is_none() {\n                max = Some(str);\n            }\
    \ else if str.length() > max.unwrap().length() {\n                max = Some(str);\n\
    \            }\n            max\n        })\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpyaf41303.rs:15:27\n   |\n15 |             } else\
    \ if str.length() > max.unwrap().length() {\n   |                           ^^^^^^\
    \ method not found in `String`\n\nerror[E0599]: no method named `length` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpyaf41303.rs:15:51\n\
    \   |\n15 |             } else if str.length() > max.unwrap().length() {\n   |\
    \                                                   ^^^^^^ method not found in\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq2m1sjb.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |      \
    \                            ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = String::new();\n    for s in strings {\n        if\
    \ s.len() > max_len.len() {\n            max_len = s;\n        }\n    }\n    Some(max_len)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"\")`,\n right: `None`', /tmp/tmpl7rolper.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|len| len\
    \ == len).last())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `last` exists for enum `Option<usize>`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpa6gkc8hv.rs:14:88\n    |\n14\
    \  |           .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|len|\
    \ len == len).last())\n    |                                                 \
    \                                         ^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      match acc.len().cmp(&s.len()) {\n                Ordering::Less => {\n\
    \                    acc.push(s);\n                    Some(acc.pop().unwrap())\n\
    \                }\n                Ordering::Greater => {\n                 \
    \   Some(acc.pop().unwrap())\n                }\n                Ordering::Equal\
    \ => {\n                    None\n                }\n            }\n        })\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Ordering`\n  -->\
    \ /tmp/tmpwe8mnbba.rs:14:17\n   |\n14 |                 Ordering::Less => {\n\
    \   |                 ^^^^^^^^ use of undeclared type `Ordering`\n\nerror[E0433]:\
    \ failed to resolve: use of undeclared type `Ordering`\n  --> /tmp/tmpwe8mnbba.rs:18:17\n\
    \   |\n18 |                 Ordering::Greater => {\n   |                 ^^^^^^^^\
    \ use of undeclared type `Ordering`\n\nerror[E0433]: failed to resolve: use of\
    \ undeclared type `Ordering`\n  --> /tmp/tmpwe8mnbba.rs:21:17\n   |\n21 |    \
    \             Ordering::Equal => {\n   |                 ^^^^^^^^ use of undeclared\
    \ type `Ordering`\n\nerror[E0599]: no method named `len` found for enum `Option`\
    \ in the current scope\n  --> /tmp/tmpwe8mnbba.rs:13:23\n   |\n13 |          \
    \   match acc.len().cmp(&s.len()) {\n   |                       ^^^ method not\
    \ found in `Option<String>`\n\nerror[E0599]: no method named `push` found for\
    \ enum `Option` in the current scope\n  --> /tmp/tmpwe8mnbba.rs:15:25\n   |\n\
    15 |                     acc.push(s);\n   |                         ^^^^ method\
    \ not found in `Option<String>`\n\nerror[E0599]: no method named `pop` found for\
    \ enum `Option` in the current scope\n  --> /tmp/tmpwe8mnbba.rs:16:30\n   |\n\
    16 |                     Some(acc.pop().unwrap())\n   |                      \
    \        ^^^ method not found in `Option<String>`\n\nerror[E0599]: no method named\
    \ `pop` found for enum `Option` in the current scope\n  --> /tmp/tmpwe8mnbba.rs:19:30\n\
    \   |\n19 |                     Some(acc.pop().unwrap())\n   |               \
    \               ^^^ method not found in `Option<String>`\n\nerror: aborting due\
    \ to 7 previous errors\n\nSome errors have detailed explanations: E0433, E0599.\n\
    For more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        0,\n    );\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n            longest_str = s;\n        }\n    }\n    longest_str.ok()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpo9agz2j3.rs:21:17\n   |\n21 |     longest_str.ok()\n  \
    \ |                 ^^ method not found in `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                Some(s.len())\n            } else {\n\
    \                let mut len = 0;\n                let mut max_len = acc.unwrap().len();\n\
    \                let mut max_s = s;\n                for c in s.chars() {\n  \
    \                  len += 1;\n                    if len > max_len {\n       \
    \                 max_len = len;\n                        max_s = c;\n       \
    \             }\n                }\n                Some(max_s)\n            }\n\
    \        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6h08kyu2.rs:14:22\n   |\n\
    14 |                 Some(s.len())\n   |                      ^^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                      |\n   |\
    \                      expected struct `String`, found `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6h08kyu2.rs:23:33\n   |\n23 |              \
    \           max_s = c;\n   |                                 ^ expected `&String`,\
    \ found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6h08kyu2.rs:26:22\n\
    \   |\n26 |                 Some(max_s)\n   |                      ^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                      |\n\
    \   |                      expected struct `String`, found `&String`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:54\n   |\n\
    10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n   |        \
    \                                              ^^^^ expected `&String`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&String`\n             \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:5\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .into_iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmp7033be7d.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = std::cmp::max::<usize>(\n        strings.len(),\n \
    \       strings.iter().map(|s| s.len()).sum(),\n    );\n    let mut longest =\
    \ String::from(\"\");\n    for s in strings {\n        if max_len < s.len() {\n\
    \            max_len = s.len();\n            longest = s;\n        }\n    }\n\
    \    longest\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9qua9pn6.rs:21:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n21 |     longest\n   |     ^^^^^^^\n   |     |\n   |     expected\
    \ enum `Option`, found struct `String`\n   |     help: try using a variant of\
    \ the expected enum: `Some(longest)`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplavu2dx1.rs:16:23\n   |\n\
    16 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:54\n   |\n\
    10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n   |        \
    \                                              ^^^^ expected `&String`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&String`\n             \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:5\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                acc = Some(s);\n            } else\
    \ {\n                let mut len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3ye7orxh.rs:14:28\n   |\n\
    14 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp3ye7orxh.rs:18:32\n   |\n18 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| None)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpj5paqplm.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplavu2dx1.rs:16:23\n   |\n\
    16 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpti6700wo.rs:51:13\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n51 |         .map(|\n   |             ^ unclosed delimiter\n\
    52 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `|`, found `)`\n\
    \  --> /tmp/tmpti6700wo.rs:52:1\n   |\n51 |         .map(|\n   |             \
    \  - expected `|`\n52 | }\n   | ^ unexpected token\n\nerror: aborting due to 2\
    \ previous errors\n\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .map(|\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmpti6700wo.rs:51:13\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n51 |         .map(|\n   |             ^ unclosed delimiter\n\
    52 | }\n   | ^ mismatched closing delimiter\n\nerror: expected `|`, found `)`\n\
    \  --> /tmp/tmpti6700wo.rs:52:1\n   |\n51 |         .map(|\n   |             \
    \  - expected `|`\n52 | }\n   | ^ unexpected token\n\nerror: aborting due to 2\
    \ previous errors\n\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq2m1sjb.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |      \
    \                            ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_length\
    \ = 0;\n    let mut longest_string = strings[0];\n    for s in strings {\n   \
    \     if s.len() > longest_length {\n            longest_length = s.len();\n \
    \           longest_string = s;\n        }\n    }\n\n    Some(longest_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpjavl6nww.rs:15:30\n\
    \   |\n15 |     let mut longest_string = strings[0];\n   |                   \
    \           ^^^^^^^^^^\n   |                              |\n   |            \
    \                  move occurs because value has type `String`, which does not\
    \ implement the `Copy` trait\n   |                              help: consider\
    \ borrowing here: `&strings[0]`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0507`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2lb86qmd.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n   |\
    \                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2lb86qmd.rs:10:63\n\
    \   |\n10 |     strings.iter().max_by(|a, b| a.len() < b.len()).unwrap_or(None)\n\
    \   |                                                               ^^^^ expected\
    \ `&String`, found enum `Option`\n   |\n   = note: expected reference `&String`\n\
    \                   found enum `Option<_>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2lb86qmd.rs:10:5\n   |\n9  | fn longest(strings: Vec<String>) ->\
    \ Option<String> {\n   |                                     -------------- expected\
    \ `Option<String>` because of return type\n10 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).unwrap_or(None)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected enum `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    let mut longest_str = String::new();\n\
    \    for s in strings {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n            longest_str = s;\n        }\n    }\n    longest_str.ok()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `ok` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp4fo2bezu.rs:21:17\n   |\n21 |     longest_str.ok()\n  \
    \ |                 ^^ method not found in `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = strings[0].len();\n    let mut longest_string = strings[0];\n    for s in\
    \ strings.iter().skip(1) {\n        if s.len() > longest_len {\n            longest_len\
    \ = s.len();\n            longest_string = s;\n        }\n    }\n\n    Some(longest_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9708hmze.rs:19:30\n   |\n\
    19 |             longest_string = s;\n   |                              ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \      |\n   |                              expected struct `String`, found `&String`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtoawr13.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpjtoawr13.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n    Some(max_len.clone())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvu3qz9th.rs:15:9\n   |\n\
    15 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpvu3qz9th.rs:14:25\n\
    \   |\n14 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for (i, s) in strings.iter().enumerate()\
    \ {\n        if max_len.len() < s.len() {\n            max_len = s;\n        \
    \    max_index = i;\n        }\n    }\n\n    if max_len.len() == 0 {\n       \
    \ return None;\n    }\n\n    Some(strings[max_index])\n}\n\nfn main() {\n    let\
    \ candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"), String::from(\"\
    z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpla6wtd4g.rs:18:23\n   |\n\
    18 |             max_len = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror[E0277]: the\
    \ trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpla6wtd4g.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    for s in strings {\n  \
    \      if s.len() > longest_len {\n            longest_len = s.len();\n      \
    \  }\n    }\n    strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s).ok()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8f1yo371.rs:19:34\n   |\n\
    19 |     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s).ok()\n   |\
    \                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0599]: no method named `ok` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp8f1yo371.rs:19:64\n   |\n19 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).map(|s| s).ok()\n   |                                \
    \                                ^^ help: there is an associated function with\
    \ a similar name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n\n    Some(longest)\n}\n\nfn\
    \ main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7jbgy2x1.rs:17:23\n   |\n\
    17 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .into_iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .into_iter()\n                .map(|s| s.len())\n                .min()\n\
    \                .cloned()\n        })\n}\n\nfn main() {\n    let candidate =\
    \ longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmp848qwdtq.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp848qwdtq.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n\n    for s in strings\
    \ {\n        if longest_len.len() > s.len() {\n            longest_len = s;\n\
    \            longest_str = s;\n        }\n    }\n\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `s`\n  --> /tmp/tmpc882rw_u.rs:20:27\n\
    \   |\n17 |     for s in strings {\n   |         - move occurs because `s` has\
    \ type `String`, which does not implement the `Copy` trait\n18 |         if longest_len.len()\
    \ > s.len() {\n19 |             longest_len = s;\n   |                       \
    \    - value moved here\n20 |             longest_str = s;\n   |             \
    \              ^ value used here after move\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .unwrap_or(0)\n        })\n        .cloned()\n        .map(|s| strings.iter().max_by_key(|s|\
    \ s.len() as u32).unwrap())\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmp8forfnsj.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|len| len\
    \ == len).last())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `last` exists for enum `Option<usize>`, but its\
    \ trait bounds were not satisfied\n   --> /tmp/tmpa6gkc8hv.rs:14:88\n    |\n14\
    \  |           .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|len|\
    \ len == len).last())\n    |                                                 \
    \                                         ^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq2m1sjb.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |      \
    \                            ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmprf4dez32.rs:16:13\n    |\n16  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_idx = -1;\n    for &s in strings {\n     \
    \   let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_idx = strings.iter().position(|s| s == max_len).unwrap();\n\
    \        }\n    }\n    Some(max_len.to_owned())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmmflktyt.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: can't compare `&String` with `String`\n  --> /tmp/tmpmmflktyt.rs:20:53\n\
    \   |\n20 |             max_idx = strings.iter().position(|s| s == max_len).unwrap();\n\
    \   |                                                     ^^ no implementation\
    \ for `&String == String`\n   |\n   = help: the trait `PartialEq<String>` is not\
    \ implemented for `&String`\n\nerror[E0277]: the trait bound `usize: Neg` is not\
    \ satisfied\n  --> /tmp/tmpmmflktyt.rs:15:23\n   |\n15 |     let mut max_idx =\
    \ -1;\n   |                       ^^ the trait `Neg` is not implemented for `usize`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgfnd4hu6.rs:17:23\n   |\n\
    17 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).map(|s| s)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvj995pso.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len()).map(|s| s)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = std::cmp::max::<usize>(\n        strings.iter().map(|s| s.len()).sum(),\n\
    \        strings.len(),\n    );\n\n    for s in strings {\n        if s.len()\
    \ > longest_len {\n            longest_len = s.len();\n        }\n    }\n\n  \
    \  strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s).ok()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0xagke2o.rs:25:34\n   |\n\
    25 |     strings.iter().max_by(|a, b| a.len() < b.len()).map(|s| s).ok()\n   |\
    \                                  ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror[E0599]: no method named `ok` found for enum `Option` in\
    \ the current scope\n  --> /tmp/tmp0xagke2o.rs:25:64\n   |\n25 |     strings.iter().max_by(|a,\
    \ b| a.len() < b.len()).map(|s| s).ok()\n   |                                \
    \                                ^^ help: there is an associated function with\
    \ a similar name: `or`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv61uh6gx.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpv61uh6gx.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    let mut longest_string\
    \ = None;\n    for s in strings {\n        if s.len() > longest_len {\n      \
    \      longest_len = s.len();\n            longest_string = Some(s);\n       \
    \ }\n    }\n    longest_string\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"x\")`', /tmp/tmpdou8e8v1.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|&len| len\
    \ == len).cloned())\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpggoqmu6c.rs:14:89\n    |\n\
    14  |           .and_then(|len| strings.iter().map(|s| s.len()).max().filter(|&len|\
    \ len == len).cloned())\n    |                                               \
    \                                            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings {\n        if s.len() > longest.len() {\n\
    \            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmpxwa5ara3.rs:14:23\n\
    \   |\n14 |     let mut longest = strings[0];\n   |                       ^^^^^^^^^^\n\
    \   |                       |\n   |                       move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                    help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfq2m1sjb.rs:10:34\n   |\n\
    10 |     strings.iter().max_by(|a, b| a.len() < b.len()).cloned()\n   |      \
    \                            ^^^^^^^^^^^^^^^^^ expected enum `std::cmp::Ordering`,\
    \ found `bool`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                Some(s.len())\n            } else {\n\
    \                if acc.unwrap().len() > s.len() {\n                    Some(s.clone())\n\
    \                } else {\n                    None\n                }\n     \
    \       }\n        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3bmtjb72.rs:14:22\n   |\n\
    14 |                 Some(s.len())\n   |                      ^^^^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                      |\n   |\
    \                      expected struct `String`, found `usize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmprf4dez32.rs:16:13\n    |\n16  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmprf4dez32.rs:16:13\n    |\n16  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpcyt6pnel.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_len\
    \ = String::new();\n    let mut longest_str = String::new();\n    for s in strings\
    \ {\n        if s.len() > longest_len.len() {\n            longest_len = s.len();\n\
    \            longest_str = s;\n        }\n    }\n    Some(longest_str)\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfv41_6vl.rs:18:27\n   |\n\
    18 |             longest_len = s.len();\n   |                           ^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .unwrap_or(0)\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmprrzuvb8o.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgfnd4hu6.rs:17:23\n   |\n\
    17 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpcyt6pnel.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                acc = Some(s);\n            } else\
    \ {\n                let len = s.len();\n                if len > acc.unwrap().len()\
    \ {\n                    acc = Some(s);\n                }\n            }\n  \
    \          acc\n        })\n}\n\nfn main() {\n    let candidate = longest;\n \
    \   assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp41pu05h3.rs:14:28\n   |\n\
    14 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp41pu05h3.rs:18:32\n   |\n18 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.len(),\n\
    \        strings.iter().map(|s| s.len()).sum(),\n    );\n    let mut longest_string\
    \ = None;\n    for s in strings {\n        if s.len() > longest_len {\n      \
    \      longest_len = s.len();\n            longest_string = Some(s);\n       \
    \ }\n    }\n    longest_string\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"x\")`', /tmp/tmpgu73kl_c.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len()).max().unwrap())\n\
    \        .cloned()\n        .next()\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpx04ltjy2.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings {\n        if s.len() > longest.len() {\n\
    \            longest = s;\n        }\n    }\n\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0507]: cannot move out of index of `Vec<String>`\n  --> /tmp/tmprv1uf7ew.rs:14:23\n\
    \   |\n14 |     let mut longest = strings[0];\n   |                       ^^^^^^^^^^\n\
    \   |                       |\n   |                       move occurs because\
    \ value has type `String`, which does not implement the `Copy` trait\n   |   \
    \                    help: consider borrowing here: `&strings[0]`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0507`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .and_then(|len| strings.iter().filter_map(|s| s.len() == len).max())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcbov72c7.rs:14:55\n   |\n\
    14 |         .and_then(|len| strings.iter().filter_map(|s| s.len() == len).max())\n\
    \   |                                                       ^^^^^^^^^^^^^^\n \
    \  |                                                       |\n   |           \
    \                                            expected enum `Option`, found `bool`\n\
    \   |                                                       help: try using a\
    \ variant of the expected enum: `Some(s.len() == len)`\n   |\n   = note: expected\
    \ enum `Option<_>`\n              found type `bool`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = std::cmp::max::<usize>(\n        strings.len(),\n \
    \       strings.iter().map(|s| s.len()).sum(),\n    );\n    let mut longest =\
    \ String::new();\n    for s in strings {\n        if max_len == s.len() {\n  \
    \          longest = s;\n            break;\n        }\n        max_len = std::cmp::max::<usize>(max_len,\
    \ s.len());\n    }\n    longest\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnrnn4z9.rs:22:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n22 |     longest\n   |     ^^^^^^^\n   |     |\n   |     expected\
    \ enum `Option`, found struct `String`\n   |     help: try using a variant of\
    \ the expected enum: `Some(longest)`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut acc, s| {\n      \
    \      if acc.is_none() {\n                acc = Some(s);\n            } else\
    \ {\n                if acc.unwrap().len() > s.len() {\n                    acc\
    \ = Some(s);\n                }\n            }\n            acc\n        })\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6vjbihpe.rs:14:28\n   |\n\
    14 |                 acc = Some(s);\n   |                            ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \    |\n   |                            expected struct `String`, found `&String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6vjbihpe.rs:17:32\n   |\n17 |\
    \                     acc = Some(s);\n   |                                ^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \        |\n   |                                expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 0
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest_length\
    \ = 0;\n    let mut longest_string = String::from(\"\");\n    for s in strings\
    \ {\n        if s.len() > longest_length {\n            longest_length = s.len();\n\
    \            longest_string = s;\n        }\n    }\n\n    Some(longest_string)\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).map(|s| s)\n}\n\nfn main() {\n\
    \    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvj995pso.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len()).map(|s| s)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().fold(None, |max, &s| {\n        if let Some(len) = s.len()\
    \ {\n            if len > max {\n                Some(s)\n            } else {\n\
    \                None\n            }\n        } else {\n            None\n   \
    \     }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpikoqyo_1.rs:11:16\n   |\n\
    11 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().filter(|s| s.len() == len).max().cloned())\n\
    \        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpz1pgtzn7.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut longest\
    \ = strings[0];\n    for s in strings.iter().rev() {\n        if s.len() > longest.len()\
    \ {\n            longest = s;\n        }\n    }\n    Some(longest)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgfnd4hu6.rs:17:23\n   |\n\
    17 |             longest = s;\n   |                       ^- help: try using a\
    \ conversion method: `.to_string()`\n   |                       |\n   |      \
    \                 expected struct `String`, found `&String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .ok()\n        .and_then(|len| strings\n         \
    \   .iter()\n            .map(|s| s.len())\n            .filter(|&len| len ==\
    \ len)\n            .max())\n        .cloned()\n        .ok()\n        .and_then(|len|\
    \ strings\n            .iter()\n            .map(|s| s.len())\n            .filter(|&len|\
    \ len == len)\n            .max())\n        .cloned()\n        .ok()\n       \
    \ .and_then(|len| strings\n            .iter()\n            .map(|s| s.len())\n\
    \            .filter(|&len| len == len)\n            .max())\n        .cloned()\n\
    \        .ok()\n        .and_then(|len| strings\n            .iter()\n       \
    \     .map(|s| s.len())\n            .filter(|&len| len == len)\n            .max())\n\
    \        .cloned()\n        .ok()\n        .and_then(|len| strings\n         \
    \   .iter()\n            .map(|s| s.len())\n            .filter(|&len| len ==\
    \ len)\n            .max())\n        .cloned()\n        .ok()\n        .and_then(|len|\
    \ strings\n            .iter()\n            .map(|s| s.len())\n            .filter(|&len|\
    \ len == len)\n            .max())\n        .cloned()\n        .ok()\n       \
    \ .and_then(|len| strings\n            .iter()\n            .map(|s| s.len())\n\
    \            .filter(|&len| len == len)\n            .max())\n        .cloned()\n\
    \        .ok()\n        .and_then(|len| strings\n            .iter()\n       \
    \     .map(|s| s.len())\n            .filter(|&len| len == len)\n            .max())\n\
    \        .cloned()\n        .ok()\n        .and_then(|len| strings\n         \
    \   .iter()\n            .map(|s| s.len())\n            .filter(|&len| len ==\
    \ len)\n            .max())\n        .cloned()\n        .ok()\n        .and_then(|len|\
    \ strings\n            .iter()\n            .map(|s| s.len())\n            .filter(|&len|\
    \ len == len)\n            .max())\n        .cloned()\n        .ok()\n       \
    \ .and_then(|len| strings\n            .iter()\n            .map(|s| s.len())\n\
    \            .filter(|&len| len == len)\n            .max())\n        .cloned()\n\
    \        .ok()\n        .and_then(|len| strings\n            .iter()\n\n}\n\n\
    fn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp_byoshjc.rs:93:18\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                                             - closing delimiter possibly meant\
    \ for this\n...\n93 |         .and_then(|len| strings\n   |                  ^\
    \ unclosed delimiter\n...\n96 | }\n   | ^ mismatched closing delimiter\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmp_byoshjc.rs:14:10\n    |\n14  |           .cloned()\n\
    \    |            ^^^^^^ method cannot be called on `Option<usize>` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `Option<usize>: Iterator`\n            which is required by `&mut\
    \ Option<usize>: Iterator`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest_len = std::cmp::max::<usize>(\n        strings.len(),\n\
    \        strings.iter().map(|s| s.len()).sum(),\n    );\n    let mut longest_str\
    \ = None;\n    for s in strings {\n        if s.len() > longest_len {\n      \
    \      longest_len = s.len();\n            longest_str = Some(s);\n        }\n\
    \    }\n    longest_str\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `None`,\n right: `Some(\"x\")`', /tmp/tmpvezpldxf.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmprf4dez32.rs:16:13\n    |\n16  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for &s in strings {\n   \
    \     let len = s.len();\n        if max_len.len() < len {\n            max_len\
    \ = s;\n            max_index = len;\n        }\n    }\n\n    Some(max_len.to_string())\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv61uh6gx.rs:16:9\n   |\n\
    16 |     for &s in strings {\n   |         ^^    ------- this expression has type\
    \ `String`\n   |         |\n   |         expected struct `String`, found reference\n\
    \   |\n   = note: expected struct `String`\n           found reference `&_`\n\n\
    error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpv61uh6gx.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| strings.first().cloned())\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpp1mex_60.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 101
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).cloned()\n}\n\nfn main() {\n \
    \   let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"z\")`,\n right: `Some(\"x\")`', /tmp/tmpascv4413.rs:16:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut longest = String::new();\n    for s in strings {\n        if\
    \ s.len() > longest.len() {\n            longest = s;\n        }\n    }\n    longest.cloned()\n\
    }\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmprf4dez32.rs:16:13\n    |\n16  |  \
    \     longest.cloned()\n    |               ^^^^^^ method cannot be called on\
    \ `String` due to unsatisfied trait bounds\n    |\n    = note: the following trait\
    \ bounds were not satisfied:\n            `String: Iterator`\n            which\
    \ is required by `&mut String: Iterator`\n            `str: Iterator`\n      \
    \      which is required by `&mut str: Iterator`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_len = strings[0].len();\n    for s in strings\
    \ {\n        if s.len() > max_len {\n            max_len = s.len();\n        }\n\
    \    }\n    Some(max_len)\n}\n\nfn main() {\n    let candidate = longest;\n  \
    \  assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps82bf6zz.rs:21:10\n   |\n\
    21 |     Some(max_len)\n   |          ^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |          |\n   |          expected struct `String`, found\
    \ `usize`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .fold(None, |mut max, &str| {\n   \
    \         if max.is_none() {\n                max = Some(str);\n            }\
    \ else {\n                if str.length() > max.unwrap().len() {\n           \
    \         max = Some(str);\n                }\n            }\n            max\n\
    \        })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `length` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmp0k2mosi1.rs:16:24\n   |\n16 |                 if\
    \ str.length() > max.unwrap().len() {\n   |                        ^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().fold(None, |max, s| {\n        if let Some(len) = s.len()\
    \ {\n            if len > max {\n                Some(s)\n            } else {\n\
    \                None\n            }\n        } else {\n            None\n   \
    \     }\n    })\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmparh06wsm.rs:11:16\n   |\n\
    11 |         if let Some(len) = s.len() {\n   |                ^^^^^^^^^   -------\
    \ this expression has type `usize`\n   |                |\n   |              \
    \  expected `usize`, found enum `Option`\n   |\n   = note: expected type `usize`\n\
    \              found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmparh06wsm.rs:13:22\n   |\n13 |                 Some(s)\n   |        \
    \              ^- help: try using a conversion method: `.to_string()`\n   |  \
    \                    |\n   |                      expected struct `String`, found\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = std::cmp::max::<usize>(\n        strings.len(),\n \
    \       strings.iter().map(|s| s.len()).sum(),\n    );\n    for s in strings {\n\
    \        if max_len < s.len() {\n            max_len = s.len();\n        }\n \
    \   }\n    if max_len == 0 {\n        return None;\n    }\n    strings.iter().max_by_key(|s|\
    \ s.len()).unwrap()\n}\n\nfn main() {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7wim0rx.rs:22:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n22 |     strings.iter().max_by_key(|s| s.len()).unwrap()\n   |  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Option`, found\
    \ `&String`\n   |\n   = note:   expected enum `Option<String>`\n           found\
    \ reference `&String`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .map(|len| strings.iter().map(|s| s.len() as usize).max().unwrap())\n\
    \        .cloned()\n        .unwrap_or(None)\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmp54j8j9ww.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749502
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings\n        .iter()\n        .map(|s| s.len())\n        .max()\n\
    \        .cloned()\n        .or_else(|| {\n            strings\n             \
    \   .iter()\n                .map(|s| s.len())\n                .max()\n     \
    \           .cloned()\n        })\n}\n\nfn main() {\n    let candidate = longest;\n\
    \    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `cloned` exists for enum `Option<usize>`, but\
    \ its trait bounds were not satisfied\n   --> /tmp/tmpv39_ypit.rs:14:10\n    |\n\
    14  |           .cloned()\n    |            ^^^^^^ method cannot be called on\
    \ `Option<usize>` due to unsatisfied trait bounds\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `Option<usize>: Iterator`\n  \
    \          which is required by `&mut Option<usize>: Iterator`\n\nerror[E0599]:\
    \ the method `cloned` exists for enum `Option<usize>`, but its trait bounds were\
    \ not satisfied\n   --> /tmp/tmpv39_ypit.rs:20:18\n    |\n20  |              \
    \     .cloned()\n    |                    ^^^^^^ method cannot be called on `Option<usize>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Option<usize>: Iterator`\n            which\
    \ is required by `&mut Option<usize>: Iterator`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mwubxl3.rs:10:5\n   |\n\
    9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |              \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n10 |     strings.iter().max_by_key(|s| s.len())\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `&String`\n   |\n   = note: expected enum `Option<String>`\n\
    \              found enum `Option<&String>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749500
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:54\n   |\n\
    10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n   |        \
    \                                              ^^^^ expected `&String`, found\
    \ enum `Option`\n   |\n   = note: expected reference `&String`\n             \
    \      found enum `Option<_>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn03yscrf.rs:10:5\n\
    \   |\n9  | fn longest(strings: Vec<String>) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n10 |     strings.iter().max_by_key(|s| s.len()).unwrap_or(None)\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum\
    \ `Option`, found `&String`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found reference `&String`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    let mut max_len = std::cmp::max::<usize>(\n        strings.iter().map(|s|\
    \ s.len()).sum(),\n        strings.len(),\n    );\n    for s in strings {\n  \
    \      if s.len() > max_len {\n            max_len = s.len();\n        }\n   \
    \ }\n    strings.iter().find(|s| s.len() == max_len).cloned()\n}\n\nfn main()\
    \ {\n    let candidate = longest;\n    assert_eq!(candidate(Vec::<String>::new()),\
    \ None);\n    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"y\"\
    ), String::from(\"z\")]), Some(String::from(\"x\")));\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"yyy\"), String::from(\"zzzz\"), String::from(\"www\"), String::from(\"\
    kkkk\"), String::from(\"abc\")]), Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `strings`\n    --> /tmp/tmpsxw83ft5.rs:19:5\n\
    \     |\n9    | fn longest(strings: Vec<String>) -> Option<String> {\n     | \
    \           ------- move occurs because `strings` has type `Vec<String>`, which\
    \ does not implement the `Copy` trait\n...\n14   |     for s in strings {\n  \
    \   |              -------\n     |              |\n     |              `strings`\
    \ moved due to this implicit call to `.into_iter()`\n     |              help:\
    \ consider borrowing to avoid moving into the for loop: `&strings`\n...\n19  \
    \ |     strings.iter().find(|s| s.len() == max_len).cloned()\n     |     ^^^^^^^^^^^^^^\
    \ value borrowed here after move\n     |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `strings`\n     = note: borrow occurs due\
    \ to deref coercion to `[String]`\nnote: deref defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659749501
- exit_code: 1
  program: "/// Out of vector of strings, return the longest one. Return the first\
    \ one in case of multiple\n/// strings of the same length. Return None in case\
    \ the input vector is empty.\n/// >>> longest(vec![])\n/// None\n/// >>> longest(vec![String::from(\"\
    a\"), String::from(\"b\"), String::from(\"c\")])\n/// String::from(\"a\")\n///\
    \ >>> longest(vec![String::from(\"a\"), String::from(\"bb\"), String::from(\"\
    ccc\")])\n/// String::from(\"ccc\")\nfn longest(strings: Vec<String>) -> Option<String>\
    \ {\n    if strings.is_empty() {\n        return None;\n    }\n\n    let mut max_len\
    \ = String::new();\n    let mut max_index = -1;\n    for index in 0..strings.len()\
    \ {\n        let len = strings[index].len();\n        if max_len.len() < len {\n\
    \            max_len = strings[index];\n            max_index = index;\n     \
    \   }\n    }\n\n    Some(max_len.to_string())\n}\n\nfn main() {\n    let candidate\
    \ = longest;\n    assert_eq!(candidate(Vec::<String>::new()), None);\n    assert_eq!(candidate(vec![String::from(\"\
    x\"), String::from(\"y\"), String::from(\"z\")]), Some(String::from(\"x\")));\n\
    \    assert_eq!(candidate(vec![String::from(\"x\"), String::from(\"yyy\"), String::from(\"\
    zzzz\"), String::from(\"www\"), String::from(\"kkkk\"), String::from(\"abc\")]),\
    \ Some(String::from(\"zzzz\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp28hcjeid.rs:15:25\n\
    \   |\n15 |     let mut max_index = -1;\n   |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749500
