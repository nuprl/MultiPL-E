name: HumanEval_104_unique_digits
language: rs
prompt: "/// Given a vector of positive integers x. return a sorted vector of all\
  \ \n/// elements that hasn't any even digit.\n/// Note: Returned vector should be\
  \ sorted in increasing order.\n/// For example:\n/// >>> unique_digits(vec![15,\
  \ 33, 1422, 1])\n/// vec![1, 15, 33]\n/// >>> unique_digits(vec![152, 323, 1422,\
  \ 10])\n/// vec![]\nfn unique_digits(x: Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = unique_digits;\n    assert_eq!(candidate(vec![15,\
  \ 33, 1422, 1]), vec![1, 15, 33]);\n    assert_eq!(candidate(vec![152, 323, 1422,\
  \ 10]), Vec::<isize>::new());\n    assert_eq!(candidate(vec![12345, 2033, 111, 151]),\
  \ vec![111, 151]);\n    assert_eq!(candidate(vec![135, 103, 31]), vec![31, 135]);\n\
  }\n"
completions: ["    let mut result = vec![];\n    let mut digits = x.iter().map(|x|\
    \ x % 10).collect::<Vec<_>>();\n    let mut even = true;\n    let mut i = 0;\n\
    \    while i < x.len() {\n        if even == true {\n            if digits[i]\
    \ == 0 {\n                result.push(digits[i]);\n                i += 1;\n \
    \           } else {\n                even = false;\n            }\n        }\
    \ else {\n            if digits[i] != 0 {\n                result.push(digits[i]);\n\
    \                i += 1;\n            } else {\n                even = true;\n\
    \            }\n        }\n    }\n    result", "    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort_unstable();\n\
    \    result", "    let mut result = vec![];\n    let mut digits = vec![];\n  \
    \  for d in x {\n        digits.push(d % 10);\n    }\n    for i in 0..digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n  \
    \      }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    let mut digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n\
    \    }\n    for i in 0..digits.len() {\n        if digits[i] != 0 {\n        \
    \    result.push(digits[i]);\n        }\n    }\n    result.sort();\n    result",
  "    let mut result = vec![];\n    let mut i = 0;\n    while i < x.len() {\n   \
    \     if x[i] % 2 == 0 {\n            result.push(x[i]);\n            i += 1;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    result", "    let\
    \ mut result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits[i] % 2 == 0 {\n            digits_set.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    for i in digits_set.iter() {\n       \
    \ result.push(i);\n    }\n    result.sort_unstable();\n    result", "    let mut\
    \ result = vec![];\n    let mut digits = vec![];\n    for &i in x {\n        digits.push(i\
    \ as u8);\n    }\n    for i in 0..digits.len() {\n        if digits[i] % 2 ==\
    \ 0 {\n            result.push(i as isize);\n        }\n    }\n    result", " \
    \   let mut x: Vec<isize> = x.clone();\n    let mut result: Vec<isize> = x.clone();\n\
    \    let mut cnt: usize = 0;\n    let mut i: usize = 0;\n    while i < x.len()\
    \ {\n        if x[i] % 2 == 0 {\n            cnt += 1;\n            result.push(x[i]);\n\
    \        }\n        i += 1;\n    }\n    if cnt > 0 {\n        result.sort();\n\
    \    }\n    result", "    let mut result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut digits_set = vec![];\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if digits_set.contains(&digits[i]) {\n            continue;\n   \
    \     }\n        digits_set.push(digits[i]);\n        result.push(digits[i]);\n\
    \        i += 1;\n    }\n    result", "    let mut result = vec![];\n    let mut\
    \ digits = vec![];\n    for d in x {\n        digits.push(d % 10);\n    }\n  \
    \  for i in 0..digits.len() {\n        if digits[i] % 2 == 0 {\n            result.push(digits[i]);\n\
    \        }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2 == 0 {\n   \
    \         result.push(x[i]);\n        }\n        i += 1;\n    }\n    result.sort();\n\
    \    result", "    let mut result = vec![];\n    let mut i = 0;\n    while i <\
    \ x.len() {\n        if x[i] % 2 == 0 {\n            result.push(x[i]);\n    \
    \        i += 1;\n        } else {\n            i += 1;\n        }\n    }\n  \
    \  result", "    let mut result = vec![];\n    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n\
    \    let mut evens = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut\
    \ evens_idx = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx\
    \ = vec![];\n    let mut evens_idx = vec![];\n    let mut evens_idx = vec![];\n\
    \    let mut evens_idx = vec![];\n    let mut evens_idx = ", "    let mut result\
    \ = Vec::new();\n    let mut digits = x.iter().map(|x| x.to_string()).collect::<Vec<_>>();\n\
    \    let mut evens = Vec::new();\n    let mut odd = Vec::new();\n    let mut i\
    \ = 1;\n    while i < digits.len() {\n        if digits[i] != digits[i - 1] {\n\
    \            result.push(digits[i]);\n            i += 1;\n        } else {\n\
    \            evens.push(digits[i]);\n        }\n    }\n    while i < digits.len()\
    \ {\n        if digits[i] != digits[i - 1] {\n            odd.push(digits[i]);\n\
    \        }\n        i += 1;\n    }\n    result.extend(evens);\n    result.extend(odd);\n\
    \    result", "    let mut result = vec![];\n    let mut digits = vec![];\n  \
    \  let mut i = 0;\n    while i < x.len() {\n        let mut j = i;\n        while\
    \ j < x.len() && x[j] % 10 == 0 {\n            j = j + 1;\n        }\n       \
    \ if j > i {\n            result.push(x[i]);\n            digits.push(x[j]);\n\
    \            i = j;\n        }\n    }\n    result.sort_unstable();\n    result.push(digits[result.len()\
    \ - 1]);\n    result", "    let mut result = vec![];\n    let mut digits = vec![];\n\
    \    for d in x {\n        if d > 0 {\n            digits.push(d % 10);\n    \
    \    }\n    }\n    for d in digits {\n        if d % 2 == 0 {\n            result.push(d);\n\
    \        }\n    }\n    result.sort_unstable();\n    result", "    let mut result\
    \ = vec![];\n    let mut i = 0;\n    while i < x.len() {\n        if x[i] % 2\
    \ == 0 {\n            result.push(x[i]);\n        }\n        i += 1;\n    }\n\
    \    result.sort();\n    result", "    let mut result = vec![];\n    for &i in\
    \ x {\n        if i % 2 == 0 {\n            result.push(i);\n        }\n    }\n\
    \    result.sort_unstable();\n    result", "    let mut result = vec![];\n   \
    \ for &i in x {\n        if i % 2 == 0 {\n            result.push(i);\n      \
    \  }\n    }\n    result.sort();\n    result", "    let mut result = vec![];\n\
    \    let mut digits = x.iter().cloned().collect::<Vec<_>>();\n    let mut evens\
    \ = vec![];\n    for d in digits {\n        if d % 2 == 0 {\n            evens.push(d\
    \ as isize);\n        }\n    }\n    for e in evens {\n        if e > 0 {\n   \
    \         result.push(e as isize);\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
