language: rs
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfsvrqrkr.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:16:17\n   |\n16 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:18:17\n\
    \   |\n18 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut odd = false;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \        odd = !odd;\n        } else {\n            if !odd { sum += x; }\n  \
    \          odd = true;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp02csm09j.rs:20:14\n   |\n20 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp02csm09j.rs:21:17\n   |\n21 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp02csm09j.rs:24:27\n\
    \   |\n24 |             if !odd { sum += x; }\n   |                          \
    \ ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>`\
    \ is not implemented for `{integer}`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp615m4us1.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp615m4us1.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for &x in lst {\n \
    \       if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsb36rjuo.rs:18:9\n   |\n\
    18 |     for &x in lst {\n   |         ^^    --- this expression has type `f64`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |\n   = note:\
    \   expected type `f64`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst {\n    \
    \    if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp2yix7fgn.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp2yix7fgn.rs:19:17\n\
    \   |\n19 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgshlynay.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgshlynay.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0.0 {\n            sum += num * num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphij96q1c.rs:16:17\n\
    \   |\n16 |             sum += num * num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfsvrqrkr.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:16:17\n   |\n16 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:18:17\n\
    \   |\n18 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut count = 0;\n\
    \n    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n       \
    \     count += 1;\n        }\n    }\n\n    if count == 0 {\n        return 0;\n\
    \    }\n\n    sum * sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp77j455v6.rs:21:14\n\
    \   |\n21 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp77j455v6.rs:22:17\n\
    \   |\n22 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp615m4us1.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp615m4us1.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, x| sum + x)\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpvuwepcee.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, x| sum + x)\n   |                             ^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0277]: cannot add `&f64` to `isize`\n\
    \  --> /tmp/tmpvuwepcee.rs:13:60\n   |\n13 |     lst.iter().filter(|x| x.is_odd()).fold(0,\
    \ |sum, x| sum + x)\n   |                                                    \
    \        ^ no implementation for `isize + &f64`\n   |\n   = help: the trait `Add<&f64>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, x| sum + x)\n}\n\nfn main() {\n    let candidate =\
    \ double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n \
    \   assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpvuwepcee.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, x| sum + x)\n   |                             ^^^^^^\
    \ method not found in `&&f64`\n\nerror[E0277]: cannot add `&f64` to `isize`\n\
    \  --> /tmp/tmpvuwepcee.rs:13:60\n   |\n13 |     lst.iter().filter(|x| x.is_odd()).fold(0,\
    \ |sum, x| sum + x)\n   |                                                    \
    \        ^ no implementation for `isize + &f64`\n   |\n   = help: the trait `Add<&f64>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpj85ex9pu.rs:13:30\n   |\n13 |     lst.iter().filter(|&x|\
    \ x.is_odd()).sum::<isize>()\n   |                              ^^^^^^ method\
    \ not found in `&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n  --> /tmp/tmpj85ex9pu.rs:13:40\n   |\n13 |     lst.iter().filter(|&x|\
    \ x.is_odd()).sum::<isize>()\n   |                                        ^^^\
    \ the trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp0xco66e.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpp0xco66e.rs:16:17\n   |\n16 |             sum += num;\n   |   \
    \              ^^ no implementation for `{integer} += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfsvrqrkr.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:16:17\n   |\n16 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:18:17\n\
    \   |\n18 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num < 0 {\n            continue;\n        }\n\
    \        if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5m675y4h.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmp5m675y4h.rs:18:16\n   |\n18 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp5m675y4h.rs:19:17\n   |\n19 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x > 0f64).filter(|x| x % 2usize == 0).sum::<isize>()\n}\n\nfn main() {\n   \
    \ let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8yucxnpg.rs:13:31\n   |\n\
    13 |     lst.iter().filter(|x| x > 0f64).filter(|x| x % 2usize == 0).sum::<isize>()\n\
    \   |                               ^^^^ expected `&&f64`, found `f64`\n\nerror[E0369]:\
    \ cannot mod `&&f64` by `usize`\n  --> /tmp/tmp8yucxnpg.rs:13:50\n   |\n13 | \
    \    lst.iter().filter(|x| x > 0f64).filter(|x| x % 2usize == 0).sum::<isize>()\n\
    \   |                                                - ^ ------ usize\n   |  \
    \                                              |\n   |                       \
    \                         &&f64\n\nerror[E0277]: the trait bound `isize: Sum<&f64>`\
    \ is not satisfied\n  --> /tmp/tmp8yucxnpg.rs:13:65\n   |\n13 |     lst.iter().filter(|x|\
    \ x > 0f64).filter(|x| x % 2usize == 0).sum::<isize>()\n   |                 \
    \                                                ^^^ the trait `Sum<&f64>` is\
    \ not implemented for `isize`\n   |\n   = help: the following implementations\
    \ were found:\n             <isize as Sum<&'a isize>>\n             <isize as\
    \ Sum>\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut odd_sum = 0;\n\
    \    let mut odd_count = 0;\n    for x in lst {\n        if x.is_integer() {\n\
    \            sum += x;\n            odd_sum += x;\n            odd_count += 1;\n\
    \        } else if x.is_odd() {\n            sum += x;\n            odd_sum +=\
    \ x;\n            odd_count += 1;\n        } else {\n            sum += x;\n \
    \       }\n    }\n    if odd_count == 0 {\n        return 0;\n    }\n    sum -=\
    \ odd_sum;\n    sum.sqrt()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmp9bg5ew3k.rs:21:14\n   |\n21 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp9bg5ew3k.rs:22:17\n   |\n22 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp9bg5ew3k.rs:23:21\n\
    \   |\n23 |             odd_sum += x;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror[E0599]: no method named `is_odd` found for type `f64`\
    \ in the current scope\n  --> /tmp/tmp9bg5ew3k.rs:25:21\n   |\n25 |         }\
    \ else if x.is_odd() {\n   |                     ^^^^^^ method not found in `f64`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp9bg5ew3k.rs:26:17\n\
    \   |\n26 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmp9bg5ew3k.rs:27:21\n   |\n27 |             odd_sum += x;\n   |      \
    \               ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror[E0277]:\
    \ cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp9bg5ew3k.rs:30:17\n  \
    \ |\n30 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror[E0689]: can't call method `sqrt` on ambiguous numeric\
    \ type `{integer}`\n  --> /tmp/tmp9bg5ew3k.rs:37:9\n   |\n37 |     sum.sqrt()\n\
    \   |         ^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `i32`\n   |\n17 |     let mut sum: i32 = 0;\n   |         ~~~~~~~~~~~~\n\nerror:\
    \ aborting due to 8 "
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else if x.is_positive() {\n            sum += x;\n        }\n    }\n  \
    \  sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpgllatc0q.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nwarning: use of\
    \ deprecated associated function `core::f64::<impl f64>::is_positive`: renamed\
    \ to is_sign_positive\n  --> /tmp/tmpgllatc0q.rs:17:21\n   |\n17 |         } else\
    \ if x.is_positive() {\n   |                     ^^^^^^^^^^^\n   |\n   = note:\
    \ `#[warn(deprecated)]` on by default\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmpgllatc0q.rs:16:17\n   |\n16 |             sum\
    \ += x;\n   |                 ^^ no implementation for `{integer} += f64`\n  \
    \ |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgllatc0q.rs:18:17\n\
    \   |\n18 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for &x in lst {\n   \
    \     if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvp45vncr.rs:17:9\n   |\n\
    17 |     for &x in lst {\n   |         ^^    --- this expression has type `f64`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |\n   = note:\
    \   expected type `f64`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num < 0 {\n            continue;\n        }\n\
    \        if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5m675y4h.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmp5m675y4h.rs:18:16\n   |\n18 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp5m675y4h.rs:19:17\n   |\n19 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num < 0 {\n            continue;\n        }\n\
    \        if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5m675y4h.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmp5m675y4h.rs:18:16\n   |\n18 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp5m675y4h.rs:19:17\n   |\n19 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpnfnabq_y.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for n in lst {\n  \
    \      if n % 2 == 1 {\n            sum += n * n;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpacgthbuy.rs:19:14\n\
    \   |\n19 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpacgthbuy.rs:20:17\n\
    \   |\n20 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for x in lst {\n  \
    \      if x.is_odd() {\n            sum += x;\n        }\n    }\n\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmp69409kjl.rs:19:14\n   |\n19 |         if x.is_odd() {\n\
    \   |              ^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmp69409kjl.rs:20:17\n   |\n20 |          \
    \   sum += x;\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut evens = 0;\n\
    \    let mut odds = 0;\n\n    for n in lst {\n        if n % 2 == 0 {\n      \
    \      evens += n;\n        } else {\n            odds += n;\n        }\n    }\n\
    \n    sum += evens * evens;\n    sum += odds * odds;\n\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp7hbiocqm.rs:22:14\n\
    \   |\n22 |         if n % 2 == 0 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp7hbiocqm.rs:23:19\n\
    \   |\n23 |             evens += n;\n   |                   ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  -->\
    \ /tmp/tmp7hbiocqm.rs:25:18\n   |\n25 |             odds += n;\n   |         \
    \         ^^ no implementation for `{integer} += f64`\n   |\n   = help: the trait\
    \ `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpmklk9872.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                             ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n  --> /tmp/tmpmklk9872.rs:13:39\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                                       ^^^ the\
    \ trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        }\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpbu06rook.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpbu06rook.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp849oicqi.rs:18:18\n   |\n\
    18 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmp849oicqi.rs:19:17\n   |\n19 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for &x in lst {\n \
    \       if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsb36rjuo.rs:18:9\n   |\n\
    18 |     for &x in lst {\n   |         ^^    --- this expression has type `f64`\n\
    \   |         |\n   |         expected `f64`, found reference\n   |\n   = note:\
    \   expected type `f64`\n           found reference `&_`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, x| sum + x * x)\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpdixqfpzo.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).fold(0, |sum, x| sum + x * x)\n   |                            \
    \ ^^^^^^ method not found in `&&f64`\n\nerror[E0277]: cannot add `f64` to `isize`\n\
    \  --> /tmp/tmpdixqfpzo.rs:13:60\n   |\n13 |     lst.iter().filter(|x| x.is_odd()).fold(0,\
    \ |sum, x| sum + x * x)\n   |                                                \
    \            ^ no implementation for `isize + f64`\n   |\n   = help: the trait\
    \ `Add<f64>` is not implemented for `isize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n\n\
    \    while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpuwops2lo.rs:21:19\n\
    \   |\n21 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpuwops2lo.rs:22:17\n\
    \   |\n22 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|&x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&f64` in the\
    \ current scope\n  --> /tmp/tmpj85ex9pu.rs:13:30\n   |\n13 |     lst.iter().filter(|&x|\
    \ x.is_odd()).sum::<isize>()\n   |                              ^^^^^^ method\
    \ not found in `&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n  --> /tmp/tmpj85ex9pu.rs:13:40\n   |\n13 |     lst.iter().filter(|&x|\
    \ x.is_odd()).sum::<isize>()\n   |                                        ^^^\
    \ the trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpmklk9872.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                             ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n  --> /tmp/tmpmklk9872.rs:13:39\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                                       ^^^ the\
    \ trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst {\n    \
    \    if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp2yix7fgn.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp2yix7fgn.rs:19:17\n\
    \   |\n19 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpmklk9872.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                             ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n  --> /tmp/tmpmklk9872.rs:13:39\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                                       ^^^ the\
    \ trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for x in lst {\n  \
    \      if x % 2 == 1 {\n            sum += x;\n        }\n    }\n\n    sum\n}\n\
    \nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpr2fzxn3r.rs:19:14\n\
    \   |\n19 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpr2fzxn3r.rs:20:17\n\
    \   |\n20 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut odd_sum = 0;\n\
    \    let mut odd_count = 0;\n    for x in lst {\n        if x.is_integer() {\n\
    \            sum += x;\n        } else {\n            odd_sum += x;\n        \
    \    odd_count += 1;\n        }\n    }\n    if odd_count == 0 {\n        return\
    \ 0;\n    }\n    sum -= odd_sum;\n    sum * sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpn2b_1c6g.rs:21:14\n   |\n21 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpn2b_1c6g.rs:22:17\n   |\n22 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpn2b_1c6g.rs:24:21\n\
    \   |\n24 |             odd_sum += x;\n   |                     ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut even = 0;\n \
    \   for num in lst {\n        if num % 2 == 0 {\n            sum += num;\n   \
    \         even += 1;\n        }\n    }\n    if even == 0 {\n        return 0;\n\
    \    }\n    sum * sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp0dafmhjg.rs:19:16\n\
    \   |\n19 |         if num % 2 == 0 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp0dafmhjg.rs:20:17\n\
    \   |\n20 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x % 2 == 1).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot mod `&&f64` by `{integer}`\n  --> /tmp/tmpsfabwkod.rs:13:29\n\
    \   |\n13 |     lst.iter().filter(|x| x % 2 == 1).sum::<isize>()\n   |       \
    \                    - ^ - {integer}\n   |                           |\n   | \
    \                          &&f64\n\nerror[E0277]: the trait bound `isize: Sum<&f64>`\
    \ is not satisfied\n  --> /tmp/tmpsfabwkod.rs:13:39\n   |\n13 |     lst.iter().filter(|x|\
    \ x % 2 == 1).sum::<isize>()\n   |                                       ^^^ the\
    \ trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0369.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for x in lst {\n  \
    \      if x.is_odd() {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for type `f64` in the current\
    \ scope\n  --> /tmp/tmpez6lkuid.rs:19:14\n   |\n19 |         if x.is_odd() {\n\
    \   |              ^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot add-assign\
    \ `f64` to `{integer}`\n  --> /tmp/tmpez6lkuid.rs:20:17\n   |\n20 |          \
    \   sum += x;\n   |                 ^^ no implementation for `{integer} += f64`\n\
    \   |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    for num in lst {\n\
    \        if num > 0 {\n            sum += num * num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnzy__afm.rs:19:18\n   |\n\
    19 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpnzy__afm.rs:20:17\n   |\n20 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfsvrqrkr.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:16:17\n   |\n16 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:18:17\n\
    \   |\n18 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0.0 {\n            sum += num * num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphij96q1c.rs:16:17\n\
    \   |\n16 |             sum += num * num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    let mut i = 0;\n    while\
    \ i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp615m4us1.rs:19:19\n\
    \   |\n19 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp615m4us1.rs:20:17\n\
    \   |\n20 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num < 0 {\n            continue;\n        }\n\
    \        if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5m675y4h.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmp5m675y4h.rs:18:16\n   |\n18 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp5m675y4h.rs:19:17\n   |\n19 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for n in lst {\n        if n % 2 == 1 {\n            sum += n * n;\n    \
    \    }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpruxz2sup.rs:15:14\n\
    \   |\n15 |         if n % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpruxz2sup.rs:16:17\n\
    \   |\n16 |             sum += n * n;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgshlynay.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgshlynay.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main()\
    \ {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpfsvrqrkr.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:16:17\n   |\n16 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpfsvrqrkr.rs:18:17\n\
    \   |\n18 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0.0 {\n            sum += num * num;\n\
    \        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphij96q1c.rs:16:17\n\
    \   |\n16 |             sum += num * num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x.is_integer() {\n            sum += x;\n        } else if x.is_positive()\
    \ {\n            sum += x * x;\n        }\n    }\n    sum\n}\n\nfn main() {\n\
    \    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmphw5qizqw.rs:18:14\n   |\n18 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nwarning: use of\
    \ deprecated associated function `core::f64::<impl f64>::is_positive`: renamed\
    \ to is_sign_positive\n  --> /tmp/tmphw5qizqw.rs:20:21\n   |\n20 |         } else\
    \ if x.is_positive() {\n   |                     ^^^^^^^^^^^\n   |\n   = note:\
    \ `#[warn(deprecated)]` on by default\n\nerror[E0277]: cannot add-assign `f64`\
    \ to `{integer}`\n  --> /tmp/tmphw5qizqw.rs:19:17\n   |\n19 |             sum\
    \ += x;\n   |                 ^^ no implementation for `{integer} += f64`\n  \
    \ |\n   = help: the trait `AddAssign<f64>` is not implemented for `{integer}`\n\
    \nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmphw5qizqw.rs:21:17\n\
    \   |\n21 |             sum += x * x;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors; 1 warning emitted\n\
    \nSome errors have detailed explanations: E0277, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x.is_integer() {\n            sum += x;\n    \
    \    } else {\n            sum += x.powi(2);\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_integer` found for type `f64` in the\
    \ current scope\n  --> /tmp/tmpz84mlhor.rs:15:14\n   |\n15 |         if x.is_integer()\
    \ {\n   |              ^^^^^^^^^^ method not found in `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpz84mlhor.rs:16:17\n   |\n16 |\
    \             sum += x;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpz84mlhor.rs:18:17\n\
    \   |\n18 |             sum += x.powi(2);\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for x in lst {\n    \
    \    if x % 2 == 1 {\n            sum += x;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpehs35ajp.rs:18:14\n\
    \   |\n18 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpehs35ajp.rs:19:17\n\
    \   |\n19 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpa8j4qetf.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_odd` found for reference `&&f64` in the\
    \ current scope\n  --> /tmp/tmpmklk9872.rs:13:29\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                             ^^^^^^ method not\
    \ found in `&&f64`\n\nerror[E0277]: the trait bound `isize: Sum<&f64>` is not\
    \ satisfied\n  --> /tmp/tmpmklk9872.rs:13:39\n   |\n13 |     lst.iter().filter(|x|\
    \ x.is_odd()).sum::<isize>()\n   |                                       ^^^ the\
    \ trait `Sum<&f64>` is not implemented for `isize`\n   |\n   = help: the following\
    \ implementations were found:\n             <isize as Sum<&'a isize>>\n      \
    \       <isize as Sum>\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \            i += 1;\n        }\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpgshlynay.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpgshlynay.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for i in lst {\n    \
    \    if i % 2 == 1 {\n            sum += i;\n        }\n    }\n    sum\n}\n\n\
    fn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp2yix7fgn.rs:18:14\n\
    \   |\n18 |         if i % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp2yix7fgn.rs:19:17\n\
    \   |\n19 |             sum += i;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:18:16\n\
    \   |\n18 |         if num % 2 == 1 {\n   |                ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp8g8vurj2.rs:19:17\n\
    \   |\n19 |             sum += num;\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num < 0 {\n            continue;\n        }\n\
    \        if num % 2 == 1 {\n            sum += num;\n        }\n    }\n    sum\n\
    }\n\nfn main() {\n    let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5m675y4h.rs:15:18\n   |\n\
    15 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmp5m675y4h.rs:18:16\n   |\n18 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmp5m675y4h.rs:19:17\n   |\n19 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n\n    let mut sum = 0;\n    let mut i = 0;\n  \
    \  while i < lst.len() {\n        if lst[i] % 2 == 1 {\n            sum += lst[i];\n\
    \        }\n        i += 1;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()), 0);\n\
    \    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmpllqth6qb.rs:20:19\n\
    \   |\n20 |         if lst[i] % 2 == 1 {\n   |                   ^ no implementation\
    \ for `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmpllqth6qb.rs:21:17\n\
    \   |\n21 |             sum += lst[i];\n   |                 ^^ no implementation\
    \ for `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num;\n       \
    \ }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp0xco66e.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmpp0xco66e.rs:16:17\n   |\n16 |             sum += num;\n   |   \
    \              ^^ no implementation for `{integer} += f64`\n   |\n   = help: the\
    \ trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for x in lst {\n        if x % 2 == 1 {\n            sum += x;\n        }\n\
    \    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot mod `f64` by `{integer}`\n  --> /tmp/tmp401slm2o.rs:15:14\n\
    \   |\n15 |         if x % 2 == 1 {\n   |              ^ no implementation for\
    \ `f64 % {integer}`\n   |\n   = help: the trait `Rem<{integer}>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n  --> /tmp/tmp401slm2o.rs:16:17\n\
    \   |\n16 |             sum += x;\n   |                 ^^ no implementation for\
    \ `{integer} += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented\
    \ for `{integer}`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746969
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    let mut sum = 0;\n\
    \    for num in lst {\n        if num > 0 {\n            sum += num * num;\n \
    \       }\n    }\n    sum\n}\n\nfn main() {\n    let candidate = double_the_difference;\n\
    \    assert_eq!(candidate(Vec::<f64>::new()), 0);\n    assert_eq!(candidate(vec![5.0,\
    \ 4.0]), 25);\n    assert_eq!(candidate(vec![0.1, 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0,\
    \ -20.0, -30.0]), 0);\n    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n\
    \    assert_eq!(candidate(vec![0.2, 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0,\
    \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphuenw5f4.rs:15:18\n   |\n\
    15 |         if num > 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot add-assign `f64` to `{integer}`\n\
    \  --> /tmp/tmphuenw5f4.rs:16:17\n   |\n16 |             sum += num * num;\n \
    \  |                 ^^ no implementation for `{integer} += f64`\n   |\n   = help:\
    \ the trait `AddAssign<f64>` is not implemented for `{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
- exit_code: 1
  program: "/// Given a vector of numbers, return the sum of squares of the numbers\n\
    /// in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    /// >>> double_the_difference(vec![1, 3, 2, 0])\n/// 10\n/// >>> double_the_difference(vec![-1,\
    \ -2, 0])\n/// 0\n/// >>> double_the_difference(vec![9, -2])\n/// 81\n/// >>>\
    \ double_the_difference(vec![0])\n/// 0\n/// If the input vector is empty, return\
    \ 0.\nfn double_the_difference(lst: Vec<f64>) -> isize {\n    if lst.is_empty()\
    \ {\n        return 0;\n    }\n    let mut sum = 0;\n    for num in lst {\n  \
    \      if num < 0 {\n            continue;\n        }\n        if num % 2 == 1\
    \ {\n            sum += num;\n        }\n    }\n    sum\n}\n\nfn main() {\n  \
    \  let candidate = double_the_difference;\n    assert_eq!(candidate(Vec::<f64>::new()),\
    \ 0);\n    assert_eq!(candidate(vec![5.0, 4.0]), 25);\n    assert_eq!(candidate(vec![0.1,\
    \ 0.2, 0.3]), 0);\n    assert_eq!(candidate(vec![-10.0, -20.0, -30.0]), 0);\n\
    \    assert_eq!(candidate(vec![-1.0, -2.0, 8.0]), 0);\n    assert_eq!(candidate(vec![0.2,\
    \ 3.0, 5.0]), 34);\n    assert_eq!(candidate(vec![-9.0, -7.0, -5.0, -3.0, -1.0,\
    \ 1.0, 3.0, 5.0, 7.0, 9.0]), 165);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztnc4n__.rs:18:18\n   |\n\
    18 |         if num < 0 {\n   |                  ^\n   |                  |\n\
    \   |                  expected `f64`, found integer\n   |                  help:\
    \ use a float literal: `0.0`\n\nerror[E0277]: cannot mod `f64` by `{integer}`\n\
    \  --> /tmp/tmpztnc4n__.rs:21:16\n   |\n21 |         if num % 2 == 1 {\n   | \
    \               ^ no implementation for `f64 % {integer}`\n   |\n   = help: the\
    \ trait `Rem<{integer}>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `f64` to `{integer}`\n  --> /tmp/tmpztnc4n__.rs:22:17\n   |\n22 |\
    \             sum += num;\n   |                 ^^ no implementation for `{integer}\
    \ += f64`\n   |\n   = help: the trait `AddAssign<f64>` is not implemented for\
    \ `{integer}`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746970
