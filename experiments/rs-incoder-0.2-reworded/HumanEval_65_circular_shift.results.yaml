language: rs
name: HumanEval_65_circular_shift
results:
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxdzyxm4f.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpxdzyxm4f.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpxdzyxm4f.rs:12:15\n   |\n12 |         s +=\
    \ &digits[digits.len() - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut remaining = x;\n    while remaining > 0 {\n        let digit = remaining\
    \ % 10;\n        remaining = remaining / 10;\n        result.push((digit + shift)\
    \ % 10);\n    }\n    result.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvfpx23v4.rs:14:21\n   |\n\
    14 |         result.push((digit + shift) % 10);\n   |                     ^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpvfpx23v4.rs:16:12\n\
    \   |\n16 |     result.reverse()\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqux6snsz.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqux6snsz.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqux6snsz.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqux6snsz.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpqux6snsz.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpqux6snsz.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if i >= x.len() {\n            s.push('0');\n       \
    \ } else {\n            s.push(x[i]);\n        }\n    }\n    for i in 0..shift\
    \ {\n        if i >= x.len() {\n            s.push('0');\n        } else {\n \
    \           s.push(x[x.len() - 1 - i]);\n        }\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp3n2wrokt.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp3n2wrokt.rs:14:20\n   |\n\
    14 |             s.push(x[i]);\n   |                    ^^^^\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmp3n2wrokt.rs:18:19\n\
    \   |\n18 |         if i >= x.len() {\n   |                   ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp3n2wrokt.rs:21:24\n   |\n21 |             s.push(x[x.len()\
    \ - 1 - i]);\n   |                        ^^^ method not found in `isize`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].chars().next().unwrap());\n\
    \    }\n    s.push(*digits[shift..].chars().next().unwrap());\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp1pypt7s6.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].chars().next().unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp1pypt7s6.rs:14:13\n   |\n14 |     s.push(*digits[shift..].chars().next().unwrap());\n\
    \   |             ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[..]);\n\
    \        digits.rotate_left(1);\n    }\n    result.push_str(&digits[..]);\n  \
    \  result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp6k0oe6z3.rs:13:16\n   |\n13 |         digits.rotate_left(1);\n\
    \   |                ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        remainder = remainder / 10;\n        digits.push(digit.to_string());\n\
    \    }\n    if shift > digits.len() {\n        digits.reverse();\n    }\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq65gogcw.rs:14:21\n   |\n\
    14 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpq65gogcw.rs:16:16\n   |\n16 |     if shift > digits.len() {\n  \
    \ |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     if shift > digits.len().try_into().unwrap() {\n   |    \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpq65gogcw.rs:17:16\n\
    \   |\n17 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits\
    \ = digits[..(digits.len() - shift)].to_string();\n    digits = digits.reverse();\n\
    \    String::from(digits)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4nzq2ms4.rs:10:39\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                               ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp4nzq2ms4.rs:10:37\n   |\n\
    10 |     digits = digits[..(digits.len() - shift)].to_string();\n   |        \
    \                             ^ no implementation for `usize - isize`\n   |\n\
    \   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp4nzq2ms4.rs:11:21\n   |\n11 |     digits = digits.reverse();\n \
    \  |                     ^^^^^^^ help: there is an associated function with a\
    \ similar name: `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyqezawj_.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpyqezawj_.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpyqezawj_.rs:12:18\n   |\n12 |         digits = digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyqezawj_.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpskrto3wl.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpskrto3wl.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpskrto3wl.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i as usize];\n\
    \    }\n    s += digits[shift as usize..];\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpgsz0n6pp.rs:12:14\n\
    \   |\n12 |         s += digits[i as usize];\n   |              ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgsz0n6pp.rs:14:10\n\
    \   |\n14 |     s += digits[shift as usize..];\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found `str`\n   |          help:\
    \ consider borrowing here: `&digits[shift as usize..]`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    let mut shift = shift % 10;\n    while shift != 0 {\n  \
    \      remainder = remainder / 10;\n        shift = shift % 10;\n        s.push((remainder\
    \ % 10) + shift);\n    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzxwetf00.rs:15:16\n   |\n\
    15 |         s.push((remainder % 10) + shift);\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut shift = shift % digits.len();\n    while\
    \ shift > 0 {\n        digits = digits.chars().skip(shift).collect::<String>();\n\
    \        shift -= digits.len();\n    }\n    digits = digits.chars().collect::<String>();\n\
    \    s += digits;\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwph_0ag_.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpwph_0ag_.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwph_0ag_.rs:13:38\n\
    \   |\n13 |         digits = digits.chars().skip(shift).collect::<String>();\n\
    \   |                                      ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         digits = digits.chars().skip(shift.try_into().unwrap()).collect::<String>();\n\
    \   |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwph_0ag_.rs:14:18\n   |\n14 |         shift\
    \ -= digits.len();\n   |                  ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmpwph_0ag_.rs:14:15\n   |\n14 |         shift -= digits.len();\n   | \
    \              ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwph_0ag_.rs:17:10\n   |\n17 |     s += digits;\n   |  \
    \        ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqux6snsz.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqux6snsz.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqux6snsz.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqux6snsz.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpqux6snsz.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpqux6snsz.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12dcwbqx.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp12dcwbqx.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp12dcwbqx.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i as usize];\n\
    \    }\n    s += digits[shift as usize..];\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpgsz0n6pp.rs:12:14\n\
    \   |\n12 |         s += digits[i as usize];\n   |              ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgsz0n6pp.rs:14:10\n\
    \   |\n14 |     s += digits[shift as usize..];\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found `str`\n   |          help:\
    \ consider borrowing here: `&digits[shift as usize..]`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        remainder %= 10;\n      \
    \  s.push((remainder as char).to_string());\n        remainder /= 10;\n    }\n\
    \    if shift > s.len() {\n        s.push((remainder as char).to_string());\n\
    \    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ovv1rdy.rs:13:16\n   |\n\
    13 |         s.push((remainder as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4ovv1rdy.rs:16:16\n   |\n16 |     if shift > s.len() {\n   |   \
    \             ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     if shift > s.len().try_into().unwrap() {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4ovv1rdy.rs:17:16\n   |\n17 |\
    \         s.push((remainder as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0604]: only `u8` can be cast\
    \ as `char`, not `isize`\n  --> /tmp/tmp4ovv1rdy.rs:13:16\n   |\n13 |        \
    \ s.push((remainder as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^\
    \ invalid cast\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n\
    \  --> /tmp/tmp4ovv1rdy.rs:17:16\n   |\n17 |         s.push((remainder as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0308, E0604.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n        if i >= shift {\n            carry += 1;\n            i -= shift;\n\
    \        }\n        let digit = c.to_digit(10);\n        s.push((digit as char)\
    \ + &carry);\n        carry = 0;\n        digit\n    });\n    if carry > 0 {\n\
    \        s.push((carry as char) + &carry);\n    }\n    String::from(s)\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8lom8etw.rs:12:17\n   |\n\
    12 |         if i >= shift {\n   |                 ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n12 |         if i >= shift.try_into().unwrap()\
    \ {\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8lom8etw.rs:14:18\n   |\n14 |             i -= shift;\n\
    \   |                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract-assign `isize` from `usize`\n  --> /tmp/tmp8lom8etw.rs:14:15\n\
    \   |\n14 |             i -= shift;\n   |               ^^ no implementation for\
    \ `usize -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `usize`\n\nerror[E0369]: cannot add `&{integer}` to `char`\n  --> /tmp/tmp8lom8etw.rs:17:32\n\
    \   |\n17 |         s.push((digit as char) + &carry);\n   |                ---------------\
    \ ^ ------ &{integer}\n   |                |\n   |                char\n\nerror[E0369]:\
    \ cannot add `&{integer}` to `char`\n  --> /tmp/tmp8lom8etw.rs:22:32\n   |\n22\
    \ |         s.push((carry as char) + &carry);\n   |                ---------------\
    \ ^ ------ &{integer}\n   |                |\n   |                char\n\nerror[E0605]:\
    \ non-primitive cast: `Option<u32>` as `char`\n  --> /tmp/tmp8lom8etw.rs:17:16\n\
    \   |\n17 |         s.push((digit as char) + &carry);\n   |                ^^^^^^^^^^^^^^^\
    \ an `as` expression can only be used to convert between primitive types or to\
    \ coerce to a specific trait object\n\nerror[E0604]: only `u8` can be cast as\
    \ `char`, not `{integer}`\n  --> /tmp/tmp8lom8etw.rs:22:16\n   |\n22 |       \
    \  s.push((carry as char) + &carry);\n   |                ^^^^^^^^^^^^^^^ invalid\
    \ cast\n\nerror: aborting due to 7 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308, E0369, E0604, E0605.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbcpx3d74.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpbcpx3d74.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbcpx3d74.rs:12:18\n   |\n12 |         digits = &digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |        \
    \ digits = (&digits[..digits.len() - i]).to_string();\n   |                  +\
    \                           +++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbcpx3d74.rs:14:10\n   |\n14 |     s += digits;\n   |          ^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&digits`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n\
    \    }\n    s.push(*digits);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmp4q1dlnz0.rs:12:16\n\
    \   |\n12 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp4q1dlnz0.rs:14:12\n   |\n14 |\
    \     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found `str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0614.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ digits = digits.chars().enumerate().map(|(i, c)| {\n        if i == shift {\n\
    \            c.to_string()\n        } else {\n            c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n        }\n    }).collect();\n    for i in 0..shift\
    \ {\n        result.push_str(&digits[shift..]);\n        shift -= 1;\n    }\n\
    \    result.push_str(&digits[..shift]);\n    result\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpchpsgkmz.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpchpsgkmz.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpchpsgkmz.rs:13:17\n\
    \   |\n13 |         if i == shift {\n   |                 ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |         if i == shift.try_into().unwrap()\
    \ {\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpchpsgkmz.rs:16:43\n   |\n16 |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n   |                                        \
    \   ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpchpsgkmz.rs:16:41\n   |\n16 |             c.to_string().chars().nth(i\
    \ - shift).unwrap().to_string()\n   |                                        \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `RangeFrom<isize>`\n  --> /tmp/tmpchpsgkmz.rs:20:26\n   |\n20 | \
    \        result.push_str(&digits[shift..]);\n   |                          ^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait\
    \ `Index<RangeFrom<isize>>` is not implemented for `String`\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `RangeTo<isize>`\n  --> /tmp/tmpchpsgkmz.rs:23:22\n\
    \   |\n23 |     result.push_str(&digits[..shift]);\n   |                     \
    \ ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n   |\n   = help:\
    \ the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\nerror:\
    \ aborting due to"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry + 1;\n        carry = digit / 10;\n       \
    \ digit %= 10;\n        s.push((digit as char).to_string());\n    }\n    if carry\
    \ > 0 {\n        s.push((carry as char).to_string());\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpup7qimc5.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpup7qimc5.rs:16:16\n   |\n16 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpup7qimc5.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmpup7qimc5.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprxpf3_j2.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxpf3_j2.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s[..s.len()-shift].to_string()\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd39n9bas.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpd39n9bas.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpd39n9bas.rs:12:18\n   |\n12 |         digits = digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd39n9bas.rs:14:10\n\
    \   |\n14 |     s += digits;\n   |          ^^^^^^\n   |          |\n   |    \
    \      expected `&str`, found struct `String`\n   |          help: consider borrowing\
    \ here: `&digits`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd39n9bas.rs:15:17\n\
    \   |\n15 |     s[..s.len()-shift].to_string()\n   |                 ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpd39n9bas.rs:15:16\n   |\n15 |     s[..s.len()-shift].to_string()\n\
    \   |                ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due\
    \ to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6esssxnu.rs:12:37\n   |\n\
    12 |         s += digits[(digits.len() - i) % digits.len()];\n   |           \
    \                          ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp6esssxnu.rs:12:35\n   |\n\
    12 |         s += digits[(digits.len() - i) % digits.len()];\n   |           \
    \                        ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmp6esssxnu.rs:12:14\n   |\n\
    12 |         s += digits[(digits.len() - i) % digits.len()];\n   |           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift as usize) {\n   \
    \     let digit = d.to_digit(10);\n        if carry > 0 {\n            digit +=\
    \ carry;\n        }\n        carry = digit / 10;\n        digit %= 10;\n     \
    \   s.push((digit as char).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ as char).to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_okb1uul.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift as usize) {\n   |        \
    \ ^^    ------------------------------------------ this expression has type `char`\n\
    \   |         |\n   |         expected `char`, found reference\n   |\n   = note:\
    \   expected type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp_okb1uul.rs:18:16\n   |\n18 |         s.push((digit as\
    \ char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_okb1uul.rs:21:16\n\
    \   |\n21 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmp_okb1uul.rs:21:16\n\
    \   |\n21 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0604.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let mut digit = x.len() - shift;\n        if digit < 0 {\n\
    \            digit = 0;\n        }\n        s += &x[digit];\n        shift -=\
    \ digit;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpikqopygk.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpikqopygk.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpikqopygk.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - shift;\n   |                           ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpikqopygk.rs:19:15\n\
    \   |\n19 |         s += &x[digit];\n   |               ^^^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpskrto3wl.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpskrto3wl.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpskrto3wl.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxdzyxm4f.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpxdzyxm4f.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpxdzyxm4f.rs:12:15\n   |\n12 |         s +=\
    \ &digits[digits.len() - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut shift = shift % digits.len();\n    while\
    \ shift != 0 {\n        digits = digits.chars().nth(shift).unwrap().to_string();\n\
    \        shift -= digits.len();\n    }\n    s += digits;\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplxxj_6ej.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmplxxj_6ej.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmplxxj_6ej.rs:13:37\n\
    \   |\n13 |         digits = digits.chars().nth(shift).unwrap().to_string();\n\
    \   |                                     ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n13 |         digits = digits.chars().nth(shift.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                     ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplxxj_6ej.rs:14:18\n   |\n14 |         shift\
    \ -= digits.len();\n   |                  ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmplxxj_6ej.rs:14:15\n   |\n14 |         shift -= digits.len();\n   | \
    \              ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplxxj_6ej.rs:16:10\n   |\n16 |     s += digits;\n   |  \
    \        ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.extend(digits.chars().enumerate().filter(|&(_,\
    \ c)| c != 0).map(|(_, c)| c).collect());\n    digits.extend(digits.chars().enumerate().filter(|&(_,\
    \ c)| c != shift).map(|(_, c)| c).collect());\n    digits\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9fc9cq68.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9fc9cq68.rs:15:68\n\
    \   |\n15 |     digits.extend(digits.chars().enumerate().filter(|&(_, c)| c !=\
    \ 0).map(|(_, c)| c).collect());\n   |                                       \
    \                             ^ expected `char`, found `u8`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9fc9cq68.rs:16:68\n   |\n16 |     digits.extend(digits.chars().enumerate().filter(|&(_,\
    \ c)| c != shift).map(|(_, c)| c).collect());\n   |                          \
    \                                          ^^^^^ expected `char`, found `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits[..]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpsb8tl4qd.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpsb8tl4qd.rs:13:18\n   |\n13 |  \
    \       digits = &digits[1..];\n   |                  ^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\nhelp: try using a conversion method\n   |\n13\
    \ |         digits = (&digits[1..]).to_string();\n   |                  +    \
    \        +++++++++++++\n\nerror[E0614]: type `str` cannot be dereferenced\n  -->\
    \ /tmp/tmpsb8tl4qd.rs:15:12\n   |\n15 |     s.push(*digits[..]);\n   |       \
    \     ^^^^^^^^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0614.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s[digits.len() - shift..].to_string()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu09zuith.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpu09zuith.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `isize`\n  --> /tmp/tmpu09zuith.rs:12:14\n\
    \   |\n12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpu09zuith.rs:14:22\n\
    \   |\n14 |     s[digits.len() - shift..].to_string()\n   |                  \
    \    ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmpu09zuith.rs:14:20\n   |\n14 |     s[digits.len()\
    \ - shift..].to_string()\n   |                    ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for d in x.to_digits().iter() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry + shift;\n        carry = digit / 10;\n   \
    \     digit = digit % 10;\n        s.push((digit as char).to_string());\n    }\n\
    \    if carry > 0 {\n        s.push((carry as char).to_string());\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmph8tclz_9.rs:11:16\n   |\n11 |     for d in x.to_digits().iter()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmph8tclz_9.rs:16:16\n   |\n16 |         s.push((digit\
    \ as char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph8tclz_9.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0604]:\
    \ only `u8` can be cast as `char`, not `{integer}`\n  --> /tmp/tmph8tclz_9.rs:19:16\n\
    \   |\n19 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599, E0604.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = digit << shift | carry;\n        carry = digit >> 8;\n  \
    \      s += digit.to_string();\n    }\n    if carry != 0 {\n        s += &format!(\"\
    {}\", carry).to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpopa3ngj7.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift..];\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprqv_fgah.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmprqv_fgah.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmprqv_fgah.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprqv_fgah.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift..];\n   |                   \
    \             ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmprqv_fgah.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift..];\n   |                              ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprqv_fgah.rs:8:46\n   |\n8  | fn\
    \ circular_shift(x: isize, shift: isize) -> String {\n   |    -------------- \
    \                           ^^^^^^ expected struct `String`, found `()`\n   |\
    \    |\n   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n14 |     s + &digits[digits.len() - shift..];\n   |                     \
    \                   - help: consider removing this semicolon\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i >= shift {\n            s.push_str(&x[i..]);\n\
    \            break;\n        }\n        s.push_str(&x[i..]);\n        i += 1;\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpuyehcikq.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpuyehcikq.rs:13:25\n   |\n\
    13 |             s.push_str(&x[i..]);\n   |                         ^^^^^^\n\n\
    error[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpuyehcikq.rs:16:21\n\
    \   |\n16 |         s.push_str(&x[i..]);\n   |                     ^^^^^^\n\n\
    error: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut shift = shift % digits.len();\n    while\
    \ shift != 0 {\n        digits = digits.chars().skip(shift).collect();\n     \
    \   shift -= digits.len();\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxz06fx_3.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpxz06fx_3.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxz06fx_3.rs:13:38\n\
    \   |\n13 |         digits = digits.chars().skip(shift).collect();\n   |     \
    \                                 ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n13 |         digits = digits.chars().skip(shift.try_into().unwrap()).collect();\n\
    \   |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxz06fx_3.rs:14:18\n   |\n14 |         shift\
    \ -= digits.len();\n   |                  ^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmpxz06fx_3.rs:14:15\n   |\n14 |         shift -= digits.len();\n   | \
    \              ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxz06fx_3.rs:16:10\n   |\n16 |     s += digits;\n   |  \
    \        ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:13\n   |\n14 |     s.push(*digits[digits.len()\
    \ - shift]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        remainder %= 10;\n  \
    \      digits.push(&format!(\"{}\", remainder));\n        remainder /= 10;\n \
    \   }\n    digits.push(&format!(\"{}\", remainder));\n    digits.reverse();\n\
    \    digits.rotate_left(shift);\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqsg0giy4.rs:13:21\n   |\n\
    13 |         digits.push(&format!(\"{}\", remainder));\n   |                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found `&String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqsg0giy4.rs:16:17\n   |\n16 |     digits.push(&format!(\"\
    {}\", remainder));\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found `&String`\n\nerror[E0599]: no method named `reverse` found for struct\
    \ `String` in the current scope\n  --> /tmp/tmpqsg0giy4.rs:17:12\n   |\n17 | \
    \    digits.reverse();\n   |            ^^^^^^^ help: there is an associated function\
    \ with a similar name: `reserve`\n\nerror[E0599]: no method named `rotate_left`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpqsg0giy4.rs:18:12\n\
    \   |\n18 |     digits.rotate_left(shift);\n   |            ^^^^^^^^^^^ method\
    \ not found in `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_char();\n    }\n    if carry > 0 {\n        s += &format!(\"\
    {}\", carry).to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp4camvblg.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    while n > 0 {\n        let digit = n % 10;\n        n /= 10;\n \
    \       s += digit.to_string();\n    }\n    if shift > s.len() {\n        s[s.len()\
    \ - shift as usize..].to_owned()\n    } else {\n        s[shift as usize..].to_owned()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxssj49h.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkxssj49h.rs:16:16\n   |\n16 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n16 |     if shift > s.len().try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    if\
    \ shift > digits.len() {\n        digits = digits.reverse();\n    }\n    String::from(digits[..shift])\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeuidaieg.rs:10:16\n   |\n\
    10 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n10 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmpeuidaieg.rs:11:25\n   |\n11 |         digits = digits.reverse();\n \
    \  |                         ^^^^^^^ help: there is an associated function with\
    \ a similar name: `reserve`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `RangeTo<isize>`\n  --> /tmp/tmpeuidaieg.rs:13:18\n   |\n13 |     String::from(digits[..shift])\n\
    \   |                  ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeTo<isize>`\n\
    \   |\n   = help: the trait `Index<RangeTo<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[i as\
    \ usize]);\n    }\n    s.push(*digits[shift as usize]);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpbhb70n3n.rs:12:17\n\
    \   |\n12 |         s.push(*digits[i as usize]);\n   |                 ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpbhb70n3n.rs:14:13\n   |\n14 |     s.push(*digits[shift\
    \ as usize]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdj7y99ao.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdj7y99ao.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    digits.reverse();\n    for d in digits {\n        let mut digit = d.to_digit(10);\n\
    \        if carry {\n            digit += 1;\n        }\n        digit %= 10;\n\
    \        carry = digit < 10;\n        s += digit.to_string();\n    }\n    if carry\
    \ {\n        s += \"1\".to_string();\n    }\n    if shift > s.len() {\n      \
    \  s[s.len() - shift..].to_owned()\n    } else {\n        s[0..shift].to_owned()\n\
    \    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwm7n22le.rs:15:12\n   |\n\
    15 |         if carry {\n   |            ^^^^^ expected `bool`, found integer\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<u32>`\n\
    \  --> /tmp/tmpwm7n22le.rs:16:13\n   |\n16 |             digit += 1;\n   |   \
    \          -----^^^^^\n   |             |\n   |             cannot use `+=` on\
    \ type `Option<u32>`\n\nerror[E0368]: binary assignment operation `%=` cannot\
    \ be applied to type `Option<u32>`\n  --> /tmp/tmpwm7n22le.rs:18:9\n   |\n18 |\
    \         digit %= 10;\n   |         -----^^^^^^\n   |         |\n   |       \
    \  cannot use `%=` on type `Option<u32>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpwm7n22le.rs:19:25\n   |\n19 |         carry = digit < 10;\n   |\
    \                         ^^\n   |                         |\n   |           \
    \              expected enum `Option`, found integer\n   |                   \
    \      help: try using a variant of the expected enum: `Some(10)`\n   |\n   =\
    \ note: expected enum `Option<u32>`\n              found type `{integer}`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpwm7n22le.rs:19:17\n   |\n19 |  \
    \       carry = digit < 10;\n   |                 ^^^^^^^^^^ expected integer,\
    \ found `bool`\n\nerror[E0599]: the method `to_string` exists for enum `Option<u32>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpwm7n22le.rs:20:20\n\
    \    |\n20  |           s += digit.to_string();\n    |                      ^^^^^^^^^\
    \ method cannot be called on `Option<u32>` due to unsatisfied trait bounds\n \
    \   |\n    = note: the following trait bounds were not satisfied:\n          \
    \  `Option<u32>: std::fmt::Display`\n            which is required by `Option<u32>:\
    \ ToString`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwm7n22le.rs:22:8\n\
    \   |\n22 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpwm7n22le.rs:23:14\n   |\n23 |\
    \         s += \"1\".to_string();\n   |              ^^^^^^^^^^^^^^^\n   |   \
    \           |\n   |              expected `&str`, found struct `String`\n   |\
    \              help:"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let digit\
    \ = d.to_digit(10);\n        s += if carry {\n            digit + 10\n       \
    \ } else {\n            digit\n        };\n        carry = digit < 10;\n    }\n\
    \    if carry {\n        s += &format!(\"{}\", 10).to_string();\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2rgslw4q.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2rgslw4q.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rgslw4q.rs:13:17\n  \
    \ |\n13 |         s += if carry {\n   |                 ^^^^^ expected `bool`,\
    \ found integer\n\nerror[E0277]: cannot add `{integer}` to `&str`\n  --> /tmp/tmp2rgslw4q.rs:14:19\n\
    \   |\n14 |             digit + 10\n   |                   ^ no implementation\
    \ for `&str + {integer}`\n   |\n   = help: the trait `Add<{integer}>` is not implemented\
    \ for `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rgslw4q.rs:18:25\n\
    \   |\n18 |         carry = digit < 10;\n   |                         ^^ expected\
    \ `&str`, found integer\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rgslw4q.rs:18:17\n\
    \   |\n18 |         carry = digit < 10;\n   |                 ^^^^^^^^^^ expected\
    \ integer, found `bool`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rgslw4q.rs:20:8\n\
    \   |\n20 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror: aborting due to 7 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1 - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmt9wrc4.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6p4ntz76.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp6p4ntz76.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp6p4ntz76.rs:12:15\n   |\n12 |         s +=\
    \ &digits[digits.len() - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6p4ntz76.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp6p4ntz76.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp6p4ntz76.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ue11fcm.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:14\n   |\n12 |         s +=\
    \ digits[digits.len() - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:13\n   |\n14 |     s.push(*digits[digits.len()\
    \ - shift]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c.to_digit(10);\n\
    \        if digit < 0 {\n            s.push('-');\n            carry = -digit;\n\
    \        } else {\n            s.push('0');\n            carry = digit;\n    \
    \    }\n        if carry > 0 {\n            s.push('1');\n            carry =\
    \ carry >> 1;\n        }\n    }\n    if carry > 0 {\n        s.push('1');\n  \
    \  }\n    s[0..shift].to_string()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp7mwrk7j.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpp7mwrk7j.rs:28:5\n   |\n28 |     s[0..shift].to_string()\n   |\
    \     ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n\
    \   = help: the trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[(digits.len()\
    \ - i) % digits.len()]);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpskrto3wl.rs:12:49\n   |\n\
    12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n  \
    \ |                                                 ^ expected `usize`, found\
    \ `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpskrto3wl.rs:12:47\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                                               ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpskrto3wl.rs:12:26\n\
    \   |\n12 |         result.push_str(&digits[(digits.len() - i) % digits.len()]);\n\
    \   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 3 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    for i in 0..digits.len() {\n        s.push(*digits[..i + 1]);\n\
    \    }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1atbvuf_.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp1atbvuf_.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1atbvuf_.rs:12:18\n   |\n12 |         digits = &digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |        \
    \ digits = (&digits[..digits.len() - i]).to_string();\n   |                  +\
    \                           +++++++++++++\n\nerror[E0614]: type `str` cannot be\
    \ dereferenced\n  --> /tmp/tmp1atbvuf_.rs:15:16\n   |\n15 |         s.push(*digits[..i\
    \ + 1]);\n   |                ^^^^^^^^^^^^^^^^\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0614.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n\
    \    }\n    for i in 0..shift {\n        s.push(*digits.pop().unwrap());\n   \
    \ }\n    String::from(s)\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpw1rswi19.rs:12:16\n\
    \   |\n12 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror[E0614]: type `char` cannot be dereferenced\n  --> /tmp/tmpw1rswi19.rs:15:16\n\
    \   |\n15 |         s.push(*digits.pop().unwrap());\n   |                ^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let mut digit = x.len() - shift;\n        if digit < 0 {\n\
    \            digit = 0;\n        }\n        s.append(&x[digit]);\n        shift\
    \ -= digit;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp2lcrzt0s.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp2lcrzt0s.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp2lcrzt0s.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - shift;\n   |                           ^^^ method not found in `isize`\n\
    \nerror[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp2lcrzt0s.rs:19:11\n   |\n19 |         s.append(&x[digit]);\n\
    \   |           ^^^^^^ method not found in `String`\n\nerror[E0608]: cannot index\
    \ into a value of type `isize`\n  --> /tmp/tmp2lcrzt0s.rs:19:19\n   |\n19 |  \
    \       s.append(&x[digit]);\n   |                   ^^^^^^^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12dcwbqx.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp12dcwbqx.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp12dcwbqx.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let digit = x % 10;\n        x /= 10;\n        s += digit.to_string();\n\
    \        shift -= 1;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmptlh2q397.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmptlh2q397.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptlh2q397.rs:17:14\n\
    \   |\n17 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..(digits.len()\
    \ - i)].to_string() + &digits[(i + 1)..digits.len()];\n    }\n    s += digits;\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi1oazk5h.rs:12:44\n   |\n\
    12 |         digits = &digits[..(digits.len() - i)].to_string() + &digits[(i +\
    \ 1)..digits.len()];\n   |                                            ^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpi1oazk5h.rs:12:42\n   |\n12 |         digits = &digits[..(digits.len()\
    \ - i)].to_string() + &digits[(i + 1)..digits.len()];\n   |                  \
    \                        ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi1oazk5h.rs:12:79\n   |\n12 |         digits = &digits[..(digits.len()\
    \ - i)].to_string() + &digits[(i + 1)..digits.len()];\n   |                  \
    \                                                             ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `std::ops::Range<isize>`\n  --> /tmp/tmpi1oazk5h.rs:12:63\n   |\n12 |   \
    \      digits = &digits[..(digits.len() - i)].to_string() + &digits[(i + 1)..digits.len()];\n\
    \   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the\
    \ trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\nerror[E0369]:\
    \ cannot add `&_` to `&String`\n  --> /tmp/tmpi1oazk5h.rs:12:60\n   |\n12 |  \
    \       digits = &digits[..(digits.len() - i)].to_string() + &digits[(i + 1)..digits.len()];\n\
    \   |                  ----------------------------------------- ^ ------------------------------\
    \ &_\n   |                  |\n   |                  &String\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpi1oazk5h.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0369.\nFor more information about an err"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:13\n   |\n14 |     s.push(*digits[digits.len()\
    \ - shift]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().enumerate().map(|(i,\
    \ c)| {\n        let digit = if c >= '0' && c <= '9' {\n            c - '0'\n\
    \        } else {\n            c - 'a' + 10\n        };\n        let digit = digit\
    \ * 10 + carry;\n        carry = digit / 10;\n        digit % 10\n    });\n  \
    \  while shift > 0 {\n        digits.push(0);\n        shift -= 1;\n    }\n  \
    \  for digit in digits {\n        if digit > 0 {\n            s.push_str(&format!(\"\
    {}{}\", digit, shift));\n        }\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"\
    {}\", carry));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot subtract `char` from `char`\n  --> /tmp/tmpigm0uw_p.rs:13:15\n\
    \   |\n13 |             c - '0'\n   |             - ^ --- char\n   |         \
    \    |\n   |             char\n\nerror[E0369]: cannot subtract `char` from `char`\n\
    \  --> /tmp/tmpigm0uw_p.rs:15:15\n   |\n15 |             c - 'a' + 10\n   |  \
    \           - ^ --- char\n   |             |\n   |             char\n\nerror[E0599]:\
    \ no method named `push` found for struct `Map` in the current scope\n  --> /tmp/tmpigm0uw_p.rs:22:16\n\
    \   |\n22 |         digits.push(0);\n   |                ^^^^ method not found\
    \ in `Map<Enumerate<Chars<'_>>, _>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0369, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s\
    \ += if carry {\n            digit + '0'\n        } else {\n            digit\
    \ + '1'\n        };\n        carry = digit as u8;\n        x /= 10;\n    }\n \
    \   if carry != 0 {\n        s += '0';\n    }\n    s\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi5_67_7u.rs:13:17\n   |\n\
    13 |         s += if carry {\n   |                 ^^^^^ expected `bool`, found\
    \ integer\n\nerror[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmpi5_67_7u.rs:14:19\n\
    \   |\n14 |             digit + '0'\n   |                   ^ no implementation\
    \ for `isize + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmpi5_67_7u.rs:16:19\n\
    \   |\n16 |             digit + '1'\n   |                   ^ no implementation\
    \ for `isize + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi5_67_7u.rs:22:14\n\
    \   |\n22 |         s += '0';\n   |              ^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    if shift > digits.len()\
    \ {\n        digits.reverse();\n    }\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56r_tcx2.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp56r_tcx2.rs:15:16\n\
    \   |\n15 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp56r_tcx2.rs:16:16\n   |\n16 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpmjeoqvbn.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpmjeoqvbn.rs:13:18\n   |\n13 |  \
    \       digits = &digits[1..];\n   |                  ^^^^^^^^^^^^ expected struct\
    \ `String`, found `&str`\n   |\nhelp: try using a conversion method\n   |\n13\
    \ |         digits = (&digits[1..]).to_string();\n   |                  +    \
    \        +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmjeoqvbn.rs:15:12\n\
    \   |\n15 |     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:13\n   |\n14 |     s.push(*digits[digits.len()\
    \ - shift]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1 - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmt9wrc4.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.digits() {\n        let digit = if carry > 0 {\n\
    \            d + carry\n        } else {\n            d + (shift - s.len());\n\
    \        };\n        carry = digit / 10;\n        s += digit.to_string();\n  \
    \  }\n    if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp617ztabm.rs:11:17\n   |\n11 |     for &d in x.digits()\
    \ {\n   |                 ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp617ztabm.rs:15:26\n   |\n15 |             d\
    \ + (shift - s.len());\n   |                          ^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmp617ztabm.rs:15:24\n\
    \   |\n15 |             d + (shift - s.len());\n   |                        ^\
    \ no implementation for `isize - usize`\n   |\n   = help: the trait `Sub<usize>`\
    \ is not implemented for `isize`\n\nerror[E0369]: cannot divide `()` by `{integer}`\n\
    \  --> /tmp/tmp617ztabm.rs:17:23\n   |\n17 |         carry = digit / 10;\n   |\
    \                 ----- ^ -- {integer}\n   |                 |\n   |         \
    \        ()\n\nerror[E0599]: the method `to_string` exists for unit type `()`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmp617ztabm.rs:18:20\n \
    \  |\n18 |         s += digit.to_string();\n   |                    ^^^^^^^^^\
    \ method cannot be called on `()` due to unsatisfied trait bounds\n   |\n   =\
    \ note: the following trait bounds were not satisfied:\n           `(): std::fmt::Display`\n\
    \           which is required by `(): ToString`\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0369, E0599.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut shift = shift % digits.len();\n    digits.reverse();\n\
    \    while shift > 0 {\n        s += &digits[shift..];\n        shift -= digits.len();\n\
    \    }\n    s + &digits[0..shift]\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt6_9cokf.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpt6_9cokf.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpt6_9cokf.rs:12:12\n   |\n12 |     digits.reverse();\n\
    \   |            ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpt6_9cokf.rs:14:15\n   |\n14 |         s += &digits[shift..];\n\
    \   |               ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt6_9cokf.rs:15:18\n   |\n15 |\
    \         shift -= digits.len();\n   |                  ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmpt6_9cokf.rs:15:15\n   |\n15 |         shift -= digits.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmpt6_9cokf.rs:17:10\n\
    \   |\n17 |     s + &digits[0..shift]\n   |          ^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 7 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        if carry\
    \ > 0 {\n            s.push_str(&format!(\"{}{}\", d, carry));\n        } else\
    \ {\n            s.push_str(&d);\n        }\n        carry = d / 10;\n    }\n\
    \    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry));\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6bta0m7l.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp6bta0m7l.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0277]: the size for values of type `str` cannot be known at compilation\
    \ time\n  --> /tmp/tmp6bta0m7l.rs:11:10\n   |\n11 |     for &d in x.to_string().chars().take(shift)\
    \ {\n   |          ^ doesn't have a size known at compile-time\n   |\n   = help:\
    \ the trait `Sized` is not implemented for `str`\n   = note: all local variables\
    \ must have a statically known size\n   = help: unsized locals are gated as an\
    \ unstable feature\n\nerror[E0277]: the size for values of type `str` cannot be\
    \ known at compilation time\n   --> /tmp/tmp6bta0m7l.rs:13:25\n    |\n13  |  \
    \           s.push_str(&format!(\"{}{}\", d, carry));\n    |                 \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bound in `ArgumentV1::<'a>::new`\n    = note: this error originates in\
    \ the macro `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0369]: cannot divide `str` by `{integer}`\n  --> /tmp/tmp6bta0m7l.rs:17:19\n\
    \   |\n17 |         carry = d / 10;\n   |                 - ^ -- {integer}\n \
    \  |                 |\n   |                 str\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277,"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut remainder = x;\n    let mut digits = 1;\n    while remainder > 0 {\n   \
    \     remainder %= 10;\n        result.append(&format!(\"{}{}\", digits, remainder));\n\
    \        digits += 1;\n        remainder /= 10;\n    }\n    if shift > digits\
    \ {\n        result.reverse();\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `append` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmppusisip7.rs:14:16\n   |\n14 |         result.append(&format!(\"\
    {}{}\", digits, remainder));\n   |                ^^^^^^ method not found in `String`\n\
    \nerror[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmppusisip7.rs:19:16\n   |\n19 |         result.reverse();\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        i %= 10;\n        s.push(i);\n\
    \    }\n    if shift > s.len() {\n        s.reverse();\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk2ry0ztc.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpk2ry0ztc.rs:19:16\n   |\n19 |\
    \         s.push(i);\n   |                ^ expected `char`, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpk2ry0ztc.rs:21:16\n   |\n21 |  \
    \   if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpk2ry0ztc.rs:22:11\n\
    \   |\n22 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        if carry == 0 {\n            s.push_str(&format!(\"{}{}\", digit, shift));\n\
    \        } else {\n            s.push_str(&format!(\"{}{}{}\", digit, carry, shift));\n\
    \        }\n        carry = digit as isize;\n    }\n    if carry != 0 {\n    \
    \    s.push_str(&format!(\"{}\", carry));\n    }\n    s\n}\n\nfn main() {\n  \
    \  let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9w7ed_s2.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ if shift > 0 {\n        digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \    }\n    result.push_str(digits);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf1ydfao6.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpf1ydfao6.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf1ydfao6.rs:13:52\n\
    \   |\n13 |         digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \   |                                                    ^^^\n   |           \
    \                                         |\n   |                            \
    \                        expected `&char`, found `char`\n   |                \
    \                                    help: consider borrowing here: `&'0'`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpf1ydfao6.rs:13:62\n   |\n13 |  \
    \       digits = digits.chars().skip_while(|c| c < '0').take(shift).collect();\n\
    \   |                                                              ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n13 |         digits = digits.chars().skip_while(|c|\
    \ c < '0').take(shift.try_into().unwrap()).collect();\n   |                  \
    \                                            ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf1ydfao6.rs:15:21\n   |\n15 |     result.push_str(digits);\n\
    \   |                     ^^^^^^\n   |                     |\n   |           \
    \          expected `&str`, found struct `String`\n   |                     help:\
    \ consider borrowing here: `&digits`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    digits.push(0);\n  \
    \  digits[shift..].iter().cloned().for_each(|x| {\n        digits.push(*x);\n\
    \    });\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjydk4jwj.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjydk4jwj.rs:15:17\n\
    \   |\n15 |     digits.push(0);\n   |                 ^ expected `char`, found\
    \ `u8`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpjydk4jwj.rs:16:5\n   |\n16 |     digits[shift..].iter().cloned().for_each(|x|\
    \ {\n   |     ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for &d\
    \ in x.to_string().chars().take(shift) {\n        s.push(d);\n    }\n    for &d\
    \ in x.to_string().chars().skip(shift) {\n        s.push(d);\n    }\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp190z5e_y.rs:10:42\n   |\n\
    10 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n10 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp190z5e_y.rs:10:9\n   |\n10 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp190z5e_y.rs:13:42\n  \
    \ |\n13 |     for &d in x.to_string().chars().skip(shift) {\n   |            \
    \                              ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |     for &d in x.to_string().chars().skip(shift.try_into().unwrap())\
    \ {\n   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp190z5e_y.rs:13:9\n   |\n13 | \
    \    for &d in x.to_string().chars().skip(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 4 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1) - i];\n    }\n    s += &digits[(digits.len() - 1) - shift];\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppx_pvfbe.rs:12:43\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmppx_pvfbe.rs:12:41\n   |\n12 | \
    \        s += &digits[(digits.len() - 1) - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppx_pvfbe.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppx_pvfbe.rs:14:39\n\
    \   |\n14 |     s += &digits[(digits.len() - 1) - shift];\n   |              \
    \                         ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmppx_pvfbe.rs:14:37\n   |\n\
    14 |     s += &digits[(digits.len() - 1) - shift];\n   |                     \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppx_pvfbe.rs:14:11\n   |\n\
    14 |     s += &digits[(digits.len() - 1) - shift];\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift as usize) {\n   \
    \     let digit = d.to_digit(10);\n        let digit = digit + carry % 10;\n \
    \       carry = digit / 10;\n        s += digit.to_string();\n    }\n    if carry\
    \ > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main() {\n   \
    \ let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfv5i87ep.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift as usize) {\n   |        \
    \ ^^    ------------------------------------------ this expression has type `char`\n\
    \   |         |\n   |         expected `char`, found reference\n   |\n   = note:\
    \   expected type `char`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpfv5i87ep.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ue11fcm.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:14\n   |\n12 |         s +=\
    \ digits[digits.len() - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ while shift > 0 {\n        result.push_str(&digits[shift..]);\n        shift\
    \ -= digits.len();\n    }\n    result.push_str(&digits[0..shift]);\n    result\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5ee6apgn.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp5ee6apgn.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmp5ee6apgn.rs:13:26\n   |\n13 |         result.push_str(&digits[shift..]);\n\
    \   |                          ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5ee6apgn.rs:14:18\n   |\n14 |\
    \         shift -= digits.len();\n   |                  ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmp5ee6apgn.rs:14:15\n   |\n14 |         shift -= digits.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp5ee6apgn.rs:16:22\n\
    \   |\n16 |     result.push_str(&digits[0..shift]);\n   |                    \
    \  ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n \
    \  |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    if shift > digits.len()\
    \ {\n        digits.extend(digits.rsplit(|&x| x > shift).collect::<Vec<_>>());\n\
    \    } else {\n        digits.extend(digits.rsplit(|&x| x > shift).rev().collect::<Vec<_>>());\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcg7w_mds.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcg7w_mds.rs:15:16\n\
    \   |\n15 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0631]: type\
    \ mismatch in closure arguments\n  --> /tmp/tmpcg7w_mds.rs:16:30\n   |\n16 | \
    \        digits.extend(digits.rsplit(|&x| x > shift).collect::<Vec<_>>());\n \
    \  |                              ^^^^^^ -------------- found signature of `fn(&_)\
    \ -> _`\n   |                              |\n   |                           \
    \   expected signature of `fn(char) -> _`\n   |\n   = note: required because of\
    \ the requirements on the impl of `Pattern<'_>` for `[closure@/tmp/tmpcg7w_mds.rs:16:37:\
    \ 16:51]`\n\nerror[E0599]: the method `collect` exists for struct `std::str::RSplit<'_,\
    \ [closure@/tmp/tmpcg7w_mds.rs:16:37: 16:51]>`, but its trait bounds were not\
    \ satisfied\n   --> /tmp/tmpcg7w_mds.rs:16:53\n    |\n16  |           digits.extend(digits.rsplit(|&x|\
    \ x > shift).collect::<Vec<_>>());\n    |                                    \
    \   --------------  ^^^^^^^ method cannot be called on `std::str::RSplit<'_, [closure@/tmp/tmpcg7w_mds.rs:16:37:\
    \ 16:51]>` due to unsatisfied trait bounds\n    |                            \
    \           |\n    |                                       doesn't satisfy `<_\
    \ as FnOnce<(char,)>>::Output = bool`\n    |                                 \
    \      doesn't satisfy `_: FnMut<(char,)>`\n    |                            \
    \           doesn't satisfy `_: Pattern<'_>`\n    |\n    = note: the following\
    \ trait bounds were not satisfied:\n            `[closure@/tmp/tmpcg7w_mds.rs:16:37:\
    \ 16:51]: Pattern<'_>`\n            which is required by `std::str::RSplit<'_,\
    \ [closure@/tmp/tmpcg7w_mds"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for d in x.digits().iter().rev() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmptxuw8wzr.rs:11:16\n   |\n11 |     for d in x.digits().iter().rev()\
    \ {\n   |                ^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmptxuw8wzr.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ while shift > 0 {\n        result.push_str(&digits[shift..digits.len() - shift]);\n\
    \        shift -= digits.len() - shift;\n    }\n    result.push_str(&digits[digits.len()\
    \ - shift..digits.len()]);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7n9gzh7p.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmp7n9gzh7p.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7n9gzh7p.rs:13:55\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                                       ^^^^^ expected `usize`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7n9gzh7p.rs:13:40\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                        ^^^^^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmp7n9gzh7p.rs:13:53\n\
    \   |\n13 |         result.push_str(&digits[shift..digits.len() - shift]);\n \
    \  |                                                     ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp7n9gzh7p.rs:13:26\n   |\n13 |         result.push_str(&digits[shift..digits.len()\
    \ - shift]);\n   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `std::ops::Range<isize>`\n   |\n   = help: the\
    \ trait `Index<std::ops::Range<isize>>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7n9gzh7p.rs:14:33\n   |\n14 |         shift\
    \ -= digits.len() - shift;\n   |                                 ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmp7n9gzh7p.rs:14:31\n   |\n14 |         shift -= digits.len() - shift;\n\
    \   |                               ^ no implementation for `usize - isize`\n\
    \  "
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = digit << shift | carry;\n        carry = digit >> 8;\n  \
    \      s += digit.to_string();\n    }\n    if carry != 0 {\n        s += &format!(\"\
    {}\", carry).to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpopa3ngj7.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].rposition(|&c|\
    \ c != '0').unwrap());\n    }\n    s.push(*digits[0..shift].rposition(|&c| c !=\
    \ '0').unwrap());\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmp59z18wmk.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].rposition(|&c|\
    \ c != '0').unwrap());\n   |                 ^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `std::ops::Range<isize>`\n   |\n   = help: the trait `Index<std::ops::Range<isize>>`\
    \ is not implemented for `String`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `std::ops::Range<isize>`\n  --> /tmp/tmp59z18wmk.rs:14:13\n   |\n\
    14 |     s.push(*digits[0..shift].rposition(|&c| c != '0').unwrap());\n   |  \
    \           ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj04zjwqh.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj04zjwqh.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ for &d in &digits[shift..] {\n        result.push(d);\n    }\n    for &d in\
    \ &digits[0..shift] {\n        result.push(d);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxnvcco72.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpxnvcco72.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n\
    \  --> /tmp/tmpxnvcco72.rs:12:16\n   |\n12 |     for &d in &digits[shift..] {\n\
    \   |                ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpxnvcco72.rs:15:16\n   |\n15 |     for &d in &digits[0..shift] {\n\
    \   |                ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[0..shift].chars().nth(i).unwrap());\n\
    \    }\n    s.push(*digits.chars().nth(shift).unwrap());\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmprf992g65.rs:12:17\n   |\n12 |         s.push(*digits[0..shift].chars().nth(i).unwrap());\n\
    \   |                 ^^^^^^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprf992g65.rs:14:32\n\
    \   |\n14 |     s.push(*digits.chars().nth(shift).unwrap());\n   |           \
    \                     ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n14 |     s.push(*digits.chars().nth(shift.try_into().unwrap()).unwrap());\n\
    \   |                                ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0614]:\
    \ type `char` cannot be dereferenced\n  --> /tmp/tmprf992g65.rs:14:12\n   |\n\
    14 |     s.push(*digits.chars().nth(shift).unwrap());\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0614.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        carry\
    \ = digit + carry;\n        s += digit.to_string();\n        x /= 10;\n    }\n\
    \    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3ji1g5r.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt3ji1g5r.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap();\n\
    \    }\n    s += digits;\n    s[shift..].to_owned()\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1ew2uwgb.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i).unwrap();\n   |                  \
    \                   ^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    12 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap();\n  \
    \ |                                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1ew2uwgb.rs:12:18\n   |\n12 |         digits\
    \ = digits.chars().nth(i).unwrap();\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  |\n\
    \   |                  expected struct `String`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1ew2uwgb.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp1ew2uwgb.rs:15:5\n\
    \   |\n15 |     s[shift..].to_owned()\n   |     ^^^^^^^^^^ `String` cannot be\
    \ indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s += &format!(\"{}{}\"\
    , i % 10, i / 10);\n    }\n    if shift > s.len() {\n        s.reverse();\n  \
    \  }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0is1zhb_.rs:15:16\n   |\n\
    15 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp0is1zhb_.rs:16:11\n\
    \   |\n16 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqux6snsz.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqux6snsz.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqux6snsz.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpqux6snsz.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpqux6snsz.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpqux6snsz.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    if shift > digits.len()\
    \ {\n        digits.reverse();\n    }\n    digits\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56r_tcx2.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp56r_tcx2.rs:15:16\n\
    \   |\n15 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no\
    \ method named `reverse` found for struct `String` in the current scope\n  -->\
    \ /tmp/tmp56r_tcx2.rs:16:16\n   |\n16 |         digits.reverse();\n   |      \
    \          ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0599.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n\
    \        s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c\
    \ <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '9') {\n        i /= 10;\n   \
    \     s.push(i);\n    }\n    for i in s.chars().rposition(|c| c >= '0' && c <=\
    \ '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for i in s.chars().rposition(|c|\
    \ c >= '0' && c <= '9') {\n        i /= 10;\n        s.push(i);\n    }\n    for\
    \ i in s.chars().rposition(|c| c >= '0' && c <= '\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0762]: unterminated character literal\n  --> /tmp/tmp51y97uec.rs:75:55\n\
    \   |\n75 |     for i in s.chars().rposition(|c| c >= '0' && c <= '\n   |    \
    \                                                   ^\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0762`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[0..digits.len()\
    \ - i];\n    }\n    s += digits[0..digits.len() - shift];\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2gd5rfa5.rs:12:39\n   |\n\
    12 |         s += digits[0..digits.len() - i];\n   |                         \
    \              ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2gd5rfa5.rs:12:37\n   |\n12 |         s\
    \ += digits[0..digits.len() - i];\n   |                                     ^\
    \ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2gd5rfa5.rs:12:14\n\
    \   |\n12 |         s += digits[0..digits.len() - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found `str`\n   |   \
    \           help: consider borrowing here: `&digits[0..digits.len() - i]`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp2gd5rfa5.rs:14:35\n   |\n14 |  \
    \   s += digits[0..digits.len() - shift];\n   |                              \
    \     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp2gd5rfa5.rs:14:33\n   |\n14 |     s += digits[0..digits.len()\
    \ - shift];\n   |                                 ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2gd5rfa5.rs:14:10\n   |\n14 |\
    \     s += digits[0..digits.len() - shift];\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found `str`\n   |          help:\
    \ consider borrowing here: `&digits[0..digits.len() - shift]`\n\nerror: aborting\
    \ due to 6 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[0..(digits.len()\
    \ - i)].to_string();\n    }\n    s += digits[0..(digits.len() - shift)].to_string();\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd09gmoy6.rs:12:40\n   |\n\
    12 |         s += digits[0..(digits.len() - i)].to_string();\n   |           \
    \                             ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpd09gmoy6.rs:12:38\n   |\n\
    12 |         s += digits[0..(digits.len() - i)].to_string();\n   |           \
    \                           ^ no implementation for `usize - isize`\n   |\n  \
    \ = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd09gmoy6.rs:12:14\n   |\n12 |         s += digits[0..(digits.len()\
    \ - i)].to_string();\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digits[0..(digits.len() -\
    \ i)].to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd09gmoy6.rs:14:36\n\
    \   |\n14 |     s += digits[0..(digits.len() - shift)].to_string();\n   |    \
    \                                ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpd09gmoy6.rs:14:34\n   |\n\
    14 |     s += digits[0..(digits.len() - shift)].to_string();\n   |           \
    \                       ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd09gmoy6.rs:14:10\n   |\n14 |     s += digits[0..(digits.len()\
    \ - shift)].to_string();\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&digits[0..(digits.len() - shift)].to_string()`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let digit = x.remainder(10);\n        x.quotient(10);\n  \
    \      s.push((digit as char).to_string());\n        shift -= 1;\n    }\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpzuhcixj5.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpzuhcixj5.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `remainder` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpzuhcixj5.rs:15:23\n   |\n15 |         let\
    \ digit = x.remainder(10);\n   |                       ^^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `quotient` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpzuhcixj5.rs:16:11\n   |\n16 |         x.quotient(10);\n\
    \   |           ^^^^^^^^ method not found in `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzuhcixj5.rs:17:16\n   |\n17 |         s.push((digit as\
    \ char).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `char`, found struct `String`\n\nerror: aborting due to 5 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0599.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i as usize];\n\
    \    }\n    for i in 0..shift {\n        digits = digits.chars().nth(i as usize).unwrap().to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpmiz59u4k.rs:12:14\n\
    \   |\n12 |         s += digits[i as usize];\n   |              ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let mut digit = x.len() - 1 - shift;\n        if digit < 0\
    \ {\n            digit = x.len() + digit;\n        }\n        s.push_str(&x[digit]);\n\
    \        shift -= digit;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp5pdlo_th.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmp5pdlo_th.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp5pdlo_th.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - 1 - shift;\n   |                           ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp5pdlo_th.rs:17:23\n   |\n17 |             digit\
    \ = x.len() + digit;\n   |                       ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmp5pdlo_th.rs:19:21\n\
    \   |\n19 |         s.push_str(&x[digit]);\n   |                     ^^^^^^^^\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmputh6hom6.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmputh6hom6.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `isize`\n  --> /tmp/tmputh6hom6.rs:12:14\n\
    \   |\n12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmputh6hom6.rs:14:16\n\
    \   |\n14 |     s + digits.reverse()\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        carry\
    \ = digit + carry;\n        s += digit.to_string();\n        x /= 10;\n    }\n\
    \    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3ji1g5r.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt3ji1g5r.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let digit = x % 10;\n        s += digit.to_string();\n   \
    \     x /= 10;\n        shift -= 1;\n    }\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpzzt19yx5.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpzzt19yx5.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzzt19yx5.rs:16:14\n\
    \   |\n16 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s += &format!(\"{}\", i);\n\
    \    }\n    let mut j = x;\n    while j > 0 {\n        j /= 10;\n        s +=\
    \ &format!(\"{}\", j);\n    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_string()\n\
    \    } else {\n        s[0..shift].to_string()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq57vql0l.rs:20:16\n   |\n\
    20 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpq57vql0l.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_string()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpq57vql0l.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_string()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpq57vql0l.rs:23:9\n   |\n23 |         s[0..shift].to_string()\n\
    \   |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1 - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmt9wrc4.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[i % digits.len()];\n\
    \    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmputh6hom6.rs:12:25\n   |\n\
    12 |         s += digits[i % digits.len()];\n   |                         ^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmputh6hom6.rs:12:23\n   |\n12 |         s += digits[i % digits.len()];\n\
    \   |                       ^ no implementation for `isize % usize`\n   |\n  \
    \ = help: the trait `Rem<usize>` is not implemented for `isize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `isize`\n  --> /tmp/tmputh6hom6.rs:12:14\n\
    \   |\n12 |         s += digits[i % digits.len()];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `isize`\n   |\n   = help: the trait `Index<isize>`\
    \ is not implemented for `String`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmputh6hom6.rs:14:16\n\
    \   |\n14 |     s + digits.reverse()\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < shift {\n        if i >= x.len() {\n            break;\n\
    \        }\n        s += &x[i..];\n        i += 1;\n    }\n    if i < x.len()\
    \ {\n        s += &x[i..];\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpwh8277m6.rs:12:19\n   |\n12 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmpwh8277m6.rs:15:15\n   |\n\
    15 |         s += &x[i..];\n   |               ^^^^^^\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpwh8277m6.rs:18:14\n\
    \   |\n18 |     if i < x.len() {\n   |              ^^^ method not found in `isize`\n\
    \nerror[E0608]: cannot index into a value of type `isize`\n  --> /tmp/tmpwh8277m6.rs:19:15\n\
    \   |\n19 |         s += &x[i..];\n   |               ^^^^^^\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0608.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ue11fcm.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:14\n   |\n12 |         s +=\
    \ digits[digits.len() - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift) {\n        match\
    \ digit {\n            '1' => s.push_str(&format!(\"{}{}\", carry, digit)),\n\
    \            '0' => s.push_str(&format!(\"{}{}\", digit, carry)),\n          \
    \  _ => panic!(\"Unexpected digit {}\", digit),\n        }\n        carry = digit\
    \ as isize;\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"{}\", carry))\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptu2q306f.rs:11:45\n   |\n\
    11 |     for digit in x.to_string().chars().take(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap().to_string();\n\
    \    }\n    s += digits;\n    s[s.len() - shift..].to_owned()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpm_4lf6sk.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i).unwrap().to_string();\n   |      \
    \                               ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm_4lf6sk.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpm_4lf6sk.rs:15:17\n   |\n15 |     s[s.len()\
    \ - shift..].to_owned()\n   |                 ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpm_4lf6sk.rs:15:15\n\
    \   |\n15 |     s[s.len() - shift..].to_owned()\n   |               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbcpx3d74.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpbcpx3d74.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbcpx3d74.rs:12:18\n   |\n12 |         digits = &digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |        \
    \ digits = (&digits[..digits.len() - i]).to_string();\n   |                  +\
    \                           +++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbcpx3d74.rs:14:10\n   |\n14 |     s += digits;\n   |          ^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&digits`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits().iter() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpdpzap9h7.rs:11:17\n   |\n11 |     for &d in x.to_digits().iter()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdpzap9h7.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzv50_0lq.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzv50_0lq.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    String::from(s)\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12dcwbqx.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmp12dcwbqx.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp12dcwbqx.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string().chars().take(shift);\n    for\
    \ d in digits {\n        let digit = d.to_digit(10);\n        if carry > 0 {\n\
    \            digit += carry;\n        }\n        carry = digit / 10;\n       \
    \ digit %= 10;\n        s.push((digit as char).to_string());\n    }\n    if carry\
    \ > 0 {\n        s.push((carry as char).to_string());\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf8yvosg7.rs:11:49\n   |\n\
    11 |     let mut digits = x.to_string().chars().take(shift);\n   |           \
    \                                      ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n11 |     let mut digits = x.to_string().chars().take(shift.try_into().unwrap());\n\
    \   |                                                 ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0368]: binary assignment operation `+=` cannot be applied to type `Option<u32>`\n\
    \  --> /tmp/tmpf8yvosg7.rs:15:13\n   |\n15 |             digit += carry;\n   |\
    \             -----^^^^^^^^^\n   |             |\n   |             cannot use\
    \ `+=` on type `Option<u32>`\n\nerror[E0369]: cannot divide `Option<u32>` by `{integer}`\n\
    \  --> /tmp/tmpf8yvosg7.rs:17:23\n   |\n17 |         carry = digit / 10;\n   |\
    \                 ----- ^ -- {integer}\n   |                 |\n   |         \
    \        Option<u32>\n\nerror[E0368]: binary assignment operation `%=` cannot\
    \ be applied to type `Option<u32>`\n  --> /tmp/tmpf8yvosg7.rs:18:9\n   |\n18 |\
    \         digit %= 10;\n   |         -----^^^^^^\n   |         |\n   |       \
    \  cannot use `%=` on type `Option<u32>`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpf8yvosg7.rs:19:16\n   |\n19 |         s.push((digit as char).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpf8yvosg7.rs:22:16\n\
    \   |\n22 |         s.push((carry as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror[E0605]:\
    \ non-primitive cast: `Option<u32>` as `char`\n  --> /tmp/tmpf8yvosg7.rs:19:16\n\
    \   |\n19 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive\
    \ types or to coerce to a specific trait object\n\nerror[E0604]: only `u8` can\
    \ be cast as `char`, not `{integer}`\n  --> /tmp/tmpf8yvosg7.rs:22:16\n   |\n\
    22 |         s.push((carry as "
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = x.to_string();\n    digits.rotate_left(shift);\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmpfcvrsht0.rs:10:12\n   |\n10 |     digits.rotate_left(shift);\n\
    \   |            ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        let digit = if carry == 0 {\n            digit + shift\n        } else\
    \ {\n            digit + 1 + shift\n        };\n        carry = digit / 10;\n\
    \        s.push((digit % 10 + '0').to_string());\n    }\n    if carry != 0 {\n\
    \        s.push((carry.to_string() + '0').to_string());\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiop69vk1.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiop69vk1.rs:22:37\n  \
    \ |\n22 |         s.push((carry.to_string() + '0').to_string());\n   |       \
    \                              ^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiop69vk1.rs:22:16\n   |\n22 |         s.push((carry.to_string()\
    \ + '0').to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut shift = shift % digits.len();\n   \
    \ if shift > 0 {\n        digits = digits.chars().skip_while(|c| c != '0').collect();\n\
    \        digits = digits.chars().take(shift).collect();\n    }\n    result.push_str(digits);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjo18u7b3.rs:11:29\n   |\n\
    11 |     let mut shift = shift % digits.len();\n   |                         \
    \    ^^^^^^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod\
    \ `isize` by `usize`\n  --> /tmp/tmpjo18u7b3.rs:11:27\n   |\n11 |     let mut\
    \ shift = shift % digits.len();\n   |                           ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: can't compare `&char` with `char`\n  --> /tmp/tmpjo18u7b3.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().skip_while(|c| c != '0').collect();\n\
    \   |                                                  ^^ no implementation for\
    \ `&char == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjo18u7b3.rs:14:38\n\
    \   |\n14 |         digits = digits.chars().take(shift).collect();\n   |     \
    \                                 ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n14 |         digits = digits.chars().take(shift.try_into().unwrap()).collect();\n\
    \   |                                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjo18u7b3.rs:16:21\n   |\n16 |     result.push_str(digits);\n\
    \   |                     ^^^^^^\n   |                     |\n   |           \
    \          expected `&str`, found struct `String`\n   |                     help:\
    \ consider borrowing here: `&digits`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        if digit < 0 {\n            s.push('-');\n            digit = -digit;\n\
    \        }\n        let digit = digit << shift;\n        s.push((digit & digit_mask).to_string());\n\
    \        carry = digit >> digit_shift;\n    }\n    if carry != 0 {\n        s.push(carry.to_string());\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `digit_mask` in this scope\n  --> /tmp/tmp7gj3km50.rs:18:25\n\
    \   |\n18 |         s.push((digit & digit_mask).to_string());\n   |          \
    \               ^^^^^^^^^^ not found in this scope\n\nerror[E0425]: cannot find\
    \ value `digit_shift` in this scope\n  --> /tmp/tmp7gj3km50.rs:19:26\n   |\n19\
    \ |         carry = digit >> digit_shift;\n   |                          ^^^^^^^^^^^\
    \ not found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gj3km50.rs:11:9\n\
    \   |\n11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7gj3km50.rs:22:16\n  \
    \ |\n22 |         s.push(carry.to_string());\n   |                ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &n in &x.to_string().chars() {\n        let digit = n.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&Chars<'_>` is not an iterator\n   --> /tmp/tmpseycr_my.rs:11:15\n\
    \    |\n11  |     for &n in &x.to_string().chars() {\n    |               -^^^^^^^^^^^^^^^^^^^^^\n\
    \    |               |\n    |               `&Chars<'_>` is not an iterator\n\
    \    |               help: consider removing the leading `&`-reference\n    |\n\
    \    = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n    = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\nnote: required by `into_iter`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpseycr_my.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpseycr_my.rs:20:16\n\
    \   |\n20 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpseycr_my.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpseycr_my.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpseycr_my.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: abort"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    for i in\
    \ 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjn8d48rd.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjn8d48rd.rs:15:16\n   |\n15 |\
    \         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:13:18\n \
    \  |\n13 |         digits = &digits[1..];\n   |                  ^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n13 |         digits = (&digits[1..]).to_string();\n   |               \
    \   +            +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:15:12\n\
    \   |\n15 |     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        carry\
    \ = digit + carry;\n        s += digit.to_string();\n        x /= 10;\n    }\n\
    \    if carry > 0 {\n        s += carry.to_string();\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt3ji1g5r.rs:14:14\n   |\n\
    14 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt3ji1g5r.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().iter() {\n        let digit\
    \ = d.to_digit(10);\n        let digit = digit + carry % 10;\n        carry =\
    \ digit / 10;\n        s += digit.to_string();\n    }\n    if carry > 0 {\n  \
    \      s += carry.to_string();\n    }\n    s[s.len() - shift..].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpznohhnk7.rs:11:37\n   |\n11 |     for &d in x.to_string().chars().iter()\
    \ {\n   |                                     ^^^^ private field, not a method\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpznohhnk7.rs:18:14\n   |\n18 |\
    \         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n   | \
    \             |\n   |              expected `&str`, found struct `String`\n  \
    \ |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpznohhnk7.rs:20:17\n   |\n20 |     s[s.len()\
    \ - shift..].to_string()\n   |                 ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpznohhnk7.rs:20:15\n\
    \   |\n20 |     s[s.len() - shift..].to_string()\n   |               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for _ in 0..shift {\n        result.push_str(&digits[..]);\n\
    \        digits = &digits[digits.len() - 1];\n    }\n    result.push_str(&digits[..]);\n\
    \    result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp9z5uax_4.rs:13:19\n\
    \   |\n13 |         digits = &digits[digits.len() - 1];\n   |                \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9z5uax_4.rs:13:18\n   |\n13 |         digits\
    \ = &digits[digits.len() - 1];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found reference\n   |\n   = note: expected struct\
    \ `String`\n           found reference `&_`\nhelp: consider removing the borrow\n\
    \   |\n13 -         digits = &digits[digits.len() - 1];\n13 +         digits =\
    \ digits[digits.len() - 1];\n   | \n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ if shift > x.to_digits(0).len() {\n        s += x.to_string();\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfkyoskwf.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0599]: no\
    \ method named `to_digits` found for type `isize` in the current scope\n  -->\
    \ /tmp/tmpfkyoskwf.rs:14:18\n   |\n14 |     if shift > x.to_digits(0).len() {\n\
    \   |                  ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfkyoskwf.rs:15:14\n   |\n15 |         s += x.to_string();\n\
    \   |              ^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&x.to_string()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            break;\n\
    \        }\n        let digit = x.remainder(shift);\n        s.push((digit as\
    \ char).to_string());\n        x = x;\n        shift -= digit;\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpizbbxewm.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpizbbxewm.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `remainder` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmpizbbxewm.rs:15:23\n   |\n15 |         let\
    \ digit = x.remainder(shift);\n   |                       ^^^^^^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpizbbxewm.rs:16:16\n\
    \   |\n16 |         s.push((digit as char).to_string());\n   |               \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s\
    \ += digit.to_string();\n        x /= 10;\n        carry += digit;\n    }\n  \
    \  if carry > 0 {\n        s += &format!(\"{}\", carry).to_string();\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4ohwk079.rs:13:14\n   |\n\
    13 |         s += digit.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n  \
    \ |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&digit.to_string()`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1) - i];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprpbezinw.rs:12:43\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmprpbezinw.rs:12:41\n   |\n12 | \
    \        s += &digits[(digits.len() - 1) - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmprpbezinw.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprpbezinw.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmprpbezinw.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmprpbezinw.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnebmu969.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpnebmu969.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + &digits[digits.len() - shift]\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw2nvqzou.rs:14:32\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |                      \
    \          ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:30\n   |\n14 |     s + &digits[digits.len()\
    \ - shift]\n   |                              ^ no implementation for `usize -\
    \ isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpw2nvqzou.rs:14:10\n\
    \   |\n14 |     s + &digits[digits.len() - shift]\n   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut digits = x.to_string();\n    for i in 0..shift {\n        result.push_str(&digits[..]);\n\
    \        digits.rotate_left(1);\n    }\n    result.push_str(&digits[..]);\n  \
    \  result\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `rotate_left` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp6k0oe6z3.rs:13:16\n   |\n13 |         digits.rotate_left(1);\n\
    \   |                ^^^^^^^^^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        digits.push(digit.to_string());\n        remainder = remainder\
    \ / 10;\n    }\n    if shift > digits.len() {\n        digits.reverse();\n   \
    \ }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpoukhly3i.rs:13:21\n   |\n\
    13 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpoukhly3i.rs:16:16\n   |\n16 |     if shift > digits.len() {\n  \
    \ |                ^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n16 |     if shift > digits.len().try_into().unwrap() {\n   |    \
    \            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method named\
    \ `reverse` found for struct `String` in the current scope\n  --> /tmp/tmpoukhly3i.rs:17:16\n\
    \   |\n17 |         digits.reverse();\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if i >= x.len() {\n            break;\n        }\n  \
    \      s.push(x[i]);\n    }\n    for i in 0..shift {\n        if i >= x.len()\
    \ {\n            break;\n        }\n        s.push(x[x.len() - 1 - i]);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_21n0a2f.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp_21n0a2f.rs:14:16\n   |\n\
    14 |         s.push(x[i]);\n   |                ^^^^\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp_21n0a2f.rs:17:19\n\
    \   |\n17 |         if i >= x.len() {\n   |                   ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp_21n0a2f.rs:20:20\n   |\n20 |         s.push(x[x.len()\
    \ - 1 - i]);\n   |                    ^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    for\
    \ i in 0..shift {\n        result.push(x%10);\n        x /= 10;\n    }\n    if\
    \ shift > x.len() {\n        for i in x.len() - shift..x.len() {\n           \
    \ result.push(x%10);\n            x /= 10;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3lo4vakj.rs:11:21\n   |\n\
    11 |         result.push(x%10);\n   |                     ^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0599]: no method named `len` found for type `isize`\
    \ in the current scope\n  --> /tmp/tmp3lo4vakj.rs:14:18\n   |\n14 |     if shift\
    \ > x.len() {\n   |                  ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `len` found for type `isize` in the current scope\n  --> /tmp/tmp3lo4vakj.rs:15:20\n\
    \   |\n15 |         for i in x.len() - shift..x.len() {\n   |                \
    \    ^^^ method not found in `isize`\n\nerror[E0599]: no method named `len` found\
    \ for type `isize` in the current scope\n  --> /tmp/tmp3lo4vakj.rs:15:37\n   |\n\
    15 |         for i in x.len() - shift..x.len() {\n   |                       \
    \              ^^^ method not found in `isize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3lo4vakj.rs:16:25\n   |\n16 |             result.push(x%10);\n\
    \   |                         ^^^^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..1]\
    \ + &digits[1..];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `&str` to `&str`\n  --> /tmp/tmpuooy9jbv.rs:12:31\n\
    \   |\n12 |         digits = &digits[..1] + &digits[1..];\n   |              \
    \    ------------ ^ ------------ &str\n   |                  |            |\n\
    \   |                  |            `+` cannot be used to concatenate two `&str`\
    \ strings\n   |                  &str\n   |\nhelp: String concatenation appends\
    \ the string on the right to the string on the left and may require reallocation.\
    \ This requires ownership of the string on the left\n   |\n12 |         digits\
    \ = digits[..1] + &digits[1..];\n   |                  ~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuooy9jbv.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0369.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(i);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2pnnw0_y.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp2pnnw0_y.rs:18:12\n   |\n18 |\
    \     s.push(i);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry + shift % 10;\n        carry = digit / 10;\n\
    \        s = s.push_str(&format!(\"{}\", digit));\n        shift /= 10;\n    }\n\
    \    if carry > 0 {\n        s = s.push_str(&format!(\"{}\", carry));\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpiv2crd32.rs:11:9\n   |\n\
    11 |     for &d in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv2crd32.rs:15:13\n  \
    \ |\n15 |         s = s.push_str(&format!(\"{}\", digit));\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmpiv2crd32.rs:15:15\n   |\n15 |         s\
    \ = s.push_str(&format!(\"{}\", digit));\n   |             - ^^^^^^^^ this call\
    \ modifies `s` in-place\n   |             |\n   |             you probably want\
    \ to use this value after calling the method...\n   = note: ...instead of the\
    \ `()` output of method `push_str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpiv2crd32.rs:19:13\n\
    \   |\n19 |         s = s.push_str(&format!(\"{}\", carry));\n   |           \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n  \
    \ |\nnote: method `push_str` modifies its receiver in-place\n  --> /tmp/tmpiv2crd32.rs:19:15\n\
    \   |\n19 |         s = s.push_str(&format!(\"{}\", carry));\n   |           \
    \  - ^^^^^^^^ this call modifies `s` in-place\n   |             |\n   |      \
    \       you probably want to use this value after calling the method...\n   =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for c\
    \ in x.to_string().chars() {\n        if c >= '0' && c <= '9' {\n            s.push_str(&c.to_string());\n\
    \        } else {\n            s.push_str(&c.to_string().rev());\n        }\n\
    \    }\n    if shift > s.len() {\n        s.reverse();\n    }\n    s\n}\n\nfn\
    \ main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: the method `rev` exists for struct `String`, but its trait\
    \ bounds were not satisfied\n   --> /tmp/tmp2_1154k1.rs:14:39\n    |\n14  |  \
    \             s.push_str(&c.to_string().rev());\n    |                       \
    \                  ^^^ method cannot be called on `String` due to unsatisfied\
    \ trait bounds\n    |\n    = note: the following trait bounds were not satisfied:\n\
    \            `String: Iterator`\n            which is required by `&mut String:\
    \ Iterator`\n            `str: Iterator`\n            which is required by `&mut\
    \ str: Iterator`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2_1154k1.rs:17:16\n\
    \   |\n17 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method\
    \ named `reverse` found for struct `String` in the current scope\n  --> /tmp/tmp2_1154k1.rs:18:11\n\
    \   |\n18 |         s.reverse();\n   |           ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..shift {\n        let digit = x % 10;\n        s\
    \ += if carry {\n            digit + '0'\n        } else {\n            digit\
    \ + '1'\n        };\n        x /= 10;\n        carry = 1;\n    }\n    if carry\
    \ {\n        s += '0';\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sp66b_d.rs:13:17\n   |\n\
    13 |         s += if carry {\n   |                 ^^^^^ expected `bool`, found\
    \ integer\n\nerror[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmp1sp66b_d.rs:14:19\n\
    \   |\n14 |             digit + '0'\n   |                   ^ no implementation\
    \ for `isize + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot add `char` to `isize`\n  --> /tmp/tmp1sp66b_d.rs:16:19\n\
    \   |\n16 |             digit + '1'\n   |                   ^ no implementation\
    \ for `isize + char`\n   |\n   = help: the trait `Add<char>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1sp66b_d.rs:21:8\n\
    \   |\n21 |     if carry {\n   |        ^^^^^ expected `bool`, found integer\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1sp66b_d.rs:22:14\n   |\n22 |\
    \         s += '0';\n   |              ^^^ expected `&str`, found `char`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = digits.chars().nth(digits.len() - i + 1).collect();\n    }\n\
    \    s.push(*digits);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmprreo5erm.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprreo5erm.rs:13:52\n   |\n13 |  \
    \       digits = digits.chars().nth(digits.len() - i + 1).collect();\n   |   \
    \                                                 ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmprreo5erm.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0599]: the method `collect` exists for enum `Option<char>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmprreo5erm.rs:13:59\n\
    \    |\n13  |           digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \    |                                                             ^^^^^^^ method\
    \ cannot be called on `Option<char>` due to unsatisfied trait bounds\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Option<char>:\
    \ Iterator`\n            which is required by `&mut Option<char>: Iterator`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprreo5erm.rs:15:12\n   |\n15 |  \
    \   s.push(*digits);\n   |            ^^^^^^^ expected `char`, found `str`\n\n\
    error: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0599, E0614.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = &digits[..digits.len()\
    \ - i];\n    }\n    s += digits;\n    s\n}\n\nfn main() {\n    let candidate =\
    \ circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbcpx3d74.rs:12:43\n   |\n\
    12 |         digits = &digits[..digits.len() - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpbcpx3d74.rs:12:41\n   |\n12 | \
    \        digits = &digits[..digits.len() - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbcpx3d74.rs:12:18\n   |\n12 |         digits = &digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `&str`\n   |\nhelp: try using a conversion method\n   |\n12 |        \
    \ digits = (&digits[..digits.len() - i]).to_string();\n   |                  +\
    \                           +++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbcpx3d74.rs:14:10\n   |\n14 |     s += digits;\n   |          ^^^^^^\n\
    \   |          |\n   |          expected `&str`, found struct `String`\n   | \
    \         help: consider borrowing here: `&digits`\n\nerror: aborting due to 4\
    \ previous errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        if carry > 0 {\n            digit += 1;\n        }\n        carry = digit\
    \ << shift;\n        s += digit.to_string();\n    }\n    if carry > 0 {\n    \
    \    s += '1';\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptxf_0mw2.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptxf_0mw2.rs:20:14\n  \
    \ |\n20 |         s += '1';\n   |              ^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s += &format!(\"{}\", i\
    \ as u8);\n    }\n    for i in 0..shift {\n        s += &format!(\"{}\", i as\
    \ u8);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"101001\"`,\n right: `\"001\"`', /tmp/tmpxn2x7iql.rs:23:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[digits.len()\
    \ - i - 1]);\n    }\n    s.push(*digits[digits.len() - shift]);\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:12:39\n   |\n\
    12 |         s.push(*digits[digits.len() - i - 1]);\n   |                    \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:37\n   |\n12 | \
    \        s.push(*digits[digits.len() - i - 1]);\n   |                        \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:12:17\n   |\n12 |  \
    \       s.push(*digits[digits.len() - i - 1]);\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp75pz2w8r.rs:14:35\n\
    \   |\n14 |     s.push(*digits[digits.len() - shift]);\n   |                 \
    \                  ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:33\n   |\n14 | \
    \    s.push(*digits[digits.len() - shift]);\n   |                            \
    \     ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp75pz2w8r.rs:14:13\n   |\n14 |     s.push(*digits[digits.len()\
    \ - shift]);\n   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be\
    \ indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &n in &x.to_string().chars() {\n        let digit = n.to_digit(10);\n\
    \        let digit = digit + carry + shift;\n        carry = digit % 10;\n   \
    \     s += digit.to_char().to_string();\n    }\n    if carry > 0 {\n        s\
    \ += &carry;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: `&Chars<'_>` is not an iterator\n   --> /tmp/tmpa8mmbvfw.rs:11:15\n\
    \    |\n11  |     for &n in &x.to_string().chars() {\n    |               -^^^^^^^^^^^^^^^^^^^^^\n\
    \    |               |\n    |               `&Chars<'_>` is not an iterator\n\
    \    |               help: consider removing the leading `&`-reference\n    |\n\
    \    = help: the trait `Iterator` is not implemented for `&Chars<'_>`\n    = note:\
    \ `Iterator` is implemented for `&mut std::str::Chars<'_>`, but not for `&std::str::Chars<'_>`\n\
    \    = note: required because of the requirements on the impl of `IntoIterator`\
    \ for `&Chars<'_>`\nnote: required by `into_iter`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpa8mmbvfw.rs:18:14\n   |\n18 |         s += &carry;\n  \
    \ |              ^^^^^^ expected `str`, found integer\n   |\n   = note: expected\
    \ reference `&str`\n              found reference `&{integer}`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = if carry > 0\
    \ {\n            d + carry\n        } else {\n            d\n        };\n    \
    \    carry = digit / 10;\n        s += digit.to_string();\n    }\n    if carry\
    \ > 0 {\n        s += &format!(\"{}\", carry)[..];\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmprlvr5lo4.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x = x/10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj04zjwqh.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpj04zjwqh.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb6ls0nzz.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpb6ls0nzz.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpb6ls0nzz.rs:12:15\n   |\n12 |         s +=\
    \ &digits[digits.len() - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpb6ls0nzz.rs:14:16\n\
    \   |\n14 |     s + digits.reverse()\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if i >= x.len() {\n            break;\n        }\n  \
    \      s.push(x[i]);\n    }\n    for i in 0..shift {\n        if i >= x.len()\
    \ {\n            break;\n        }\n        s.push(x[x.len() - 1 - i]);\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp_21n0a2f.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0608]: cannot\
    \ index into a value of type `isize`\n  --> /tmp/tmp_21n0a2f.rs:14:16\n   |\n\
    14 |         s.push(x[i]);\n   |                ^^^^\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmp_21n0a2f.rs:17:19\n\
    \   |\n17 |         if i >= x.len() {\n   |                   ^^^ method not found\
    \ in `isize`\n\nerror[E0599]: no method named `len` found for type `isize` in\
    \ the current scope\n  --> /tmp/tmp_21n0a2f.rs:20:20\n   |\n20 |         s.push(x[x.len()\
    \ - 1 - i]);\n   |                    ^^^ method not found in `isize`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0599, E0608.\nFor more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.append(&s[shift..]);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6kk6n8xv.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0599]: no method named `append` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp6kk6n8xv.rs:18:7\n   |\n18 |     s.append(&s[shift..]);\n\
    \   |       ^^^^^^ method not found in `String`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp6kk6n8xv.rs:18:15\n \
    \  |\n18 |     s.append(&s[shift..]);\n   |               ^^^^^^^^^^ `String`\
    \ cannot be indexed by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    if shift > s.len() {\n        s[s.len() - shift..].to_owned()\n  \
    \  } else {\n        s[0..shift].to_owned()\n    }\n}\n\nfn main() {\n    let\
    \ candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpb68lkuto.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpb68lkuto.rs:18:14\n  \
    \ |\n18 |         s += carry.to_string();\n   |              ^^^^^^^^^^^^^^^^^\n\
    \   |              |\n   |              expected `&str`, found struct `String`\n\
    \   |              help: consider borrowing here: `&carry.to_string()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb68lkuto.rs:20:16\n   |\n20 |     if shift >\
    \ s.len() {\n   |                ^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n20 |     if shift > s.len().try_into().unwrap() {\n   | \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb68lkuto.rs:21:21\n   |\n21 |         s[s.len() - shift..].to_owned()\n\
    \   |                     ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpb68lkuto.rs:21:19\n   |\n\
    21 |         s[s.len() - shift..].to_owned()\n   |                   ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \  --> /tmp/tmpb68lkuto.rs:23:9\n   |\n23 |         s[0..shift].to_owned()\n \
    \  |         ^^^^^^^^^^^ `String` cannot be indexed by `std::ops::Range<isize>`\n\
    \   |\n   = help: the trait `Index<std::ops::Range<isize>>` is not implemented\
    \ for `String`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpug_d38yi.rs:12:37\n   |\n\
    12 |         s += digits[(digits.len() - i) % digits.len()];\n   |           \
    \                          ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpug_d38yi.rs:12:35\n   |\n\
    12 |         s += digits[(digits.len() - i) % digits.len()];\n   |           \
    \                        ^ no implementation for `usize - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpug_d38yi.rs:12:14\n   |\n\
    12 |         s += digits[(digits.len() - i) % digits.len()];\n   |           \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0599]: no method named `reverse` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpug_d38yi.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push_front(digits.pop());\n\
    \    }\n    s.push_front(digits);\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `push_front` found for struct `String` in\
    \ the current scope\n  --> /tmp/tmp_pl_q9e4.rs:12:11\n   |\n12 |         s.push_front(digits.pop());\n\
    \   |           ^^^^^^^^^^ method not found in `String`\n\nerror[E0599]: no method\
    \ named `push_front` found for struct `String` in the current scope\n  --> /tmp/tmp_pl_q9e4.rs:14:7\n\
    \   |\n14 |     s.push_front(digits);\n   |       ^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:13:18\n \
    \  |\n13 |         digits = &digits[1..];\n   |                  ^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n13 |         digits = (&digits[1..]).to_string();\n   |               \
    \   +            +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:15:12\n\
    \   |\n15 |     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - i - 1];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgk7t6e_e.rs:12:36\n   |\n\
    12 |         s += digits[digits.len() - i - 1];\n   |                        \
    \            ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpgk7t6e_e.rs:12:34\n   |\n12 |         s\
    \ += digits[digits.len() - i - 1];\n   |                                  ^ no\
    \ implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpgk7t6e_e.rs:12:14\n   |\n12 |         s +=\
    \ digits[digits.len() - i - 1];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpgk7t6e_e.rs:14:16\n\
    \   |\n14 |     s + digits.reverse()\n   |                ^^^^^^^ help: there\
    \ is an associated function with a similar name: `reserve`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for d in x.to_digits() {\n        let digit = if carry > 0 {\n\
    \            d + carry\n        } else {\n            d\n        };\n        carry\
    \ = digit / 10;\n        s += digit.to_string();\n    }\n    if carry > 0 {\n\
    \        s += carry.to_string();\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp8u7gu5v2.rs:11:16\n   |\n11 |     for d in x.to_digits()\
    \ {\n   |                ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8u7gu5v2.rs:21:14\n   |\n21 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits.chars().nth(i).unwrap().to_string();\n\
    \    }\n    s += digits;\n    s[s.len() - shift..].to_string()\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy20irbjs.rs:12:37\n   |\n\
    12 |         digits = digits.chars().nth(i).unwrap().to_string();\n   |      \
    \                               ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n12 |         digits = digits.chars().nth(i.try_into().unwrap()).unwrap().to_string();\n\
    \   |                                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy20irbjs.rs:14:10\n   |\n14 |     s += digits;\n\
    \   |          ^^^^^^\n   |          |\n   |          expected `&str`, found struct\
    \ `String`\n   |          help: consider borrowing here: `&digits`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy20irbjs.rs:15:17\n   |\n15 |     s[s.len()\
    \ - shift..].to_string()\n   |                 ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpy20irbjs.rs:15:15\n\
    \   |\n15 |     s[s.len() - shift..].to_string()\n   |               ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    while n > 0 {\n        s.push((n % 10).to_string());\n        n\
    \ /= 10;\n    }\n    if shift > s.len() {\n        s.push((n % 10).to_string());\n\
    \        n /= 10;\n    }\n    while n > 0 {\n        s.push((n % 10).to_string());\n\
    \        n /= 10;\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx4lg4ups.rs:12:16\n   |\n\
    12 |         s.push((n % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpx4lg4ups.rs:15:16\n   |\n15 |     if shift > s.len() {\n   |   \
    \             ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    15 |     if shift > s.len().try_into().unwrap() {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx4lg4ups.rs:16:16\n   |\n16 |\
    \         s.push((n % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpx4lg4ups.rs:20:16\n   |\n20 |         s.push((n % 10).to_string());\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^ expected `char`, found struct `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().skip(shift) {\n        let\
    \ digit = digit as char;\n        if digit == '1' {\n            s.push_str(&format!(\"\
    {}{}\", carry, digit));\n            carry = 0;\n        } else {\n          \
    \  s.push_str(&format!(\"{}{}\", digit, carry));\n            carry = 0;\n   \
    \     }\n    }\n    if carry != 0 {\n        s.push_str(&format!(\"{}\", carry));\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6zqsj2j.rs:11:45\n   |\n\
    11 |     for digit in x.to_string().chars().skip(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n11 |     for digit in x.to_string().chars().skip(shift.try_into().unwrap())\
    \ {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        if i >= x.len() {\n            s.push('0');\n       \
    \ } else {\n            s.push(x[x.len() - 1 - i]);\n        }\n    }\n    String::from(s)\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpmdq4rr5v.rs:11:19\n   |\n11 |         if i >= x.len() {\n\
    \   |                   ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpmdq4rr5v.rs:14:24\n\
    \   |\n14 |             s.push(x[x.len() - 1 - i]);\n   |                    \
    \    ^^^ method not found in `isize`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ue11fcm.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:14\n   |\n12 |         s +=\
    \ digits[digits.len() - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = if carry == 0\
    \ {\n            d + 1\n        } else {\n            d + carry\n        };\n\
    \        carry = digit / 10;\n        s += digit.to_string();\n    }\n    if carry\
    \ != 0 {\n        s += &format!(\"{}\", carry)[..];\n    }\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmppbcrqx9f.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &c in x.to_string().chars() {\n        let digit = c - '0';\n\
    \        if carry > 0 {\n            digit += carry;\n            carry = 0;\n\
    \        }\n        s += &format!(\"{}{}\", digit, shift);\n    }\n    if carry\
    \ > 0 {\n        s += &format!(\"{}\", carry);\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpryvy_2ge.rs:11:9\n   |\n\
    11 |     for &c in x.to_string().chars() {\n   |         ^^    ---------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ n = x;\n    let mut carry = 0;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        n /= 10;\n        if carry > 0 {\n            s.insert(0, digit);\n \
    \       } else {\n            s.insert(0, digit + shift);\n        }\n       \
    \ carry = digit << shift;\n    }\n    if carry > 0 {\n        s.insert(0, carry);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2gtix595.rs:16:25\n   |\n\
    16 |             s.insert(0, digit);\n   |                         ^^^^^ expected\
    \ `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2gtix595.rs:18:25\n\
    \   |\n18 |             s.insert(0, digit + shift);\n   |                    \
    \     ^^^^^^^^^^^^^ expected `char`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2gtix595.rs:23:21\n   |\n23 |         s.insert(0, carry);\n\
    \   |                     ^^^^^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string();\n    for i in 0..shift {\n \
    \       if carry > 0 {\n            s.insert(0, &digits[digits.len() - 1]);\n\
    \        }\n        let digit = digits.chars().nth(i).unwrap();\n        carry\
    \ = digit as isize - digit as isize;\n        digits = digits.chars().nth(i +\
    \ 1).unwrap();\n    }\n    if carry > 0 {\n        s.insert(0, &digits[digits.len()\
    \ - 1]);\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpkgptty6e.rs:14:26\n\
    \   |\n14 |             s.insert(0, &digits[digits.len() - 1]);\n   |        \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed by `usize`\n\
    \   |\n   = help: the trait `Index<usize>` is not implemented for `String`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpkgptty6e.rs:14:25\n   |\n14 |  \
    \           s.insert(0, &digits[digits.len() - 1]);\n   |                    \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`, found reference\n   |\n   = note:\
    \   expected type `char`\n           found reference `&_`\nhelp: consider removing\
    \ the borrow\n   |\n14 -             s.insert(0, &digits[digits.len() - 1]);\n\
    14 +             s.insert(0, digits[digits.len() - 1]);\n   | \n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkgptty6e.rs:16:40\n   |\n16 |         let digit\
    \ = digits.chars().nth(i).unwrap();\n   |                                    \
    \    ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n16 |      \
    \   let digit = digits.chars().nth(i.try_into().unwrap()).unwrap();\n   |    \
    \                                    ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpkgptty6e.rs:18:37\n   |\n18 |         digits = digits.chars().nth(i\
    \ + 1).unwrap();\n   |                                     ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n18 |         digits = digits.chars().nth((i\
    \ + 1).try_into().unwrap()).unwrap();\n   |                                  \
    \   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkgptty6e.rs:18:18\n\
    \   |\n18 |         digits = digits.chars().nth(i + 1).unwrap();\n   |       \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                  |\n   |                  expected struct\
    \ `String`, found `char`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `us"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits[..]);\n\
    \        digits = digits.chars().nth(digits.len() - i + 1).collect();\n    }\n\
    \    s.push(*digits[..]);\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpvn5lt2x4.rs:12:16\n\
    \   |\n12 |         s.push(*digits[..]);\n   |                ^^^^^^^^^^^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpvn5lt2x4.rs:13:52\n   |\n13 |  \
    \       digits = digits.chars().nth(digits.len() - i + 1).collect();\n   |   \
    \                                                 ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpvn5lt2x4.rs:13:50\n\
    \   |\n13 |         digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \   |                                                  ^ no implementation for\
    \ `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0599]: the method `collect` exists for enum `Option<char>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmpvn5lt2x4.rs:13:59\n\
    \    |\n13  |           digits = digits.chars().nth(digits.len() - i + 1).collect();\n\
    \    |                                                             ^^^^^^^ method\
    \ cannot be called on `Option<char>` due to unsatisfied trait bounds\n    |\n\
    \    = note: the following trait bounds were not satisfied:\n            `Option<char>:\
    \ Iterator`\n            which is required by `&mut Option<char>: Iterator`\n\n\
    error[E0614]: type `str` cannot be dereferenced\n  --> /tmp/tmpvn5lt2x4.rs:15:12\n\
    \   |\n15 |     s.push(*digits[..]);\n   |            ^^^^^^^^^^^\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599, E0614.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let digit\
    \ = d.to_digit(10);\n        s += digit.to_string();\n        carry += digit as\
    \ isize;\n        if carry > 0 {\n            s += '0';\n            carry -=\
    \ 1;\n        }\n    }\n    if carry > 0 {\n        s += '0';\n    }\n    s\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7hs16tow.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7hs16tow.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7hs16tow.rs:16:18\n  \
    \ |\n16 |             s += '0';\n   |                  ^^^ expected `&str`, found\
    \ `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7hs16tow.rs:21:14\n\
    \   |\n21 |         s += '0';\n   |              ^^^ expected `&str`, found `char`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        digits.push(digit.to_string());\n        remainder = remainder\
    \ / 10;\n    }\n    digits.reverse();\n    digits.push_str(&format!(\"{}\", shift));\n\
    \    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzlfpmvn0.rs:13:21\n   |\n\
    13 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0599]: no method named `reverse`\
    \ found for struct `String` in the current scope\n  --> /tmp/tmpzlfpmvn0.rs:16:12\n\
    \   |\n16 |     digits.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for digit\
    \ in x.to_string().chars().take(shift) {\n        s.push(digit);\n    }\n    s[..].to_string()\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqw6bnx10.rs:10:45\n   |\n\
    10 |     for digit in x.to_string().chars().take(shift) {\n   |              \
    \                               ^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n10 |     for digit in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                             ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = x;\n    while i > 0 {\n        i /= 10;\n        s.push(i);\n    }\n   \
    \ for i in 0..shift {\n        s.push('0');\n    }\n    s.push(x);\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:13:16\n   |\n\
    13 |         s.push(i);\n   |                ^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpt252scnf.rs:18:12\n   |\n18 |\
    \     s.push(x);\n   |            ^ expected `char`, found `isize`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2ue11fcm.rs:12:40\n   |\n\
    12 |         s += digits[digits.len() - 1 - i];\n   |                        \
    \                ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:38\n   |\n12 |         s\
    \ += digits[digits.len() - 1 - i];\n   |                                     \
    \ ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmp2ue11fcm.rs:12:14\n   |\n12 |         s +=\
    \ digits[digits.len() - 1 - i];\n   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        remainder %= 10;\n      \
    \  s.push(remainder);\n        remainder /= 10;\n    }\n    if shift > s.len()\
    \ {\n        s[s.len() - shift as usize..].copy_from_slice(&s[shift as usize..]);\n\
    \    } else {\n        s[shift as usize..].copy_from_slice(&s[..shift as usize]);\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzc7r_48g.rs:13:16\n   |\n\
    13 |         s.push(remainder);\n   |                ^^^^^^^^^ expected `char`,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzc7r_48g.rs:16:16\n\
    \   |\n16 |     if shift > s.len() {\n   |                ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     if shift > s.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method\
    \ named `copy_from_slice` found for type `str` in the current scope\n  --> /tmp/tmpzc7r_48g.rs:17:39\n\
    \   |\n17 |         s[s.len() - shift as usize..].copy_from_slice(&s[shift as\
    \ usize..]);\n   |                                       ^^^^^^^^^^^^^^^ method\
    \ not found in `str`\n\nerror[E0599]: no method named `copy_from_slice` found\
    \ for type `str` in the current scope\n  --> /tmp/tmpzc7r_48g.rs:19:29\n   |\n\
    19 |         s[shift as usize..].copy_from_slice(&s[..shift as usize]);\n   |\
    \                             ^^^^^^^^^^^^^^^ method not found in `str`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s.push(x%10);\n        x /= 10;\n    }\n    s.push(x%10);\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprxpf3_j2.rs:11:16\n   |\n\
    11 |         s.push(x%10);\n   |                ^^^^ expected `char`, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprxpf3_j2.rs:14:12\n   |\n14 |\
    \     s.push(x%10);\n   |            ^^^^ expected `char`, found `isize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1 - i) % digits.len()];\n    }\n    s\n}\n\nfn main() {\n    let candidate\
    \ = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"001\"));\n\
    \    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnmt9wrc4.rs:12:42\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                    ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:40\n   |\n\
    12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |      \
    \                                  ^ no implementation for `usize - isize`\n \
    \  |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpnmt9wrc4.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - 1 - i) % digits.len()];\n   |\
    \               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s.push(*digits);\n\
    \        digits = &digits[1..];\n    }\n    s.push(*digits);\n    s\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:12:16\n   |\n\
    12 |         s.push(*digits);\n   |                ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:13:18\n \
    \  |\n13 |         digits = &digits[1..];\n   |                  ^^^^^^^^^^^^\
    \ expected struct `String`, found `&str`\n   |\nhelp: try using a conversion method\n\
    \   |\n13 |         digits = (&digits[1..]).to_string();\n   |               \
    \   +            +++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdanu145h.rs:15:12\n\
    \   |\n15 |     s.push(*digits);\n   |            ^^^^^^^ expected `char`, found\
    \ `str`\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    let mut digits = x.to_string();\n    while digits.len() > shift\
    \ {\n        let digit = digits.chars().nth(shift).unwrap();\n        carry =\
    \ digit as isize + (carry << shift);\n        s += digit;\n        digits -= digit;\n\
    \    }\n    if carry > 0 {\n        s += &format!(\"{}\", carry);\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkx1td5ib.rs:12:26\n   |\n\
    12 |     while digits.len() > shift {\n   |                          ^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n12 |     while digits.len()\
    \ > shift.try_into().unwrap() {\n   |                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpkx1td5ib.rs:13:40\n   |\n13 |\
    \         let digit = digits.chars().nth(shift).unwrap();\n   |              \
    \                          ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n13 |         let digit = digits.chars().nth(shift.try_into().unwrap()).unwrap();\n\
    \   |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkx1td5ib.rs:15:14\n   |\n15 |         s += digit;\n\
    \   |              ^^^^^ expected `&str`, found `char`\n\nerror[E0368]: binary\
    \ assignment operation `-=` cannot be applied to type `String`\n  --> /tmp/tmpkx1td5ib.rs:16:9\n\
    \   |\n16 |         digits -= digit;\n   |         ------^^^^^^^^^\n   |     \
    \    |\n   |         cannot use `-=` on type `String`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0308, E0368.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdj7y99ao.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdj7y99ao.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ i = 0;\n    while i < x.len() {\n        if i >= shift {\n            i += x.len()\
    \ - i;\n        }\n        s.push(x[i]);\n        i += 1;\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpak6wbvfm.rs:11:17\n   |\n11 |     while i < x.len() {\n\
    \   |                 ^^^ method not found in `isize`\n\nerror[E0599]: no method\
    \ named `len` found for type `isize` in the current scope\n  --> /tmp/tmpak6wbvfm.rs:13:20\n\
    \   |\n13 |             i += x.len() - i;\n   |                    ^^^ method\
    \ not found in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n\
    \  --> /tmp/tmpak6wbvfm.rs:15:16\n   |\n15 |         s.push(x[i]);\n   |     \
    \           ^^^^\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 101
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for digit in x.to_string().chars().take(shift as usize) {\n\
    \        match digit {\n            '0' => s.push_str(&format!(\"{}{}\", carry,\
    \ digit)),\n            '1' => s.push_str(&format!(\"{}{}1\", carry, digit)),\n\
    \            _ => s.push_str(&format!(\"{}{}\", carry, digit)),\n        }\n \
    \       carry = 0;\n    }\n    if carry > 0 {\n        s.push_str(&format!(\"\
    {}\", carry));\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"01100\"`,\n right: `\"001\"`', /tmp/tmpep7awm5h.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749014
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % 10;\n        remainder = remainder / 10;\n        digits.push(digit.to_string());\n\
    \    }\n    digits.push(digits[digits.len() - shift].to_string());\n    digits\n\
    }\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpywsftiqu.rs:14:21\n   |\n\
    14 |         digits.push(digit.to_string());\n   |                     ^^^^^^^^^^^^^^^^^\
    \ expected `char`, found struct `String`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpywsftiqu.rs:16:39\n   |\n16 |     digits.push(digits[digits.len()\
    \ - shift].to_string());\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpywsftiqu.rs:16:37\n   |\n16 |     digits.push(digits[digits.len()\
    \ - shift].to_string());\n   |                                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpywsftiqu.rs:16:17\n   |\n16 |     digits.push(digits[digits.len()\
    \ - shift].to_string());\n   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let mut digit = x.len() - shift as usize;\n        if digit\
    \ < 0 {\n            digit = 0;\n        }\n        s.push((x >> digit) as char);\n\
    \        shift -= digit;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpvt06nl25.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpvt06nl25.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpvt06nl25.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - shift as usize;\n   |                           ^^^ method not found\
    \ in `isize`\n\nerror[E0604]: only `u8` can be cast as `char`, not `isize`\n \
    \ --> /tmp/tmpvt06nl25.rs:19:16\n   |\n19 |         s.push((x >> digit) as char);\n\
    \   |                ^^^^^^^^^^^^^^^^^^^^ invalid cast\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0599, E0604.\n\
    For more information about an error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[digits.len()\
    \ - 1 - i];\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxdzyxm4f.rs:12:41\n   |\n\
    12 |         s += &digits[digits.len() - 1 - i];\n   |                       \
    \                  ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `usize`\n  --> /tmp/tmpxdzyxm4f.rs:12:39\n   |\n12 |         s\
    \ += &digits[digits.len() - 1 - i];\n   |                                    \
    \   ^ no implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0277]: the type `String` cannot be\
    \ indexed by `usize`\n  --> /tmp/tmpxdzyxm4f.rs:12:15\n   |\n12 |         s +=\
    \ &digits[digits.len() - 1 - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - 1) - i];\n    }\n    s += &digits[(digits.len() - 1) - shift];\n    s\n}\n\
    \nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppx_pvfbe.rs:12:43\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |                     \
    \                      ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmppx_pvfbe.rs:12:41\n   |\n12 | \
    \        s += &digits[(digits.len() - 1) - i];\n   |                         \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppx_pvfbe.rs:12:15\n   |\n\
    12 |         s += &digits[(digits.len() - 1) - i];\n   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppx_pvfbe.rs:14:39\n\
    \   |\n14 |     s += &digits[(digits.len() - 1) - shift];\n   |              \
    \                         ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmppx_pvfbe.rs:14:37\n   |\n\
    14 |     s += &digits[(digits.len() - 1) - shift];\n   |                     \
    \                ^ no implementation for `usize - isize`\n   |\n   = help: the\
    \ trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmppx_pvfbe.rs:14:11\n   |\n\
    14 |     s += &digits[(digits.len() - 1) - shift];\n   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749012
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        s += &digits[(digits.len()\
    \ - i) % digits.len()];\n    }\n    s + digits.reverse()\n}\n\nfn main() {\n \
    \   let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpolif8ny5.rs:12:38\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                            ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot subtract `isize` from `usize`\n  --> /tmp/tmpolif8ny5.rs:12:36\n   |\n\
    12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |          \
    \                          ^ no implementation for `usize - isize`\n   |\n   =\
    \ help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpolif8ny5.rs:12:15\n\
    \   |\n12 |         s += &digits[(digits.len() - i) % digits.len()];\n   |   \
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented for\
    \ `String`\n\nerror[E0599]: no method named `reverse` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmpolif8ny5.rs:14:16\n   |\n14 |     s + digits.reverse()\n\
    \   |                ^^^^^^^ help: there is an associated function with a similar\
    \ name: `reserve`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    for i\
    \ in 0..shift {\n        s += x.to_string();\n        x = x >> 1;\n    }\n   \
    \ s += x.to_string();\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdj7y99ao.rs:11:14\n   |\n\
    11 |         s += x.to_string();\n   |              ^^^^^^^^^^^^^\n   |      \
    \        |\n   |              expected `&str`, found struct `String`\n   |   \
    \           help: consider borrowing here: `&x.to_string()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdj7y99ao.rs:14:10\n   |\n14 |     s += x.to_string();\n\
    \   |          ^^^^^^^^^^^^^\n   |          |\n   |          expected `&str`,\
    \ found struct `String`\n   |          help: consider borrowing here: `&x.to_string()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749011
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_string().chars().take(shift) {\n        let d\
    \ = d + carry;\n        carry = d / 10;\n        s += d.to_string();\n    }\n\
    \    if carry > 0 {\n        s += &format!(\"{}\", carry);\n    }\n    s\n}\n\n\
    fn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1h1ai0z8.rs:11:42\n   |\n\
    11 |     for &d in x.to_string().chars().take(shift) {\n   |                 \
    \                         ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n11 |     for &d in x.to_string().chars().take(shift.try_into().unwrap())\
    \ {\n   |                                          ~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp1h1ai0z8.rs:11:9\n   |\n11 | \
    \    for &d in x.to_string().chars().take(shift) {\n   |         ^^    ---------------------------------\
    \ this expression has type `char`\n   |         |\n   |         expected `char`,\
    \ found reference\n   |\n   = note:   expected type `char`\n           found reference\
    \ `&_`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    for i in 0..shift {\n        digits = digits[..digits.len()\
    \ - i];\n    }\n    for i in 0..digits.len() {\n        s += digits[i];\n    }\n\
    \    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1c6t46b7.rs:12:42\n   |\n\
    12 |         digits = digits[..digits.len() - i];\n   |                      \
    \                    ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmp1c6t46b7.rs:12:40\n   |\n12 | \
    \        digits = digits[..digits.len() - i];\n   |                          \
    \              ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1c6t46b7.rs:12:18\n   |\n12 |         digits = digits[..digits.len()\
    \ - i];\n   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                  |\n   |                  expected\
    \ struct `String`, found `str`\n\nerror[E0277]: the type `String` cannot be indexed\
    \ by `usize`\n  --> /tmp/tmp1c6t46b7.rs:15:14\n   |\n15 |         s += digits[i];\n\
    \   |              ^^^^^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.digits() {\n        let digit = d.to_digit(10);\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s.push((digit % 10).to_string());\n    }\n    if carry > 0 {\n        s.push((carry\
    \ % 10).to_string());\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digits` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp74ke_o2a.rs:11:17\n   |\n11 |     for &d in x.digits()\
    \ {\n   |                 ^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp74ke_o2a.rs:18:16\n   |\n18 |         s.push((carry\
    \ % 10).to_string());\n   |                ^^^^^^^^^^^^^^^^^^^^^^^^ expected `char`,\
    \ found struct `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut result = String::new();\n    let\
    \ mut remainder = x;\n    let mut shift = shift % 10;\n    while shift != 0 {\n\
    \        remainder *= 10;\n        remainder += shift % 10;\n        shift /=\
    \ 10;\n    }\n    while remainder != 0 {\n        result.push(remainder % 10);\n\
    \        remainder /= 10;\n    }\n    result.reverse();\n    result\n}\n\nfn main()\
    \ {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100, 2), String::from(\"\
    001\"));\n    assert_eq!(candidate(12, 2), String::from(\"12\"));\n    assert_eq!(candidate(97,\
    \ 8), String::from(\"79\"));\n    assert_eq!(candidate(12, 1), String::from(\"\
    21\"));\n    assert_eq!(candidate(11, 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpthtamqfd.rs:18:21\n   |\n\
    18 |         result.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0599]: no method named `reverse` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmpthtamqfd.rs:21:12\n\
    \   |\n21 |     result.reverse();\n   |            ^^^^^^^ help: there is an associated\
    \ function with a similar name: `reserve`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > s.len() {\n            s.push_str(&x.to_string());\n     \
    \       break;\n        }\n        let mut digit = x.remainder(10);\n        x.quotient(10);\n\
    \        if digit == 0 {\n            s.push_str(&s.to_string());\n          \
    \  break;\n        }\n        s.push_str(&digit.to_string());\n        shift -=\
    \ s.len();\n    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n\
    \    assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_wm8m87e.rs:11:20\n   |\n\
    11 |         if shift > s.len() {\n   |                    ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n11 |         if shift > s.len().try_into().unwrap()\
    \ {\n   |                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0599]: no method\
    \ named `remainder` found for type `isize` in the current scope\n  --> /tmp/tmp_wm8m87e.rs:15:27\n\
    \   |\n15 |         let mut digit = x.remainder(10);\n   |                   \
    \        ^^^^^^^^^ method not found in `isize`\n\nerror[E0599]: no method named\
    \ `quotient` found for type `isize` in the current scope\n  --> /tmp/tmp_wm8m87e.rs:16:11\n\
    \   |\n16 |         x.quotient(10);\n   |           ^^^^^^^^ method not found\
    \ in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_wm8m87e.rs:22:18\n\
    \   |\n22 |         shift -= s.len();\n   |                  ^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from\
    \ `isize`\n  --> /tmp/tmp_wm8m87e.rs:22:15\n   |\n22 |         shift -= s.len();\n\
    \   |               ^^ no implementation for `isize -= usize`\n   |\n   = help:\
    \ the trait `SubAssign<usize>` is not implemented for `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    let mut\
    \ carry = 0;\n    for &d in x.to_digits() {\n        let digit = d.unwrap();\n\
    \        let digit = digit + carry % 10;\n        carry = digit / 10;\n      \
    \  s += digit.to_string();\n    }\n    if carry > 0 {\n        s += carry.to_string();\n\
    \    }\n    s\n}\n\nfn main() {\n    let candidate = circular_shift;\n    assert_eq!(candidate(100,\
    \ 2), String::from(\"001\"));\n    assert_eq!(candidate(12, 2), String::from(\"\
    12\"));\n    assert_eq!(candidate(97, 8), String::from(\"79\"));\n    assert_eq!(candidate(12,\
    \ 1), String::from(\"21\"));\n    assert_eq!(candidate(11, 101), String::from(\"\
    11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `to_digits` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmp73o4ojvw.rs:11:17\n   |\n11 |     for &d in x.to_digits()\
    \ {\n   |                 ^^^^^^^^^ method not found in `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp73o4ojvw.rs:18:14\n   |\n18 |         s += carry.to_string();\n\
    \   |              ^^^^^^^^^^^^^^^^^\n   |              |\n   |              expected\
    \ `&str`, found struct `String`\n   |              help: consider borrowing here:\
    \ `&carry.to_string()`\n\nerror: aborting due to 2 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0599.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut digits = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        digits.push(remainder\
    \ % 10);\n        remainder = remainder / 10;\n    }\n    if shift > digits.len()\
    \ {\n        digits.extend(digits.chars().enumerate().map(|(_, digit)| {\n   \
    \         digits[shift..].to_string() + digit.to_string()\n        }).collect());\n\
    \    } else {\n        digits.extend(digits.chars().enumerate().map(|(_, digit)|\
    \ {\n            digit.to_string() + digits[shift..].to_string()\n        }).collect());\n\
    \    }\n    digits\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6t5l6p78.rs:12:21\n   |\n\
    12 |         digits.push(remainder % 10);\n   |                     ^^^^^^^^^^^^^^\
    \ expected `char`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6t5l6p78.rs:15:16\n\
    \   |\n15 |     if shift > digits.len() {\n   |                ^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n15 |     if shift > digits.len().try_into().unwrap()\
    \ {\n   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the\
    \ type `String` cannot be indexed by `RangeFrom<isize>`\n  --> /tmp/tmp6t5l6p78.rs:17:13\n\
    \   |\n17 |             digits[shift..].to_string() + digit.to_string()\n   |\
    \             ^^^^^^^^^^^^^^^ `String` cannot be indexed by `RangeFrom<isize>`\n\
    \   |\n   = help: the trait `Index<RangeFrom<isize>>` is not implemented for `String`\n\
    \nerror[E0277]: the type `String` cannot be indexed by `RangeFrom<isize>`\n  -->\
    \ /tmp/tmp6t5l6p78.rs:21:33\n   |\n21 |             digit.to_string() + digits[shift..].to_string()\n\
    \   |                                 ^^^^^^^^^^^^^^^ `String` cannot be indexed\
    \ by `RangeFrom<isize>`\n   |\n   = help: the trait `Index<RangeFrom<isize>>`\
    \ is not implemented for `String`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749013
- exit_code: 1
  program: "/// Circular shift the digits of the integer x, shift the digits right\
    \ by shift\n/// and return the result as a string.\n/// If shift > number of digits,\
    \ return digits reversed.\n/// >>> circular_shift(12, 1)\n/// String::from(\"\
    21\")\n/// >>> circular_shift(12, 2)\n/// String::from(\"12\")\nfn circular_shift(x:\
    \ isize, shift: isize) -> String {\n    let mut s = String::new();\n    loop {\n\
    \        if shift > x.len() {\n            s.reverse();\n            return s;\n\
    \        }\n        let mut digit = x.len() - shift as usize;\n        if digit\
    \ < 0 {\n            digit = 0;\n        }\n        s += &x[digit];\n        shift\
    \ -= digit;\n    }\n}\n\nfn main() {\n    let candidate = circular_shift;\n  \
    \  assert_eq!(candidate(100, 2), String::from(\"001\"));\n    assert_eq!(candidate(12,\
    \ 2), String::from(\"12\"));\n    assert_eq!(candidate(97, 8), String::from(\"\
    79\"));\n    assert_eq!(candidate(12, 1), String::from(\"21\"));\n    assert_eq!(candidate(11,\
    \ 101), String::from(\"11\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpy5s_ulob.rs:11:22\n   |\n11 |         if shift > x.len()\
    \ {\n   |                      ^^^ method not found in `isize`\n\nerror[E0599]:\
    \ no method named `reverse` found for struct `String` in the current scope\n \
    \ --> /tmp/tmpy5s_ulob.rs:12:15\n   |\n12 |             s.reverse();\n   |   \
    \            ^^^^^^^ help: there is an associated function with a similar name:\
    \ `reserve`\n\nerror[E0599]: no method named `len` found for type `isize` in the\
    \ current scope\n  --> /tmp/tmpy5s_ulob.rs:15:27\n   |\n15 |         let mut digit\
    \ = x.len() - shift as usize;\n   |                           ^^^ method not found\
    \ in `isize`\n\nerror[E0608]: cannot index into a value of type `isize`\n  -->\
    \ /tmp/tmpy5s_ulob.rs:19:15\n   |\n19 |         s += &x[digit];\n   |        \
    \       ^^^^^^^^\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0599, E0608.\nFor more information about an error, try\
    \ `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749013
