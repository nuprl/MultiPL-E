name: HumanEval_79_decimal_to_binary
language: rs
prompt: "/// You will be given a number in decimal form and your task is to convert\
  \ it to\n/// binary format. The function should return a string, with each character\
  \ representing a binary\n/// number. Each character in the string will be '0' or\
  \ '1'.\n/// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n/// The extra characters are there to help with the\
  \ format.\n/// Examples:\n/// >>> decimal_to_binary(15)\n/// String::from(\"db1111db\"\
  )\n/// >>> decimal_to_binary(32)\n/// String::from(\"db100000db\")\nfn decimal_to_binary(decimal:\
  \ isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = decimal_to_binary;\n    assert_eq!(candidate(0),\
  \ String::from(\"db0db\"));\n    assert_eq!(candidate(32), String::from(\"db100000db\"\
  ));\n    assert_eq!(candidate(103), String::from(\"db1100111db\"));\n    assert_eq!(candidate(15),\
  \ String::from(\"db1111db\"));\n}\n"
completions: ["    let mut binary = String::new();\n    let mut decimal_remainder\
    \ = decimal;\n    let mut decimal_quotient = decimal;\n    while decimal_quotient\
    \ > 0 {\n        binary.push((decimal_quotient % 2) as char);\n        decimal_quotient\
    \ /= 2;\n    }\n    binary.push((decimal_remainder % 2) as char);\n    binary",
  "    let mut result = String::new();\n    let mut remainder = decimal;\n    while\
    \ remainder > 0 {\n        remainder %= 2;\n        result.push(remainder);\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut remainder\
    \ = decimal;\n    while remainder > 0 {\n        let remainder: isize = remainder\
    \ % 2;\n        result.push(remainder as char);\n        remainder = remainder\
    \ / 2;\n    }\n    result", "    let mut result = String::new();\n    let mut\
    \ remainder = decimal;\n    while remainder > 0 {\n        let remainder = remainder\
    \ % 2;\n        result.push(remainder);\n        remainder = remainder / 2;\n\
    \    }\n    result", "    let mut binary = String::new();\n    let mut decimal_to_binary\
    \ = decimal.to_bits();\n    binary.push_str(\"db\");\n    while decimal_to_binary.is_power_of_two()\
    \ {\n        binary.push_str(&format!(\"{:0>b}\", decimal_to_binary));\n     \
    \   decimal_to_binary >>= 1;\n    }\n    binary.push_str(&format!(\"{:0>b}\",\
    \ decimal_to_binary));\n    binary", "    let mut result = String::new();\n  \
    \  let mut remainder = decimal;\n    while remainder > 0 {\n        let remainder_str\
    \ = format!(\"{}\", remainder).to_string();\n        result.push(remainder_str[0]);\n\
    \        remainder -= 1;\n    }\n    result", "    let mut binary = String::new();\n\
    \    let mut remainder = decimal;\n    while remainder > 0 {\n        let remainder_bin\
    \ = remainder % 2;\n        binary.push(remainder_bin.to_string());\n        remainder\
    \ = remainder / 2;\n    }\n    binary.push(\"db\".to_string());\n    binary",
  "    let mut result = String::new();\n    let mut remainder = decimal;\n    while\
    \ remainder > 0 {\n        let remainder = remainder % 2;\n        result.push(remainder);\n\
    \        remainder = remainder >> 1;\n    }\n    result.push(remainder);\n   \
    \ result", "    let mut result = String::new();\n    let mut remainder = decimal;\n\
    \    while remainder > 0 {\n        let remainder = remainder % 2;\n        result.push(remainder);\n\
    \        remainder = remainder / 2;\n    }\n    result", "    let mut binary =\
    \ String::new();\n    let mut remainder = decimal;\n    while remainder > 0 {\n\
    \        let remainder_str = format!(\"{}\", remainder).to_string();\n       \
    \ let mut remainder_bin = String::new();\n        for &b in remainder_str.chars()\
    \ {\n            if b == '1' {\n                remainder_bin.push('0');\n   \
    \         } else {\n                remainder_bin.push('1');\n            }\n\
    \        }\n        binary.push(remainder_bin);\n        remainder = remainder\
    \ % 2;\n    }\n    binary.push(\"db\");\n    binary", "    let mut result = String::new();\n\
    \    let mut remainder = decimal;\n    while remainder > 0 {\n        remainder\
    \ %= 2;\n        result.push(remainder as char);\n    }\n    result", "    let\
    \ mut result = String::new();\n    let mut remainder = decimal;\n    while remainder\
    \ > 0 {\n        let mut remainder_str = remainder as String;\n        remainder_str.insert(0,\
    \ remainder_str[remainder_str.len() - 1]);\n        remainder_str.insert(0, b'0');\n\
    \        remainder_str.insert(0, b'1');\n        result.insert(0, remainder_str);\n\
    \        remainder -= 1;\n    }\n    result", "    let mut result = String::new();\n\
    \    let mut remainder = decimal;\n    while remainder > 0 {\n        let remainder\
    \ = remainder % 2;\n        result.push(remainder);\n        remainder = remainder\
    \ >> 1;\n    }\n    result", "    let mut binary = String::new();\n    let mut\
    \ decimal_remainder = decimal;\n    let mut decimal_quotient = decimal;\n    let\
    \ mut binary_remainder = decimal;\n    let mut binary_quotient = decimal;\n  \
    \  while decimal_quotient > 0 {\n        binary_quotient /= 2;\n        binary_remainder\
    \ %= 2;\n        binary.push((binary_quotient as u8).to_string());\n        binary_quotient\
    \ = binary_remainder;\n        binary_remainder = decimal_quotient;\n        decimal_quotient\
    \ /= 10;\n    }\n    binary.push((decimal_quotient as u8).to_string());\n    binary.push((binary_remainder\
    \ as u8).to_string());\n    binary", "    let mut result = String::new();\n  \
    \  let mut remainder = decimal;\n    while remainder > 0 {\n        let mut remainder_binary\
    \ = remainder % 2;\n        remainder /= 2;\n        result.push(remainder_binary.to_string());\n\
    \    }\n    result", "    let mut result = String::new();\n    let mut remainder\
    \ = decimal;\n    while remainder > 0 {\n        let remainder2 = remainder %\
    \ 2;\n        result.push(remainder2);\n        remainder = remainder / 2;\n \
    \   }\n    result", "    let mut result = String::new();\n    let mut remainder\
    \ = decimal;\n    while remainder > 0 {\n        let remainder = remainder % 2;\n\
    \        result.push(remainder);\n        remainder = remainder / 2;\n    }\n\
    \    result", "    let mut binary = String::new();\n    let mut remainder = decimal;\n\
    \    while remainder > 0 {\n        let remainder_bin = remainder % 2;\n     \
    \   remainder /= 2;\n        binary.push(remainder_bin.to_string());\n    }\n\
    \    binary.push(\"db\".to_string());\n    binary", "    let mut binary = String::new();\n\
    \    let mut decimal_remainder = decimal;\n    let mut decimal_remainder_binary\
    \ = String::new();\n    while decimal_remainder > 0 {\n        let remainder =\
    \ decimal_remainder % 2;\n        decimal_remainder_binary.push(remainder);\n\
    \        decimal_remainder /= 2;\n    }\n    binary.push_str(&decimal_remainder_binary);\n\
    \    binary.push_str(\"db\");\n    binary", "    let mut result = String::new();\n\
    \    let mut remainder = decimal;\n    while remainder > 0 {\n        let mut\
    \ remainder_bin = remainder % 2;\n        remainder /= 2;\n        result.push(remainder_bin.to_string());\n\
    \    }\n    result"]
stop_tokens:
- "\n}"
