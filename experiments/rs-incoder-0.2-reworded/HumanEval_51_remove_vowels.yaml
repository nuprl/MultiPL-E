name: HumanEval_51_remove_vowels
language: rs
prompt: "/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n///\
  \ >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>>\
  \ remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"\
  aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"\
  ))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
  )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\"\
  )), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")),\
  \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"\
  cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"\
  ));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n\
  }\n"
completions: ['    text.chars().filter(|c| !c.is_vowel()).collect()', "    let mut\
    \ result = String::from(\"\");\n    for ch in text.chars() {\n        if !is_vowel(ch)\
    \ {\n            result.push_str(&ch.to_string());\n        } else {\n       \
    \     result.push_str(&ch);\n        }\n    }\n    result", "    let mut vowels\
    \ = HashSet::new();\n    vowels.insert(String::from(\"a\"));\n    vowels.insert(String::from(\"\
    e\"));\n    vowels.insert(String::from(\"i\"));\n    vowels.insert(String::from(\"\
    o\"));\n    vowels.insert(String::from(\"u\"));\n    vowels.insert(String::from(\"\
    A\"));\n    vowels.insert(String::from(\"E\"));\n    vowels.insert(String::from(\"\
    I\"));\n    vowels.insert(String::from(\"O\"));\n    vowels.insert(String::from(\"\
    U\"));\n\n    let mut result = String::new();\n    for c in text.chars() {\n \
    \       if !vowels.contains(&c) {\n            result.push(c);\n        }\n  \
    \  }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for ch in\
    \ text.chars() {\n        if !vowels.contains(&ch.to_string()) {\n           \
    \ result.push_str(&ch.to_string());\n        }\n    }\n    result", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::new();\n\
    \    for ch in text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase())\
    \ {\n            result.push_str(&ch.to_ascii_lowercase());\n        } else {\n\
    \            result.push_str(&ch);\n        }\n    }\n    result", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase())\
    \ {\n            result.push_str(&ch.to_string());\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_punctuation())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()"]
stop_tokens:
- "\n}"
