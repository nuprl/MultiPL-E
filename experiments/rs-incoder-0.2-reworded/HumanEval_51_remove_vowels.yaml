name: HumanEval_51_remove_vowels
language: rs
prompt: "/// remove_vowels is a function that takes string and returns string without\
  \ vowels.\n/// >>> remove_vowels(String::from(\"\"))\n/// String::from(\"\")\n///\
  \ >>> remove_vowels(String::from(\"abcdef\"))\n/// String::from(\"bcdf\")\n/// >>>\
  \ remove_vowels(String::from(\"aaaaa\"))\n/// String::from(\"\")\n/// >>> remove_vowels(String::from(\"\
  aaBAA\"))\n/// String::from(\"B\")\n/// >>> remove_vowels(String::from(\"zbcd\"\
  ))\n/// String::from(\"zbcd\")\nfn remove_vowels(text: String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = remove_vowels;\n    assert_eq!(candidate(String::from(\"\
  \")), String::from(\"\"));\n    assert_eq!(candidate(String::from(\"abcdef\nghijklm\"\
  )), String::from(\"bcdf\nghjklm\"));\n    assert_eq!(candidate(String::from(\"fedcba\"\
  )), String::from(\"fdcb\"));\n    assert_eq!(candidate(String::from(\"eeeee\")),\
  \ String::from(\"\"));\n    assert_eq!(candidate(String::from(\"acBAA\")), String::from(\"\
  cB\"));\n    assert_eq!(candidate(String::from(\"EcBOO\")), String::from(\"cB\"\
  ));\n    assert_eq!(candidate(String::from(\"ybcd\")), String::from(\"ybcd\"));\n\
  }\n"
completions: ['    text.chars().filter(|c| !c.is_vowel()).collect()', "    let mut\
    \ result = String::from(\"\");\n    for ch in text.chars() {\n        if !is_vowel(ch)\
    \ {\n            result.push_str(&ch.to_string());\n        } else {\n       \
    \     result.push_str(&ch);\n        }\n    }\n    result", "    let mut vowels\
    \ = HashSet::new();\n    vowels.insert(String::from(\"a\"));\n    vowels.insert(String::from(\"\
    e\"));\n    vowels.insert(String::from(\"i\"));\n    vowels.insert(String::from(\"\
    o\"));\n    vowels.insert(String::from(\"u\"));\n    vowels.insert(String::from(\"\
    A\"));\n    vowels.insert(String::from(\"E\"));\n    vowels.insert(String::from(\"\
    I\"));\n    vowels.insert(String::from(\"O\"));\n    vowels.insert(String::from(\"\
    U\"));\n\n    let mut result = String::new();\n    for c in text.chars() {\n \
    \       if !vowels.contains(&c) {\n            result.push(c);\n        }\n  \
    \  }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for ch in\
    \ text.chars() {\n        if !vowels.contains(&ch.to_string()) {\n           \
    \ result.push_str(&ch.to_string());\n        }\n    }\n    result", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::new();\n\
    \    for ch in text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase())\
    \ {\n            result.push_str(&ch.to_ascii_lowercase());\n        } else {\n\
    \            result.push_str(&ch);\n        }\n    }\n    result", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for ch in text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase())\
    \ {\n            result.push_str(&ch.to_string());\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_punctuation())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   let mut result = String::new();\n    let mut vowels = vec!['A', 'B', 'C',\
    \ 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',\
    \ 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    for c in text.chars() {\n        if\
    \ !vowels.contains(c) {\n            result.push(c);\n        }\n    }\n    result",
  '    text.chars().filter(|c| !is_vowel(c)).collect()', '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result", '    text.chars().filter(|c| !is_vowel(c)).collect()', '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut\
    \ result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_control())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  \
    \  vowels.sort();\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !vowels.contains(&ch.to_lowercase()) {\n            result.push(ch);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n  \
    \      .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .collect::<String>()", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    let mut result = String::new();\n    let mut iter = text.chars().enumerate();\n\
    \    for (i, c) in iter.next() {\n        if !vowels.contains(&c.to_string())\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    vowels.sort();\n    let mut result\
    \ = String::new();\n    for ch in text.chars() {\n        if vowels.contains(ch)\
    \ {\n            result.push(*ch);\n        } else {\n            result.push(ch);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n  \
    \  vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for ch in\
    \ text.chars() {\n        if !vowels.contains(&ch.to_ascii_lowercase()) {\n  \
    \          result.push_str(&ch.to_ascii_lowercase());\n        }\n    }\n    result",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"));\n    vowels.insert(String::from(\"e\"));\n    vowels.insert(String::from(\"\
    i\"));\n    vowels.insert(String::from(\"o\"));\n    vowels.insert(String::from(\"\
    u\"));\n\n    let mut result = String::from(\"\");\n    for ch in text.chars()\
    \ {\n        if !vowels.contains(&ch) {\n            result.push_str(&ch);\n \
    \       }\n    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n  \
    \  for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars().filter_map(|c| {\n        if\
    \ c.is_uppercase() {\n            Some(c.to_lowercase())\n        } else {\n \
    \           None\n        }\n    }).collect()", "    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    vowels.sort();\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if !vowels.contains(c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    let mut result = String::from(text);\n  \
    \  for ch in text.chars() {\n        if !is_vowel(ch) {\n            result.push(ch);\n\
    \        }\n    }\n    result", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ text.chars().filter_map(|c| {\n        if c.is_uppercase() {\n            Some(c.to_lowercase())\n\
    \        } else {\n            None\n        }\n    }).filter(|c| !is_vowel(c)).collect()",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::new();\n    for c in text.chars() {\n        if\
    \ !vowels.contains(c) {\n            result.push(c);\n        }\n    }\n    result",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n  \
    \      .collect()", "    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect::<String>()", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"), 1);\n    vowels.insert(String::from(\"e\"), 1);\n    vowels.insert(String::from(\"\
    i\"), 1);\n    vowels.insert(String::from(\"o\"), 1);\n    vowels.insert(String::from(\"\
    u\"), 1);\n    vowels.insert(String::from(\"A\"), 1);\n    vowels.insert(String::from(\"\
    E\"), 1);\n    vowels.insert(String::from(\"I\"), 1);\n    vowels.insert(String::from(\"\
    O\"), 1);\n    vowels.insert(String::from(\"U\"), 1);\n    vowels.insert(String::from(\"\
    0\"), 1);\n    vowels.insert(String::from(\"1\"), 1);\n    vowels.insert(String::from(\"\
    2\"), 1);\n    vowels.insert(String::from(\"3\"), 1);\n    vowels.insert(String::from(\"\
    4\"), 1);\n    vowels.insert(String::from(\"5\"), 1);\n    vowels.insert(String::from(\"\
    6\"), 1);\n    vowels.insert(String::from(\"7\"), 1);\n    vowels.insert(String::from(\"\
    8\"), 1);\n    vowels.insert(String::from(\"9\"), 1);\n    vowels.insert(String::from(\"\
    !\"), 1);\n    vowels.insert(String::from(\"?\"), 1);\n    vowels.insert(String::from(\"\
    (\"), 1);\n    vowels.insert(String::from(\")\"), 1);\n    vowels.insert(String::from(\"\
    ,\"), 1);\n    vowels.insert(String::from(\".\"), 1);\n    vowels.insert(String::from(\"\
    :\"), 1);\n    vowels.insert(String::from(\";\"), 1);\n    vowels.insert(String::from(\"\
    <\"), 1);\n    vowels.insert(String::from(\"=\"), 1);\n    vowels.insert(String::from(\"\
    >\"), 1);\n    vowels.insert(String::from(\"[\"), 1);\n    vowels.insert(String::from(\"\
    ]\"), 1);\n    vowels.insert(String::from(\"{\"), 1);\n    vowels.insert(String::from(\"\
    }\"), 1);\n    vowels.insert(String::from(\"$\"), 1);\n    vowels.insert(String::from(\"\
    %\"), 1);\n    vowels.insert(String::from(\"^\"), 1);\n    vowels.insert(String::from(\"\
    &\"), 1);\n    vowels.insert(String::from(\"*\"), 1);\n    vowels.insert(String::from(\"\
    (\"), 1);\n    vowels.insert(String::from(\")\"), 1);\n", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::from(\"\");\n\
    \    for c in text.chars() {\n        if !vowels.contains(c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "  \
    \  text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect::<String>()",
  '    text.chars().filter(|c| !is_vowel(c)).collect()', "    let mut vowels = vec![\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    let mut result = String::new();\n    for\
    \ c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ text.chars()\n        .filter(|c| c.is_uppercase())\n        .filter(|c| !c.is_lowercase())\n\
    \        .filter(|c| !c.is_digit())\n        .filter(|c| !c.is_punctuation())\n\
    \        .filter(|c| !c.is_whitespace())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ {\n            Some(c.to_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = HashSet::new();\n    vowels.insert(String::from(\"\
    a\"));\n    vowels.insert(String::from(\"e\"));\n    vowels.insert(String::from(\"\
    i\"));\n    vowels.insert(String::from(\"o\"));\n    vowels.insert(String::from(\"\
    u\"));\n    vowels.insert(String::from(\"A\"));\n    vowels.insert(String::from(\"\
    E\"));\n    vowels.insert(String::from(\"I\"));\n    vowels.insert(String::from(\"\
    O\"));\n    vowels.insert(String::from(\"U\"));\n    text.chars().filter(|c| vowels.contains(&c.to_string())).collect()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", '    text.chars().filter(|c| !c.is_ascii_lowercase()).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| c.is_uppercase())\n        .filter(|c| !c.is_lowercase())\n\
    \        .filter(|c| !c.is_digit())\n        .filter(|c| !c.is_punctuation())\n\
    \        .filter(|c| !c.is_whitespace())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| c.is_uppercase())\n\
    \        .filter(|c| !c.is_lowercase())\n        .filter(|c| !c.is_digit())\n\
    \        .filter(|c| !c.is_punctuation())\n        .filter(|c| !c.is_whitespace())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .collect::<String>()", "    let mut result = String::new();\n    let\
    \ mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n    let mut vowels_set = HashSet::new();\n\
    \    for ch in text.chars() {\n        if vowels.contains(&ch) {\n           \
    \ vowels_set.insert(ch);\n        }\n    }\n    for ch in vowels_set.keys() {\n\
    \        result.append(&ch);\n    }\n    result", "    let mut vowels = vec!['a',\
    \ 'e', 'i', 'o', 'u'];\n    vowels.sort();\n    let mut result = String::new();\n\
    \    for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_newline())\n\
    \        .filter(|c| !c.is_ascii_control())\n        .filter(|c| !c.is_ascii_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_ascii_tilde())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.is_ascii_ascii_backslash())\n\
    \        .filter(|c| !c.is_ascii_ascii_formfeed())\n        .filter(|c| !c.is_ascii_ascii_return())\n\
    \        .filter(|c| !c.is_ascii_ascii_newline())\n        .filter(|c| !c.", " \
    \   text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "  \
    \  text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n\
    \        .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::from(\"\");\n    for c in text.chars() {\n     \
    \   if !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n\
    \    result", "    let mut result = String::from(text);\n    for c in text.chars()\
    \ {\n        if !is_vowel(c) {\n            result.push(c);\n        }\n    }\n\
    \    result", '    text.chars().filter(|c| !c.is_vowel()).collect()', "    let\
    \ mut result = String::new();\n    for c in text.chars() {\n        if !is_vowel(c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", "    let mut\
    \ vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let\
    \ mut result = String::new();\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", "    let mut vowels\
    \ = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n    let mut\
    \ result = String::from(\"\");\n    for c in text.chars() {\n        if !vowels.contains(&c)\
    \ {\n            result.push(c);\n        }\n    }\n    result", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !is_vowel(c))\n  \
    \      .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n   \
    \     .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", '    text.chars().filter(|c| !c.is_vowel()).collect()',
  "    text.chars()\n        .filter(|c| !is_vowel(c))\n        .collect()", "   \
    \ text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .map(|c| c.to_string())\n        .collect()", "    text.chars().filter_map(|c|\
    \ match c {\n        'a' .. 'z' => Some(c as char),\n        _ => None,\n    }).collect()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars().filter_map(|c| match c {\n        'a'\
    \ => Some('e'),\n        'e' => Some('i'),\n        'i' => Some('o'),\n      \
    \  'o' => Some('u'),\n        'u' => Some('y'),\n        'y' => Some(''),\n  \
    \      _ => None,\n    }).collect()", "    text.chars().filter_map(|c| {\n   \
    \     if c.is_uppercase() {\n            Some(c.to_lowercase())\n        } else\
    \ {\n            None\n        }\n    }).collect()", "    text.chars()\n     \
    \   .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !is_vowel(c))\n \
    \       .collect()", '    text.chars().filter(|c| !is_vowel(c)).collect()', " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = vec!['a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z', 'a'..'z',\
    \ 'a'..'z', 'a'..'z", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| c.is_alphabetic())\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", "    text.chars()\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_control_character())\n\
    \        .filter(|c| !c.is_ascii_printable())\n        .collect::<String>()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| c.is_alphabetic())\n\
    \        .filter(|c| !c.is_vowel())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    let mut vowels =\
    \ HashSet::new();\n    vowels.insert(b'a', b'e', b'i', b'o', b'u');\n    vowels.insert(b'b',\
    \ b'c', b'd', b'f');\n    vowels.insert(b'z', b'y', b'w');\n    text.chars().filter(|c|\
    \ vowels.contains(c)).collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .filter(|c| !c.is_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_print())\n        .filter(|c| !c.is_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_punctuation())\n        .filter(|c| !c.is_ascii_ascii_graph())\n\
    \        .filter(|c| !c.is_ascii_ascii_print())\n        .filter(|c| !c.is_ascii_ascii_control())\n\
    \        .filter(|c| !c.is_ascii_ascii_symbol())\n        .filter(|c| !c.is_ascii_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_ascii_lowercase())\n        .filter(|c| !c.is_ascii_ascii_uppercase())\n\
    \        .collect::<String>()", '    text.chars().filter(|c| !c.is_vowel()).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .collect()", "    let\
    \ mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"u\"];\n    vowels.sort();\n\
    \    let mut result = String::from(\"\");\n    for c in text.chars() {\n     \
    \   if !vowels.contains(&c) {\n            result.push(c);\n        }\n    }\n\
    \    result", '    text.chars().filter(|c| !is_vowel(c)).collect()', "    text.chars().filter_map(|c|\
    \ match c {\n        'a' .. 'z' => Some(c as char),\n        _ => None,\n    }).collect()",
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars().filter_map(|c| {\n        if c.is_uppercase()\
    \ {\n            Some(c.to_lowercase())\n        } else {\n            None\n\
    \        }\n    }).collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .filter(|c| !c.is_ascii_whitespace())\n        .map(|c| c.to_ascii_lowercase())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    let mut vowels = vec!['a', 'e', 'i', 'o', 'u'];\n \
    \   vowels.sort();\n    let mut result = String::new();\n    for ch in text.chars()\
    \ {\n        if !vowels.contains(&ch.to_ascii_lowercase()) {\n            result.push(*ch);\n\
    \        }\n    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n  \
    \  for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars().filter_map(|c| {\n        if\
    \ c.is_uppercase() {\n            Some(c.to_lowercase())\n        } else {\n \
    \           None\n        }\n    })\n        .filter(|c| !c.is_uppercase())\n\
    \        .collect()", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(&c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    let mut vowels = vec![\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    vowels.sort();\n    let mut result = String::new();\n    for c in text.chars()\
    \ {\n        if !vowels.contains(c) {\n            result.push(c);\n        }\n\
    \    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect::<String>()", '    text.chars().filter(|c| !is_vowel(c)).collect()',
  "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_letter())\n      \
    \  .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .map(|c| c.to_ascii_lowercase())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_digit())\n        .filter(|c| !c.is_ascii_letter())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .collect()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", "    text.chars()\n \
    \       .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c| !c.is_ascii_uppercase())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_symbol())\n        .filter(|c| !c.is_ascii_whitespace())\n\
    \        .collect::<String>()", "    let mut vowels = vec![\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    vowels.sort();\n    let mut result = String::new();\n  \
    \  for c in text.chars() {\n        if !vowels.contains(&c) {\n            result.push(c);\n\
    \        }\n    }\n    result", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", " \
    \   text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n        .filter(|c|\
    \ !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n       \
    \ .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", "    text.chars()\n\
    \        .filter(|c| !is_vowel(c))\n        .collect()", '    text.chars().filter(|c|
    !is_vowel(c)).collect()', "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .filter(|c| !c.is_ascii_symbol())\n\
    \        .collect()", "    text.chars()\n        .filter(|c| !c.is_ascii_lowercase())\n\
    \        .filter(|c| !c.is_ascii_uppercase())\n        .filter(|c| !c.is_ascii_digit())\n\
    \        .filter(|c| !c.is_ascii_letter())\n        .collect::<String>()", " \
    \   let mut result = String::new();\n    for c in text.chars() {\n        if !is_vowel(c)\
    \ {\n            result.push(c);\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
