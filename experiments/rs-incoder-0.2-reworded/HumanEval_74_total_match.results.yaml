name: HumanEval_74_total_match
language: rs
results:
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = vec![];\n    for x in lst1 {\n        for y in lst2 {\n            if x.len()\
    \ < y.len() {\n                total_chars.push(y);\n                break;\n\
    \            }\n        }\n    }\n    total_chars\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmpayyltm_r.rs:21:18\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |  \
    \       for y in lst2 {\n    |                  ^^^^ `lst2` moved due to this\
    \ implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst2`\nhelp:\
    \ consider iterating over a slice of the `Vec<String>`'s content to avoid moving\
    \ into the `for` loop\n    |\n21  |         for y in &lst2 {\n    |          \
    \        +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_len = 0;\n    for s in lst1 {\n        total_len += s.len();\n\
    \    }\n    for s in lst2 {\n        total_len += s.len();\n    }\n    if total_len\
    \ == 0 {\n        return vec![];\n    }\n    if total_len == lst1.len() {\n  \
    \      return lst1;\n    }\n    if total_len == lst2.len() {\n        return lst2;\n\
    \    }\n    let mut total_len = 0;\n    for s in lst1 {\n        total_len +=\
    \ s.len();\n    }\n    for s in lst2 {\n        total_len += s.len();\n    }\n\
    \    if total_len == 0 {\n        return vec![];\n    }\n    if total_len == lst1.len()\
    \ {\n        return lst1;\n    }\n    if total_len == lst2.len() {\n        return\
    \ lst2;\n    }\n    let mut total_len = 0;\n    for s in lst1 {\n        total_len\
    \ += s.len();\n    }\n    for s in lst2 {\n        total_len += s.len();\n   \
    \ }\n    if total_len == 0 {\n        return vec![];\n    }\n    if total_len\
    \ == lst1.len() {\n        return lst1;\n    }\n    if total_len == lst2.len()\
    \ {\n        return lst2;\n    }\n    let mut total_len = 0;\n    for s in lst1\
    \ {\n        total_len += s.len();\n    }\n    for s in lst2 {\n        total_len\
    \ += s.len();\n    }\n    if total_len == 0 {\n        return vec![];\n    }\n\
    \    if total_len == lst1.len() {\n        return lst1;\n    }\n    if total_len\
    \ == lst2.len() {\n        return lst2;\n    }\n    let mut total_len = 0;\n \
    \   for s in lst1 {\n        total_len += s.len();\n    }\n    for s in lst2 {\n\
    \        total_len += s.len();\n    }\n    if total_len == 0 {\n        return\
    \ vec![];\n    }\n    if total_len == lst1.len() {\n        return lst1;\n   \
    \ }\n    if total_len == lst2.len() {\n        return lst2;\n    }\n    let mut\
    \ total_len = 0;\n    for s in lst1 {\n        total_len += s.len();\n    }\n\
    \    for s in lst2 {\n        total_len += s.len();\n    }\n    if total_len ==\
    \ 0 {\n        return vec![];\n    }\n    if total_len == lst1.len() {\n     \
    \   return lst1;\n    }\n    if total_len == lst2.len() {\n        return lst2;\n\
    \    }\n    let mut total_len = 0;\n    for s in lst1 {\n        total_len +=\
    \ s.len();\n    }\n    for s in lst2 {\n        total_len += s.len();\n    }\n\
    \    if total_len == 0 {\n        return vec!\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp2__6373j.rs:134:3\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                                                   \
    \  - unclosed delimiter\n...\n119 |     if total_len == 0 {\n    |           \
    \            - this delimiter might not be properly closed...\n120 |         return\
    \ vec!\n121 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n134 | }\n    |   ^\n\nerror: expected one of `(`, `[`, or `{`, found `}`\n\
    \   --> /tmp/tmp2__6373j.rs:121:1\n    |\n120 |         return vec!\n    |   \
    \                 - expected one of `(`, `[`, or `{`\n121 | }\n    | ^ unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2__6373j.rs:15:57\n \
    \  |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |    -----------                                          ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_match:\
    \ Vec<String> = vec![];\n    for x in lst1 {\n        if lst2.iter().any(|y| y.contains(&x))\
    \ {\n            total_match.push(x);\n        }\n    }\n    total_match\n}\n\n\
    fn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[\"hi\", \"admin\"]`,\n right: `[\"hi\", \"hi\"]`', /tmp/tmp90qhij2l.rs:31:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = lst1.len();\n    for elem in lst2 {\n        total_chars += elem.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for elem in lst2 {\n        total_chars +=\
    \ elem.len();\n    }\n    if total_chars == lst1.len() {\n        return lst1;\n\
    \    }\n    let mut total_chars = lst1.len();\n    for elem in lst2 {\n      \
    \  total_chars += elem.len();\n    }\n    if total_chars == lst1.len() {\n   \
    \     return lst1;\n    }\n    let mut total_chars = lst1.len();\n    for elem\
    \ in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars ==\
    \ lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_chars = lst1.len();\n\
    \    for elem in lst2 {\n        total_chars += elem.len();\n    }\n    if total_chars\
    \ == lst1.len() {\n        return lst1;\n    }\n    let mut total_\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n   --> /tmp/tmpfndp9yfe.rs:103:19\n   \
    \ |\n103 |     let mut total_\n    |                   ^ help: add `;` here\n\
    104 | }\n    | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfndp9yfe.rs:15:57\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |    -----------                                          ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    if lst1.len()\
    \ > lst2.len() {\n        lst1.reverse();\n    }\n    lst1.iter().zip(lst2.iter()).filter(|&(a,\
    \ b)| a < b).collect()\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `(&String, &String)`\n    --> /tmp/tmpukf8p42y.rs:22:58\n\
    \     |\n22   |     lst1.iter().zip(lst2.iter()).filter(|&(a, b)| a < b).collect()\n\
    \     |                                                          ^^^^^^^ value\
    \ of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=(&String,\
    \ &String)>`\n     |\n     = help: the trait `FromIterator<(&String, &String)>`\
    \ is not implemented for `Vec<String>`\n     = help: the trait `FromIterator<T>`\
    \ is implemented for `Vec<T>`\nnote: required by a bound in `collect`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_match:\
    \ Vec<String> = vec![];\n    for el1 in lst1 {\n        for el2 in lst2 {\n  \
    \          if el1.len() < el2.len() {\n                total_match.push(el1);\n\
    \                break;\n            }\n        }\n    }\n    total_match\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmpzd1npvqc.rs:21:20\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |  \
    \       for el2 in lst2 {\n    |                    ^^^^ `lst2` moved due to this\
    \ implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst2`\nhelp:\
    \ consider iterating over a slice of the `Vec<String>`'s content to avoid moving\
    \ into the `for` loop\n    |\n21  |         for el2 in &lst2 {\n    |        \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_match:\
    \ Vec<String> = vec![];\n    for el1 in lst1 {\n        for el2 in lst2 {\n  \
    \          if el1.len() < el2.len() {\n                total_match.push(el1);\n\
    \                break;\n            }\n        }\n    }\n    total_match\n}\n\
    \nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmput5zrwfx.rs:21:20\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |  \
    \       for el2 in lst2 {\n    |                    ^^^^ `lst2` moved due to this\
    \ implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst2`\nhelp:\
    \ consider iterating over a slice of the `Vec<String>`'s content to avoid moving\
    \ into the `for` loop\n    |\n21  |         for el2 in &lst2 {\n    |        \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n    }\n\
    \    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let mut\
    \ total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n        total_chars += v.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for v in lst2 {\n\n}\n\nfn main() {\n   \
    \ let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpdu5x5fzy.rs:119:3\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                                                   \
    \  - unclosed delimiter\n...\n104 |     for v in lst2 {\n    |               \
    \    - this delimiter might not be properly closed...\n105 | \n106 | }\n    |\
    \ - ...as it matches this but it has different indentation\n...\n119 | }\n   \
    \ |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdu5x5fzy.rs:15:57\n \
    \  |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |    -----------                                          ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    if lst1.len()\
    \ > lst2.len() {\n        lst1.reverse();\n    }\n    if lst2.len() > lst1.len()\
    \ {\n        lst2.reverse();\n    }\n    let mut result = vec![];\n    for i in\
    \ 0..lst1.len() {\n        let mut count = 0;\n        for j in 0..lst2.len()\
    \ {\n            if lst1[i] == lst2[j] {\n                count += 1;\n      \
    \      }\n        }\n        if count > lst1.len() {\n            result.push(lst1[i]);\n\
    \        }\n    }\n    if result.len() == 0 {\n        result\n    } else {\n\
    \        result\n    }\n}\n\nfn main() {\n    let candidate = total_match;\n \
    \   assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0596]: cannot borrow `lst1` as mutable, as it is not declared as\
    \ mutable\n  --> /tmp/tmpy5ol2zaw.rs:20:9\n   |\n15 | fn total_match(lst1: Vec<String>,\
    \ lst2: Vec<String>) -> Vec<String> {\n   |                ---- help: consider\
    \ changing this to be mutable: `mut lst1`\n...\n20 |         lst1.reverse();\n\
    \   |         ^^^^^^^^^^^^^^ cannot borrow as mutable\n\nerror[E0596]: cannot\
    \ borrow `lst2` as mutable, as it is not declared as mutable\n  --> /tmp/tmpy5ol2zaw.rs:23:9\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |                                   ---- help: consider changing this\
    \ to be mutable: `mut lst2`\n...\n23 |         lst2.reverse();\n   |         ^^^^^^^^^^^^^^\
    \ cannot borrow as mutable\n\nerror[E0507]: cannot move out of index of `Vec<String>`\n\
    \  --> /tmp/tmpy5ol2zaw.rs:34:25\n   |\n34 |             result.push(lst1[i]);\n\
    \   |                         ^^^^^^^ move occurs because value has type `String`,\
    \ which does not implement the `Copy` trait\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0507, E0596.\nFor more information\
    \ about an error, try `rustc --explain E0507`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = vec![];\n    for el1 in lst1 {\n        for el2 in lst2 {\n            if\
    \ el1.len() < el2.len() {\n                total_chars.push(el1);\n          \
    \      break;\n            }\n        }\n    }\n    total_chars\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmpp11fnkle.rs:21:20\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |  \
    \       for el2 in lst2 {\n    |                    ^^^^ `lst2` moved due to this\
    \ implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst2`\nhelp:\
    \ consider iterating over a slice of the `Vec<String>`'s content to avoid moving\
    \ into the `for` loop\n    |\n21  |         for el2 in &lst2 {\n    |        \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_match:\
    \ Vec<String> = vec![];\n    for x in lst1 {\n        for y in lst2 {\n      \
    \      if x.len() < y.len() {\n                total_match.push(x);\n        \
    \        break;\n            }\n        }\n    }\n    total_match\n}\n\nfn main()\
    \ {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmpvrf8ma1g.rs:21:18\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n21  |  \
    \       for y in lst2 {\n    |                  ^^^^ `lst2` moved due to this\
    \ implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst2`\nhelp:\
    \ consider iterating over a slice of the `Vec<String>`'s content to avoid moving\
    \ into the `for` loop\n    |\n21  |         for y in &lst2 {\n    |          \
    \        +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_len = 0;\n    for s in lst1 {\n        total_len += s.len();\n\
    \    }\n    for s in lst2 {\n        total_len += s.len();\n    }\n    if total_len\
    \ == 0 {\n        return vec![];\n    }\n    let mut total_matches: Vec<String>\
    \ = vec![];\n    for s in lst1 {\n        if total_len < s.len() {\n         \
    \   break;\n        }\n        total_matches.push(s);\n    }\n    for s in lst2\
    \ {\n        if total_len < s.len() {\n            break;\n        }\n       \
    \ total_matches.push(s);\n    }\n    total_matches\n}\n\nfn main() {\n    let\
    \ candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst1`\n   --> /tmp/tmp28vp2e9c.rs:27:14\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                ---- move occurs because `lst1` has type `Vec<String>`,\
    \ which does not implement the `Copy` trait\n16  |     let mut total_len = 0;\n\
    17  |     for s in lst1 {\n    |              ---- `lst1` moved due to this implicit\
    \ call to `.into_iter()`\n...\n27  |     for s in lst1 {\n    |              ^^^^\
    \ value used here after move\n    |\nnote: this function takes ownership of the\
    \ receiver `self`, which moves `lst1`\nhelp: consider iterating over a slice of\
    \ the `Vec<String>`'s content to avoid moving into the `for` loop\n    |\n17 \
    \ |     for s in &lst1 {\n    |              +\n\nerror[E0382]: use of moved value:\
    \ `lst2`\n  --> /tmp/tmp28vp2e9c.rs:33:14\n   |\n15 | fn total_match(lst1: Vec<String>,\
    \ lst2: Vec<String>) -> Vec<String> {\n   |                                  \
    \ ---- move occurs because `lst2` has type `Vec<String>`, which does not implement\
    \ the `Copy` trait\n...\n20 |     for s in lst2 {\n   |              ---- `lst2`\
    \ moved due to this implicit call to `.into_iter()`\n...\n33 |     for s in lst2\
    \ {\n   |              ^^^^ value used here after move\n   |\nhelp: consider iterating\
    \ over a slice of the `Vec<String>`'s content to avoid moving into the `for` loop\n\
    \   |\n20 |     for s in &lst2 {\n   |              +\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = vec![0; lst1.len()];\n    for x in lst1 {\n        for y in lst2 {\n     \
    \       if x.len() < y.len() {\n                total_chars[x.len()] += 1;\n \
    \           }\n        }\n    }\n    total_chars\n}\n\nfn main() {\n    let candidate\
    \ = total_match;\n    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()),\
    \ Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"hi\"),\
    \ String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\")]),\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjxbpvttp.rs:27:5\n   |\n\
    15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n \
    \  |                                                         ----------- expected\
    \ `Vec<String>` because of return type\n...\n27 |     total_chars\n   |     ^^^^^^^^^^^\
    \ expected struct `String`, found integer\n   |\n   = note: expected struct `Vec<String>`\n\
    \              found struct `Vec<{integer}>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_match:\
    \ Vec<String> = vec![];\n    for i in 0..lst1.len() {\n        let mut j = 0;\n\
    \        while j < lst2.len() && lst1[i].chars().all(|c| c < lst2[j].chars().max())\
    \ {\n            j += 1\n        }\n        total_match.push(lst1[i]);\n    }\n\
    \    total_match\n}\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf64zlp8v.rs:22:61\n   |\n\
    22 |         while j < lst2.len() && lst1[i].chars().all(|c| c < lst2[j].chars().max())\
    \ {\n   |                                                             ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `char`, found enum `Option`\n   |\n   = note: expected type `char`\n\
    \              found enum `Option<char>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_len\
    \ = 0;\n    for el in lst1 {\n        total_len += el.len();\n    }\n    let mut\
    \ total_len2 = 0;\n    for el in lst2 {\n        total_len2 += el.len();\n   \
    \ }\n    if total_len == total_len2 {\n        return lst1;\n    }\n    let mut\
    \ total_len = total_len;\n    for el in lst2 {\n        total_len -= el.len();\n\
    \    }\n    let mut total_len2 = total_len2;\n    for el in lst1 {\n        total_len2\
    \ -= el.len();\n    }\n    if total_len == total_len2 {\n        return lst1;\n\
    \    }\n    let mut total_len = total_len;\n    for el in lst2 {\n        total_len\
    \ -= el.len();\n    }\n    let mut total_len2 = total_len2;\n    for el in lst1\
    \ {\n        total_len2 -= el.len();\n    }\n    if total_len == total_len2 {\n\
    \        return lst1;\n    }\n    let mut total_len = total_len;\n    for el in\
    \ lst2 {\n        total_len -= el.len();\n    }\n    let mut total_len2 = total_len2;\n\
    \    for el in lst1 {\n        total_len2 -= el.len();\n    }\n    if total_len\
    \ == total_len2 {\n        return lst1;\n    }\n    let mut total_len = total_len;\n\
    \    for el in lst2 {\n        total_len -= el.len();\n    }\n    let mut total_len2\
    \ = total_len2;\n    for el in lst1 {\n        total_len2 -= el.len();\n    }\n\
    \    if total_len == total_len2 {\n        return lst1;\n    }\n    let mut total_len\
    \ = total_len;\n    for el in lst2 {\n        total_len -= el.len();\n    }\n\
    \    let mut total_len2 = total_len2;\n    for el in lst1 {\n        total_len2\
    \ -= el.len();\n    }\n    if total_len == total_len2 {\n        return lst1;\n\
    \    }\n    let mut total_len = total_len;\n    for el in lst2 {\n        total_len\
    \ -= el.len();\n    }\n    let mut total_len2 = total_len2;\n    for el in lst1\
    \ {\n        total_len2 -= el.len();\n    }\n    if total_len == total_len2 {\n\
    \        return lst1;\n    }\n    let mut total_len = total_len;\n    for el in\
    \ lst2 {\n        total_len -= el.len();\n    }\n    let mut total_len2 = total_len2;\n\
    \    for el in lst1 {\n        total_len2 -= el.len();\n    }\n    if total_len\
    \ == total_len2 {\n        return lst\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpvpeqs2af.rs:119:3\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                                                   \
    \  - unclosed delimiter\n...\n104 |     if total_len == total_len2 {\n    |  \
    \                              - this delimiter might not be properly closed...\n\
    105 |         return lst\n106 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n119 | }\n    |   ^\n\nerror[E0425]: cannot find value `lst`\
    \ in this scope\n   --> /tmp/tmpvpeqs2af.rs:105:16\n    |\n105 |         return\
    \ lst\n    |                ^^^ help: a local variable with a similar name exists:\
    \ `lst1`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvpeqs2af.rs:15:57\n\
    \   |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |    -----------                                          ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_len\
    \ = lst1.len();\n    for i in 0..total_len {\n        if lst1[i] < lst2[i] {\n\
    \            total_len = i;\n            break;\n        }\n    }\n    lst1.iter().take(total_len).collect()\n\
    }\n\nfn main() {\n    let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&String`\n    --> /tmp/tmp3s_9_rrg.rs:26:33\n     |\n\
    26   |     lst1.iter().take(total_len).collect()\n     |                     \
    \            ^^^^^^^ value of type `Vec<String>` cannot be built from `std::iter::Iterator<Item=&String>`\n\
    \     |\n     = help: the trait `FromIterator<&String>` is not implemented for\
    \ `Vec<String>`\n     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\n\
    note: required by a bound in `collect`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n    }\n\
    \    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let mut\
    \ total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n\n}\n\nfn main() {\n   \
    \ let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpcuct50dv.rs:119:3\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                                                   \
    \  - unclosed delimiter\n...\n104 |     for s in lst2 {\n    |               \
    \    - this delimiter might not be properly closed...\n105 | \n106 | }\n    |\
    \ - ...as it matches this but it has different indentation\n...\n119 | }\n   \
    \ |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcuct50dv.rs:15:57\n \
    \  |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |    -----------                                          ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    let mut total_match: Vec<String> = Vec::new();\n    for el1 in lst1 {\n \
    \       for el2 in lst2 {\n            if el1.len() < el2.len() {\n          \
    \      total_match.push(el1);\n                break;\n            }\n       \
    \ }\n    }\n    total_match\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `lst2`\n   --> /tmp/tmp7kl80kr8.rs:18:20\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                   ---- move occurs because `lst2` has\
    \ type `Vec<String>`, which does not implement the `Copy` trait\n...\n18  |  \
    \       for el2 in lst2 {\n    |                    ^^^^ `lst2` moved due to this\
    \ implicit call to `.into_iter()`, in previous iteration of loop\n    |\nnote:\
    \ this function takes ownership of the receiver `self`, which moves `lst2`\nhelp:\
    \ consider iterating over a slice of the `Vec<String>`'s content to avoid moving\
    \ into the `for` loop\n    |\n18  |         for el2 in &lst2 {\n    |        \
    \            +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = vec![];\n    for v in lst1 {\n        total_chars.iter().filter(|&x| x < v).count();\n\
    \    }\n    for v in lst2 {\n        total_chars.iter().filter(|&x| x < v).count();\n\
    \    }\n    total_chars\n}\n\nfn main() {\n    let candidate = total_match;\n\
    \    assert_eq!(candidate(Vec::<String>::new(), Vec::<String>::new()), Vec::<String>::new());\n\
    \    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"admin\")],\
    \ vec![String::from(\"hi\"), String::from(\"hi\")]), vec![String::from(\"hi\"\
    ), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"\
    ), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"),\
    \ String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"hi\"\
    ), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"4\"\
    )], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error[E0277]: can't compare `&str` with `String`\n  --> /tmp/tmpv_j4q90a.rs:21:42\n\
    \   |\n21 |         total_chars.iter().filter(|&x| x < v).count();\n   |     \
    \                                     ^ no implementation for `&str < String`\
    \ and `&str > String`\n   |\n   = help: the trait `PartialOrd<String>` is not\
    \ implemented for `&str`\n   = help: the following other types implement trait\
    \ `PartialOrd<Rhs>`:\n             String\n             str\n\nerror[E0277]: the\
    \ size for values of type `str` cannot be known at compilation time\n  --> /tmp/tmpv_j4q90a.rs:21:28\n\
    \   |\n21 |         total_chars.iter().filter(|&x| x < v).count();\n   |     \
    \                       ^^^^^^ doesn't have a size known at compile-time\n   |\n\
    \   = help: the trait `Sized` is not implemented for `str`\n   = help: the trait\
    \ `Iterator` is implemented for `std::slice::Iter<'a, T>`\n   = note: required\
    \ because of the requirements on the impl of `Iterator` for `std::slice::Iter<'_,\
    \ str>`\n\nerror[E0277]: the size for values of type `str` cannot be known at\
    \ compilation time\n  --> /tmp/tmpv_j4q90a.rs:21:9\n   |\n21 |         total_chars.iter().filter(|&x|\
    \ x < v).count();\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `str`\nnote: required by a bound in `std::slice::Iter`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpv_j4q90a.rs:21:21\n    |\n21  |         total_chars.iter().filter(|&x|\
    \ x < v).count();\n    |                     ^^^^ doesn't have a size known at\
    \ compile-time\n    |\n    = help: the trait `Sized` is not implemented for `str`\n\
    note: required by a bound in `core::slice::<impl [T]>::iter`\n\nerror[E0277]:\
    \ the size for values of type `str` cannot be known at compilation time\n   -->\
    \ /tmp/tmpv_j4q90a.rs:19:27\n    |\n19  |     let mut total_chars = vec![];\n\
    \    |                           ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `str`\nnote: required\
    \ by a bo"
  exit_code: 1
  status: SyntaxError
- program: "/// Write a function that accepts two vectors of strings and returns the\
    \ vector that has \n/// total number of chars in the all strings of the vector\
    \ less than the other vector.\n/// if the two vectors have the same number of\
    \ chars, return the first vector.\n/// Examples\n/// >>> total_match(vec![], vec![])\n\
    /// vec![]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"Hi\")])\n/// vec![String::from(\"\
    hI\"), String::from(\"Hi\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hi\"), String::from(\"hi\"), String::from(\"admin\"\
    ), String::from(\"project\")])\n/// vec![String::from(\"hi\"), String::from(\"\
    admin\")]\n/// >>> total_match(vec![String::from(\"hi\"), String::from(\"admin\"\
    )], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")])\n\
    /// vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hi\")]\n///\
    \ >>> total_match(vec![String::from(\"4\")], vec![String::from(\"1\"), String::from(\"\
    2\"), String::from(\"3\"), String::from(\"4\"), String::from(\"5\")])\n/// vec![String::from(\"\
    4\")]\nfn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String> {\n\
    \    if lst1.len() == lst2.len() {\n        return lst1;\n    }\n    let mut total_chars\
    \ = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n    }\n\
    \    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let mut\
    \ total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n        total_chars += s.len();\n\
    \    }\n    if total_chars == lst1.len() {\n        return lst1;\n    }\n    let\
    \ mut total_chars = lst1.len();\n    for s in lst2 {\n\n}\n\nfn main() {\n   \
    \ let candidate = total_match;\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ Vec::<String>::new()), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    )]), vec![String::from(\"hi\"), String::from(\"hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hi\"), String::from(\"hi\"\
    ), String::from(\"admin\"), String::from(\"project\")]), vec![String::from(\"\
    hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    4\")], vec![String::from(\"1\"), String::from(\"2\"), String::from(\"3\"), String::from(\"\
    4\"), String::from(\"5\")]), vec![String::from(\"4\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"Hi\"\
    )]), vec![String::from(\"hI\"), String::from(\"Hi\")]);\n    assert_eq!(candidate(vec![String::from(\"\
    hi\"), String::from(\"admin\")], vec![String::from(\"hI\"), String::from(\"hi\"\
    ), String::from(\"hi\")]), vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"\
    hi\")]);\n    assert_eq!(candidate(vec![String::from(\"hi\"), String::from(\"\
    admin\")], vec![String::from(\"hI\"), String::from(\"hi\"), String::from(\"hii\"\
    )]), vec![String::from(\"hi\"), String::from(\"admin\")]);\n    assert_eq!(candidate(Vec::<String>::new(),\
    \ vec![String::from(\"this\")]), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
    this\")], Vec::<String>::new()), Vec::<String>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpk2jkmrwk.rs:119:3\n\
    \    |\n15  | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n    |                                                                   \
    \  - unclosed delimiter\n...\n104 |     for s in lst2 {\n    |               \
    \    - this delimiter might not be properly closed...\n105 | \n106 | }\n    |\
    \ - ...as it matches this but it has different indentation\n...\n119 | }\n   \
    \ |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk2jkmrwk.rs:15:57\n \
    \  |\n15 | fn total_match(lst1: Vec<String>, lst2: Vec<String>) -> Vec<String>\
    \ {\n   |    -----------                                          ^^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<String>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
