language: rs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    a +\
    \ b + c == 2 * a + b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmpqk5s0rk8.rs:12:16\n\
    \   |\n12 |         (a, b) = (b, a)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror[E0658]:\
    \ destructuring assignments are unstable\n  --> /tmp/tmpqk5s0rk8.rs:15:16\n  \
    \ |\n15 |         (b, c) = (c, b)\n   |         ------ ^\n   |         |\n   |\
    \         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror[E0658]:\
    \ destructuring assignments are unstable\n  --> /tmp/tmpqk5s0rk8.rs:18:16\n  \
    \ |\n18 |         (c, a) = (a, c)\n   |         ------ ^\n   |         |\n   |\
    \         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if b > c {\n        (b,\
    \ c) = (c, b)\n    }\n    if c > a {\n        (c, a) = (a, c)\n    }\n    a +\
    \ b + c == 2 * a + b + c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmpqk5s0rk8.rs:12:16\n\
    \   |\n12 |         (a, b) = (b, a)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror[E0658]:\
    \ destructuring assignments are unstable\n  --> /tmp/tmpqk5s0rk8.rs:15:16\n  \
    \ |\n15 |         (b, c) = (c, b)\n   |         ------ ^\n   |         |\n   |\
    \         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror[E0658]:\
    \ destructuring assignments are unstable\n  --> /tmp/tmpqk5s0rk8.rs:18:16\n  \
    \ |\n18 |         (c, a) = (a, c)\n   |         ------ ^\n   |         |\n   |\
    \         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - c) - (c - a) * (b - a) >= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpwui72aeh.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b;\n    let mut b = b < a + c ? b : a;\n\
    \    let mut c = c < a + b ? c : a;\n    \n    if a + b > c {\n        a = b;\n\
    \        b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n        a =\
    \ c;\n        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n      \
    \  b = c;\n        c = a;\n        a = b;\n    }\n    \n    a == b + c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpwupzrcmi.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b;\n\
    \   |                             ^ expected one of `.`, `;`, `?`, `else`, or\
    \ an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    if a > b {\n        a = b;\n        b = c;\n        c = a;\n    }\n    if\
    \ b > c {\n        b = c;\n        c = a;\n        a = b;\n    }\n    if c > a\
    \ {\n        c = a;\n        a = b;\n        b = c;\n    }\n    a == b == c\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpdb58uv5o.rs:29:7\n\
    \   |\n29 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n29 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdb58uv5o.rs:29:15\n   |\n29 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if c > a {\n        c = a;\n        a = b;\n\
    \        b = c;\n    }\n    \n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpfxhs4pah.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        a = a - 360;\n        b = b - 360;\n    }\n    if a >\
    \ c {\n        a = a - 360;\n        c = c - 360;\n    }\n    if b > c {\n   \
    \     b = b - 360;\n        c = c - 360;\n    }\n    if a + b > c {\n        a\
    \ = a - 360;\n        b = b - 360;\n        c = c - 360;\n    }\n    if a + c\
    \ > b {\n        a = a - 360;\n        c = c - 360;\n        b = b - 360;\n  \
    \  }\n    if b + c > a {\n        b = b - 360;\n        c = c - 360;\n       \
    \ a = a - 360;\n    }\n    if a + b + c > 180 {\n        a = a - 360;\n      \
    \  b = b - 360;\n        c = c - 360;\n    }\n    a == b == c\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmprohxl7gs.rs:46:7\n\
    \   |\n46 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n46 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprohxl7gs.rs:46:15\n   |\n46 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    loop {\n        if a\
    \ == b {\n            return c == b;\n        }\n        if a == c {\n       \
    \     return b == c;\n        }\n        if b == c {\n            return a ==\
    \ b;\n        }\n        \n        a -= b;\n        b -= c;\n        c -= a;\n\
    \    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpo9jnrek9.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n  \
    \      return false;\n    }\n    if b + c > a {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsq0o8ufb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a + b > c {\n        a = c;\n        b = a\
    \ - b;\n    }\n    \n    if a + c > b {\n        a = b;\n        c = a - c;\n\
    \    }\n    \n    if b + c > a {\n        b = c;\n        c = b - c;\n    }\n\
    \    \n    if a + b + c > 0 {\n        return true;\n    }\n    \n    return false;\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmphq68f978.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || c + b > a || a + c > b || b + c > a || a + b + c > 3\
    \ {\n        return false;\n    }\n    let mut sum = 0;\n    for &i in &[a, b,\
    \ c] {\n        sum += i;\n    }\n    if sum == 0 {\n        return false;\n \
    \   }\n    let mut sum_square = 0;\n    for &i in &[a, b, c] {\n        sum_square\
    \ += i * i;\n    }\n    if sum_square == 0 {\n        return false;\n    }\n \
    \   let mut product = a as isize;\n    for &i in &[b, c, a] {\n        product\
    \ *= i;\n    }\n    if product == 0 {\n        return false;\n    }\n    let mut\
    \ discriminant = b * b - 4 * a * c;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant /= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n    }\n    discriminant *= 2;\n    if discriminant < 0 {\n        return\
    \ false;\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpjpub53h0.rs:142:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n124 |     if discriminant < 0 {\n    |                     \
    \    - this delimiter might not be properly closed...\n...\n127 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n142 | }\n    |   ^\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpjpub53h0.rs:10:58\n   |\n10 | fn\
    \ right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |    --------------------\
    \                                  ^^^^ expected `bool`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n  \
    \      return false;\n    }\n    if b + c > a {\n        return false;\n    }\n\
    \    return true;\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpsq0o8ufb.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - a) * (c - a) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpzcbq1ssx.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * c - b * b;\n    if det < 0 {\n        det = -det;\n    }\n    det\
    \ /= 2;\n    if det < 0 {\n        return false;\n    }\n    let mut a = a / 2;\n\
    \    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut det = a * c - b *\
    \ b;\n    if det < 0 {\n        det = -det;\n    }\n    det /= 2;\n    if det\
    \ < 0 {\n        return false;\n    }\n    return true;\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpeaml5_6p.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a + b > c {\n        a = c;\n        b = a;\n\
    \        c = a;\n    }\n    \n    if a + c > b {\n        a = b;\n        c =\
    \ a;\n        b = a;\n    }\n    \n    if b + c > a {\n        b = c;\n      \
    \  c = b;\n        a = b;\n    }\n    \n    a + b + c == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpejx8n79_.rs:11:25\n   |\n11 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c =\
    \ a + b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ a;\n        b = b + c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a + c;\n    }\n    \n    a == b == c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp24_odyzg.rs:33:7\n\
    \   |\n33 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n33 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp24_odyzg.rs:33:15\n   |\n33 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * c - b * b;\n    if det < 0 {\n        det = -det;\n        a = -a;\n\
    \        b = -b;\n        c = -c;\n    }\n    let mut is_right_angle = false;\n\
    \    if det > 0 {\n        is_right_angle = true;\n    }\n    else if det < 0\
    \ {\n        is_right_angle = false;\n    }\n    else if b != c {\n        is_right_angle\
    \ = true;\n    }\n    else if b == c {\n        is_right_angle = true;\n    }\n\
    \    else if b == a {\n        is_right_angle = true;\n    }\n    else if a ==\
    \ c {\n        is_right_angle = true;\n    }\n    else if a == b {\n        is_right_angle\
    \ = true;\n    }\n    return is_right_angle;\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpy3is8ri2.rs:52:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    let mut d = b - a;\n    let mut e = c - a;\n    let\
    \ mut f = d - e;\n    let mut g = e - b;\n    let mut h = f - g;\n    let mut\
    \ i = g - c;\n    let mut j = h - a; \n    let mut k = i - j;\n    let mut l =\
    \ j - a;\n    \n    if k == l && j == i && h == k {\n        return true;\n  \
    \  }\n    \n    if k == l && j == i && h != k {\n        return false;\n    }\n\
    \    \n    if k == l && j != i && h != k {\n        return false;\n    }\n   \
    \ \n    if k == l && j != i && h == k {\n        return false;\n    }\n    \n\
    \    if k == l && j == i && h == k {\n        return false;\n    }\n    \n   \
    \ if k == l && j == i && h != k {\n        return false;\n    }\n    \n    if\
    \ k == l && j != i && h != k {\n        return false;\n    }\n    \n    if k ==\
    \ l && j != i && h == k {\n        return false;\n    }\n    \n    if k == l &&\
    \ j == i && h != k {\n        return false;\n    }\n    \n    if k == l && j ==\
    \ i && h == k {\n        return false;\n    }\n    \n    if k == l && j != i &&\
    \ h != k {\n        return false;\n    }\n    \n    if k == l && j != i && h ==\
    \ k {\n        return false;\n    }\n    \n    if k == l && j != i && h != k {\n\
    \        return false;\n    }\n    \n    if k == l && j == i && h != k {\n   \
    \     return false;\n    }\n    \n    if k == l && j == i && h == k {\n      \
    \  return false;\n    }\n    \n    if k == l && j != i && h != k {\n        return\
    \ false;\n    }\n    \n    if k == l && j != i && h == k {\n        return false;\n\
    \    }\n    \n    if k == l && j != i && h != k {\n        return false;\n   \
    \ }\n    \n    if k == l && j == i && h != k {\n        return false;\n    }\n\
    \    \n    if k == l && j == i && h == k {\n        return false;\n    }\n   \
    \ \n    if k == \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpoj1ops8r.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    \n    while\
    \ a > 0 && b > 0 && c > 0 {\n        if a > b {\n            if a > c {\n    \
    \            return true;\n            }\n            c -= a;\n            a -=\
    \ b;\n            b -= c;\n        } else {\n            if b > c {\n        \
    \        return true;\n            }\n            c -= b;\n            b -= a;\n\
    \            a -= c;\n        }\n    }\n    \n    false\n}\n\nfn main() {\n  \
    \  let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpu__hjago.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if c > a {\n        c = a;\n        a = b;\n\
    \        b = c;\n    }\n    \n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpfxhs4pah.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a > b {\n        a = b;\n        b = c;\n \
    \       c = a;\n    }\n    \n    if b > c {\n        b = c;\n        c = a;\n\
    \        a = b;\n    }\n    \n    if c > a {\n        c = a;\n        a = b;\n\
    \        b = c;\n    }\n    \n    a == b == c\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpfxhs4pah.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: -1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n        }\n\
    \        if b > c {\n            b -= c;\n        }\n        if c > a {\n    \
    \        c -= a;\n        }\n    }\n    a == 0 && b == 0 && c == 0 // all are\
    \ equal\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659747436
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut sum = 0;\n    while a > b {\n        sum += a;\n        a /= 2;\n\
    \    }\n    while b > c {\n        sum += b;\n        b /= 2;\n    }\n    while\
    \ c > a {\n        sum += c;\n        c /= 2;\n    }\n    sum == a || sum == b\n\
    }\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp5q63muo6.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    if a + b > c {\n        a = c;\n        b = a + b;\n\
    \    }\n    if a + c > b {\n        a = b;\n        c = a + c;\n    }\n    if\
    \ b + c > a {\n        b = c;\n        c = b + c;\n    }\n    a == b + c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpapxow9_b.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b {\n        (a, b) = (b, a)\n    }\n    if a > c {\n        (a,\
    \ c) = (c, a)\n    }\n    if b > c {\n        (b, c) =(c, b)\n    }\n    a + b\
    \ > c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0658]: destructuring assignments are unstable\n  --> /tmp/tmpsyfhlgx7.rs:12:16\n\
    \   |\n12 |         (a, b) = (b, a)\n   |         ------ ^\n   |         |\n \
    \  |         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror[E0658]:\
    \ destructuring assignments are unstable\n  --> /tmp/tmpsyfhlgx7.rs:15:16\n  \
    \ |\n15 |         (a, c) = (c, a)\n   |         ------ ^\n   |         |\n   |\
    \         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror[E0658]:\
    \ destructuring assignments are unstable\n  --> /tmp/tmpsyfhlgx7.rs:18:16\n  \
    \ |\n18 |         (b, c) =(c, b)\n   |         ------ ^\n   |         |\n   |\
    \         cannot assign to this expression\n   |\n   = note: see issue #71126\
    \ <https://github.com/rust-lang/rust/issues/71126> for more information\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0658`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c =\
    \ c - b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ a;\n        b = b - c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a - c;\n    }\n    \n    a == b + c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdrcpkx4n.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut s = a + b + c;\n    if s <= 0 {\n     \
    \   return false;\n    }\n    if s == 1 {\n        return true;\n    }\n    if\
    \ s == 2 {\n        return true;\n    }\n    if s == 3 {\n        return false;\n\
    \    }\n    if s == 4 {\n        return true;\n    }\n    if s == 5 {\n      \
    \  return false;\n    }\n    if s == 6 {\n        return true;\n    }\n    if\
    \ s == 7 {\n        return false;\n    }\n    if s == 8 {\n        return true;\n\
    \    }\n    if s == 9 {\n        return false;\n    }\n    if s == 10 {\n    \
    \    return true;\n    }\n    if s == 11 {\n        return false;\n    }\n   \
    \ if s == 12 {\n        return true;\n    }\n    if s == 13 {\n        return\
    \ false;\n    }\n    if s == 14 {\n        return true;\n    }\n    if s == 15\
    \ {\n        return false;\n    }\n    if s == 16 {\n        return true;\n  \
    \  }\n    if s == 17 {\n        return false;\n    }\n    if s == 18 {\n     \
    \   return true;\n    }\n    if s == 19 {\n        return false;\n    }\n    if\
    \ s == 20 {\n        return true;\n    }\n    if s == 21 {\n        return false;\n\
    \    }\n    if s == 22 {\n        return true;\n    }\n    if s == 23 {\n    \
    \    return false;\n    }\n    if s == 24 {\n        return true;\n    }\n   \
    \ if s == 25 {\n        return false;\n    }\n    if s == 26 {\n        return\
    \ true;\n    }\n    if s == 27 {\n        return false;\n    }\n    if s == 28\
    \ {\n        return true;\n    }\n    if s == 29 {\n        return false;\n  \
    \  }\n    if s == 30 {\n        return true;\n    }\n    if s == 31 {\n      \
    \  return false;\n    }\n    if s == 32 {\n        return true;\n    }\n    if\
    \ s == 33 {\n        return false;\n    }\n    if s == 34 {\n        return true;\n\
    \    }\n    if s == 35 {\n        return false;\n    }\n    if s == 36 {\n   \
    \     return true;\n    }\n    if s == 37 {\n        return false;\n    }\n  \
    \  if s == 38 {\n        return true;\n    }\n    if s == 39 {\n        return\
    \ false;\n    }\n    if s == 40 {\n        return true;\n    }\n    if s == 41\
    \ {\n        return false;\n    }\n    if s == 42 {\n        return true;\n  \
    \  }\n    if s == 43 {\n        return false;\n    }\n    if s == 44 {\n     \
    \   return true;\n    }\n    if s == 45 {\n        return false;\n    }\n    if\
    \ s == 46 {\n        return true;\n    }\n    if s == 47 {\n        return false;\n\
    \    }\n    if s == 48 {\n        return true;\n    }\n    if s == 49 {\n    \
    \    return false;\n    }\n    if s == 50 {\n        return true;\n    }\n   \
    \ if s == 51 {\n        return false;\n    }\n    if s == 52 {\n\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp683w6r6q.rs:188:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n171 |     if s == 52 {\n    |                - this delimiter\
    \ might not be properly closed...\n172 | \n173 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n188 | }\n    |   ^\n\nerror[E0573]: expected\
    \ type, found local variable `a`\n  --> /tmp/tmp683w6r6q.rs:11:30\n   |\n11 |\
    \     let mut a = a < 0 ? -a : a;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `b`\n  --> /tmp/tmp683w6r6q.rs:12:30\n   |\n12 |     let mut\
    \ b = b < 0 ? -b : b;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0573]: expected type, found local variable\
    \ `c`\n  --> /tmp/tmp683w6r6q.rs:13:30\n   |\n13 |     let mut c = c < 0 ? -c\
    \ : c;\n   |                              ^ expecting a type here because of type\
    \ ascription\n\nerror[E0277]: the `?` operator can only be applied to values that\
    \ implement `Try`\n   --> /tmp/tmp683w6r6q.rs:11:21\n    |\n11  |     let mut\
    \ a = a < 0 ? -a : a;\n    |                     ^^^ the `?` operator cannot be\
    \ applied to type `{integer}`\n    |\n    = help: the trait `Try` is not implemented\
    \ for `{integer}`\nnote: required by `branch`\n\nerror[E0277]: the `?` operator\
    \ can only be used in a function that returns `Result` or `Option` (or another\
    \ type that implements `FromResidual`)\n   --> /tmp/tmp683w6r6q.rs:11:23\n   \
    \ |\n10  | / fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    11  | |     let mut a = a < 0 ? -a : a;\n    | |                       ^ cannot\
    \ use the `?` operator in a function that returns `bool`\n12  | |     let mut\
    \ b = b < 0 ? -b : b;\n13  | |     let mut c = c < 0 ? -c : c;\n...   |\n187 |\
    \ |     assert_eq!(candidate(2, 2, 10), false);\n188 | | }\n    | |__- this function\
    \ should return `Result` or `Option` to accept `?`\n    |\n "
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < c ? a : c;\n    let mut b = b < a ? b : a;\n    let mut\
    \ c = c < b ? c : b;\n    \n    if a + b > c {\n        a = c;\n        b = a;\n\
    \        c = a;\n    }\n    \n    if a + c > b {\n        a = b;\n        c =\
    \ a;\n        b = a;\n    }\n    \n    if b + c > a {\n        b = c;\n      \
    \  c = b;\n        a = b;\n    }\n    \n    a + b + c == c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpno956blo.rs:11:25\n   |\n11 |     let mut a = a < c ? a : c;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        if b > c {\n            a = a - 360;\n        } else\
    \ {\n            b = b - 360;\n        }\n    } else {\n        if c > b {\n \
    \           c = c - 360;\n        } else {\n            b = b - 360;\n       \
    \ }\n    }\n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_mptzjf1.rs:27:7\n\
    \   |\n27 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n27 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_mptzjf1.rs:27:15\n   |\n27 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        swap(&mut a, &mut b);\n    }\n    if a > c {\n      \
    \  swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n\
    \    }\n    a == b or a == c or b == c\n}\n\nfn main() {\n    let candidate =\
    \ right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: `or` is not a logical operator\n  --> /tmp/tmpgikxf4ef.rs:23:12\n\
    \   |\n23 |     a == b or a == c or b == c\n   |            ^^ help: use `||`\
    \ to perform logical disjunction\n   |\n   = note: unlike in e.g., python and\
    \ PHP, `&&` and `||` are used for logical operators\n\nerror: `or` is not a logical\
    \ operator\n  --> /tmp/tmpgikxf4ef.rs:23:22\n   |\n23 |     a == b or a == c or\
    \ b == c\n   |                      ^^ help: use `||` to perform logical disjunction\n\
    \   |\n   = note: unlike in e.g., python and PHP, `&&` and `||` are used for logical\
    \ operators\n\nerror[E0425]: cannot find function `swap` in this scope\n  -->\
    \ /tmp/tmpgikxf4ef.rs:15:9\n   |\n15 |         swap(&mut a, &mut b);\n   |   \
    \      ^^^^ not found in this scope\n   |\nhelp: consider importing one of these\
    \ items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n   |\n\
    \nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpgikxf4ef.rs:18:9\n\
    \   |\n18 |         swap(&mut a, &mut c);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpgikxf4ef.rs:21:9\n   |\n21 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b;\n    let mut b = b < a + c ? b : a;\n\
    \    let mut c = c < a + b ? c : a;\n    \n    if a + b > c {\n        a = b;\n\
    \        b = c;\n        c = a;\n    }\n    \n    if a + c > b {\n        a =\
    \ c;\n        c = b;\n        b = a;\n    }\n    \n    if b + c > a {\n      \
    \  b = c;\n        c = a;\n        a = b;\n    }\n    \n    a == b + c\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpwupzrcmi.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b;\n\
    \   |                             ^ expected one of `.`, `;`, `?`, `else`, or\
    \ an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a > b {\n        if b > c {\n            a = a - 360;\n            b =\
    \ b - 360;\n            c = c - 360;\n        } else {\n            a = a - 360;\n\
    \            b = b - 360;\n        }\n    } else {\n        if b > c {\n     \
    \       a = a - 360;\n            b = b - 360;\n            c = c - 360;\n   \
    \     } else {\n            a = a - 360;\n            b = b - 360;\n        }\n\
    \    }\n    a + b + c == 360\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpdqxzly85.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if a == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if b == c {\n \
    \       return false;\n    }\n    if a == b {\n        if b == c {\n         \
    \   return true;\n        }\n        return false;\n    }\n    if a == c {\n \
    \       if b == c {\n            return true;\n        }\n        return false;\n\
    \    }\n    if b == c {\n        return false;\n    }\n    if a == b {\n     \
    \   if b == c {\n            return true;\n        }\n        return false;\n\
    \    }\n    if a == c {\n        if b == c {\n            return true;\n     \
    \   }\n        return false;\n    }\n    if b == c {\n        return false;\n\
    \    }\n    if a == b {\n        if b == c {\n            return true;\n     \
    \   }\n        return false;\n    }\n    if a == c {\n        if b == c {\n  \
    \          return true;\n        }\n        return false;\n    }\n    if b ==\
    \ c {\n        return false;\n    }\n    if a == b {\n        if b == c {\n  \
    \          return true;\n        }\n        return false;\n    }\n    if a ==\
    \ c {\n        if b == c {\n            return true;\n        }\n        return\
    \ false;\n    }\n    if b == c {\n        return false;\n    }\n    if a == b\
    \ {\n        if b == c {\n            return true;\n        }\n        return\
    \ false;\n    }\n    if a == c {\n        if b == c {\n            return true;\n\
    \        }\n        return false;\n    }\n    if b == c {\n        return false;\n\
    \    }\n    if a == b {\n        if b == c {\n            return true;\n     \
    \   }\n        return false;\n    }\n    if a == c {\n        if b == c {\n  \
    \          return true;\n        }\n        return false;\n    }\n    if b ==\
    \ c {\n        return false;\n    }\n    if a == b {\n        if b == c {\n  \
    \          return true;\n        }\n        return false;\n    }\n    if a ==\
    \ c {\n        if b == c {\n            return true;\n        }\n        return\
    \ false;\n    }\n    if b == c {\n        return false;\n    }\n    if a == b\
    \ {\n        if b == c {\n            return true;\n        }\n        return\
    \ false;\n    }\n    if a == c {\n        if b == c {\n            return true;\n\
    \        }\n        return false;\n    }\n    if b == c {\n        return false;\n\
    \    }\n    if a == b {\n        if b == c {\n            return true;\n     \
    \   }\n        return false;\n    }\n    if a == c {\n        if b == c {\n  \
    \          return true;\n        }\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmprq569qr5.rs:175:3\n\
    \    |\n10  | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \    |                                                               - unclosed\
    \ delimiter\n...\n155 |     if a == c {\n    |               - this delimiter\
    \ might not be properly closed...\n...\n160 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n175 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmprq569qr5.rs:10:58\n   |\n10 | fn right_angle_triangle(a:\
    \ isize, b: isize, c: isize) -> bool {\n   |    --------------------         \
    \                         ^^^^ expected `bool`, found `()`\n   |    |\n   |  \
    \  implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    while a < b {\n        if b < c {\n          \
    \  a += 1;\n            b += 1;\n            c += 1;\n        } else {\n     \
    \       b += 1;\n            c += 1;\n        }\n    }\n    \n    a < b\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmps_qpp2pd.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut d = b - a;\n    let mut e = c - a;\n    let mut f = d - a;\n    \n\
    \    if d < 0 {\n        a = -a;\n        b = -b;\n        c = -c;\n        d\
    \ = -d;\n        e = -e;\n        f = -f;\n    }\n    \n    if e < 0 {\n     \
    \   a = -a;\n        b = -b;\n        c = -c;\n        d = -d;\n        e = -e;\n\
    \        f = -f;\n    }\n    \n    if f < 0 {\n        a = -a;\n        b = -b;\n\
    \        c = -c;\n        d = -d;\n        e = -e;\n        f = -f;\n    }\n \
    \   \n    if a == 0 && b == 0 && c == 0 && d == 0 && e == 0 && f == 0 {\n    \
    \    return true;\n    }\n    \n    if a < 0 && b < 0 && c < 0 && d < 0 && e <\
    \ 0 && f < 0 {\n        return false;\n    }\n    \n    if a < 0 && b < 0 && c\
    \ < 0 && d > 0 && e > 0 && f > 0 {\n        return false;\n    }\n    \n    if\
    \ a < 0 && b > 0 && c < 0 && d < 0 && e < 0 && f > 0 {\n        return false;\n\
    \    }\n    \n    if a < 0 && b > 0 && c > 0 && d < 0 && e > 0 && f > 0 {\n  \
    \      return false;\n    }\n    \n    if a > 0 && b < 0 && c < 0 && d < 0 &&\
    \ e < 0 && f > 0 {\n        return false;\n    }\n    \n    if a > 0 && b < 0\
    \ && c > 0 && d > 0 && e < 0 && f > 0 {\n        return false;\n    }\n    \n\
    \    if a > 0 && b > 0 && c < 0 && d > 0 && e < 0 && f > 0 {\n        return false;\n\
    \    }\n    \n    if a > 0 && b > 0 && c > 0 && d > 0 && e > 0 && f > 0 {\n  \
    \      return false;\n    }\n    \n    if a > 0 && b > 0 && c > 0 && d > 0 &&\
    \ e > 0 && f < 0 {\n        return false;\n    }\n    \n    if a > 0 && b > 0\
    \ && c > 0 && d < 0 && e > 0 && f > 0 {\n        return false;\n    }\n    \n\
    \    if a > 0 && b > 0 && c > 0 && d < 0 && e < 0 && f > 0 {\n        return false;\n\
    \    }\n    \n    if a > 0 && b > 0 && c > 0 && d < 0 && e < 0 && f < 0 {\n  \
    \      return false;\n    }\n    \n    if a > 0 && b > 0 && c < 0 && d > 0 &&\
    \ e > 0 && f > 0 {\n        return false;\n    }\n    \n    if \n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp5jy5u2hq.rs:102:1\n\
    \    |\n102 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n        }\n\
    \        if b > c {\n            b -= c;\n        }\n        if c > a {\n    \
    \        c -= a;\n        }\n    }\n    a == 0 && b == 0 && c == 0 || a == 0 &&\
    \ b > 0 && c == 0 || a == 0 && b == 0 && c > 0 || a > 0 && b == 0 && c == 0 ||\
    \ a > 0 && b > 0 && c == 0 || a > 0 && b == 0 && c > 0 || a > 0 && b > 0 && c\
    \ > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0\
    \ && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b\
    \ > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0\
    \ && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a\
    \ > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0\
    \ || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c\
    \ > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0\
    \ && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b\
    \ > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0\
    \ && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a\
    \ > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0\
    \ || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c\
    \ > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0\
    \ && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b > 0 && c > 0 || a > 0 && b\
    \ > 0 && c > 0 || a > 0 && b > 0 && c > \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpw782q6av.rs:29:1\n\
    \   |\n29 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    if a + b > c {\n        a = a - b;\n        b = c - a;\n        c =\
    \ c - b;\n    }\n    \n    if a + c > b {\n        a = a - c;\n        c = c -\
    \ a;\n        b = b - c;\n    }\n    \n    if b + c > a {\n        b = b - c;\n\
    \        c = c - b;\n        a = a - c;\n    }\n    \n    a == b == c\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmpl114u8fv.rs:33:7\n\
    \   |\n33 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n33 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl114u8fv.rs:33:15\n   |\n33 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    while a\
    \ > 0 && b > 0 && c > 0 {\n        if a > b {\n            if b > c {\n      \
    \          a -= 1;\n                b -= 1;\n                c -= 1;\n       \
    \     } else {\n                a -= 1;\n                b -= 1;\n           \
    \     c += 1;\n            }\n        } else {\n            if b > c {\n     \
    \           a -= 1;\n                b += 1;\n                c -= 1;\n      \
    \      } else {\n                a -= 1;\n                b += 1;\n          \
    \      c += 1;\n            }\n        }\n    }\n    if a > 0 && b > 0 && c >\
    \ 0 {\n        return true;\n    }\n    if a > 0 && b > 0 && c < 0 {\n       \
    \ return false;\n    }\n    if a > 0 && b < 0 && c > 0 {\n        return false;\n\
    \    }\n    if a < 0 && b > 0 && c > 0 {\n        return false;\n    }\n    if\
    \ a < 0 && b > 0 && c < 0 {\n        return true;\n    }\n    if a < 0 && b <\
    \ 0 && c > 0 {\n        return true;\n    }\n    if a < 0 && b < 0 && c < 0 {\n\
    \        return false;\n    }\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0317]: `if` may be missing an `else` clause\n  --> /tmp/tmpwbumec3r.rs:58:5\n\
    \   |\n10 |   fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n\
    \   |                                                            ---- expected\
    \ `bool` because of this return type\n...\n58 | /     if a < 0 && b < 0 && c <\
    \ 0 {\n59 | |         return false;\n60 | |     }\n   | |_____^ expected `bool`,\
    \ found `()`\n   |\n   = note: `if` expressions without `else` evaluate to `()`\n\
    \   = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || (a + b + c) == 0 {\n        return false;\n\
    \    }\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    while a > 0 && b > 0 && c > 0 {\n        if a > b {\n            a -= b;\n\
    \        }\n        if b > c {\n            b -= c;\n        }\n        if c >\
    \ a {\n            c -= a;\n        }\n    }\n    if a > b {\n        a -= b;\n\
    \    }\n    if b > c {\n        b -= c;\n    }\n    if c > a {\n        c -= a;\n\
    \    }\n    a == b == c\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: comparison operators cannot be chained\n  --> /tmp/tmp_2pxx2t5.rs:37:7\n\
    \   |\n37 |     a == b == c\n   |       ^^   ^^\n   |\nhelp: split the comparison\
    \ into two\n   |\n37 |     a == b && b == c\n   |            ++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_2pxx2t5.rs:37:15\n   |\n37 |     a == b ==\
    \ c\n   |               ^ expected `bool`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_zs5__fu.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * c - b * b;\n    if det < 0 {\n        det += 1;\n    }\n    det /=\
    \ 2;\n    if det < 0 {\n        return false;\n    }\n    let mut det = b * c\
    \ - a * c;\n    if det < 0 {\n        det += 1;\n    }\n    det /= 2;\n    if\
    \ det < 0 {\n        return false;\n    }\n    true\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmptrqjvxc4.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c {\n        return false;\n    }\n    if a + c > b {\n  \
    \      return false;\n    }\n    if b + c > a {\n        return false;\n    }\n\
    \    true\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpjk4tqepf.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || a + c > b || b + c > a {\n        return false;\n   \
    \ }\n    \n    let mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum\
    \ == 0 {\n        return true;\n    }\n    \n    let mut sum = a;\n    sum +=\
    \ b;\n    sum += c;\n    \n    if sum == 0 {\n        return false;\n    }\n \
    \   \n    let mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum ==\
    \ 0 {\n        return false;\n    }\n    \n    let mut sum = a;\n    sum += b;\n\
    \    sum += c;\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum == 0 {\n\
    \        return false;\n    }\n    \n    let mut sum = a;\n    sum += b;\n   \
    \ sum += c;\n    \n    if sum == 0 {\n        return false;\n    }\n    \n   \
    \ let mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum == 0 {\n  \
    \      return false;\n    }\n    \n    let mut sum = a;\n    sum += b;\n    sum\
    \ += c;\n    \n    if sum == 0 {\n        return false;\n    }\n    \n    let\
    \ mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum == 0 {\n      \
    \  return false;\n    }\n    \n    let mut sum = a;\n    sum += b;\n    sum +=\
    \ c;\n    \n    if sum == 0 {\n        return false;\n    }\n    \n    let mut\
    \ sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum == 0 {\n        return\
    \ false;\n    }\n    \n    let mut sum = a;\n    sum += b;\n    sum += c;\n  \
    \  \n    if sum == 0 {\n        return false;\n    }\n    \n    let mut sum =\
    \ a;\n    sum += b;\n    sum += c;\n    \n    if sum == 0 {\n        return false;\n\
    \    }\n    \n    let mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if\
    \ sum == 0 {\n        return false;\n    }\n    \n    let mut sum = a;\n    sum\
    \ += b;\n    sum += c;\n    \n    if sum == 0 {\n        return false;\n    }\n\
    \    \n    let mut sum = a;\n    sum += b;\n    sum += c;\n    \n    if sum ==\
    \ 0 {\n        return false;\n    }\n    \n    let mut sum = a;\n    sum += b;\n\
    \    sum += c;\n    \n    if sum == 0 {\n        return false;\n    }\n    \n\
    \    let mut sum = a;\n    sum += b;\n    sum += \n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmph5yv9ci9.rs:154:1\n\
    \    |\n154 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    while a > b {\n        a -= b;\n        b += c;\n        c += a;\n    }\n\
    \    while b > c {\n        b -= c;\n        c += a;\n        a += b;\n    }\n\
    \    while c > a {\n        c -= a;\n        a += b;\n        b += c;\n    }\n\
    \    a == b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n   \
    \ assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpqx0w042u.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || (a + b + c) == 0 {\n        return false;\n\
    \    }\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut sum = a;\n    let mut product = 1;\n    while product != 0 {\n  \
    \      sum += b;\n        product *= c;\n        c -= 1;\n        b -= 1;\n  \
    \      a -= 1;\n    }\n    sum == a || sum == b\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpti523x5m.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    if a + b > c {\n        a = c;\n        b = a +\
    \ b;\n        c = a + b;\n    }\n    if a + c > b {\n        a = b;\n        c\
    \ = a + c;\n        b = a + c;\n    }\n    if b + c > a {\n        b = c;\n  \
    \      c = b + c;\n        a = b + c;\n    }\n    a + b + c == c\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0573]: expected type, found local variable `a`\n  --> /tmp/tmpa8gra214.rs:11:30\n\
    \   |\n11 |     let mut a = a < 0 ? -a : a;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `b`\n  --> /tmp/tmpa8gra214.rs:12:30\n   |\n12 |\
    \     let mut b = b < 0 ? -b : b;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0573]: expected type, found\
    \ local variable `c`\n  --> /tmp/tmpa8gra214.rs:13:30\n   |\n13 |     let mut\
    \ c = c < 0 ? -c : c;\n   |                              ^ expecting a type here\
    \ because of type ascription\n\nerror[E0277]: the `?` operator can only be applied\
    \ to values that implement `Try`\n   --> /tmp/tmpa8gra214.rs:11:21\n    |\n11\
    \  |     let mut a = a < 0 ? -a : a;\n    |                     ^^^ the `?` operator\
    \ cannot be applied to type `{integer}`\n    |\n    = help: the trait `Try` is\
    \ not implemented for `{integer}`\nnote: required by `branch`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n   --> /tmp/tmpa8gra214.rs:11:23\n\
    \    |\n10  | / fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n11  | |     let mut a = a < 0 ? -a : a;\n    | |                       ^\
    \ cannot use the `?` operator in a function that returns `bool`\n12  | |     let\
    \ mut b = b < 0 ? -b : b;\n13  | |     let mut c = c < 0 ? -c : c;\n...   |\n\
    29  | |     a + b + c == c\n30  | | }\n    | |_- this function should return `Result`\
    \ or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is\
    \ not implemented for `bool`\nnote: required by `from_residual`\n\nerror[E0277]:\
    \ the `?` operator can only be applied to values that implement `Try`\n   -->\
    \ /tmp/tmpa8gra214.rs:12:21\n    |\n12  |     let mut b = b < 0 ? -b : b;\n  \
    \  |                     ^^^ the `?` operator cannot be applied to type `{integer}`\n\
    \    |\n    = help: the trait `Try` is not implemented for `{integer}`\nnote:\
    \ required by `branch`\n\nerror[E0277]: the `?` ope"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2upx6939.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < 0 ? -a : a;\n    let mut b = b < 0 ? -b : b;\n    let\
    \ mut c = c < 0 ? -c : c;\n    let mut det = a * c - b * b;\n    if det < 0 {\n\
    \        return false;\n    }\n    det = det / 2.0\n    if det > 1.0 {\n     \
    \   return false;\n    }\n    let mut b = b / det;\n    let mut c = c / det;\n\
    \    let mut a = a / det;\n    if a < 0.0 || b < 0.0 || c < 0.0 {\n        return\
    \ false;\n    }\n    let mut det = a * c + b * b;\n    if det < 0.0 {\n      \
    \  return false;\n    }\n    det = det / 2.0\n    if det > 1.0 {\n        return\
    \ false;\n    }\n    let mut a = a / det;\n    let mut b = b / det;\n    if a\
    \ < 0.0 || b < 0.0 {\n        return false;\n    }\n    return true;\n}\n\nfn\
    \ main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found keyword `if`\n  --> /tmp/tmpo92zpbzy.rs:18:20\n\
    \   |\n18 |     det = det / 2.0\n   |                    ^ help: add `;` here\n\
    19 |     if det > 1.0 {\n   |     -- unexpected token\n\nerror: expected `;`,\
    \ found keyword `if`\n  --> /tmp/tmpo92zpbzy.rs:32:20\n   |\n32 |     det = det\
    \ / 2.0\n   |                    ^ help: add `;` here\n33 |     if det > 1.0 {\n\
    \   |     -- unexpected token\n\nerror[E0573]: expected type, found local variable\
    \ `a`\n  --> /tmp/tmpo92zpbzy.rs:11:30\n   |\n11 |     let mut a = a < 0 ? -a\
    \ : a;\n   |                              ^ expecting a type here because of type\
    \ ascription\n\nerror[E0573]: expected type, found local variable `b`\n  --> /tmp/tmpo92zpbzy.rs:12:30\n\
    \   |\n12 |     let mut b = b < 0 ? -b : b;\n   |                            \
    \  ^ expecting a type here because of type ascription\n\nerror[E0573]: expected\
    \ type, found local variable `c`\n  --> /tmp/tmpo92zpbzy.rs:13:30\n   |\n13 |\
    \     let mut c = c < 0 ? -c : c;\n   |                              ^ expecting\
    \ a type here because of type ascription\n\nerror[E0277]: the `?` operator can\
    \ only be applied to values that implement `Try`\n   --> /tmp/tmpo92zpbzy.rs:11:21\n\
    \    |\n11  |     let mut a = a < 0 ? -a : a;\n    |                     ^^^ the\
    \ `?` operator cannot be applied to type `{integer}`\n    |\n    = help: the trait\
    \ `Try` is not implemented for `{integer}`\nnote: required by `branch`\n\nerror[E0277]:\
    \ the `?` operator can only be used in a function that returns `Result` or `Option`\
    \ (or another type that implements `FromResidual`)\n   --> /tmp/tmpo92zpbzy.rs:11:23\n\
    \    |\n10  | / fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n11  | |     let mut a = a < 0 ? -a : a;\n    | |                       ^\
    \ cannot use the `?` operator in a function that returns `bool`\n12  | |     let\
    \ mut b = b < 0 ? -b : b;\n13  | |     let mut c = c < 0 ? -c : c;\n...   |\n\
    41  | |     return true;\n42  | | }\n    | |_- this function should return `Result`\
    \ or `Option` to accept `?`\n    |\n    = help: the trait `FromResidual<_>` is\
    \ not implemented for `bool`\nn"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (b - a) + (c - b) * (c - b) <= 0\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpnxw4ykf_.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 || (a + b + c) == 0 {\n        return false;\n\
    \    }\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    \n    while a > 0 && b > 0 && c > 0 {\n        if a + b > c {\n         \
    \   c -= b;\n        } else {\n            b -= a;\n        }\n        a -= b;\n\
    \    }\n    \n    a == 0 && b == 0 && c == 0 || (a + b + c) == 0\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoo139fv8.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == b {\n        return a == c || b == c || c == a || c == b\n  \
    \  }\n    \n    if a == c {\n        return b == c || c == a || c == b\n    }\n\
    \    \n    if b == c {\n        return a == c || c == a || c == b\n    }\n   \
    \ \n    false\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n \
    \   assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg16os4q0.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a > b + c || b > a + c || c > a + b {\n        return false;\n   \
    \ }\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    loop {\n        if a + b > c {\n            b\
    \ -= 1;\n        } else if b + c > a {\n            c -= 1;\n        } else {\n\
    \            break;\n        }\n    }\n    \n    a == b + c\n}\n\nfn main() {\n\
    \    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5),\
    \ true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpu4yltmlf.rs:14:25\n   |\n14 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a % 360;\n    let mut b = b % 360;\n    let mut c = c % 360;\n\
    \    if a == b {\n        if a == c {\n            return true;\n        }\n \
    \       return false;\n    }\n    if a == c {\n        return false;\n    }\n\
    \    if b == c {\n        return true;\n    }\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if a > c {\n        swap(&mut a, &mut c);\n    }\n \
    \   if b > c {\n        swap(&mut b, &mut c);\n    }\n    if a > b {\n       \
    \ swap(&mut a, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n\
    \    }\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n    if c > b {\n\
    \        swap(&mut c, &mut b);\n    }\n    if c > a {\n        swap(&mut c, &mut\
    \ a);\n    }\n    if b > a {\n        swap(&mut b, &mut a);\n    }\n    if a >\
    \ c {\n        swap(&mut a, &mut c);\n    }\n    if c > a {\n        swap(&mut\
    \ c, &mut a);\n    }\n    if a > b {\n        swap(&mut a, &mut b);\n    }\n \
    \   if b > a {\n        swap(&mut b, &mut a);\n    }\n    if a > c {\n       \
    \ swap(&mut a, &mut c);\n    }\n    if b > c {\n        swap(&mut b, &mut c);\n\
    \    }\n    if c > a {\n        swap(&mut c, &mut a);\n    }\n    if c > b {\n\
    \        swap(&mut c, &mut b);\n    }\n    if b > c {\n        swap(&mut b, &mut\
    \ c);\n    }\n    if a > c {\n        swap(&mut a, &mut c);\n    }\n    if c >\
    \ a {\n        swap(&mut c, &mut a);\n    }\n    if a > b {\n        swap(&mut\
    \ a, &mut b);\n    }\n    if b > a {\n        swap(&mut b, &mut a);\n    }\n \
    \   if a > c {\n        swap(&mut a, &mut c);\n    }\n    if c > a {\n       \
    \ swap(&mut c, &mut a);\n    }\n\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpm27h4l7l.rs:27:9\n\
    \   |\n27 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpm27h4l7l.rs:30:9\n   |\n30 |         swap(&mut\
    \ a, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpm27h4l7l.rs:33:9\n   |\n33 |         swap(&mut b, &mut c);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpm27h4l7l.rs:36:9\n\
    \   |\n36 |         swap(&mut a, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --> /tmp/tmpm27h4l7l.rs:39:9\n   |\n39 |         swap(&mut\
    \ b, &mut c);\n   |         ^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing one of these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use\
    \ std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap` in this scope\n\
    \  --> /tmp/tmpm27h4l7l.rs:42:9\n   |\n42 |         swap(&mut c, &mut a);\n  \
    \ |         ^^^^ not found in this scope\n   |\nhelp: consider importing one of\
    \ these items\n   |\n1  | use std::mem::swap;\n   |\n1  | use std::ptr::swap;\n\
    \   |\n\nerror[E0425]: cannot find function `swap` in this scope\n  --> /tmp/tmpm27h4l7l.rs:45:9\n\
    \   |\n45 |         swap(&mut c, &mut b);\n   |         ^^^^ not found in this\
    \ scope\n   |\nhelp: consider importing one of these items\n   |\n1  | use std::mem::swap;\n\
    \   |\n1  | use std::ptr::swap;\n   |\n\nerror[E0425]: cannot find function `swap`\
    \ in this scope\n  --"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut det = a * c - b * b;\n    if det < 0 {\n        return false;\n \
    \   }\n    det = det / 2;\n    if det < 0 {\n        return false;\n    }\n  \
    \  det = det / 2;\n    if det < 0 {\n        return false;\n    }\n    det = det\
    \ / 2;\n    if det < 0 {\n        return false;\n    }\n    det = det / 2;\n \
    \   if det < 0 {\n        return false;\n    }\n    det = det / 2;\n    if det\
    \ < 0 {\n        return false;\n    }\n    det = det / 2;\n    if det < 0 {\n\
    \        return false;\n    }\n    det = det / 2;\n    if det < 0 {\n        return\
    \ false;\n    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n\
    \    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n    }\n \
    \   det = det / 2;\n    if det < 0 {\n        return false;\n    }\n    det =\
    \ det / 2;\n    if det < 0 {\n        return false;\n    }\n    det = det / 2;\n\
    \    if det < 0 {\n        return false;\n    }\n    det = det / 2;\n    if det\
    \ < 0 {\n        return false;\n    }\n    det = det / 2;\n    if det < 0 {\n\
    \        return false;\n    }\n    det = det / 2;\n    if det < 0 {\n        return\
    \ false;\n    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n\
    \    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n    }\n \
    \   det = det / 2;\n    if det < 0 {\n        return false;\n    }\n    det =\
    \ det / 2;\n    if det < 0 {\n        return false;\n    }\n    det = det / 2;\n\
    \    if det < 0 {\n        return false;\n    }\n    det = det / 2;\n    if det\
    \ < 0 {\n        return false;\n    }\n    det = det / 2;\n    if det < 0 {\n\
    \        return false;\n    }\n    det = det / 2;\n    if det < 0 {\n        return\
    \ false;\n    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n\
    \    }\n    det = det / 2;\n    if det < 0 {\n        return false;\n    }\n \
    \   det = det / 2;\n    if det < 0 {\n        return false;\n    }\n    det =\
    \ det / 2;\n    if det < 0 {\n        return false;\n    }\n    det = det / 2;\n\
    \n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp72pwq1o7.rs:10:58\n   |\n\
    10 | fn right_angle_triangle(a: isize, b: isize, c: isize) -> bool {\n   |   \
    \ --------------------                                  ^^^^ expected `bool`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c && a + c > b && b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmpczr9lwx4.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a == b {\n        return c == b;\n    }\n \
    \   \n    if a == c {\n        return b == c;\n    }\n    \n    if b == c {\n\
    \        return a == b;\n    }\n    \n    if a < b {\n        if b < c {\n   \
    \         return a < c;\n        }\n        else {\n            return b < c;\n\
    \        }\n    }\n    else {\n        if b < c {\n            return b < c;\n\
    \        }\n        else {\n            return a < c;\n        }\n    }\n}\n\n\
    fn main() {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3,\
    \ 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpwsubpxr0.rs:11:25\n   |\n11 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || b + c > a || c + a > b {\n        return false;\n   \
    \ }\n    let mut a = a < b ? a : b;\n    let mut b = b < c ? b : c;\n    let mut\
    \ c = c < a ? c : a;\n    \n    if a + b > c || b + c > a || c + a > b {\n   \
    \     return false;\n    }\n    \n    if a + c > b || c + b > a || b + a > c {\n\
    \        return false;\n    }\n    \n    return true;\n}\n\nfn main() {\n    let\
    \ candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n\
    \    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10, 6, 8),\
    \ true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpk7ogcdvh.rs:14:25\n   |\n14 |     let mut a = a < b ? a : b;\n\
    \   |                         ^ expected one of `.`, `;`, `?`, `else`, or an operator\n\
    \nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    a == b + c && b == a + c &&\
    \ c == a + b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmpd9wp6x9u.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    let mut a = a < b + c ? a : b + c;\n    let mut b = b < a + c ? b : a\
    \ + c;\n    let mut c = c < a + b ? c : a + b;\n    \n    if a > b + c {\n   \
    \     a = b + c;\n    }\n    if b > a + c {\n        b = a + c;\n    }\n    if\
    \ c > a + b {\n        c = a + b;\n    }\n    \n    a == b + c && b == a + c &&\
    \ c == a + b\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n  \
    \  assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n\
    \    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2, 2, 2),\
    \ false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `.`, `;`, `?`, `else`, or an operator, found `a`\n\
    \  --> /tmp/tmp506vwokq.rs:11:29\n   |\n11 |     let mut a = a < b + c ? a : b\
    \ + c;\n   |                             ^ expected one of `.`, `;`, `?`, `else`,\
    \ or an operator\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2upx6939.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    a + b > c || a + c > b || b + c > a\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp_zs5__fu.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a + b > c || a + c > b || b + c > a {\n        return false;\n   \
    \ }\n    \n    let mut sum = a;\n    \n    if a + b > c {\n        sum += b;\n\
    \    }\n    \n    if a + c > b {\n        sum += c;\n    }\n    \n    if b + c\
    \ > a {\n        sum += c;\n    }\n    \n    sum == a || sum == b\n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpanb2e3m3.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747432
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a < b {\n        true\n    } else if b < c {\n        false\n    }\
    \ else {\n        a == b or a == c\n    }\n}\n\nfn main() {\n    let candidate\
    \ = right_angle_triangle;\n    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1,\
    \ 2, 3), false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: `or` is not a logical operator\n  --> /tmp/tmppnxndphp.rs:16:16\n\
    \   |\n16 |         a == b or a == c\n   |                ^^ help: use `||` to\
    \ perform logical disjunction\n   |\n   = note: unlike in e.g., python and PHP,\
    \ `&&` and `||` are used for logical operators\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) >= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `true`,\n right: `false`', /tmp/tmp2upx6939.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    (b - a) * (c - b) <= 0\n}\n\nfn main() {\n    let candidate = right_angle_triangle;\n\
    \    assert_eq!(candidate(3, 4, 5), true);\n    assert_eq!(candidate(1, 2, 3),\
    \ false);\n    assert_eq!(candidate(10, 6, 8), true);\n    assert_eq!(candidate(2,\
    \ 2, 2), false);\n    assert_eq!(candidate(7, 24, 25), true);\n    assert_eq!(candidate(10,\
    \ 5, 7), false);\n    assert_eq!(candidate(5, 12, 13), true);\n    assert_eq!(candidate(15,\
    \ 8, 17), true);\n    assert_eq!(candidate(48, 55, 73), true);\n    assert_eq!(candidate(1,\
    \ 1, 1), false);\n    assert_eq!(candidate(2, 2, 10), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpepji1g1r.rs:16:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747431
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return true if\
    \ the three\n/// sides form a right-angled triangle, false otherwise.\n/// A right-angled\
    \ triangle is a triangle in which one angle is right angle or \n/// 90 degree.\n\
    /// Example:\n/// >>> right_angle_triangle(3, 4, 5)\n/// true\n/// >>> right_angle_triangle(1,\
    \ 2, 3)\n/// false\nfn right_angle_triangle(a: isize, b: isize, c: isize) -> bool\
    \ {\n    if a == 0 || b == 0 || c == 0 {\n        return false;\n    }\n    let\
    \ mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut\
    \ det = a * b - c * b;\n    if det < 0 {\n        det *= -1;\n    }\n    if det\
    \ > 0 {\n        return false;\n    }\n    if a > b {\n        a = b;\n    }\n\
    \    if a > c {\n        a = c;\n    }\n    if b > c {\n        b = c;\n    }\n\
    \    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c = c / 2;\n\
    \    let mut det = a * b - c * b;\n    if det < 0 {\n        det *= -1;\n    }\n\
    \    if det > 0 {\n        return false;\n    }\n    if a > b {\n        a = b;\n\
    \    }\n    if a > c {\n        a = c;\n    }\n    if b > c {\n        b = c;\n\
    \    }\n    \n    let mut a = a / 2;\n    let mut b = b / 2;\n    let mut c =\
    \ c / 2;\n    let mut det = a * b - c * b;\n    if det < 0 {\n        det *= -1;\n\
    \    }\n    if det > 0 {\n        return false;\n    }\n    if a > b {\n     \
    \   a = b;\n    }\n    if a > c {\n        a = c;\n    }\n    if b > c {\n   \
    \     b = c;\n    }\n    \n    let mut a = a / 2;\n    let mut b = b / 2;\n  \
    \  let mut c = c / 2;\n    let mut det = a * b - c * b;\n    if det < 0 {\n  \
    \      det *= -1;\n    }\n    if det > 0 {\n        return false;\n    }\n   \
    \ if a > b {\n        a = b;\n    }\n    if a > c {\n        a = c;\n    }\n \
    \   if b > c {\n        b = c;\n    }\n    \n    let mut a = a / 2;\n    let mut\
    \ b = b / 2;\n    let mut c = c / 2;\n    let mut det = a * b - c * b;\n    if\
    \ det < 0 {\n        det *= -1;\n    }\n    if det > 0 {\n        return false;\n\
    \    }\n    if a > b {\n        a = b;\n    }\n    if a > c {\n        a = c;\n\
    \    }\n    if b > c {\n        b = c;\n    }\n    \n    let mut a = a / 2;\n\
    \    let mut b = b / 2;\n    let mut c = c / 2;\n    let mut det = \n}\n\nfn main()\
    \ {\n    let candidate = right_angle_triangle;\n    assert_eq!(candidate(3, 4,\
    \ 5), true);\n    assert_eq!(candidate(1, 2, 3), false);\n    assert_eq!(candidate(10,\
    \ 6, 8), true);\n    assert_eq!(candidate(2, 2, 2), false);\n    assert_eq!(candidate(7,\
    \ 24, 25), true);\n    assert_eq!(candidate(10, 5, 7), false);\n    assert_eq!(candidate(5,\
    \ 12, 13), true);\n    assert_eq!(candidate(15, 8, 17), true);\n    assert_eq!(candidate(48,\
    \ 55, 73), true);\n    assert_eq!(candidate(1, 1, 1), false);\n    assert_eq!(candidate(2,\
    \ 2, 10), false);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpptpm1s7x.rs:118:1\n\
    \    |\n118 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659747431
