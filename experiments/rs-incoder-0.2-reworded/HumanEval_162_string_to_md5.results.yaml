language: rs
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwadvyey8.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp4fooacym.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp0dcxzhi_.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpssc85g0w.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp15tz39fn.rs:70:1\n   |\n70\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp15tz39fn.rs:7:18\n\
    \  |\n7 |     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n  \
    \           found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp15tz39fn.rs:69:5\n   |\n5  | fn string_to_md5(text: String) -> Option<String>\
    \ {\n   |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n69 |     md5.\n   |     ^^^\n   |     |\n   | \
    \    expected enum `Option`, found struct `String`\n   |     help: try using a\
    \ variant of the expected enum: `Some(md5)`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"$\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa3z1j8kn.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finalize()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd94v26cj.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp8h05rgiu.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjntrmstp.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp4vqdbimw.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtpjqybe.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp4vqdbimw.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpit0w1g1v.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphdm4u1rq.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjntrmstp.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp4vqdbimw.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp0iz6r7l2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmp0iz6r7l2.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjntrmstp.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5(\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\")\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5(Hello world)\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmp_derxhfs.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjntrmstp.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push_str(\")\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv1qm4cmk.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpv1qm4cmk.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| result.to_string())\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpzk63onh1.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp8h05rgiu.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpssc85g0w.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\u{0}\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpd56yr1p8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpssc85g0w.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmplrep89pl.rs:72:5\n\
    \   |\n72 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpssc85g0w.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.md5());\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpax0m2y_d.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpax0m2y_d.rs:9:5\n  |\n5 | fn string_to_md5(text:\
    \ String) -> Option<String> {\n  |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n9 |     md5.to_owned()\n\
    \  |     ^^^^^^^^^^^^^^\n  |     |\n  |     expected enum `Option`, found struct\
    \ `String`\n  |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \  |\n  = note: expected enum `Option<String>`\n           found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `)`\n  --> /tmp/tmpq6krf2n2.rs:46:1\n\
    \   |\n45 |     md5.push_str(&format!\n   |                          - expected\
    \ one of `(`, `[`, or `{`\n46 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpq6krf2n2.rs:45:17\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                          \
    \        - closing delimiter possibly meant for this\n...\n45 |     md5.push_str(&format!\n\
    \   |                 ^ unclosed delimiter\n46 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpq6krf2n2.rs:7:35\n    |\n7   |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = note: required\
    \ because of the requirements on the impl of `LowerHex` for `&[u8]`\nnote: required\
    \ by `std::fmt::LowerHex::fmt`\n    = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpq6krf2n2.rs:9:35\n    |\n9   |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = note: required\
    \ because of the requirements on the impl of `LowerHex` for `&[u8]`\nnote: required\
    \ by `std::fmt::LowerHex::fmt`\n    = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpq6krf2n2.rs:11:35\n    |\n11  |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = note: required\
    \ because of the requirements on the impl of `LowerHex` for `&[u8]`\nnote: required\
    \ by `std"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finalize()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd94v26cj.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.finalize()\n        .map(|digest| digest.as_bytes().to_hex())\n     \
    \   .ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmprm1py0v8.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk49e5ojy.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.finalize()\n        .map(|digest| digest.to_hex())\n        .ok()\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpexxzb8et.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n    md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9sdk_mkr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpf_iwg0s5.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpl4lyn8vq.rs:6:19\n\
    \  |\n6 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(&text);\n\
    \    md5.push(')');\n\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdjg75qgp.rs:11:14\n   |\n\
    11 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().map(|digest| digest.to_hex())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp_tc3_6_t.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\"\
    , md5::md5(text.as_bytes()).unwrap()));\n    Some(md5)\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpdr9_j83d.rs:11:35\n   |\n11 |     md5.push_str(&format!(\"{:x}\"\
    , md5::md5(text.as_bytes()).unwrap()));\n   |                                \
    \   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().into_base64().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcup_hb30.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk49e5ojy.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"Content-MD5: \");\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\r\\n\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphka90c7d.rs:11:18\n   |\n\
    11 |     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpl38pzddj.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\",\
    \ text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpyvcge0co.rs:54:69\n\
    \   |\n54 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpyvcge0co.rs:55:104\n   |\n55\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnxpumnxc.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_string()\n   |     ^^^^^^^^^^^^^^^\n   |     |\n\
    \   |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_string())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmp6dajwp2p.rs:71:5\n\
    \   |\n71 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `as`\n  --> /tmp/tmpircbku7n.rs:59:24\n\
    \   |\n59 |     md5.push_str(&text.as\n   |                        ^^ expected\
    \ identifier, found keyword\n   |\nhelp: you can escape reserved keywords to use\
    \ them as identifiers\n   |\n59 |     md5.push_str(&text.r#as\n   |          \
    \              ~~~~\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpircbku7n.rs:59:17\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                                         - closing delimiter possibly meant for\
    \ this\n...\n59 |     md5.push_str(&text.as\n   |                 ^ unclosed delimiter\n\
    60 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpircbku7n.rs:7:18\n  |\n7 |     md5.push_str(&text.as_bytes());\n\
    \  |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n  |\n  =\
    \ note: expected reference `&str`\n             found reference `&&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpircbku7n.rs:9:18\n  |\n9 |     md5.push_str(&text.as_bytes());\n\
    \  |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n  |\n  =\
    \ note: expected reference `&str`\n             found reference `&&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpircbku7n.rs:11:18\n   |\n11 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpircbku7n.rs:13:18\n   |\n13 |\
    \     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpircbku7n.rs:15:18\n   |\n15 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpircbku7n.rs:17:18\n   |\n17 |\
    \     md5.push_s"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\u{0}\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpd56yr1p8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp8h05rgiu.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.finish()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9enhimfz.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp8h05rgiu.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&md5::digest(&text));\n\
    \    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpjtyygssi.rs:7:19\n  |\n7 |     md5.push_str(&md5::digest(&text));\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpv2qyxoxb.rs:55:69\n\
    \   |\n55 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpv2qyxoxb.rs:56:104\n   |\n56\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    57 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp15tz39fn.rs:70:1\n   |\n70\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp15tz39fn.rs:7:18\n\
    \  |\n7 |     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n  \
    \           found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp15tz39fn.rs:69:5\n   |\n5  | fn string_to_md5(text: String) -> Option<String>\
    \ {\n   |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n69 |     md5.\n   |     ^^^\n   |     |\n   | \
    \    expected enum `Option`, found struct `String`\n   |     help: try using a\
    \ variant of the expected enum: `Some(md5)`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp15tz39fn.rs:70:1\n   |\n70\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp15tz39fn.rs:7:18\n\
    \  |\n7 |     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n  \
    \           found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp15tz39fn.rs:69:5\n   |\n5  | fn string_to_md5(text: String) -> Option<String>\
    \ {\n   |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n69 |     md5.\n   |     ^^^\n   |     |\n   | \
    \    expected enum `Option`, found struct `String`\n   |     help: try using a\
    \ variant of the expected enum: `Some(md5)`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjntrmstp.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 4..]);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpawpefpur.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpawpefpur.rs:11:5\n   |\n5  | fn string_to_md5(text: String) ->\
    \ Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n11 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finalize()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd94v26cj.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.update(&text.as_bytes());\n   \
    \ Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpoo5ar74d.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpf_iwg0s5.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.finalize()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp1wn062gj.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy6cbuz5h.rs:14:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n14 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.md5());\n\
    \    md5.push_str(\"\\n\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpsnql5aj1.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\u{0}\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpgazhletr.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| {\n        String::from_utf8_lossy(result)\n\
    \    })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpnn23s0e6.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpl38pzddj.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `as`\n  --> /tmp/tmpircbku7n.rs:59:24\n\
    \   |\n59 |     md5.push_str(&text.as\n   |                        ^^ expected\
    \ identifier, found keyword\n   |\nhelp: you can escape reserved keywords to use\
    \ them as identifiers\n   |\n59 |     md5.push_str(&text.r#as\n   |          \
    \              ~~~~\n\nerror: mismatched closing delimiter: `}`\n  --> /tmp/tmpircbku7n.rs:59:17\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                                         - closing delimiter possibly meant for\
    \ this\n...\n59 |     md5.push_str(&text.as\n   |                 ^ unclosed delimiter\n\
    60 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpircbku7n.rs:7:18\n  |\n7 |     md5.push_str(&text.as_bytes());\n\
    \  |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n  |\n  =\
    \ note: expected reference `&str`\n             found reference `&&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpircbku7n.rs:9:18\n  |\n9 |     md5.push_str(&text.as_bytes());\n\
    \  |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n  |\n  =\
    \ note: expected reference `&str`\n             found reference `&&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpircbku7n.rs:11:18\n   |\n11 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpircbku7n.rs:13:18\n   |\n13 |\
    \     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpircbku7n.rs:15:18\n   |\n15 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpircbku7n.rs:17:18\n   |\n17 |\
    \     md5.push_s"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.md5());\n\
    \    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqg3zwzcf.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    d41d8cd98f00b204e9800998ecf8427e\");\n    md5.push_str(text);\n    md5.into()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5f0bbzm7.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp4fooacym.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp062c_eh5.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0277]: the size for values of type `[u8]` cannot be known at compilation\
    \ time\n  --> /tmp/tmp062c_eh5.rs:12:23\n   |\n12 |     md5.result().map(|result|\
    \ String::from_utf8_lossy(&result))\n   |                       ^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[u8]`\nhelp: function arguments must have a statically known\
    \ size, borrowed types always have a known size\n   |\n12 |     md5.result().map(|&result|\
    \ String::from_utf8_lossy(&result))\n   |                       +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0433.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(&text);\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9gebzyhs.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtpjqybe.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtpjqybe.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text.len() {\n        0 => None,\n  \
    \      _ => Some(md5(text).to_string()),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpxif44vzh.rs:8:19\n\
    \  |\n8 |         _ => Some(md5(text).to_string()),\n  |                   ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwadvyey8.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().map(|x| x.to_string()).ok()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp4897dyhb.rs:6:19\n\
    \  |\n6 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzxvdsk66.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpzxvdsk66.rs:11:28\n   |\n11 |     md5.result().ok().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                            ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().ok().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                            +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpf_iwg0s5.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcjuspd2q.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpktt8x9uj.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\u{0}\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpd56yr1p8.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    3e25960a79dbc69b674cd4ec67a72c62\");\n    md5.push_str(text);\n    md5.to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpfynd_bgg.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpfynd_bgg.rs:9:5\n  |\n5 | fn string_to_md5(text: String) -> Option<String>\
    \ {\n  |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n9 |     md5.to_string()\n  |     ^^^^^^^^^^^^^^^\n\
    \  |     |\n  |     expected enum `Option`, found struct `String`\n  |     help:\
    \ try using a variant of the expected enum: `Some(md5.to_string())`\n  |\n  =\
    \ note: expected enum `Option<String>`\n           found struct `String`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8wwevo1w.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8wwevo1w.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.as_str()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpq1x5w98c.rs:7:18\n  |\n7 |\
    \     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^ expected\
    \ `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n           \
    \  found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpq1x5w98c.rs:9:5\n\
    \  |\n5 | fn string_to_md5(text: String) -> Option<String> {\n  |            \
    \                       -------------- expected `Option<String>` because of return\
    \ type\n...\n9 |     md5.as_str()\n  |     ^^^^^^^^^^^^ expected enum `Option`,\
    \ found `&str`\n  |\n  = note:   expected enum `Option<String>`\n          found\
    \ reference `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"1\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"0\");\n    md5.push_str(\"a\");\n    md5.push_str(\"9\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"5\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"3\");\n    md5.push_str(\"a\");\n    md5.push_str(\"0\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"9\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"5\");\n    md5.push_str(\"a\");\n    md5.push_str(\"3\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"0\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"9\");\n    md5.push_str(\"a\");\n    md5.push_str(\"5\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"3\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"0\");\n    md5.push_str(\"a\");\n    md5.push_str(\"9\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"5\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"3\");\n    md5.push_str(\"a\");\n    md5.push_str(\"0\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"9\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"5\");\n    md5.push_str(\"a\");\n    md5.push_str(\"3\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"0\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"9\");\n    md5.push_str(\"a\");\n    md5.push_str(\"5\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"3\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"0\");\n    md5.push_str(\"a\");\n    md5.push_str(\"9\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"5\");\n    md5.push_str(\"a\");\n\
    \    md5.push_str(\"3\");\n    md5.push_str(\"a\");\n    md5.push_str(\"0\");\n\
    \    md5.push_str(\"a\");\n    md5.push_str(\"9\");\n    md5.push_\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw5yma3r3.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0609]: no field\
    \ `push_` on type `String`\n  --> /tmp/tmpw5yma3r3.rs:72:9\n   |\n72 |     md5.push_\n\
    \   |         ^^^^^ unknown field\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0609.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.update(&text);\n    md5.result().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpzwcfcte2.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp0iz6r7l2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmp0iz6r7l2.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmplrep89pl.rs:72:5\n\
    \   |\n72 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpv2qyxoxb.rs:55:69\n\
    \   |\n55 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpv2qyxoxb.rs:56:104\n   |\n56\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    57 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finalize()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd94v26cj.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp5dnfx8mb.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push('#');\n    md5.push(text.as_bytes());\n\
    \    md5.push('#');\n    md5.push(md5::digest(&text).unwrap());\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmppo_gyhvh.rs:14:14\n   |\n14 |     md5.push(md5::digest(&text).unwrap());\n\
    \   |              ^^^ use of undeclared crate or module `md5`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppo_gyhvh.rs:12:14\n   |\n12 |     md5.push(text.as_bytes());\n\
    \   |              ^^^^^^^^^^^^^^^ expected `char`, found `&[u8]`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len() - 4..md5.len()]);\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7phkix0s.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(&text);\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9gebzyhs.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpv2qyxoxb.rs:55:69\n\
    \   |\n55 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpv2qyxoxb.rs:56:104\n   |\n56\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    57 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $md5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjlpa2yo6.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpjlpa2yo6.rs:10:5\n   |\n5  | fn string_to_md5(text: String) ->\
    \ Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n10 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&md5::digest(text));\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \  --> /tmp/tmpzma1joo7.rs:10:19\n   |\n10 |     md5.push_str(&md5::digest(text));\n\
    \   |                   ^^^ use of undeclared crate or module `md5`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp8h05rgiu.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmp15tz39fn.rs:70:1\n   |\n70\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmp15tz39fn.rs:7:18\n\
    \  |\n7 |     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n  \
    \           found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp15tz39fn.rs:69:5\n   |\n5  | fn string_to_md5(text: String) -> Option<String>\
    \ {\n   |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n69 |     md5.\n   |     ^^^\n   |     |\n   | \
    \    expected enum `Option`, found struct `String`\n   |     help: try using a\
    \ variant of the expected enum: `Some(md5)`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpssc85g0w.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"$\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi_q17oxo.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi_q17oxo.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp5dnfx8mb.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finish()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6wgotnuc.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp8h05rgiu.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n    md5.digest().to_hex()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpg7ri72zv.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd7g6obaq.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpty7r68yt.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `)`\n  --> /tmp/tmpq6krf2n2.rs:46:1\n\
    \   |\n45 |     md5.push_str(&format!\n   |                          - expected\
    \ one of `(`, `[`, or `{`\n46 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpq6krf2n2.rs:45:17\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                          \
    \        - closing delimiter possibly meant for this\n...\n45 |     md5.push_str(&format!\n\
    \   |                 ^ unclosed delimiter\n46 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpq6krf2n2.rs:7:35\n    |\n7   |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = note: required\
    \ because of the requirements on the impl of `LowerHex` for `&[u8]`\nnote: required\
    \ by `std::fmt::LowerHex::fmt`\n    = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpq6krf2n2.rs:9:35\n    |\n9   |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = note: required\
    \ because of the requirements on the impl of `LowerHex` for `&[u8]`\nnote: required\
    \ by `std::fmt::LowerHex::fmt`\n    = note: this error originates in the macro\
    \ `$crate::__export::format_args` (in Nightly builds, run with -Z macro-backtrace\
    \ for more info)\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpq6krf2n2.rs:11:35\n    |\n11  |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = note: required\
    \ because of the requirements on the impl of `LowerHex` for `&[u8]`\nnote: required\
    \ by `std"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| result.to_string())\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpc03b3l5t.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n    Some(md5.result().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmptenviite.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp0iz6r7l2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmp0iz6r7l2.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $md5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 4..md5.len()].to_hex());\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplw21se2m.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0599]: no method named\
    \ `to_hex` found for type `str` in the current scope\n  --> /tmp/tmplw21se2m.rs:10:49\n\
    \   |\n10 |     md5.push_str(&md5[md5.len() - 4..md5.len()].to_hex());\n   | \
    \                                                ^^^^^^ method not found in `str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplw21se2m.rs:11:5\n   |\n5  | fn\
    \ string_to_md5(text: String) -> Option<String> {\n   |                      \
    \             -------------- expected `Option<String>` because of return type\n\
    ...\n11 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n   |     expected\
    \ enum `Option`, found struct `String`\n   |     help: try using a variant of\
    \ the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwadvyey8.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.finalize()\n        .map(|digest| digest.as_bytes()[0..32].to_hex())\n\
    \        .ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmppdqt63aa.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpxi5te9n5.rs:72:1\n   |\n72\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxi5te9n5.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxi5te9n5.rs:71:5\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                   --------------\
    \ expected `Option<String>` because of return type\n...\n71 |     md5.\n   | \
    \    ^^^\n   |     |\n   |     expected enum `Option`, found struct `String`\n\
    \   |     help: try using a variant of the expected enum: `Some(md5)`\n   |\n\
    \   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 1]);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcyw6nop.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpkcyw6nop.rs:10:19\n   |\n10 |  \
    \   md5.push_str(&md5[md5.len() - 1]);\n   |                   ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkcyw6nop.rs:11:5\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n11 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |   \
    \  |\n   |     expected enum `Option`, found struct `String`\n   |     help: try\
    \ using a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note:\
    \ expected enum `Option<String>`\n            found struct `String`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push(\")\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1v40kg7f.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1v40kg7f.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1v40kg7f.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   s => Some(md5(s)),\n    }\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmptddot20j.rs:8:19\n\
    \  |\n8 |         s => Some(md5(s)),\n  |                   ^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmptddot20j.rs:7:9\n  |\n\
    6 |     match text {\n  |           ---- this expression has type `String`\n7\
    \ |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpyy4lid_v.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n    md5.result().map(|result|\
    \ String::from_utf8_lossy(&result))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpa7y4h3hr.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0277]: the size for values of type `[u8]` cannot be known\
    \ at compilation time\n  --> /tmp/tmpa7y4h3hr.rs:11:23\n   |\n11 |     md5.result().map(|result|\
    \ String::from_utf8_lossy(&result))\n   |                       ^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[u8]`\nhelp: function arguments must have a statically known\
    \ size, borrowed types always have a known size\n   |\n11 |     md5.result().map(|&result|\
    \ String::from_utf8_lossy(&result))\n   |                       +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0433.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpty7r68yt.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.md5());\n\
    \    md5.push_str(\"\\n\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpsnql5aj1.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push_str(\")\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnpixehby.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpnpixehby.rs:14:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n14 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"{:x}\",\
    \ text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpyvcge0co.rs:54:69\n\
    \   |\n54 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpyvcge0co.rs:55:104\n   |\n55\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpf_iwg0s5.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpktt8x9uj.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.digest().to_string()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpssc85g0w.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   s => Some(md5::digest(s.as_bytes()).to_string()),\n    }\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpqkjvqs0f.rs:8:19\n  |\n8 |         s => Some(md5::digest(s.as_bytes()).to_string()),\n\
    \  |                   ^^^ use of undeclared crate or module `md5`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpqkjvqs0f.rs:7:9\n  |\n6 |     match text {\n\
    \  |           ---- this expression has type `String`\n7 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"$\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi_q17oxo.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpi_q17oxo.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    md5.digest().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk49e5ojy.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&digest::digest(&text));\n\
    \    md5.push_str(\"\\n\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpsiwcg1t8.rs:10:19\n   |\n10 |     md5.push_str(&digest::digest(&text));\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push(\")\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1v40kg7f.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1v40kg7f.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1v40kg7f.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n   \
    \ md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp7kefm_21.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n    md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9sdk_mkr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"=\");\n    md5.push_str(&md5.md5());\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpq8i3tc_t.rs:13:23\n   |\n13 |     md5.push_str(&md5.md5());\n\
    \   |                       ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push(\"3\");\n    md5.push(text.as_bytes());\n\
    \    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"\
    0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md5.push(\"0\");\n    md\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmp9koj3yp6.rs:72:5\n\
    \   |\n72 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:11:14\n \
    \  |\n11 |     md5.push(\"3\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:12:14\n\
    \   |\n12 |     md5.push(text.as_bytes());\n   |              ^^^^^^^^^^^^^^^\
    \ expected `char`, found `&[u8]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:13:14\n\
    \   |\n13 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:14:14\n\
    \   |\n14 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:15:14\n\
    \   |\n15 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:16:14\n\
    \   |\n16 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:17:14\n\
    \   |\n17 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:18:14\n\
    \   |\n18 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:19:14\n\
    \   |\n19 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:20:14\n\
    \   |\n20 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:21:14\n\
    \   |\n21 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:22:14\n\
    \   |\n22 |     md5.push(\"0\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9koj3yp6.rs:23:14\n\
    \   |\n23 |     md5.push(\"0\");\n   |              ^^^ "
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push(\")\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpazkngcl6.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpazkngcl6.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpazkngcl6.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpazkngcl6.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_owned())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n\
    \    md5.push_str(\"$\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa3z1j8kn.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9y9mucy_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.md5());\n\
    \    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqg3zwzcf.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp4vqdbimw.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtpjqybe.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\u{0}\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpgazhletr.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push(\")\");\n    md5.to_string()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuc2nrb01.rs:11:14\n   |\n\
    11 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpuc2nrb01.rs:12:18\n\
    \   |\n12 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpuc2nrb01.rs:13:14\n   |\n13 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpuc2nrb01.rs:14:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n14 |     md5.to_string()\n   |\
    \     ^^^^^^^^^^^^^^^\n   |     |\n   |     expected enum `Option`, found struct\
    \ `String`\n   |     help: try using a variant of the expected enum: `Some(md5.to_string())`\n\
    \   |\n   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_string()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp4fooacym.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(&text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"$MD5$Hello world$\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpfo8n65oa.rs:20:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    d41d8cd98f00b204e9800998ecf8427e\");\n    md5.push_str(text);\n    md5.into()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp5f0bbzm7.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.into_boxed_slice()\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_boxed_slice` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp3x90k8m4.rs:13:9\n   |\n13 |     md5.into_boxed_slice()\n\
    \   |         ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `into_boxed_str`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjntrmstp.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(&digest::digest(&text.as_bytes()));\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp55m2e1_q.rs:10:19\n   |\n10 |     md5.push_str(&digest::digest(&text.as_bytes()));\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from(result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpy6eylqog.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzxvdsk66.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpzxvdsk66.rs:11:28\n   |\n11 |     md5.result().ok().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                            ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().ok().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                            +\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp1hrd7ksk.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    d41d8cd98f00b204e9800998ecf8427e\");\n    md5.push_str(text);\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"a\");\n    md5.push_str(\"\
    a\");\n    md5.push_str(\"a\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpjrct59yo.rs:74:69\n\
    \   |\n74 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpjrct59yo.rs:75:104\n   |\n75\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    76 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwadvyey8.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(text.as_bytes());\n\
    \    digest.finalize()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp1wn062gj.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmp6dajwp2p.rs:71:5\n\
    \   |\n71 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(&text);\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9gebzyhs.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"$MD5$\");\n   \
    \ md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 4..]);\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprtsepwf9.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    match text {\n        \"\" => None,\n     \
    \   text => Some(md5(text).to_string()),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpa4mkmwi2.rs:8:22\n\
    \  |\n8 |         text => Some(md5(text).to_string()),\n  |                  \
    \    ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpa4mkmwi2.rs:7:9\n\
    \  |\n6 |     match text {\n  |           ---- this expression has type `String`\n\
    7 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut digest = digest::digest::Digest::new(\"md5\");\n    digest.update(&text);\n\
    \    digest.result()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n \
    \   assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp9gebzyhs.rs:9:22\n  |\n9 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n  |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n    md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps8ip3hqb.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[1..].to_hex());\n\
    \    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n  \
    \  assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )));\n    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpd4r4s_wz.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0599]: no method named\
    \ `to_hex` found for type `str` in the current scope\n  --> /tmp/tmpd4r4s_wz.rs:10:28\n\
    \   |\n10 |     md5.push_str(&md5[1..].to_hex());\n   |                      \
    \      ^^^^^^ method not found in `str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpd4r4s_wz.rs:11:5\n   |\n5  | fn string_to_md5(text: String) -> Option<String>\
    \ {\n   |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n11 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n\
    \   |     |\n   |     expected enum `Option`, found struct `String`\n   |    \
    \ help: try using a variant of the expected enum: `Some(md5.to_owned())`\n   |\n\
    \   = note: expected enum `Option<String>`\n            found struct `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp0iz6r7l2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmp0iz6r7l2.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().to_hex()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpwadvyey8.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    text.md5()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmp3bcjpbcv.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtpjqybe.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5(\");\n    md5.push_str(text);\n\
    \    md5.push_str(\")\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbpv11vs8.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpd7g6obaq.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\\
    0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `md` in this scope\n  --> /tmp/tmp6dajwp2p.rs:71:5\n\
    \   |\n71 |     md\n   |     ^^ help: a local variable with a similar name exists:\
    \ `md5`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 1]);\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpkcyw6nop.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpkcyw6nop.rs:10:19\n   |\n10 |  \
    \   md5.push_str(&md5[md5.len() - 1]);\n   |                   ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkcyw6nop.rs:11:5\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n11 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |   \
    \  |\n   |     expected enum `Option`, found struct `String`\n   |     help: try\
    \ using a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note:\
    \ expected enum `Option<String>`\n            found struct `String`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    let mut md5 = String::new();\n    md5.push_str(&text.md5());\n\
    \    md5.push_str(\"\\n\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpsnql5aj1.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n    md5.finalize()\n\
    \        .map(|digest| digest.as_bytes())\n        .map(|digest| String::from_utf8(digest).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpcj8_6wm6.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"\\0\");\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjtpjqybe.rs:13:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n13 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^\n   |     |\n  \
    \ |     expected enum `Option`, found struct `String`\n   |     help: try using\
    \ a variant of the expected enum: `Some(md5.to_owned())`\n   |\n   = note: expected\
    \ enum `Option<String>`\n            found struct `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748640
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"MD5\");\n    md5.push_str(&text);\n\
    \    md5.push_str(\"=\");\n    md5.push_str(&md5.md5());\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpk3qqzt0e.rs:14:23\n   |\n14 |     md5.push_str(&md5.md5());\n\
    \   |                       ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659748641
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")\nfn string_to_md5(text:\
    \ String) -> Option<String> {\n    if text.len() == 0 {\n        return None;\n\
    \    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"d41d8cd98f00b204e9800998ecf8427e\"\
    );\n    md5.push_str(text);\n    md5.into()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps8ip3hqb.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659748641
