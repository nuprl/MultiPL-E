name: HumanEval_160_do_algebra
language: rs
prompt: "/// Given two vectors operator, and operand. The first vector has basic algebra\
  \ operations, and \n/// the second vector is a vector of integers. Use the two given\
  \ vectors to build the algebric \n/// expression and return the evaluation of this\
  \ expression.\n/// The basic algebra operations:\n/// Addition ( + ) \n/// Subtraction\
  \ ( - ) \n/// Multiplication ( * ) \n/// Floor division ( // ) \n/// Exponentiation\
  \ ( ** ) \n/// Example:\n/// operator['+', '*', '-']\n/// vector = [2, 3, 4, 5]\n\
  /// result = 2 + 3 * 4 - 5\n/// => result = 9\n/// Note:\n/// The length of operator\
  \ vector is equal to the length of operand vector minus one.\n/// Operand is a vector\
  \ of of non-negative integers.\n/// Operator vector has at least one operator, and\
  \ operand vector has at least two operands.\nfn do_algebra(operator: Vec<String>,\
  \ operand: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = do_algebra;\n    assert_eq!(candidate(vec![String::from(\"\
  **\"), String::from(\"*\"), String::from(\"+\")], vec![2, 3, 4, 5]), 37);\n    assert_eq!(candidate(vec![String::from(\"\
  +\"), String::from(\"*\"), String::from(\"-\")], vec![2, 3, 4, 5]), 9);\n    assert_eq!(candidate(vec![String::from(\"\
  //\"), String::from(\"*\")], vec![7, 3, 4]), 8);\n}\n"
completions: ["    let mut result = operand.iter().sum();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.iter().sum(),\n\
    \            \"-\" => result -= operand.iter().sum(),\n            \"*\" => result\
    \ *= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand.iter().cloned().collect::<Vec<_>>();\n    for op in operator {\n \
    \       match op {\n            \"+\" => result.iter_mut().for_each(|x| result.push(x+y)),\n\
    \            \"-\" => result.iter_mut().for_each(|x| result.push(x-y)),\n    \
    \        \"*\" => result.iter_mut().for_each(|x| result.push(x*y)),\n        \
    \    \"//\" => result.iter_mut().for_each(|x| result.push(x/y)),\n           \
    \ \"**\" => result.iter_mut().for_each(|x| result.push(x**y)),\n            _\
    \ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    result.iter().sum().unwrap()",
  "    let mut result = 0;\n    for i in 0..operator.len() {\n        result += operand.iter().map(|x|\
    \ operator[i]).sum();\n    }\n    result", "    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Operator {} is not supported\", op),\n        }\n \
    \   }\n    result", "    let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next()\n            }),\n  \
    \          \"-\" => result.iter_mut().for_each(|&x| {\n                *x -= *result.iter().skip(1).next()\n\
    \            }),\n            \"*\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x *= *result.iter().skip(1).next()\n            }),\n         \
    \   \"/\" => result.iter_mut().for_each(|&x| {\n                *x /= *result.iter().skip(1).next()\n\
    \            }),\n            \"**\" => result.iter_mut().for_each(|&x| {\n  \
    \              *x **= *result.iter().skip(1).next()\n            }),\n       \
    \     _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().skip(1).next()",
  "    let mut result = operand.iter().sum();\n    for op in operator {\n        match\
    \ op {\n            \"+\" => result += operand.iter().sum(),\n            \"-\"\
    \ => result -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result", "    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"/\" => result\
    \ /= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand.iter().sum();\n    for op in operator {\n        match op {\n    \
    \        \"+\" => result += operand.iter().sum(),\n            \"-\" => result\
    \ -= operand.iter().sum(),\n            \"*\" => result *= operand.iter().sum(),\n\
    \            \"/\" => result /= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result", "    let mut result = operand.clone();\n    for op in operator {\n\
    \        match op {\n            \"+\" => {\n                for i in 0..result.len()\
    \ {\n                    result[i] += result[i + 1];\n                }\n    \
    \        }\n            \"-\" => {\n                for i in 0..result.len() {\n\
    \                    result[i] -= result[i + 1];\n                }\n        \
    \    }\n            \"*\" => {\n                for i in 0..result.len() {\n \
    \                   result[i] *= result[i + 1];\n                }\n         \
    \   }\n            \"/\" => {\n                for i in 0..result.len() {\n  \
    \                  result[i] /= result[i + 1];\n                }\n          \
    \  }\n            \"//\" => {\n                for i in 0..result.len() {\n  \
    \                  result[i] /= result[i + 1];\n                }\n          \
    \  }\n            \"**\" => {\n                for i in 0..result.len() {\n  \
    \                  result[i] **= result[i + 1];\n                }\n         \
    \   }\n            _ => panic!(\"Invalid operator: {}\", op),\n        }\n   \
    \ }\n    result[0]", "    let mut result: isize = 0;\n    let mut operator_index\
    \ = 0;\n    let mut operand_index = 0;\n    while operator_index < operator.len()\
    \ && operand_index < operand.len() {\n        match operator[operator_index] {\n\
    \            \"+\" => {\n                result += operand[operand_index];\n \
    \               operator_index += 1;\n            }\n            \"-\" => {\n\
    \                result -= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"*\" => {\n                result *= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            \"/\" => {\n\
    \                result /= operand[operand_index];\n                operator_index\
    \ += 1;\n            }\n            \"**\" => {\n                result **= operand[operand_index];\n\
    \                operator_index += 1;\n            }\n            _ => panic!(\"\
    Invalid operator\"),\n        }\n        operand_index += 1;\n    }\n    result",
  "    let mut result = operand.iter().cloned().collect::<Vec<_>>();\n    for op in\
    \ operator {\n        match op {\n            \"+\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x += *result.iter().next();\n                });\n \
    \           }\n            \"-\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x -= *result.iter().next();\n                });\n \
    \           }\n            \"*\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x *= *result.iter().next();\n                });\n \
    \           }\n            \"//\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x /= *result.iter().next();\n                });\n \
    \           }\n            \"**\" => {\n                result.iter_mut().for_each(|&x|\
    \ {\n                    *x **= *result.iter().next();\n                });\n\
    \            }\n            _ => panic!(\"Invalid operator: {}\", op),\n     \
    \   }\n    }\n    *result.iter().next()", "    let mut result = operand.iter().sum();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result +=\
    \ operand.iter().sum(),\n            \"-\" => result -= operand.iter().sum(),\n\
    \            \"*\" => result *= operand.iter().sum(),\n            \"//\" => result\
    \ /= operand.iter().sum(),\n            \"**\" => result **= operand.iter().sum(),\n\
    \            _ => panic!(\"Invalid operator: {}\", op),\n        }\n    }\n  \
    \  result", "    let mut result = operand.iter().sum();\n    for op in operator\
    \ {\n        match op {\n            \"+\" => result += operand.iter().sum(),\n\
    \            \"-\" => result -= operand.iter().sum(),\n            \"*\" => result\
    \ *= operand.iter().sum(),\n            \"/\" => result /= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Operator {} is not\
    \ supported!\", op),\n        }\n    }\n    result", "    let mut result = operand.clone();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.push(result.iter().map(|x|\
    \ x + 1).sum()),\n            \"-\" => result.push(result.iter().map(|x| x - 1).sum()),\n\
    \            \"*\" => result.push(result.iter().map(|x| x * 1).sum()),\n     \
    \       \"/\" => result.push(result.iter().map(|x| x % 1).sum()),\n          \
    \  \"//\" => result.push(result.iter().map(|x| x % 1).sum()),\n            \"\
    **\" => result.push(result.iter().map(|x| x * x).sum()),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result.sum()", "    let mut\
    \ result = operand.iter().sum();\n    for i in operator.iter().rev() {\n     \
    \   result = result * (operand.len() - i - 1);\n    }\n    result", "    let mut\
    \ result = operand.clone();\n    let mut operators = operator.clone();\n    operators.pop();\n\
    \    operators.pop();\n    for op in operators {\n        match op {\n       \
    \     \"+\" => result.push(result.iter().map(|x| x + x).sum()),\n            \"\
    -\" => result.push(result.iter().map(|x| x - x).sum()),\n            \"*\" =>\
    \ result.push(result.iter().map(|x| x * x).sum()),\n            \"//\" => result.push(result.iter().map(|x|\
    \ x // x).sum()),\n            \"**\" => result.push(result.iter().map(|x| x **\
    \ x).sum()),\n            _ => panic!(\"Invalid operator: {}\", op),\n       \
    \ }\n    }\n    result.sum()", "    let mut result = operand.iter().sum();\n \
    \   for op in operator {\n        match op {\n            \"+\" => result += operand.iter().sum(),\n\
    \            \"-\" => result -= operand.iter().sum(),\n            \"*\" => result\
    \ *= operand.iter().sum(),\n            \"//\" => result /= operand.iter().sum(),\n\
    \            \"**\" => result **= operand.iter().sum(),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    result", "    let mut result\
    \ = operand.iter().cloned().collect::<Vec<_>>();\n    let mut operators = operator.iter().cloned().collect::<Vec<_>>();\n\
    \    operators.sort_unstable();\n    operators.reverse();\n    operators.dedup();\n\
    \    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup();\n    operators.reverse();\n    operators.dedup();\n    operators.reverse();\n\
    \    operators.dedup();\n    operators.reverse();\n    operators.dedup();\n  \
    \  operators.reverse();\n    operators.dedup();\n    operators.reverse();\n  \
    \  operators.dedup", "    let mut result = operand.iter().sum();\n    for op in\
    \ operator {\n        match op {\n            \"+\" => result += operand.iter().sum(),\n\
    \            \"-\" => result -= operand.iter().sum(),\n            \"*\" => result\
    \ *= operand.iter().sum(),\n            \"/\" => result /= operand.iter().sum(),\n\
    \            \"//\" => result /= operand.iter().sum(),\n            \"**\" =>\
    \ result **= operand.iter().sum(),\n            _ => panic!(\"Invalid operator:\
    \ {}\", op),\n        }\n    }\n    result", "    let mut result = operand.iter().cloned().collect::<Vec<_>>();\n\
    \    for op in operator {\n        match op {\n            \"+\" => result.iter_mut().for_each(|&x|\
    \ {\n                *x += *result.iter().skip(1).next().unwrap();\n         \
    \   }),\n            \"-\" => result.iter_mut().for_each(|&x| {\n            \
    \    *x -= *result.iter().skip(1).next().unwrap();\n            }),\n        \
    \    \"*\" => result.iter_mut().for_each(|&x| {\n                *x *= *result.iter().skip(1).next().unwrap();\n\
    \            }),\n            \"/\" => result.iter_mut().for_each(|&x| {\n   \
    \             *x /= *result.iter().skip(1).next().unwrap();\n            }),\n\
    \            \"**\" => result.iter_mut().for_each(|&x| {\n                *x **=\
    \ *result.iter().skip(1).next().unwrap();\n            }),\n            _ => panic!(\"\
    Invalid operator: {}\", op),\n        }\n    }\n    *result.iter().next().unwrap()"]
stop_tokens:
- "\n}"
