name: HumanEval_49_modp
language: rs
prompt: "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5),\
  \ 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101),\
  \ 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101),\
  \ 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n\
  }\n"
completions: ["    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  "    if n < 0 {\n        p + n\n    } else {\n        n % p\n    }", "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", '    n & (p -
    1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', "    let\
    \ mut n2 = n * n;\n    while n2 > p {\n        n2 -= p;\n    }\n    n2 % p", " \
    \   let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    if n < 0 {\n        n + (p as isize)\n    } else {\n      \
    \  n % p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n  \
    \  debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p", "    if\
    \ n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n   \
    \ }\n    if n == p {\n        return n;\n    }\n    if n < p {\n        return\
    \ modp(n - 1, p) + 1;\n    }\n    if n > p {\n        return modp(n, p - 1);\n\
    \    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);", '    n
    & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as i", "    if n < 0 {\n        n + (p as isize)\n    } else {\n        n %\
    \ p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <\
    \ n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n\
    \    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n ", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(p <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    ", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", '    n & (p - 1)', '    n & (p - 1)', '    n
    & (p - 1)', "    let mut result = n;\n    if result > p {\n        result = p\
    \ - 1;\n    }\n    if result < 0 {\n        result = 0;\n    }\n    result", '    n
    - (n % p)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p % n == 0);\n    debug_assert!(n % p == 0);\n   \
    \ n + (p - 1) % p", "    if n < 0 {\n        n + (p - 1)\n    } else {\n     \
    \   n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n \
    \   }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n  \
    \  }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(n <= 64);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n\
    \ & n) == 0);\n    debug_assert!((p & n) == 0);\n    debug_assert!((n & p) ==\
    \ 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n & n) == 0);\n  \
    \  debug_assert!((p & p) == 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p\
    \ & p) == 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p & p) ==\
    \ 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p & p) == 0);\n  \
    \  debug_assert!((n & n) == 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n\
    \ & n) == 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n & n) ==\
    \ 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n & n) == 0);\n  \
    \  debug_assert!((p & p) == 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p\
    \ & p) == 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p & p) ==\
    \ 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p & p) == 0);\n  \
    \  debug_assert!((n & n) == 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n\
    \ & n) == 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n & n) ==\
    \ 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n & n) == 0);\n  \
    \  debug_assert!((p & p) == 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p\
    \ & p) == 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p & p) ==\
    \ 0);\n    debug_assert!((n & n) == 0);\n    debug_assert!((p & p) == 0);\n  \
    \  debug_assert!((n & n) == 0);\n    debug_assert!((p & p) == 0);\n    debug_assert!((n ",
  '    n & (p - 1)', "    let mut r = 1;\n    while n > 0 {\n        if n % p == 0\
    \ {\n            n /= p;\n        } else {\n            r <<= 1;\n           \
    \ r |= 1;\n        }\n    }\n    r", "    let mut result = n;\n    while result\
    \ > p {\n        result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p %\
    \ 2 == 0);\n    debug_assert!(n >= 2);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n\
    \ % p == 0);\n    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n\
    \    debug_assert!(n % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ % n == 0);\n    debug_assert!(n % p == 0);\n    debug_assert!(n % n == 0);\n\
    \    debug_assert!(n % p == 0);\n    debug_assert", '    n & (p - 1)', '    n
    & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)', "    if n\
    \ < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n >= p\
    \ {\n        n - p\n    } else {\n        (p + n) % p\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p);\n    debug_assert!(p > 0);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert",
  "    debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p == 0 ||\
    \ n % p);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p\
    \ >= -64);\n    debug_assert!((p - 1) % p == 0);\n    debug_assert!(p < 64);\n\
    \    debug_assert!(p > -64);\n    debug_assert!((p - 1) < 64);\n    debug_assert!((p\
    \ - 1) > -64);\n    debug_assert!((p - 2) % p == 0);\n    debug_assert!(p < 64);\n\
    \    debug_assert!(p > -64);\n    debug_assert!((p - 2) % p == 0);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!((p - 3) % p == 0);\n\
    \    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!((p\
    \ - 3) % p == 0);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n \
    \   debug_assert!((p - 4) % p == 0);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!((p - 4) % p == 0);\n    debug_assert!(p < 64);\n\
    \    debug_assert!(p > -64);\n    debug_assert!((p - 5) % p == 0);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!((p - 5) % p == 0);\n\
    \    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!((p\
    \ - 6) % p == 0);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n \
    \   debug_assert!((p - 6) % p == 0);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!((p - 7) % p == 0);\n    debug_assert!(p < 64);\n\
    \    debug_assert!(p > -64);\n    debug_assert!((p - 7) % p == 0);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!((p - 8) % p == 0);\n\
    \    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_", "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", '    n & (p -
    1)', "    if n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return\
    \ p;\n    }\n    if n == p {\n        return n;\n    }\n    if n % p == 0 {\n\
    \        return modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == 0 {", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    let mut result = n;\n    while result\
    \ > p {\n        result -= p;\n    }\n    result", '    n & (p - 1)', "    if\
    \ n >= p {\n        n - p\n    } else {\n        (p + n) % p\n    }", "    if\
    \ n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i64::MAX as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n\
    \    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX\
    \ as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p\
    \ <= std::isize::MAX as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n\
    \    debug_assert!(p <= std::i16::MAX as isize);\n    debug_assert!(p <= std::i64::MAX\
    \ as isize);\n    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p\
    \ <= std::u8::MAX as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n\
    \    debug_assert!(p <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX\
    \ as isize);\n    debug_assert!(p <= std::usize::MAX as isize);\n    debug_assert!(p\
    \ <= std::i8::MAX as isize);\n    debug_assert!(p <= std::i16::MAX as isize);\n\
    \    debug_assert!(p <= std::i64::MAX as isize);\n    debug_assert!(p <= std::isize::MAX\
    \ as isize);\n    debug_assert!(p <= std::u8::MAX as isize);\n    debug_assert!(p\
    \ <= std::u16::MAX as isize);\n    debug_assert!(p <= std::u32::MAX as isize);\n\
    \    debug_assert!(p <= std::u64::MAX as isize);\n    debug_assert!(p <= std::usize::MAX\
    \ as isize);\n    debug_assert!(p <= std::i8::MAX as isize);\n    debug_assert!(p\
    \ <= std::i16::MAX as isize);\n    debug_assert!(p <= std::i64::MAX as isize);\n\
    \    debug_assert!(p <= std::isize::MAX as isize);\n    debug_assert!(p <= std::u8::MAX\
    \ as isize);\n    debug_assert!(p <= std::u16::MAX as isize);\n    debug_assert!(p\
    \ <= std::u32::MAX as isize);\n    debug_assert!(p <= std::u64::MAX as isize);\n\
    \    debug_assert!(p <= std::usize::MAX as ", "    if n < 0 {\n        n + (p\
    \ - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", "    if n < 0 {\n        n + (p - 1)\n    }\
    \ else {\n        n\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <=\
    \ std::i32::MAX);\n    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= ", '    n & (p - 1)', '    n &
    (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 1);\n    let mut result = n;\n    while result\
    \ > p {\n        result -= 2;\n    }\n    result", '    n & (p - 1)', '    n &
    (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!((n % p) == 0);\n    (n / p) as isize", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n", "    if n < 0 {\n        n + (p as isize)\n    } else {\n       \
    \ n % p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p\
    \ >= 1);\n    debug_assert!(p <= MAX_DIGITS);\n    let mut result = n;\n    while\
    \ result > p {\n        result -= p;\n    }\n    result", '    n & (p - 1)', " \
    \   if n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n\
    \    }\n    if p % n == 0 {\n        return p / n;\n    }\n    if p % n == 1 {\n\
    \        return modp(n - 1, p);\n    }\n    if p % n == 2 {\n        return modp((n\
    \ - 1) * (n - 1), p);\n    }\n    if p % n == 3 {\n        return modp((n - 1)\
    \ * (n - 1) * (n - 1), p);\n    }\n    if p % n == 4 {\n        return modp((n\
    \ - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n    if p % n == 5 {\n      \
    \  return modp((n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n \
    \   if p % n == 6 {\n        return modp((n - 1) * (n - 1) * (n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1), p);\n    }\n    if p % n == 7 {\n        return modp((n\
    \ - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n\
    \    if p % n == 8 {\n        return modp((n - 1) * (n - 1) * (n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n    if p % n == 9 {\n \
    \       return modp((n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n    if p % n == 10 {\n\
    \        return modp((n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n    if p % n\
    \ == 11 {\n        return modp((n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n -\
    \ 1), p);\n    }\n    if p % n == 12 {\n        return modp((n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n -\
    \ 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1), p);\n    }\n    if p % n == 13 {\n\
    \        return modp((n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1)\
    \ * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n - 1) * (n -\
    \ 1) * (n - 1), p);\n    }\n    if p % n == 14 {\n", "    if n < 0 {\n       \
    \ p\n    } else {\n        n & (p - 1)\n    }", "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p <=\
    \ std::i32::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::u8::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::i64::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p\
    \ <= std::usize::MAX);\n    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p\
    \ <= std::u8::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::i16::MAX);\n    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p\
    \ <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::i64::MAX);\n    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p\
    \ <= std::isize::MAX);\n    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p\
    \ <= std::i8::MAX);\n    debug_assert!(p <= std::u8::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p\
    \ <= std::u64::MAX);\n    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p\
    \ <= std::u16::MAX);\n    debug_assert!(p <= std::u32", "    if n >= p {\n   \
    \     n - p\n    } else {\n        p + (n - p)\n    }", '    n & (p - 1)', " \
    \   let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", '    n & (p - 1)', '    n - (n % p)', "    if n < 0 {\n        n\
    \ + (p - 1)\n    } else {\n        n % p\n    }", "    let mut res = 0;\n    while\
    \ n > 0 {\n        if n % p == 0 {\n            res += p;\n            n /= p;\n\
    \        } else {\n            res += 1;\n            n -= 1;\n        }\n   \
    \ }\n    res", '    n & (p - 1)', '    n & (p - 1)', "    let mut result = n;\n\
    \    while result > p && result % p != 0 {\n        result -= p;\n    }\n    result",
  "    debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p > 0);\n\
    \    debug_assert!(p < 64);\n    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", '    n & (p - 1)', '    n - (n % p)', '    n
    & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % n == 0);\n    n - (p % n)", '    n & (p - 1)',
  '    n & (p - 1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n\
    \    }", '    n - (n % p)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n\
    \        n % p\n    }", '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n\
    \ > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % p == 0);\n    n / p", '    n & (p - 1)', "    if n < 0 {\n        n + (p -\
    \ 1)\n    } else {\n        n\n    }", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p %\
    \ 2 == 0);\n    debug_assert!(n % p == 0);\n    n + (p - 1) as isize", '    n
    & (p - 1)', "    let mut result = n;\n    while result > p && result % p != 0\
    \ {\n        result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n \
    \   debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(n <=\
    \ 64);\n    if n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return\
    \ p;\n    }\n    if n == 2 {\n        return p % 3;\n    }\n    if n == 3 {\n\
    \        return p % 5;\n    }\n    if n == 4 {\n        return p % 7;\n    }\n\
    \    if n == 5 {\n        return p % 11;\n    }\n    if n == 6 {\n        return\
    \ p % 13;\n    }\n    if n == 7 {\n        return p % 17;\n    }\n    if n ==\
    \ 8 {\n        return p % 21;\n    }\n    if n == 9 {\n        return p % 25;\n\
    \    }\n    if n == 10 {\n        return p % 29;\n    }\n    if n == 11 {\n  \
    \      return p % 33;\n    }\n    if n == 12 {\n        return p % 37;\n    }\n\
    \    if n == 13 {\n        return p % 41;\n    }\n    if n == 14 {\n        return\
    \ p % 45;\n    }\n    if n == 15 {\n        return p % 49;\n    }\n    if n ==\
    \ 16 {\n        return p % 53;\n    }\n    if n == 17 {\n        return p % 57;\n\
    \    }\n    if n == 18 {\n        return p % 61;\n    }\n    if n == 19 {\n  \
    \      return p % 65;\n    }\n    if n == 20 {\n        return p % 69;\n    }\n\
    \    if n == 21 {\n        return p % 73;\n    }\n    if n == 22 {\n        return\
    \ p % 77;\n    }\n    if n == 23 {\n        return p % 81;\n    }\n    if n ==\
    \ 24 {\n        return p % 85;\n    }\n    if n == 25 {\n        return p % 89;\n\
    \    }\n    if n == 26 {\n        return p % 93;\n    }\n    if n == 27 {\n  \
    \      return p % 97;\n    }\n    if n == 28 {\n        return p % 101;\n    }\n\
    \    if n == 29 {\n        return p % 105;\n    }\n    if n == 30 {\n        return\
    \ p % 109;\n    }\n    if n == 31 {\n        return p % 113;\n    }\n    if n\
    \ == 32 {\n        return p % 117;\n    }\n    if n == 33 {\n        return p\
    \ % 121;\n    }\n    if n == 34 {\n        return p % 125;\n    }\n    if n ==\
    \ 35 {\n        return p % 129;\n    }\n    if n == 36 {\n        return p % 133;\n\
    \    }\n    if n == 37 {\n        return p % 137;\n    }\n    if n == ", '    n
    & (p - 1)', '    n & (p - 1)', "    let mut r = p % n;\n    if r < 0 {\n     \
    \   r += n;\n    }\n    r", '    n & (p - 1)', "    debug_assert!(n > 0);\n  \
    \  debug_assert!(p > 0);\n    let mut result = n;\n    while result > p {\n  \
    \      result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != 2);\n    debug_assert!(p != 3);\n    debug_assert!(p\
    \ != 4);\n    debug_assert!(p != 5);\n    debug_assert!(p != 6);\n    debug_assert!(p\
    \ != 7);\n    debug_assert!(p != 8);\n    debug_assert!(p != 9);\n    debug_assert!(p\
    \ != 10);\n    debug_assert!(p != 11);\n    debug_assert!(p != 12);\n    debug_assert!(p\
    \ != 13);\n    debug_assert!(p != 14);\n    debug_assert!(p != 15);\n    debug_assert!(p\
    \ != 16);\n    debug_assert!(p != 17);\n    debug_assert!(p != 18);\n    debug_assert!(p\
    \ != 19);\n    debug_assert!(p != 20);\n    debug_assert!(p != 21);\n    debug_assert!(p\
    \ != 22);\n    debug_assert!(p != 23);\n    debug_assert!(p != 24);\n    debug_assert!(p\
    \ != 25);\n    debug_assert!(p != 26);\n    debug_assert!(p != 27);\n    debug_assert!(p\
    \ != 28);\n    debug_assert!(p != 29);\n    debug_assert!(p != 30);\n    debug_assert!(p\
    \ != 31);\n    debug_assert!(p != 32);\n    debug_assert!(p != 33);\n    debug_assert!(p\
    \ != 34);\n    debug_assert!(p != 35);\n    debug_assert!(p != 36);\n    debug_assert!(p\
    \ != 37);\n    debug_assert!(p != 38);\n    debug_assert!(p != 39);\n    debug_assert!(p\
    \ != 40);\n    debug_assert!(p != 41);\n    debug_assert!(p != 42);\n    debug_assert!(p\
    \ != 43);\n    debug_assert!(p != 44);\n    debug_assert!(p != 45);\n    debug_assert!(p\
    \ != 46);\n    debug_assert!(p != 47);\n    debug_assert!(p != 48);\n    debug_assert!(p\
    \ != 49);\n    debug_assert!(p != 50);\n    debug_assert!(p != 51);\n    debug_assert!(p\
    \ != 52);\n    debug_assert!(p != 53);\n    debug_assert!(p != 54);\n    debug_assert!(p\
    \ != 55);\n    debug_assert!(", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", "    let mut n1 = n;\n    let mut n2 = n;\n    while n2\
    \ % p != 0 {\n        n1 += 1;\n        n2 += 1;\n    }\n    n1", "    let mut\
    \ result = n;\n    while result > p {\n        result -= p;\n    }\n    result",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n\
    \ < 0 {\n        p + n\n    } else {\n        n % p\n    }", "    if n < 0 {\n\
    \        n + (p - 1)\n    } else {\n        n\n    }", "    debug_assert!(n >=\
    \ 0);\n    debug_assert!(p);\n    debug_assert!(p == 0 || n % p);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 1);\n    debug_assert!(p\
    \ == 0 || n % p == -1);\n    debug_assert!(p == 0 || n % p == -2);\n    debug_assert!(p\
    \ == 0 || n % p == -3);\n    debug_assert!(p == 0 || n % p == -4);\n    debug_assert!(p\
    \ == 0 || n % p == -5);\n    debug_assert!(p == 0 || n % p == -6);\n    debug_assert!(p\
    \ == 0 || n % p == -7);\n    debug_assert!(p == 0 || n % p == -8);\n    debug_assert!(p\
    \ == 0 || n % p == -9);\n    debug_assert!(p == 0 || n % p == -10);\n    debug_assert!(p\
    \ == 0 || n % p == -11);\n    debug_assert!(p == 0 || n % p == -12);\n    debug_assert!(p\
    \ == 0 || n % p == -13);\n    debug_assert!(p == 0 || n % p == -14);\n    debug_assert!(p\
    \ == 0 || n % p == -15);\n    debug_assert!(p == 0 || n % p == -16);\n    debug_assert!(p\
    \ == 0 || n % p == -17);\n    debug_assert!(p == 0 || n % p == -18);\n    debug_assert!(p\
    \ == 0 || n % p == -19);\n    debug_assert!(p == 0 || n % p == -20);\n    debug_assert!(p\
    \ == 0 || n % p == -21);\n    debug_assert!(p == 0 || n % p == -22);\n    debug_assert!(p\
    \ == 0 || n % p == -23);\n    debug_assert!(p == 0 || n % p == -24);\n    debug_assert!(p\
    \ == 0 || n % p == -25);\n    debug_assert!(p == 0 || n % p == -26);\n    debug_assert!(p\
    \ == 0 || n % p == -27);\n    debug_assert!(p == 0 || n % p == -28);\n    debug_assert!(p\
    \ == 0 || n % p == -29);\n    debug_assert!(p == 0 || n % p == -30);\n    debug_assert!(p\
    \ == 0 || n % p == -40);\n    debug_assert!(p == 0 || n % p == -50);\n    debug_assert!(p\
    \ == 0 || n % p == -60);\n    debug_assert!(p == 0 || n % p == -70);\n    debug_assert!(p\
    \ == 0 || n % p == -80", "    if n < 0 {\n        n + (p - 1)\n    } else {\n\
    \        n % p\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p",
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", "    if n\
    \ == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n    }\n\
    \    if n == p {\n        return n;\n    }\n    if n % p == 0 {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n % p == p\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0 {\n     \
    \   return modp(n / p, p);\n    }\n    if n % p == p {\n        return modp(n\
    \ / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n    }\n\
    \    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n % p == 0\
    \ {\n        return modp(n / p, p);\n    }\n    if n % p == p {\n        return\
    \ modp(n / p, p);\n    }\n    if n % p == 0 {\n        return modp(n / p, p);\n\
    \    }\n    if n % p == p {\n        return modp(n / p, p);\n    }\n    if n %\
    \ p == 0 {", '    n & (p - 1)', '    n & (p - 1)', "    if n == 0 {\n        return\
    \ 1;\n    }\n    if n == 1 {\n        return p;\n    }\n    if n == p {\n    \
    \    return n;\n    }\n    if p < n {\n        return modp(n - p, p);\n    }\n\
    \    if p > n {\n        return modp(n, p - n);\n    }\n    let mut res = p;\n\
    \    while n > 0 {\n        if n % 2 == 0 {\n            res *= p;\n        }\n\
    \        n /= 2;\n        p *= p;\n    }\n    res", "    if n < 0 {\n        n\
    \ + (p - 1)\n    } else {\n        n\n    }", "    if n >= p {\n        n - p\n\
    \    } else {\n        0\n    }", "    if n < 0 {\n        n + (p - 1)\n    }\
    \ else {\n        n % p\n    }", "    if n >= p {\n        n\n    } else {\n \
    \       n - p\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n  \
    \      n\n    }", '    n & (p - 1)', '    n & (p - 1)', '    n - (n % p)', " \
    \   if n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n\
    \    }\n    if p < 2 {\n        return n;\n    }\n    if p < n {\n        return\
    \ modp(n - p, p);\n    }\n    if p < p {\n        return modp(n, p - n);\n   \
    \ }\n    if p < p {\n        return modp(n - p, p);\n    }\n    if p < p {\n \
    \       return modp(n, p - n);\n    }\n    if p < p {\n        return modp(n -\
    \ p, p);\n    }\n    if p < p {\n        return modp(n, p - n);\n    }\n    if\
    \ p < p {\n        return modp(n - p, p);\n    }\n    if p < p {\n        return\
    \ modp(n, p - n);\n    }\n    if p < p {\n        return modp(n - p, p);\n   \
    \ }\n    if p < p {\n        return modp(n, p - n);\n    }\n    if p < p {\n \
    \       return modp(n - p, p);\n    }\n    if p < p {\n        return modp(n,\
    \ p - n);\n    }\n    if p < p {\n        return modp(n - p, p);\n    }\n    if\
    \ p < p {\n        return modp(n, p - n);\n    }\n    if p < p {\n        return\
    \ modp(n - p, p);\n    }\n    if p < p {\n        return modp(n, p - n);\n   \
    \ }\n    if p < p {\n        return modp(n - p, p);\n    }\n    if p < p {\n \
    \       return modp(n, p - n);\n    }\n    if p < p {\n        return modp(n -\
    \ p, p);\n    }\n    if p < p {\n        return modp(n, p - n);\n    }\n    if\
    \ p < p {\n        return modp(n - p, p);\n    }\n    if p < p {\n        return\
    \ modp(n, p - n);\n    }\n    if p < p {\n        return modp(n - p, p);\n   \
    \ }\n    if p < p {\n        return modp(n, p - n);\n    }\n    if p < p {\n \
    \       return modp(n - p, p);\n    }\n    if p < p {\n        return modp(n,\
    \ p - n);\n    }\n    if p < p {\n        return modp(n - p, p);\n    }\n    if\
    \ p < p {\n        return modp(n, p - n);\n    }\n    if p < p {\n        return\
    \ modp(n - p, p);\n    }\n    if p < p {\n        return modp(n, p - n);\n   \
    \ }\n    if p < p {\n        return modp(n - p, p);\n    }\n    if p < p {\n \
    \       return modp(n, p - n);\n    }\n    if p < p {\n        return modp(n -\
    \ p, p);\n    }\n    if p < p {\n        return modp(n, p - n);\n    }\n    if\
    \ p < p {\n        return mod", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n \
    \       n\n    }", "    if n < 0 {\n        n + (p - 1)\n    } else {\n      \
    \  n\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);\n    debug_assert!(p != 0);\n    debug_assert!(p\
    \ != 1);\n    debug_assert!(p != n);", '    n & (p - 1)', "    if n < 0 {\n  \
    \      n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', '    n
    - (n % p)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX);\n    debug_assert!(p <= std::i64::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert!(p <= std::u32::MAX);\n\
    \    debug_assert!(p <= std::u64::MAX);\n    debug_assert!(p <= std::isize::MAX);\n\
    \    debug_assert!(p <= std::i16::MAX);\n    debug_assert!(p <= std::i8::MAX);\n\
    \    debug_assert!(p <= std::usize::MAX);\n    debug_assert!(p <= std::u16::MAX);\n\
    \    debug_assert!(p <= std::u32::MAX);\n    debug_assert!(p <= std::u64::MAX);\n\
    \    debug_assert!(p <= std::isize::MAX);\n    debug_assert!(p <= std::i16::MAX);\n\
    \    debug_assert!(p <= std::i8::MAX);\n    debug_assert!(p <= std::usize::MAX);\n\
    \    debug_assert!(p <= std::u16::MAX);\n    debug_assert", "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p\
    \ < std::i32::MAX as isize);\n    let mut result = n;\n    while result > p {\n\
    \        result -= p;\n    }\n    result", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p < std::i32::MAX as isize);\n\
    \    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p < std::i64::MAX\
    \ as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p\
    \ < std::isize::MAX as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::u8::MAX\
    \ as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p\
    \ < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX as isize);\n\
    \    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p\
    \ < std::u8::MAX as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n\
    \    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p < std::u64::MAX\
    \ as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p\
    \ < std::usize::MAX as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n\
    \    debug_assert!(p < std::u8::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n    debug_assert!(p\
    \ < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n\
    \    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p < std::i8::MAX\
    \ as isize);\n    debug_assert!(p < std::u8::MAX as isize);\n    debug_assert!(p\
    \ < std::u16::MAX as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n\
    \    debug_assert!(p < std::u64::MAX as isize);\n    debug_assert!(p < std::isize::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    ", '    n
    & (p - 1)', '    n & (p - 1)', "    debug_assert!(n > 0);\n    debug_assert!(p\
    \ > 0);\n    let mut result = n;\n    while result > p {\n        result -= p;\n\
    \    }\n    result", "    if n < 0 {\n        n ^ (p - 1)\n    } else {\n    \
    \    n & (p - 1)\n    }", '    n & (p - 1)', '    n & (p - 1)', '    n & (p -
    1)', "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }", " \
    \   if n < 0 {\n        n ^ (p - 1)\n    } else {\n        n % (p - 1)\n    }",
  "    let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    let mut result = n;\n    while result > p {\n        result\
    \ -= p;\n    }\n    result", "    if n < 0 {\n        n + (p - 1)\n    } else\
    \ {\n        n\n    }", '    n & (p - 1)', '    n & (p - 1)', '    n & (p - 1)',
  "    if n < 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", "   \
    \ debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(p < n);\n    debug_assert!(n\
    \ % 2 == 0);\n    debug_assert!(p < n);", "    debug_assert!(n >= 0);\n    debug_assert!(p\
    \ >= 0);\n    debug_assert!(p <= n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(p\
    \ < n);\n    let mut res = 0;\n    while n != 0 {\n        if n % 2 == 0 {\n \
    \           res += p / 2;\n        }\n        n /= 2;\n        p /= 2;\n    }\n\
    \    res", '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ > 0);\n    debug_assert!(p <= 64);\n    debug_assert!(p >= -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p\
    \ < 64);\n    debug_assert!(p > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p\
    \ > -64);\n    debug_assert!(p < 64);\n    debug_assert!(p > -64);\n    debug_",
  "    debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p > 0);\n\
    \    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p < 256);\n    debug_assert!(p\
    \ < 256);\n    debug_assert", "    if n < 0 {\n        n + (p as isize)\n    }\
    \ else {\n        n % p\n    }", '    n & (p - 1)', "    if n < 0 {\n        n\
    \ + (p - 1)\n    } else {\n        n\n    }", "    if n < 0 {\n        n + (p\
    \ - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', '    n & (p - 1)',
  '    n & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n   \
    \ debug_assert!(p <= n);\n    debug_assert!(n <= 64);\n    let mut nn = n;\n \
    \   let mut p = p;\n    while nn >= p {\n        nn -= p;\n        p += 1;\n \
    \   }\n    p -= 1;\n    p % n", '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n  \
    \  debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <=\
    \ MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n    debug_assert!(p <= MAX_DIGITS);\n\
    \    debug_assert!(p <= MAX_DIGITS);\n    ", '    n & (p - 1)', '    n & (p -
    1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p && n <= (p\
    \ + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p && n <=\
    \ (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p && n\
    \ <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p &&\
    \ n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n >= p\
    \ && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n >=\
    \ p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(n\
    \ >= p && n <= (p + p / 2));\n    debug_assert!(n % p == 0);\n    debug_assert!(",
  "    debug_assert!(n > 0);\n    debug_assert!(p > 0);\n    debug_assert!(p <= n);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p <=\
    \ n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p >= 0);\n    ", "    if n < 0 {\n        n + (p -\
    \ 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    if n < 0 {\n  \
    \      n + (p - 1)\n    } else {\n        n\n    }", '    n & (p - 1)', "    let\
    \ mut npow = pow(n);\n    npow %= p;\n    if npow < 0 {\n        npow += p;\n\
    \    }\n    npow", "    if n < 0 {\n        n + (p - 1)\n    } else {\n      \
    \  n % p\n    }", "    let mut res = 0;\n    while n > 0 {\n        if n % p ==\
    \ 0 {\n            res += p;\n        }\n        n /= p;\n    }\n    res", " \
    \   debug_assert!(n >= 0);\n    debug_assert!(p);\n    debug_assert!(p == 0 ||\
    \ n % p);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p == 0\
    \ || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || n % p == 0);\n    debug_assert!(p\
    \ == 0 || n % p == 0);\n    debug_assert!(p == 0 || ", '    n & (p - 1)', "  \
    \  debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n\
    \    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', '    n & (p -
    1)', '    n - (n % p)', '    n & (p - 1)', '    n & (p - 1)', "    debug_assert!(n\
    \ >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ < std::i32::MAX as isize);\n    debug_assert!(p < std::u32::MAX as isize);\n\
    \    debug_assert!(p < std::i64::MAX as isize);\n    debug_assert!(p < std::u64::MAX\
    \ as isize);\n    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p\
    \ < std::usize::MAX as isize);\n    debug_assert!(p < std::i16::MAX as isize);\n\
    \    debug_assert!(p < std::u16::MAX as isize);\n    debug_assert!(p < std::i8::MAX\
    \ as isize);\n    debug_assert!(p < std::u8::MAX as isize);\n    debug_assert!(p\
    \ < std::i128::MAX as isize);\n    debug_assert!(p < std::u128::MAX as isize);\n\
    \    debug_assert!(p < std::isize::MAX as isize);\n    debug_assert!(p < std::usize::MAX\
    \ as isize);\n    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p\
    \ < std::u16::MAX as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n\
    \    debug_assert!(p < std::u8::MAX as isize);\n    debug_assert!(p < std::i128::MAX\
    \ as isize);\n    debug_assert!(p < std::u128::MAX as isize);\n    debug_assert!(p\
    \ < std::isize::MAX as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n\
    \    debug_assert!(p < std::i16::MAX as isize);\n    debug_assert!(p < std::u16::MAX\
    \ as isize);\n    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p\
    \ < std::u8::MAX as isize);\n    debug_assert!(p < std::i128::MAX as isize);\n\
    \    debug_assert!(p < std::u128::MAX as isize);\n    debug_assert!(p < std::isize::MAX\
    \ as isize);\n    debug_assert!(p < std::usize::MAX as isize);\n    debug_assert!(p\
    \ < std::i16::MAX as isize);\n    debug_assert!(p < std::u16::MAX as isize);\n\
    \    debug_assert!(p < std::i8::MAX as isize);\n    debug_assert!(p < std::",
  '    n & (p - 1)', '    n & (p - 1)', "    if n < 0 {\n        n + (p as isize)\n\
    \    } else {\n        n - (p as isize)\n    }"]
stop_tokens:
- "\n}"
