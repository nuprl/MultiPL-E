name: HumanEval_49_modp
language: rs
prompt: "/// Return 2^n modulo p (be aware of numerics).\n/// >>> modp(3, 5)\n///\
  \ 3\n/// >>> modp(1101, 101)\n/// 2\n/// >>> modp(0, 101)\n/// 1\n/// >>> modp(3,\
  \ 11)\n/// 8\n/// >>> modp(100, 101)\n/// 1\nfn modp(n: isize, p: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = modp;\n    assert_eq!(candidate(3, 5),\
  \ 3);\n    assert_eq!(candidate(1101, 101), 2);\n    assert_eq!(candidate(0, 101),\
  \ 1);\n    assert_eq!(candidate(3, 11), 8);\n    assert_eq!(candidate(100, 101),\
  \ 1);\n    assert_eq!(candidate(30, 5), 4);\n    assert_eq!(candidate(31, 5), 3);\n\
  }\n"
completions: ["    if n < 0 {\n        n + (p - 1)\n    } else {\n        n\n    }",
  "    if n < 0 {\n        p + n\n    } else {\n        n % p\n    }", "    if n <\
    \ 0 {\n        n + (p - 1)\n    } else {\n        n % p\n    }", '    n & (p -
    1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(n % p == 0);\n    n / p", '    n & (p - 1)', "    let\
    \ mut n2 = n * n;\n    while n2 > p {\n        n2 -= p;\n    }\n    n2 % p", " \
    \   let mut result = n;\n    while result > p {\n        result -= p;\n    }\n\
    \    result", "    if n < 0 {\n        n + (p as isize)\n    } else {\n      \
    \  n % p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n  \
    \  debug_assert!(p < n);\n    debug_assert!(n % p == 0);\n    n / p", "    if\
    \ n == 0 {\n        return 1;\n    }\n    if n == 1 {\n        return p;\n   \
    \ }\n    if n == p {\n        return n;\n    }\n    if n < p {\n        return\
    \ modp(n - 1, p) + 1;\n    }\n    if n > p {\n        return modp(n, p - 1);\n\
    \    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ < n);\n    debug_assert!(p % 2 == 0);\n    debug_assert!(n % 2 == 0);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n\
    \ % 2 == 1);\n    debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n   \
    \ debug_assert!(n >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n\
    \ >= p);\n    debug_assert!(n % 2 == 1);\n    debug_assert!(n >= p);", '    n
    & (p - 1)', "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= n);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p\
    \ <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX as isize);\n\
    \    debug_assert!(p <= std::i32::MAX as isize);\n    debug_assert!(p <= std::i32::MAX\
    \ as i", "    if n < 0 {\n        n + (p as isize)\n    } else {\n        n %\
    \ p\n    }", "    debug_assert!(n >= 0);\n    debug_assert!(p >= 0);\n    debug_assert!(p\
    \ <= MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p <\
    \ n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n\
    \    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p\
    \ < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n\
    \    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n    debug_assert!(p < n);\n\
    \    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n\
    \ <= MAX_DIGITS);\n    debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n\
    \    debug_assert!(n < MAX_DIGITS);\n    debug_assert!(n <= MAX_DIGITS);\n   \
    \ debug_assert!(p < n);\n    debug_assert!(p < MAX_DIGITS);\n    debug_assert!(n\
    \ < MAX_DIGITS);\n    debug_assert!(n ", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }", '    n & (p - 1)', "    debug_assert!(n >= 0);\n\
    \    debug_assert!(p >= 0);\n    debug_assert!(p <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(p <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n\
    \ <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <=\
    \ UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n\
    \    debug_assert!(n <= UINT32_MAX);\n    debug_assert!(n <= UINT32_MAX);\n  \
    \  debug_assert!(n <= UINT32_MAX);\n    ", "    if n < 0 {\n        n + (p - 1)\n\
    \    } else {\n        n\n    }"]
stop_tokens:
- "\n}"
