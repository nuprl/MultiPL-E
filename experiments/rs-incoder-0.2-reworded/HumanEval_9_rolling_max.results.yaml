name: HumanEval_9_rolling_max
language: rs
results:
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &i in numbers {\n        if i > max {\n            max = i;\n       \
    \     max_index = i;\n        }\n    }\n    let mut result = Vec::new();\n   \
    \ for i in 0..numbers.len() {\n        if i == max_index {\n            result.push(max);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb2lmwelf.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb2lmwelf.rs:16:17\n   |\n16 |         if i ==\
    \ max_index {\n   |                 ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if i == max_index.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb2lmwelf.rs:19:25\n   |\n19 |             result.push(i);\n\
    \   |                         ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |             result.push(i.try_into().unwrap());\n   |      \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpobwnh3ph.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi9yrti8w.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi9yrti8w.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi9yrti8w.rs:12:65\n\
    \   |\n12 |             max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \   |                                                                 ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max_index = numbers.iter().rev().position(|&x| x == *number).unwrap();\n\
    \   |                                                                 +\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpqywk3nn0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for number in numbers.iter() {\n        if number\
    \ > max_value {\n            max_value = number;\n            max_index = 0;\n\
    \        }\n        if number == max_value {\n            max_index += 1;\n  \
    \      }\n        result.push(max_value);\n        result.push(max_index);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_mbdxtg8.rs:10:21\n   |\n\
    10 |         if number > max_value {\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_mbdxtg8.rs:11:25\n   |\n7  |     let mut max_value\
    \ = numbers[0];\n   |                         ---------- expected due to this\
    \ value\n...\n11 |             max_value = number;\n   |                     \
    \    ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |             max_value = *number;\n   |              \
    \           +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp_mbdxtg8.rs:14:19\n\
    \   |\n14 |         if number == max_value {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzo2rxbtd.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzo2rxbtd.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzo2rxbtd.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzo2rxbtd.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter() {\n        if number > max_number {\n      \
    \      max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy91d2foz.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy91d2foz.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy91d2foz.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy91d2foz.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for value in numbers {\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n    }\n    for value in numbers {\n        if value ==\
    \ max_value {\n            result.push(value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmprkkwjzn3.rs:13:18\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for value in numbers {\n\
    \    |                  ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for value in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8   |   \
    \  for value in &numbers {\n    |                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    numbers.windows(2).fold(vec![max_so_far],\
    \ |mut acc, x| {\n        if acc[acc.len() - 1] < x {\n            acc.push(x);\n\
    \        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5utiz0ze.rs:15:33\n   |\n\
    15 |         if acc[acc.len() - 1] < x {\n   |                               \
    \  ^ expected `isize`, found `&[isize]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5utiz0ze.rs:16:22\n   |\n16 |             acc.push(x);\n   |       \
    \               ^ expected `isize`, found `&[isize]`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    numbers[max_pos..numbers.len()].iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpu4q0988w.rs:6:25\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for n in numbers {\n        if n > max_number {\n            max_number =\
    \ n;\n        }\n    }\n    for n in numbers {\n        if n == max_number {\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpyjhewuu0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    for i in 0..numbers.len() {\n        if numbers[i] > max_so_far {\n\
    \            max_so_far_rolling += 1;\n        }\n    }\n    max_so_far_rolling\
    \ += max_so_far_index;\n    max_so_far_rolling\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9g4xxtbq.rs:21:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     max_so_far_rolling\n   |     ^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplnyz_bdj.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplnyz_bdj.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for i in 1..numbers.len() {\n \
    \       if numbers[i] > max_number {\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpefwr1on0.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_f\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4obdpp25.rs:26:39\n   |\n\
    26 |     let mut max_so_far_iter = max_so_f\n   |                            \
    \           ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `max_so_f` in this scope\n  --> /tmp/tmp4obdpp25.rs:26:31\n\
    \   |\n26 |     let mut max_so_far_iter = max_so_f\n   |                     \
    \          ^^^^^^^^ help: a local variable with a similar name exists: `max_so_far`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp4obdpp25.rs:5:40\n  |\n5 | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -----------                         ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut max_numbers = Vec::new();\n    for i in 0..(max_index as usize) {\n\
    \        max_numbers.push(numbers[max_index - i]);\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmp0n5uwkri.rs:19:26\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n19  |         max_numbers.push(numbers[max_index - i]);\n\
    \    |                          ^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n            max_so_far_rolling_max\
    \ = number;\n        }\n        if number == max_so_far {\n            max_so_far_rolling_max\
    \ = max_so_far_rolling_max * max_so_far_index + number;\n        }\n    }\n  \
    \  max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7e0qsid4.rs:10:21\n   |\n\
    10 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7e0qsid4.rs:11:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7e0qsid4.rs:13:38\n\
    \   |\n8  |     let mut max_so_far_rolling_max = 0;\n   |                    \
    \                  - expected due to this value\n...\n13 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max_so_far_rolling_max = *number;\n   |                          \
    \            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp7e0qsid4.rs:15:19\n\
    \   |\n15 |         if number == max_so_far {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7e0qsid4.rs:16:82\n   |\n16 |             max_so_far_rolling_max = max_so_far_rolling_max\
    \ * max_so_far_index + number;\n   |                                         \
    \                                         ^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `&isize` to `usize`\n  --> /tmp/tmp7e0qsid4.rs:16:80\n\
    \   |"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_so_far =\
    \ numbers[0];\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n        }\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnxranpzu.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnxranpzu.rs:10:26\n   |\n7  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp86jrlwh0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
