language: rs
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &i in numbers {\n        if i > max {\n            max = i;\n       \
    \     max_index = i;\n        }\n    }\n    let mut result = Vec::new();\n   \
    \ for i in 0..numbers.len() {\n        if i == max_index {\n            result.push(max);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb2lmwelf.rs:8:9\n  |\n8 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `Option<isize>`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |         help: you can probably remove the explicit borrow: `i`\n  |\n  =\
    \ note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb2lmwelf.rs:16:17\n   |\n16 |         if i ==\
    \ max_index {\n   |                 ^^^^^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |         if i == max_index.try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpb2lmwelf.rs:19:25\n   |\n19 |             result.push(i);\n\
    \   |                         ^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |             result.push(i.try_into().unwrap());\n   |      \
    \                    ++++++++++++++++++++\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpobwnh3ph.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \        }\n    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi9yrti8w.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpi9yrti8w.rs:11:26\n   |\n7  |\
    \     let mut max_number = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_number = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_number = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi9yrti8w.rs:12:65\n\
    \   |\n12 |             max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \   |                                                                 ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max_index = numbers.iter().rev().position(|&x| x == *number).unwrap();\n\
    \   |                                                                 +\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpqywk3nn0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for number in numbers.iter() {\n        if number\
    \ > max_value {\n            max_value = number;\n            max_index = 0;\n\
    \        }\n        if number == max_value {\n            max_index += 1;\n  \
    \      }\n        result.push(max_value);\n        result.push(max_index);\n \
    \   }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_mbdxtg8.rs:10:21\n   |\n\
    10 |         if number > max_value {\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_mbdxtg8.rs:11:25\n   |\n7  |     let mut max_value\
    \ = numbers[0];\n   |                         ---------- expected due to this\
    \ value\n...\n11 |             max_value = number;\n   |                     \
    \    ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n11 |             max_value = *number;\n   |              \
    \           +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp_mbdxtg8.rs:14:19\n\
    \   |\n14 |         if number == max_value {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzo2rxbtd.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpzo2rxbtd.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzo2rxbtd.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzo2rxbtd.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter() {\n        if number > max_number\
    \ {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter() {\n        if number > max_number {\n      \
    \      max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy91d2foz.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy91d2foz.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy91d2foz.rs:15:21\n\
    \   |\n15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy91d2foz.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for value in numbers {\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n    }\n    for value in numbers {\n        if value ==\
    \ max_value {\n            result.push(value);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmprkkwjzn3.rs:13:18\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for value in numbers {\n\
    \    |                  ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for value in numbers {\n    |                  ^^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `numbers`\nhelp: consider iterating over a slice of the\
    \ `Vec<isize>`'s content to avoid moving into the `for` loop\n    |\n8   |   \
    \  for value in &numbers {\n    |                  +\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    numbers.windows(2).fold(vec![max_so_far],\
    \ |mut acc, x| {\n        if acc[acc.len() - 1] < x {\n            acc.push(x);\n\
    \        }\n        acc\n    })\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5utiz0ze.rs:15:33\n   |\n\
    15 |         if acc[acc.len() - 1] < x {\n   |                               \
    \  ^ expected `isize`, found `&[isize]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5utiz0ze.rs:16:22\n   |\n16 |             acc.push(x);\n   |       \
    \               ^ expected `isize`, found `&[isize]`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    numbers[max_pos..numbers.len()].iter().cloned().collect()\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpu4q0988w.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for n in numbers {\n        if n > max_number {\n            max_number =\
    \ n;\n        }\n    }\n    for n in numbers {\n        if n == max_number {\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpyjhewuu0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    for i in 0..numbers.len() {\n        if numbers[i] > max_so_far {\n\
    \            max_so_far_rolling += 1;\n        }\n    }\n    max_so_far_rolling\
    \ += max_so_far_index;\n    max_so_far_rolling\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9g4xxtbq.rs:21:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     max_so_far_rolling\n   |     ^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `isize`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplnyz_bdj.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplnyz_bdj.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for i in 1..numbers.len() {\n \
    \       if numbers[i] > max_number {\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpefwr1on0.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_iter\
    \ = numbers.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_far_iter.iter().cloned().collect::<Vec<_>>();\n    let mut max_so_far_iter\
    \ = max_so_f\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp4obdpp25.rs:26:39\n   |\n\
    26 |     let mut max_so_far_iter = max_so_f\n   |                            \
    \           ^ help: add `;` here\n27 | }\n   | - unexpected token\n\nerror[E0425]:\
    \ cannot find value `max_so_f` in this scope\n  --> /tmp/tmp4obdpp25.rs:26:31\n\
    \   |\n26 |     let mut max_so_far_iter = max_so_f\n   |                     \
    \          ^^^^^^^^ help: a local variable with a similar name exists: `max_so_far`\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmp4obdpp25.rs:5:40\n  |\n5 | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n  |    -----------                         ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n  |    |\n  |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n  |\n  = note: expected struct\
    \ `Vec<isize>`\n          found unit type `()`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut max_numbers = Vec::new();\n    for i in 0..(max_index as usize) {\n\
    \        max_numbers.push(numbers[max_index - i]);\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmp0n5uwkri.rs:19:26\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n19  |         max_numbers.push(numbers[max_index - i]);\n\
    \    |                          ^^^^^^^ value borrowed here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    help: consider iterating over a slice of the `Vec<isize>`'s content to avoid moving\
    \ into the `for` loop\n    |\n8   |     for number in &numbers {\n    |      \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n            max_so_far_rolling_max\
    \ = number;\n        }\n        if number == max_so_far {\n            max_so_far_rolling_max\
    \ = max_so_far_rolling_max * max_so_far_index + number;\n        }\n    }\n  \
    \  max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7e0qsid4.rs:10:21\n   |\n\
    10 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp7e0qsid4.rs:11:26\n   |\n6  |\
    \     let mut max_so_far = numbers[0];\n   |                          ----------\
    \ expected due to this value\n...\n11 |             max_so_far = number;\n   |\
    \                          ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp7e0qsid4.rs:13:38\n\
    \   |\n8  |     let mut max_so_far_rolling_max = 0;\n   |                    \
    \                  - expected due to this value\n...\n13 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |  \
    \           max_so_far_rolling_max = *number;\n   |                          \
    \            +\n\nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp7e0qsid4.rs:15:19\n\
    \   |\n15 |         if number == max_so_far {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp7e0qsid4.rs:16:82\n   |\n16 |             max_so_far_rolling_max = max_so_far_rolling_max\
    \ * max_so_far_index + number;\n   |                                         \
    \                                         ^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `&isize` to `usize`\n  --> /tmp/tmp7e0qsid4.rs:16:80\n\
    \   |"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_so_far =\
    \ numbers[0];\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n        }\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnxranpzu.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpnxranpzu.rs:10:26\n   |\n7  |     let mut max_so_far\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_so_far = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_so_far = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.len() == 0 {\n            max_numbers.push(number);\n\
    \        } else {\n            if number > max_numbers[max_numbers.len() - 1]\
    \ {\n                max_numbers.push(number);\n            }\n        }\n   \
    \ }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp86jrlwh0.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_value {\n \
    \           max_value = number;\n        }\n    }\n    for number in numbers.iter()\
    \ {\n        if number > max_value {\n            result.push(number);\n     \
    \       max_value = number;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpw0lnrrs1.rs:9:21\n  |\n9 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw0lnrrs1.rs:10:25\n   |\n10 |             max_value\
    \ = number;\n   |                         ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_value\
    \ = *number;\n   |                         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpw0lnrrs1.rs:14:21\n   |\n14 |         if number > max_value {\n\
    \   |                     ^^^^^^^^^\n   |                     |\n   |        \
    \             expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpw0lnrrs1.rs:16:25\n   |\n16 |             max_value = number;\n   |\
    \                         ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n16 |             max_value = *number;\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw0lnrrs1.rs:19:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    let mut max_value = numbers[0];\n\
    \    for number in numbers.iter() {\n        if number > max_number {\n      \
    \      max_number = number;\n            max_index = result.len();\n        }\n\
    \        if number == max_number {\n            result.push(number);\n       \
    \ } else {\n            result[max_index] = number;\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizbxmf9e.rs:11:21\n   |\n\
    11 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpizbxmf9e.rs:12:26\n   |\n12 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max_number = *number;\n   |                          +\n\nerror[E0277]:\
    \ can't compare `&isize` with `isize`\n  --> /tmp/tmpizbxmf9e.rs:15:19\n   |\n\
    15 |         if number == max_number {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpizbxmf9e.rs:21:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n21 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptljm5g1n.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptljm5g1n.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptljm5g1n.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_max:\
    \ Vec<isize> = vec![max_so_far];\n    for i in 1..numbers.len() {\n        if\
    \ numbers[i] > max_so_far {\n            max_so_far_rolling_max.push(max_so_far);\n\
    \            max_so_far = numbers[i];\n            max_so_far_index = i;\n   \
    \     }\n    }\n    max_so_far_rolling_max.push(max_so_far);\n    max_so_far_rolling_max\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd5yw8odr.rs:19:32\n   |\n\
    19 |             max_so_far_index = i;\n   |                                ^\
    \ expected `isize`, found `usize`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp63p7beem.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n13  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut current_index = -1;\n    for &n in numbers\
    \ {\n        if n == max_value {\n            current_index += 1;\n        } else\
    \ {\n            result.push(max_value);\n            result.push(max_index);\n\
    \            max_value = n;\n            max_index = current_index;\n        \
    \    current_index = -1;\n        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphli8blo1.rs:10:9\n   |\n\
    10 |     for &n in numbers {\n   |         ^^    ------- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n        }\n        if n > max_so_far_so_far {\n       \
    \     max_so_far_so_far = n;\n        }\n    }\n    max_so_far_so_far.iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp7gw7q_eo.rs:16:23\n   |\n16 |     max_so_far_so_far.iter().cloned().collect()\n\
    \   |                       ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in 0..numbers.len() {\n        if numbers[i] > max_value {\n      \
    \      result.push(max_index);\n            max_value = numbers[i];\n        \
    \    max_index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9vwargmu.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9vwargmu.rs:19:25\n   |\n19 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for index in numbers.iter().rev() {\n        if max_element\
    \ < numbers[index] {\n            max_element = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    vec![max_element]\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `&isize`\n --> /tmp/tmpm5hnp2tp.rs:9:26\n\
    \  |\n9 |         if max_element < numbers[index] {\n  |                     \
    \     ^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \  |\n  = help: the trait `SliceIndex<[isize]>` is not implemented for `&isize`\n\
    \  = note: required because of the requirements on the impl of `Index<&isize>`\
    \ for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `&isize`\n\
    \  --> /tmp/tmpm5hnp2tp.rs:10:27\n   |\n10 |             max_element = numbers[index];\n\
    \   |                           ^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<&isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpm5hnp2tp.rs:11:25\n   |\n11 |             max_index = index;\n\
    \   |                         ^^^^^ expected `usize`, found `&isize`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(max_index);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpv2qw38px.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpv2qw38px.rs:18:25\n   |\n18 |             result.push(max_index);\n\
    \   |                         ^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n18 |             result.push(max_index.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(n);\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmptljm5g1n.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmptljm5g1n.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptljm5g1n.rs:17:17\n   |\n17 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    17 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for number in numbers {\n        if number >\
    \ max_value {\n            result.push(max_value);\n            max_value = number;\n\
    \            max_index = 0;\n        } else {\n            max_value = number;\n\
    \            max_index += 1;\n        }\n    }\n    result.push(max_value);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmps1f_i5a0.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    let mut max_so_far_rolling_index = 0;\n    for n in numbers {\n  \
    \      if n > max_so_far {\n            max_so_far_rolling = n;\n            max_so_far_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling = 0;\n    let\
    \ mut max_so_far_rolling_rolling_index = 0;\n    for n in numbers {\n        if\
    \ n > max_so_far_rolling {\n            max_so_far_rolling_rolling = n;\n    \
    \        max_so_far_rolling_rolling_index = n;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_rolling_rolling = 0;\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far_rolling_rolling {\n\
    \            max_so_far_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n  \
    \  for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling {\n \
    \           max_so_far_rolling_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n  \
    \  for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling_rolling\
    \ {\n            max_so_far_rolling_rolling_rolling_rolling_rolling = n;\n   \
    \         max_so_far_rolling_rolling_rolling_rolling_index = n;\n        }\n \
    \   }\n    let mut max_so_far_rolling_rolling_rolling_rolling_rolling = 0;\n \
    \   let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    for n in\
    \ numbers {\n        if n > max_so_far_rolling_rolling_rolling_rolling_rolling\
    \ {\n            max_so_far_rolling_rolling_rolling_rolling_rolling = n;\n   \
    \         max_so_f\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpg_5li0y1.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n56 |  \
    \   for n in numbers {\n   |                      - unclosed delimiter\n57 | \
    \        if n > max_so_far_rolling_rolling_rolling_rolling_rolling {\n   |   \
    \                                                                - this delimiter\
    \ might not be properly closed...\n...\n60 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n68 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_f` in this scope\n  --> /tmp/tmpg_5li0y1.rs:59:13\n   |\n\
    59 |             max_so_f\n   |             ^^^^^^^^ help: a local variable with\
    \ a similar name exists: `max_so_far`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpg_5li0y1.rs:56:5\n   |\n5  |   fn rolling_max(numbers: Vec<isize>) ->\
    \ Vec<isize> {\n   |                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n56 | /     for n in numbers {\n57\
    \ | |         if n > max_so_far_rolling_rolling_rolling_rolling_rolling {\n58\
    \ | |             max_so_far_rolling_rolling_rolling_rolling_rolling = n;\n59\
    \ | |             max_so_f\n...  |\n67 | |     assert_eq!(candidate(vec![3, 2,\
    \ 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n68 | | }\n   | |__^ expected struct\
    \ `Vec`, found `()`\n   |\n   = note: expected struct `Vec<isize>`\n         \
    \  found unit type `()`\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        max_numbers.push(max_number);\n    }\n \
    \   max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpkcyztomi.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpkcyztomi.rs:12:25\n   |\n12 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for number in numbers {\n     \
    \   if number > max_number {\n            max_number = number;\n            max_index\
    \ = 0;\n        }\n        if number == max_number {\n            result.push(max_number);\n\
    \        }\n        if number > max_number {\n            max_number = number;\n\
    \            max_index = 1;\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpuec7mo3c.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    let mut max_index = 0;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_number = numbers[i];\n            max_index\
    \ = i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            result.push(max_number);\n            result.push(max_index);\n\
    \            max_number = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdjhrqqap.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for number in numbers.iter() {\n        if number > max_value {\n       \
    \     max_value = number;\n        }\n    }\n    for number in numbers.iter()\
    \ {\n        if number == max_value {\n            result.push(number);\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppob2gij_.rs:9:21\n  |\n9 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppob2gij_.rs:10:25\n   |\n10 |             max_value\
    \ = number;\n   |                         ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_value\
    \ = *number;\n   |                         +\n\nerror[E0277]: can't compare `&isize`\
    \ with `isize`\n  --> /tmp/tmppob2gij_.rs:14:19\n   |\n14 |         if number\
    \ == max_value {\n   |                   ^^ no implementation for `&isize == isize`\n\
    \   |\n   = help: the trait `PartialEq<isize>` is not implemented for `&isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmppob2gij_.rs:18:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n18 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n       \
    \     max_so_far = n;\n        }\n        if n > max_so_far_so_far {\n       \
    \     max_so_far_so_far = n;\n        }\n    }\n    vec![max_so_far, max_so_far_so_far]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpt6m8toa0.rs:6:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index = numbers.len() - 1;\n\
    \        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1i4z5m0z.rs:56:17\n   |\n\
    56 |     let mut max_\n   |                 ^ help: add `;` here\n57 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmp1i4z5m0z.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1i4z5m0z.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp1i4z5m0z.rs:16:21\n   |\n16 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp1i4z5m0z.rs:22:21\n   |\n22 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp1i4z5m0z.rs:28:21\n   |\n28 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp1i4z5m0z.rs:34:21\n   |\n34 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp1i4z5m0z.rs:40:21\n   |\n40 |         if number > max_so_far "
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result[max_index] = n;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpthx1gj0i.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index =\
    \ 0;\n    for number in numbers {\n        if number > max_number {\n        \
    \    max_number = number;\n            max_index = numbers.iter().position(|x|\
    \ *x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpi5j2foa4.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_numbers.push(max_number);\n            max_number = number;\n\
    \        } else {\n            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_o9nwmdo.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    for number in numbers.iter().rev()\
    \ {\n        if number == max_number {\n            result.push(number);\n   \
    \     }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqybw9xix.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqybw9xix.rs:10:26\n   |\n10 |             max_number\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_number\
    \ = *number;\n   |                          +\n\nerror[E0277]: can't compare `&isize`\
    \ with `isize`\n  --> /tmp/tmpqybw9xix.rs:14:19\n   |\n14 |         if number\
    \ == max_number {\n   |                   ^^ no implementation for `&isize ==\
    \ isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpqybw9xix.rs:18:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n18 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            result.push(max_value);\n            max_value = i;\n       \
    \     max_index = 0;\n        } else {\n            max_value = i;\n         \
    \   max_index += 1;\n        }\n    }\n    result.push(max_value);\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn9jmhxxg.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            result.push(number);\n\
    \            max_value = number;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpcbak92lm.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n    \
    \    if number > max_number {\n            max_number = number;\n            max_index\
    \ = result.len();\n        }\n        result.push(number);\n    }\n    result[max_index..].iter().cloned().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpfbg5qix8.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = -1;\n    for number in numbers.iter().rev() {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_index = numbers.len() -\
    \ 1;\n        }\n    }\n    let mut result = vec![max_number];\n    for i in 1..max_index\
    \ {\n        result.push(numbers[i - 1]);\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6ewxn8bi.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6ewxn8bi.rs:10:26\n   |\n10 |             max_number\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_number\
    \ = *number;\n   |                          +\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n --> /tmp/tmp6ewxn8bi.rs:7:25\n  |\n7 |     let\
    \ mut max_index = -1;\n  |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for i in 1..numbers.len() {\n \
    \       if numbers[i] > max_number {\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 0..numbers.len() {\n\
    \        if i == max_index {\n            result.push(max_number);\n        }\
    \ else {\n            result.push(numbers[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmptq9rf2i7.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for &i in numbers {\n        if i == max_index {\n            result.push(i);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpoi2qb1m5.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpoi2qb1m5.rs:15:9\n   |\n15 |     for &i in numbers\
    \ {\n   |         ^^    ------- this expression has type `isize`\n   |       \
    \  |\n   |         expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if i == max_index\
    \ {\n            result.push(max_value);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp92imtaas.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    let mut max_index2 = 0;\n    for &num in numbers\
    \ {\n        if num > max_value {\n            max_value = num;\n            max_index\
    \ = max_index2;\n        }\n        max_index2 = max_index2;\n    }\n    for &num\
    \ in numbers {\n        if num == max_value {\n            result.push(num);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaeayao_k.rs:10:9\n   |\n\
    10 |     for &num in numbers {\n   |         ^^^^    ------- this expression has\
    \ type `isize`\n   |         |\n   |         expected `isize`, found reference\n\
    \   |\n   = note:   expected type `isize`\n           found reference `&_`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpaeayao_k.rs:17:9\n   |\n17 |   \
    \  for &num in numbers {\n   |         ^^^^    ------- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for index in 1..numbers.len() {\n        if\
    \ numbers[index] > max_value {\n            max_value = numbers[index];\n    \
    \        max_index = index;\n        }\n    }\n    result.push(max_value);\n \
    \   result.push(max_index);\n    result\n}\n\nfn main() {\n    let candidate =\
    \ rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpuwtyd2du.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpuwtyd2du.rs:16:17\n   |\n16 |     result.push(max_index);\n   |    \
    \             ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    16 |     result.push(max_index.try_into().unwrap());\n   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for number in numbers.iter() {\n        if number > max_value {\n       \
    \     result.push(number);\n            max_value = number;\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpb012us0k.rs:9:21\n  |\n9 |\
    \         if number > max_value {\n  |                     ^^^^^^^^^\n  |    \
    \                 |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpb012us0k.rs:11:25\n   |\n11 |             max_value\
    \ = number;\n   |                         ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n11 |             max_value\
    \ = *number;\n   |                         +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpb012us0k.rs:14:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n14 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(max_index);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpggs64got.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    numbers.iter().rev().take(max_so_far_index + 1).collect()\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppvbe6qd6.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppvbe6qd6.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmppvbe6qd6.rs:16:21\n   |\n16 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmppvbe6qd6.rs:17:26\n   |\n17 |             max_so_far = number;\n\
    \   |                          ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n17 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&isize`\n  --> /tmp/tmppvbe6qd6.rs:21:53\n\
    \   |\n21 |     numbers.iter().rev().take(max_so_far_index + 1).collect()\n  \
    \ |                                                     ^^^^^^^ value of type\
    \ `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n   |\n\
    \   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.clear();\n    \
    \    }\n        if max_numbers.is_empty() {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmp4ed93eps.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp63p7beem.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n13  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpejty2tsh.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpejty2tsh.rs:14:21\n   |\n14 |     vec![max_value, max_index]\n   | \
    \                    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     vec![max_value, max_index.try_into().unwrap()]\n   |   \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_so_far =\
    \ numbers[0];\n    let mut max_so_far_pos = 0;\n    let mut max_so_far_neg = 0;\n\
    \    for n in numbers {\n        if n >= max_so_far {\n            result.push(max_so_far);\n\
    \            max_so_far_pos = 0;\n            max_so_far_neg = 0;\n        }\n\
    \        if n <= max_so_far {\n            max_so_far_pos += 1;\n        } else\
    \ {\n            max_so_far_neg += 1;\n        }\n        max_so_far = n;\n  \
    \  }\n    if max_so_far_neg > max_so_far_pos {\n        result.push(max_so_far);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpjy0e3hve.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for &n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result.push(max_value);\n    }\n    result[max_index..].into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_m9iy2p1.rs:9:9\n  |\n9 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ a value of type `Vec<isize>` cannot be built from an iterator over elements\
    \ of type `&isize`\n  --> /tmp/tmp_m9iy2p1.rs:16:37\n   |\n16 |     result[max_index..].into_iter().collect()\n\
    \   |                                     ^^^^^^^ value of type `Vec<isize>` cannot\
    \ be built from `std::iter::Iterator<Item=&isize>`\n   |\n   = help: the trait\
    \ `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_pos = 0;\n        }\n        if n == max_value {\n   \
    \         max_pos += 1;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..max_pos {\n        result.push(max_value);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpay5ynpwp.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpfhramxkw.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max = numbers[max_so_far_index];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_max_index = 0;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far_rolling_max {\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max\
    \ = numbers[max_so_far_rolling_max_index];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max_rolling_max {\n            max_so_far_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_index = numbers.len() - 1;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max\
    \ = numbers[max_so_far_rolling_max_rolling_max_index];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max {\n  \
    \          max_so_far_rolling_max_rolling_max_rolling_max = number;\n        }\n\
    \    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = numbers[max_so_far_rolling_max_rolling_max_rolling_max_index];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmph4r8deey.rs:62:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n51 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n52 |         if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n   |                                                                    \
    \            - this delimiter might not be properly closed...\n53 |          \
    \   max_so_far_rolling_max_rolling_max_\n54 | }\n   | - ...as it matches this\
    \ but it has different indentation\n...\n62 | }\n   |   ^\n\nerror[E0425]: cannot\
    \ find value `max_so_far_rolling_max_rolling_max_` in this scope\n  --> /tmp/tmph4r8deey.rs:53:13\n\
    \   |\n53 |             max_so_far_rolling_max_rolling_max_\n   |            \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: a local variable with a similar name\
    \ exists: `max_so_far_rolling_max_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmph4r8deey.rs:9:21\n  |\n9 |         if number > max_so_far {\n  |\
    \                     ^^^^^^^^^^\n  |                     |\n  |             \
    \        expected `&isize`, found `isize`\n  |                     help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmph4r8deey.rs:10:26\n\
    \   |\n10 |             max_so_far = number;\n   |                          ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max_so_far = *number;\n   |                          +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph4r8deey.rs:16:21\n   |\n16 |\
    \         if number > max_so_far_rolling_max {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far_rolling_max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph4r8deey.rs:17:38\n   |\n17 |\
    \             max_so_far_rolling_max = number"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value\
    \ {\n            max_value = numbers[i];\n            max_index = i;\n       \
    \ }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaatx_qe6.rs:11:25\n   |\n\
    11 |             max_index = i;\n   |                         ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_pos\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_pos = 0;\n        }\n        if n == max_so_far\
    \ {\n            max_so_far_pos++;\n        }\n    }\n    let mut max_so_far_vec\
    \ = Vec::new();\n    for i in 0..max_so_far_pos {\n        max_so_far_vec.push(max_so_far);\n\
    \    }\n    max_so_far_vec.push(max_so_far);\n    max_so_far_vec\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpjzv_tyef.rs:14:28\n\
    \   |\n14 |             max_so_far_pos++;\n   |                            ^ expected\
    \ expression\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = -1;\n    let mut max_value = numbers[0];\n    for number in numbers {\n  \
    \      if number > max_number {\n            max_number = number;\n          \
    \  max_index = -1;\n        }\n        if number == max_number {\n           \
    \ max_index += 1;\n        }\n        if max_index >= 0 {\n            max_value\
    \ = max_number;\n        }\n    }\n    vec![max_value]\n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpqrgqzkxl.rs:6:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ls_jj5d.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9ls_jj5d.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers.iter().rev().take(max_so_far_index + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8b6u8e4d.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8b6u8e4d.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \  --> /tmp/tmp8b6u8e4d.rs:14:53\n   |\n14 |     numbers.iter().rev().take(max_so_far_index\
    \ + 1).collect()\n   |                                                     ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for i in numbers.iter().rev() {\n        if *i\
    \ > max_value {\n            max_value = *i;\n            max_index = i;\n   \
    \     }\n    }\n    for i in numbers.iter().rev() {\n        if *i == max_value\
    \ {\n            result.push(max_index);\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqtojiqtx.rs:12:25\n   |\n\
    12 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \           max_index = *i;\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for &n in numbers {\n        if n > max {\n            max = n;\n       \
    \     max_index = -1;\n        }\n        if n == max {\n            max_index\
    \ += 1;\n        }\n    }\n    numbers.iter().cloned().skip(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpgys8ktnk.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpgys8ktnk.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpgys8ktnk.rs:11:25\n   |\n11 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = 0;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = n;\n        }\n    }\n    let mut max_value = max;\n    let mut\
    \ max_index = max_index;\n    let mut max_value = max_index;\n    for n in numbers\
    \ {\n        if n == max_index {\n            max_value = n;\n        }\n    }\n\
    \    let mut max_value = max_index;\n    let mut max_index = max_index;\n    for\
    \ n in numbers {\n        if n == max_index {\n            max_value = n;\n  \
    \      }\n    }\n    let mut max_value = max_index;\n    let mut max_index = max_index;\n\
    \    for n in numbers {\n        if n == max_index {\n            max_value =\
    \ n;\n        }\n    }\n    let mut max_value = max_index;\n    let mut max_index\
    \ = max_index;\n    for n in numbers {\n        if n == max_index {\n        \
    \    max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n  \
    \  let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = max_index;\n    for n in numbers {\n        if n == max_index\
    \ {\n            max_value = n;\n        }\n    }\n    let mut max_value = max_index;\n\
    \    let mut max_index = \n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp3fhd9nnh.rs:108:1\n\
    \    |\n108 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max: Vec<isize> = vec![max_so_far];\n\
    \    for i in 1..max_so_far_index {\n        max_so_far_rolling_max.push(numbers[i]);\n\
    \    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc78om7fc.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc78om7fc.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_idx = 1;\n        }\n        if n == max_value {\n   \
    \         max_idx += 1;\n        }\n    }\n    let mut result = Vec::new();\n\
    \    for i in 0..max_idx {\n        result.push(max_value);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp6ghhrqfa.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max: Vec<isize> = vec![max_so_far];\n\
    \    for i in 1..max_so_far_index {\n        max_so_far_rolling_max.push(numbers[max_so_far_index\
    \ - i]);\n    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpqnepn77o.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpqnepn77o.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    let mut max_index = -1;\n    for number in numbers {\n        if number >\
    \ max_number {\n            max_number = number;\n            max_index = result.len();\n\
    \        }\n        result.push(number);\n    }\n    result.push(max_number);\n\
    \    result.extend_from_slice(&numbers[max_index..]);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpjyv44uc0.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    numbers.windows(2).fold(vec![max_so_far],\
    \ |mut acc, n| {\n        if acc[acc.len() - 1] > n {\n            acc.push(n);\n\
    \        } else {\n            acc.push(acc[acc.len() - 1]);\n        }\n    \
    \    acc\n    })\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn0xpz6so.rs:15:33\n   |\n\
    15 |         if acc[acc.len() - 1] > n {\n   |                               \
    \  ^ expected `isize`, found `&[isize]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpn0xpz6so.rs:16:22\n   |\n16 |             acc.push(n);\n   |       \
    \               ^ expected `isize`, found `&[isize]`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpejty2tsh.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpejty2tsh.rs:14:21\n   |\n14 |     vec![max_value, max_index]\n   | \
    \                    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     vec![max_value, max_index.try_into().unwrap()]\n   |   \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            result.push(max_index);\n\
    \            max_value = numbers[i];\n            max_index = i;\n        }\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpggs64got.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_pos\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_pos = 0;\n        }\n        if n == max_so_far\
    \ {\n            max_so_far_pos += 1;\n        }\n    }\n    let mut max_so_far_pos\
    \ = max_so_far_pos as usize;\n    let mut max_so_far = max_so_far as isize;\n\
    \    for n in numbers {\n        if n == max_so_far {\n            max_so_far_pos\
    \ += 1;\n        }\n        if max_so_far_pos == max_so_far_pos {\n          \
    \  max_so_far = n;\n        }\n    }\n    max_so_far\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp36q9g6q7.rs:27:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n27 |     max_so_far\n   |     ^^^^^^^^^^ expected struct `Vec`, found `isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpn35w907q.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut new_numbers = Vec::new();\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] != max_index {\n            new_numbers.push(numbers[i]);\n\
    \        }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxjuodcfz.rs:11:25\n   |\n\
    11 |             max_index = number;\n   |                         ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxjuodcfz.rs:16:26\n\
    \   |\n16 |         if numbers[i] != max_index {\n   |                       \
    \   ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n16 |     \
    \    if numbers[i] != max_index.try_into().unwrap() {\n   |                  \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    let mut max_element\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_element {\n      \
    \      max_element = n;\n        }\n        result.push(max_element);\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpi6nqhdv6.rs:6:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp63p7beem.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n13  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max: Vec<isize> = vec![max_so_far];\n\
    \    for i in 1..max_so_far_index {\n        max_so_far_rolling_max.push(numbers[i]);\n\
    \    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpc78om7fc.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc78om7fc.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp63p7beem.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n13  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = 0;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![numbers[max_index]]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpjkr7bfa0.rs:6:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.iter().position(|&x| x == number).unwrap();\n\
    \        }\n        max_so_far_rolling_max = max_so_far_rolling_max if number\
    \ > max_so_far_rolling_max else number;\n    }\n    vec![max_so_far_rolling_max,\
    \ max_so_far, max_so_far_index]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator,\
    \ found keyword `if`\n  --> /tmp/tmpc3k5u9pr.rs:14:57\n   |\n14 |         max_so_far_rolling_max\
    \ = max_so_far_rolling_max if number > max_so_far_rolling_max else number;\n \
    \  |                                                         ^^ expected one of\
    \ 8 possible tokens\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc3k5u9pr.rs:16:46\n\
    \   |\n16 |     vec![max_so_far_rolling_max, max_so_far, max_so_far_index]\n \
    \  |                                              ^^^^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     vec![max_so_far_rolling_max,\
    \ max_so_far, max_so_far_index.try_into().unwrap()]\n   |                    \
    \                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpobwnh3ph.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max = numbers[max_so_far_index];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n        }\n    }\n    max_so_far_rolling_max\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_qdgoban.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_qdgoban.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_qdgoban.rs:16:21\n   |\n16 |         if number > max_so_far_rolling_max\
    \ {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n   |                   \
    \  |\n   |                     expected `&isize`, found `isize`\n   |        \
    \             help: consider borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_qdgoban.rs:17:38\n   |\n17 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \           max_so_far_rolling_max = *number;\n   |                          \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_qdgoban.rs:20:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n20 |     max_so_far_rolling_max\n   |     ^^^^^^^^^^^^^^^^^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `isize`\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max: Vec<isize> = vec![max_so_far];\n\
    \    for i in 1..numbers.len() {\n        let mut max_so_far_rolling_max_i = max_so_far_rolling_max[i\
    \ - 1];\n        if max_so_far_rolling_max_i < numbers[i] {\n            max_so_far_rolling_max_i\
    \ = numbers[i];\n        }\n        max_so_far_rolling_max.push(max_so_far_rolling_max_i);\n\
    \    }\n    max_so_far_rolling_max\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7o1mt4tb.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7o1mt4tb.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 0
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = vec![];\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for n in numbers {\n        if n > max_so_far_so_far {\n\
    \            max_so_far_so_far = max_so_far;\n            max_so_far = n;\n  \
    \      }\n        max_so_far_so_far = max_so_far_so_far + n;\n    }\n    max_so_far_so_far\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvwtk3wz_.rs:15:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n15 |     max_so_far_so_far\n   |     ^^^^^^^^^^^^^^^^^ expected struct `Vec`,\
    \ found `isize`\n   |\n   = note: expected struct `Vec<isize>`\n             \
    \   found type `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut result = Vec::new();\n    for i in 0..max_index {\n        result.push(numbers[max_index\
    \ - i]);\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpyw_f0a1o.rs:19:21\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n19  |         result.push(numbers[max_index - i]);\n    | \
    \                    ^^^^^^^ value borrowed here after move\n    |\nnote: this\
    \ function takes ownership of the receiver `self`, which moves `numbers`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpobwnh3ph.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_so_far =\
    \ numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n         \
    \   max_so_far = n;\n        }\n    }\n    for n in numbers {\n        if n ==\
    \ max_so_far {\n            result.push(n);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpmdh8_kxl.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              -------\n    |              |\n    |              `numbers` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&numbers`\n...\n13  |     for\
    \ n in numbers {\n    |              ^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    let mut max_so_far_rolling_index = 0;\n    for n in numbers {\n  \
    \      if n > max_so_far {\n            max_so_far_rolling = max_so_far;\n   \
    \         max_so_far_rolling_index = max_so_far_index;\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    vec![max_so_far_rolling,\
    \ max_so_far_rolling_index]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpsl5a7xrm.rs:16:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              -------\n    |              |\n    |              `numbers` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&numbers`\n...\n16  |     for\
    \ n in numbers {\n    |              ^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy48wzgi0.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy48wzgi0.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy48wzgi0.rs:14:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n14 |     numbers[max_so_far_index]\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > result[result.len() - 1] {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp2pd8t3dc.rs:6:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if i == max_index\
    \ {\n            result.push(max_value);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp3i7zfhbl.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_index = -1;\n\
    \    for n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_index = -1;\n        }\n        if n == max {\n            max_index\
    \ += 1;\n        }\n    }\n    numbers.iter().cloned().skip(max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpou93ju63.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpou93ju63.rs:11:25\n   |\n11 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers.iter().rev().take(max_so_far_index + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8b6u8e4d.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8b6u8e4d.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \  --> /tmp/tmp8b6u8e4d.rs:14:53\n   |\n14 |     numbers.iter().rev().take(max_so_far_index\
    \ + 1).collect()\n   |                                                     ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result[max_index] = max_number;\n    result\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0rhk882c.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0rhk882c.rs:11:26\n   |\n11 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             max_number = *number;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0rhk882c.rs:16:25\n   |\n16 |     result[max_index]\
    \ = max_number;\n   |                         ^^^^^^^^^^\n   |               \
    \          |\n   |                         expected `&isize`, found `isize`\n\
    \   |                         help: consider borrowing here: `&max_number`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp0rhk882c.rs:17:5\n   |\n5  | fn\
    \ rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                     \
    \                   ---------- expected `Vec<isize>` because of return type\n\
    ...\n17 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    let mut max_index2: usize = 0;\n    for number in numbers {\n\
    \        if number > max_element {\n            max_element = number;\n      \
    \      max_index = max_index2;\n        }\n        if number > max_element {\n\
    \            max_element = number;\n            max_index2 = max_index;\n    \
    \    }\n    }\n    let mut new_numbers = Vec::new();\n    for i in 0..numbers.len()\
    \ {\n        if numbers[i] != max_element {\n            new_numbers.push(numbers[i]);\n\
    \        }\n    }\n    new_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmpktlhnsca.rs:20:17\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n9   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n20  |     for i in 0..numbers.len() {\n    |              \
    \   ^^^^^^^ value borrowed here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for n in numbers {\n        if n > max_value\
    \ {\n            max_value = n;\n            max_index = result.len();\n     \
    \   }\n        result[max_index] = n;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpthx1gj0i.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value {\n \
    \           max_value = numbers[i];\n            max_idx = i;\n        }\n   \
    \ }\n    vec![max_value, max_idx]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9lnek_6.rs:14:21\n   |\n\
    14 |     vec![max_value, max_idx]\n   |                     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     vec![max_value, max_idx.try_into().unwrap()]\n\
    \   |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    let mut max_index2 = 0;\n    for\
    \ n in numbers {\n        if n > max_number {\n            max_number = n;\n \
    \           max_index = n;\n            max_index2 = max_index;\n        }\n \
    \       if n == max_number {\n            result.push(max_number);\n         \
    \   max_index += 1;\n        }\n    }\n    if max_index2 == max_index {\n    \
    \    result.push(max_number);\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpiddpiwq_.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for index in 1..numbers.len() {\n        if numbers[index]\
    \ > max_value {\n            max_value = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push(max_value);\n    result.push(numbers[max_index]);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpspyesf5a.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &n in numbers {\n        if n > max_value {\n            max_value\
    \ = n;\n            max_index = -1;\n        }\n        if n == max_value {\n\
    \            max_index += 1;\n        }\n    }\n    vec![max_value, max_index,\
    \ max_index + 1, max_index + 2, max_index + 3, max_index + 4, max_index + 5]\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp4_q6wfe2.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    let mut max_index2 = 0;\n    let mut max_index3\
    \ = 0;\n    let mut max_index4 = 0;\n    let mut max_index5 = 0;\n    let mut\
    \ max_index6 = 0;\n    let mut max_index7 = 0;\n    let mut max_index8 = 0;\n\
    \    let mut max_index9 = 0;\n    let mut max_index10 = 0;\n    let mut max_index11\
    \ = 0;\n    let mut max_index12 = 0;\n    let mut max_index13 = 0;\n    let mut\
    \ max_index14 = 0;\n    let mut max_index15 = 0;\n    let mut max_index16 = 0;\n\
    \    let mut max_index17 = 0;\n    let mut max_index18 = 0;\n    let mut max_index19\
    \ = 0;\n    let mut max_index20 = 0;\n    let mut max_index21 = 0;\n    let mut\
    \ max_index22 = 0;\n    let mut max_index23 = 0;\n    let mut max_index24 = 0;\n\
    \    let mut max_index25 = 0;\n    let mut max_index26 = 0;\n    let mut max_index27\
    \ = 0;\n    let mut max_index28 = 0;\n    let mut max_index29 = 0;\n    let mut\
    \ max_index30 = 0;\n    let mut max_index31 = 0;\n    let mut max_index32 = 0;\n\
    \    let mut max_index33 = 0;\n    let mut max_index34 = 0;\n    let mut max_index35\
    \ = 0;\n    let mut max_index36 = 0;\n    let mut max_index37 = 0;\n    let mut\
    \ max_index38 = 0;\n    let mut max_index39 = 0;\n    let mut max_index40 = 0;\n\
    \    let mut max_index41 = 0;\n    let mut max_index42 = 0;\n    let mut max_index43\
    \ = 0;\n    let mut max_index44 = 0;\n    let mut max_index45 = 0;\n    let mut\
    \ max_index46 = 0;\n    let mut max_index47 = 0;\n    let mut max_index48 = 0;\n\
    \    let mut max_index49 = 0;\n    let mut max_index50 = 0;\n    let mut max_index51\
    \ = 0;\n    let mut max_index52 = 0;\n    let mut max_index53 = 0;\n    let mut\
    \ max_index54 = 0;\n    let mut max_index55 = 0;\n    let mut max_index56 = 0;\n\
    \    let mut max_index57 = 0;\n    let mut max_index58 = 0;\n    let mut max_index59\
    \ = 0;\n    let mut max_index60 = 0;\n    let mut max_index61 = 0;\n    let mut\
    \ max_index62 = 0;\n    let mut max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpxi2z7jxf.rs:70:17\n   |\n\
    70 |     let mut max_\n   |                 ^ help: add `;` here\n71 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpxi2z7jxf.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_so_far =\
    \ numbers[0];\n    for n in numbers {\n        if n > max_so_far {\n         \
    \   max_so_far = n;\n        }\n    }\n    for n in numbers {\n        if n ==\
    \ max_so_far {\n            result.push(n);\n        }\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpmdh8_kxl.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              -------\n    |              |\n    |              `numbers` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&numbers`\n...\n13  |     for\
    \ n in numbers {\n    |              ^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = numbers.iter().position(|x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpyzofp_ui.rs:11:55\n\
    \   |\n11 |             max_index = numbers.iter().position(|x| x == number).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n  --> /tmp/tmpyzofp_ui.rs:14:68\n\
    \   |\n14 |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = -1;\n    let mut max_value = numbers[0];\n    for &number in numbers {\n \
    \       if number > max_number {\n            max_number = number;\n         \
    \   max_index = -1;\n        }\n        if number == max_number {\n          \
    \  max_index += 1;\n        }\n        if max_index >= 0 {\n            max_value\
    \ = max_number;\n        }\n    }\n    max_value.to_owned()\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf6est1v0.rs:9:9\n  |\n9 |\
    \     for &number in numbers {\n  |         ^^^^^^^    ------- this expression\
    \ has type `isize`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpf6est1v0.rs:21:5\n   |\n5  | fn rolling_max(numbers:\
    \ Vec<isize>) -> Vec<isize> {\n   |                                        ----------\
    \ expected `Vec<isize>` because of return type\n...\n21 |     max_value.to_owned()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n  \
    \ = note: expected struct `Vec<isize>`\n                found type `isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far_rolling_max\
    \ += 1;\n        }\n    }\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max\
    \ += 1;\n    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += 1;\n\
    \    max_so_far_rolling_max += 1;\n    max_so_far_rolling_max += \n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmp95sq6w4l.rs:61:1\n\
    \   |\n61 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp95sq6w4l.rs:9:21\n  |\n9 |         if number > max_so_far {\n  |\
    \                     ^^^^^^^^^^\n  |                     |\n  |             \
    \        expected `&isize`, found `isize`\n  |                     help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp95sq6w4l.rs:10:26\n\
    \   |\n10 |             max_so_far = number;\n   |                          ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max_so_far = *number;\n   |                          +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp95sq6w4l.rs:16:21\n   |\n16 |\
    \         if number > max_so_far {\n   |                     ^^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_so_far`\n\nerror:\
    \ aborting due to 4 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    let mut max_index2 = 0;\n    for &i in numbers\
    \ {\n        if i > max_value {\n            max_value = i;\n            max_index\
    \ = i;\n            max_index2 = i;\n        }\n        if i == max_value {\n\
    \            max_index2 = max_index;\n        }\n        result.push(i);\n   \
    \ }\n    result.push(max_value);\n    result.push(max_index2);\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6za6g7mz.rs:10:9\n   |\n\
    10 |     for &i in numbers {\n   |         ^^    ------- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n        }\n        if number\
    \ > max_so_far_so_far {\n            max_so_far_so_far = number;\n        }\n\
    \    }\n    max_so_far_so_far.iter().cloned().collect()\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp7llt0ty5.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7llt0ty5.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp7llt0ty5.rs:12:21\n   |\n12 |         if number > max_so_far_so_far\
    \ {\n   |                     ^^^^^^^^^^^^^^^^^\n   |                     |\n\
    \   |                     expected `&isize`, found `isize`\n   |             \
    \        help: consider borrowing here: `&max_so_far_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7llt0ty5.rs:13:33\n   |\n13 |             max_so_far_so_far\
    \ = number;\n   |                                 ^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n13 |        \
    \     max_so_far_so_far = *number;\n   |                                 +\n\n\
    error[E0599]: no method named `iter` found for type `isize` in the current scope\n\
    \  --> /tmp/tmp7llt0ty5.rs:16:23\n   |\n16 |     max_so_far_so_far.iter().cloned().collect()\n\
    \   |                       ^^^^ method not found in `isize`\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    let mut max_idx = 1;\n \
    \   for &n in numbers {\n        if n > max {\n            max = n;\n        \
    \    max_idx = 1;\n        }\n        if n == max {\n            max_idx += 1;\n\
    \        }\n    }\n    vec![max; max_idx]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpjh0ocdcz.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result.push(max_number);\n    result[max_index..].into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp8n11yje.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpp8n11yje.rs:11:26\n   |\n11 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             max_number = *number;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp8n11yje.rs:16:17\n   |\n16 |     result.push(max_number);\n\
    \   |                 ^^^^^^^^^^\n   |                 |\n   |               \
    \  expected `&isize`, found `isize`\n   |                 help: consider borrowing\
    \ here: `&max_number`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be\
    \ built from an iterator over elements of type `&&isize`\n  --> /tmp/tmpp8n11yje.rs:17:37\n\
    \   |\n17 |     result[max_index..].into_iter().collect()\n   |              \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&&isize>`\n   |\n   = help: the trait `FromIterator<&&isize>`\
    \ is not implemented for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_pos =\
    \ 0;\n    for pos in 1..numbers.len() {\n        if numbers[pos] > max_value {\n\
    \            max_value = numbers[pos];\n            max_pos = pos;\n        }\n\
    \    }\n    numbers[max_pos..]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvpgf596m.rs:14:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n14 |     numbers[max_pos..]\n   |     ^^^^^^^^^^^^^^^^^^- help: try using\
    \ a conversion method: `.to_vec()`\n   |     |\n   |     expected struct `Vec`,\
    \ found slice `[isize]`\n   |\n   = note: expected struct `Vec<isize>`\n     \
    \           found type `[isize]`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let\
    \ mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut max_index\
    \ = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n    let mut\
    \ max_index = -1;\n    let mut max_index = -1;\n    let mut max_index = -1;\n\
    \    let mut max_index = -1;\n    let mut max_index = \n}\n\nfn main() {\n   \
    \ let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmphy76bpcc.rs:79:1\n\
    \   |\n79 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n        if numbers[i]\
    \ > max_number {\n            max_numbers.push(max_number);\n            max_numbers.push(numbers[i]);\n\
    \            max_number = numbers[i];\n        } else {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers.push(max_number);\n    max_numbers\n}\n\nfn\
    \ main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpi5mgnjd1.rs:11:25\n   |\n\
    11 |             max_index = n;\n   |                         ^ expected `usize`,\
    \ found `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkhswymew.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for i in 1..numbers.len() {\n \
    \       if numbers[i] > max_number {\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpefwr1on0.rs:18:25\n   |\n\
    18 |             result.push(max_index);\n   |                         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n18 |           \
    \  result.push(max_index.try_into().unwrap());\n   |                         \
    \         ++++++++++++++++++++\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number > max_number {\n            max_numbers.push(number);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpobwnh3ph.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n14  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for index in 1..numbers.len() {\n        if numbers[index]\
    \ > max_value {\n            max_value = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbcp8crt.rs:16:17\n   |\n\
    16 |     result.push(max_index);\n   |                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     result.push(max_index.try_into().unwrap());\n\
    \   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = -1;\n    for number in numbers.iter().rev() {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_index = numbers.len() -\
    \ 1;\n        }\n    }\n    numbers.iter().rev().skip(max_index).collect()\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpdvs8w420.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdvs8w420.rs:10:26\n   |\n10 |             max_number\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_number\
    \ = *number;\n   |                          +\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n --> /tmp/tmpdvs8w420.rs:7:25\n  |\n7 |     let\
    \ mut max_index = -1;\n  |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot be built from\
    \ an iterator over elements of type `&isize`\n  --> /tmp/tmpdvs8w420.rs:14:42\n\
    \   |\n14 |     numbers.iter().rev().skip(max_index).collect()\n   |         \
    \                                 ^^^^^^^ value of type `Vec<isize>` cannot be\
    \ built from `std::iter::Iterator<Item=&isize>`\n   |\n   = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_numbers.push(number);\n        }\n    }\n    max_numbers\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9ls_jj5d.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9ls_jj5d.rs:16:30\n   |\n16 |\
    \             max_numbers.push(number);\n   |                              ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n16 |             max_numbers.push(*number);\n   |                     \
    \         +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for n in numbers.iter().rev()\
    \ {\n        if n >= result.last() {\n            result.push(n);\n        } else\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9v136zht.rs:8:17\n  |\n8 |\
    \         if n >= result.last() {\n  |                 ^^^^^^^^^^^^^ expected\
    \ `&isize`, found enum `Option`\n  |\n  = note: expected reference `&isize`\n\
    \                  found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp9v136zht.rs:9:25\n  |\n9 |             result.push(n);\n  |    \
    \                     ^ expected `isize`, found `&isize`\n  |\nhelp: consider\
    \ dereferencing the borrow\n  |\n9 |             result.push(*n);\n  |       \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9v136zht.rs:11:25\n\
    \   |\n11 |             result.push(n);\n   |                         ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             result.push(*n);\n   |                         +\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_element = numbers[0];\n\
    \    for n in numbers {\n        if n > max_element {\n            max_element\
    \ = n;\n        }\n    }\n    for n in numbers {\n        if n == max_element\
    \ {\n            result.push(n);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpmgidxr4l.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              -------\n    |              |\n    |              `numbers` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&numbers`\n...\n13  |     for\
    \ n in numbers {\n    |              ^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut max_numbers = Vec::new();\n    for i in 0..max_index {\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.reverse();\n    max_numbers\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[4]`,\n right: `[1, 2, 3, 4]`', /tmp/tmpvf2h50wl.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index =\
    \ 0;\n    for n in numbers {\n        if n > max_number {\n            max_number\
    \ = n;\n            max_index = numbers.iter().position(|&x| x == n).unwrap();\n\
    \        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmp6w33h4vb.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for i in numbers.iter().rev() {\n        if\
    \ i > max_value {\n            max_value = i;\n            max_index = i;\n  \
    \      }\n    }\n    for i in numbers.iter().rev() {\n        if i == max_index\
    \ {\n            result.push(i);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpauhtbxyw.rs:10:16\n   |\n\
    10 |         if i > max_value {\n   |                ^^^^^^^^^\n   |         \
    \       |\n   |                expected `&isize`, found `isize`\n   |        \
    \        help: consider borrowing here: `&max_value`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpauhtbxyw.rs:11:25\n   |\n11 |             max_value = i;\n\
    \   |                         ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n11 |             max_value = *i;\n\
    \   |                         +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpauhtbxyw.rs:12:25\n\
    \   |\n12 |             max_index = i;\n   |                         ^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    12 |             max_index = *i;\n   |                         +\n\nerror[E0277]:\
    \ can't compare `&isize` with `{integer}`\n  --> /tmp/tmpauhtbxyw.rs:16:14\n \
    \  |\n16 |         if i == max_index {\n   |              ^^ no implementation\
    \ for `&isize == {integer}`\n   |\n   = help: the trait `PartialEq<{integer}>`\
    \ is not implemented for `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpauhtbxyw.rs:20:5\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                ---------- expected `Vec<isize>` because of return\
    \ type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            result.push(max_value);\n            max_value = i;\n       \
    \     max_index = 0;\n        } else {\n            max_index += 1;\n        }\n\
    \        result.push(max_value);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp1m60t5qz.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkhswymew.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    let mut i = 0;\n    while i < numbers.len() {\n\
    \        if numbers[i] > max_value {\n            max_value = numbers[i];\n  \
    \          max_index = i;\n        }\n        i += 1;\n    }\n    for i in 0..numbers.len()\
    \ {\n        if i == max_index {\n            result.push(max_value);\n      \
    \  } else {\n            result.push(numbers[i]);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp20ojen35.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for number in numbers {\n     \
    \   if number > max_number {\n            result.push(max_number);\n         \
    \   max_number = number;\n            max_index = 0;\n        } else {\n     \
    \       result.push(number);\n            max_number = number;\n            max_index\
    \ += 1;\n        }\n    }\n    result.push(max_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmphep4z3q0.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_number {\n            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmplnyz_bdj.rs:9:21\n  |\n9 |\
    \         if number > max_number {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmplnyz_bdj.rs:10:26\n   |\n7  |     let mut max_number\
    \ = numbers[0];\n   |                          ---------- expected due to this\
    \ value\n...\n10 |             max_number = number;\n   |                    \
    \      ^^^^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n10 |             max_number = *number;\n   |             \
    \             +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp63p7beem.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n13  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n            max_so_far_rolling_max\
    \ = number;\n        }\n        if number == max_so_far {\n            max_so_far_rolling_max\
    \ = max_so_far_rolling_max;\n        }\n    }\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far_rolling_max {\n     \
    \       max_so_far_rolling_max = number;\n            max_so_far_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n        if number == max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = max_so_far_rolling_max_index;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_index = 0;\n\
    \    let mut max_so_far_rolling_max_rolling_max_rolling_max = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n            max_so_far_rolling_max_rolling_max_index\
    \ = numbers.len() - 1;\n        }\n        if number == max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = max_so_far_rolling_max_rolling_max_index;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_index\
    \ = 0;\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = number;\n  \
    \          max_so_far_rolling_max_rolling_max_rolling_max_index = numbers.len()\
    \ - 1;\n        }\n        if number == max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max =\
    \ max_so_far_rolling_max_rolling_max_rolling_max_index;\n        }\n    }\n  \
    \  let mut max_so_far_roll\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpi25siw5t.rs:52:28\n   |\n\
    52 |     let mut max_so_far_roll\n   |                            ^ help: add\
    \ `;` here\n53 | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi25siw5t.rs:10:21\n   |\n10 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpi25siw5t.rs:11:26\n   |\n11 |             max_so_far = number;\n\
    \   |                          ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n11 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi25siw5t.rs:13:38\n\
    \   |\n13 |             max_so_far_rolling_max = number;\n   |               \
    \                       ^^^^^^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n13 |             max_so_far_rolling_max = *number;\n\
    \   |                                      +\n\nerror[E0277]: can't compare `&isize`\
    \ with `isize`\n  --> /tmp/tmpi25siw5t.rs:15:19\n   |\n15 |         if number\
    \ == max_so_far {\n   |                   ^^ no implementation for `&isize ==\
    \ isize`\n   |\n   = help: the trait `PartialEq<isize>` is not implemented for\
    \ `&isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpi25siw5t.rs:22:21\n\
    \   |\n22 |         if number > max_so_far_rolling_max {\n   |               \
    \      ^^^^^^^^^^^^^^^^^^^^^^\n   |                     |\n   |              \
    \       expected `&isize`, found integer\n   |                     help: consider\
    \ borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpi25siw5t.rs:23:38\n   |\n23 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n23 |  \
    \           max_so_far_rolling_max = *number;\n   |           "
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    for number in numbers {\n    \
    \    if number > max_number {\n            max_number = number;\n            max_index\
    \ = result.len();\n        }\n        result.push(number);\n    }\n    result.push(max_number);\n\
    \    result.extend_from_slice(&numbers[max_index..]);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp52q_2x8i.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    let mut max_index2 = 0;\n    let mut max_index3\
    \ = 0;\n    let mut max_index4 = 0;\n    let mut max_index5 = 0;\n    let mut\
    \ max_index6 = 0;\n    let mut max_index7 = 0;\n    let mut max_index8 = 0;\n\
    \    let mut max_index9 = 0;\n    let mut max_index10 = 0;\n    let mut max_index11\
    \ = 0;\n    let mut max_index12 = 0;\n    let mut max_index13 = 0;\n    let mut\
    \ max_index14 = 0;\n    let mut max_index15 = 0;\n    let mut max_index16 = 0;\n\
    \    let mut max_index17 = 0;\n    let mut max_index18 = 0;\n    let mut max_index19\
    \ = 0;\n    let mut max_index20 = 0;\n    let mut max_index21 = 0;\n    let mut\
    \ max_index22 = 0;\n    let mut max_index23 = 0;\n    let mut max_index24 = 0;\n\
    \    let mut max_index25 = 0;\n    let mut max_index26 = 0;\n    let mut max_index27\
    \ = 0;\n    let mut max_index28 = 0;\n    let mut max_index29 = 0;\n    let mut\
    \ max_index30 = 0;\n    let mut max_index31 = 0;\n    let mut max_index32 = 0;\n\
    \    let mut max_index33 = 0;\n    let mut max_index34 = 0;\n    let mut max_index35\
    \ = 0;\n    let mut max_index36 = 0;\n    let mut max_index37 = 0;\n    let mut\
    \ max_index38 = 0;\n    let mut max_index39 = 0;\n    let mut max_index40 = 0;\n\
    \    let mut max_index41 = 0;\n    let mut max_index42 = 0;\n    let mut max_index43\
    \ = 0;\n    let mut max_index44 = 0;\n    let mut max_index45 = 0;\n    let mut\
    \ max_index46 = 0;\n    let mut max_index47 = 0;\n    let mut max_index48 = 0;\n\
    \    let mut max_index49 = 0;\n    let mut max_index50 = 0;\n    let mut max_index51\
    \ = 0;\n    let mut max_index52 = 0;\n    let mut max_index53 = 0;\n    let mut\
    \ max_index54 = 0;\n    let mut max_index55 = 0;\n    let mut max_index56 = 0;\n\
    \    let mut max_index57 = 0;\n    let mut max_index58 = 0;\n    let mut max_index59\
    \ = 0;\n    let mut max_index60 = 0;\n    let mut max_index61 = 0;\n    let mut\
    \ max_index62 = 0;\n    let mut max_index\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmph2fqh0ju.rs:70:22\n   |\n\
    70 |     let mut max_index\n   |                      ^ help: add `;` here\n71\
    \ | }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmph2fqh0ju.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling_index\
    \ = 0;\n    let mut max_so_far_rolling = 0;\n    for n in numbers {\n        if\
    \ n == max_so_far {\n            max_so_far_rolling_index += 1;\n            max_so_far_rolling\
    \ += n;\n        }\n    }\n    max_so_far_rolling_index\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd72qie30.rs:22:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n22 |     max_so_far_rolling_index\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ struct `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n\
    \                found type `{integer}`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = -1;\n    for &number in numbers {\n        if number > max_number {\n    \
    \        max_number = number;\n            max_index = -1;\n        }\n      \
    \  if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut result = Vec::new();\n    for i in 0..max_index {\n        result.push(numbers[i]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn0wy44jc.rs:8:9\n  |\n8 |\
    \     for &number in numbers {\n  |         ^^^^^^^    ------- this expression\
    \ has type `isize`\n  |         |\n  |         expected `isize`, found reference\n\
    \  |\n  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpn0wy44jc.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpn0wy44jc.rs:11:25\n   |\n11 |         \
    \    max_index = -1;\n   |                         ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 0
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_numbers:\
    \ Vec<isize> = Vec::new();\n    for number in numbers {\n        if number > max_number\
    \ {\n            max_number = number;\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp9cn1v4ot.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp9cn1v4ot.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            max_number = numbers[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n \
    \           max_index = i;\n        }\n    }\n    for i in 1..numbers.len() {\n\
    \        if numbers[i] > max_number {\n            result.push(max_number);\n\
    \            result.push(max_index);\n            max_number = numbers[i];\n\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7yahrd_7.rs:117:3\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \                                              - unclosed delimiter\n...\n103\
    \ |     for i in 1..numbers.len() {\n    |                               - unclosed\
    \ delimiter\n104 |         if numbers[i] > max_number {\n    |               \
    \                     - this delimiter might not be properly closed...\n...\n\
    109 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    117 | }\n    |   ^\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \ --> /tmp/tmp7yahrd_7.rs:8:25\n  |\n8 |     let mut max_index = -1;\n  |    \
    \                     ^^ the trait `Neg` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp7yahrd_7.rs:18:25\n   |\n18 |             result.push(max_index);\n\
    \   |                         ^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n18 |             result.push(max_index.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7yahrd_7.rs:26:25\n   |\n26 |             result.push(max_index);\n\
    \   |                         ^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n26 |             result.push(max_index.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7yahrd_7.rs:34:25\n   |\n34 |             result.push(max_index);\n\
    \   |                         ^^^^^^^^^ expected `isize`, found `usize`\n   |\n\
    help: you can convert a `usize` to an `isize` and panic if the converted value\
    \ doesn't fit\n   |\n34 |             result.push(max_index.try_into().unwrap());\n\
    \   |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7yahrd_7.rs:42:25\n   |\n42 |             "
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for index in 1..numbers.len() {\n        if numbers[index]\
    \ > max_value {\n            max_value = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbcp8crt.rs:16:17\n   |\n\
    16 |     result.push(max_index);\n   |                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     result.push(max_index.try_into().unwrap());\n\
    \   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy48wzgi0.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy48wzgi0.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy48wzgi0.rs:14:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n14 |     numbers[max_so_far_index]\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n \
    \   let mut max_so_far = max_so_far;\n    let mut max_so_far_index = 0;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far {\n       \
    \     max_so_far = number;\n            max_so_far_index = numbers.len() - 1;\n\
    \        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n    let mut\
    \ max_so_far = max_so_far;\n    let mut max_so_far_index = 0;\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = max_so_far_index;\n    let mut max_so_far\
    \ = max_so_far;\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = max_so_far_index;\n    let mut max_so_far = max_so_far;\n\
    \    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n\
    \        if number > max_so_far {\n            max_so_far = number;\n        \
    \    max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index\
    \ = max_so_far_index;\n    let mut max_so_far = max_so_far;\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = max_so_far_index;\n \
    \   let mut max_so_far = max_so_far;\n    let mut max_so_far_index = 0;\n    for\
    \ number in numbers.iter().rev() {\n        if number > max_so_far {\n       \
    \     max_so_far = \n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpeiwu_87s.rs:73:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n62 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - unclosed delimiter\n63 |         if number > max_so_far {\n   |  \
    \                              - this delimiter might not be properly closed...\n\
    64 |             max_so_far = \n65 | }\n   | - ...as it matches this but it has\
    \ different indentation\n...\n73 | }\n   |   ^\n\nerror: expected expression,\
    \ found `}`\n  --> /tmp/tmpeiwu_87s.rs:65:1\n   |\n65 | }\n   | ^ expected expression\n\
    \nerror[E0308]: mismatched types\n --> /tmp/tmpeiwu_87s.rs:9:21\n  |\n9 |    \
    \     if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |      \
    \               |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpeiwu_87s.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpeiwu_87s.rs:18:21\n   |\n18 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpeiwu_87s.rs:19:26\n   |\n19 |             max_so_far = number;\n\
    \   |                          ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n19 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeiwu_87s.rs:27:21\n\
    \   |\n27 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |      "
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for number in numbers {\n        if number > max_number {\n            max_number\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_number {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpq62r_fk0.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   ------- `numbers` moved due to this implicit call to\
    \ `.into_iter()`\n...\n13  |     for number in numbers {\n    |              \
    \     ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\nhelp: consider iterating over\
    \ a slice of the `Vec<isize>`'s content to avoid moving into the `for` loop\n\
    \    |\n8   |     for number in &numbers {\n    |                   +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers.iter().rev().take(max_so_far_index + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8b6u8e4d.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8b6u8e4d.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \  --> /tmp/tmp8b6u8e4d.rs:14:53\n   |\n14 |     numbers.iter().rev().take(max_so_far_index\
    \ + 1).collect()\n   |                                                     ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = 0;\n        }\n   \
    \     if number == max_number {\n            max_index += 1;\n        }\n    }\n\
    \    let mut max_numbers = Vec::new();\n    for i in 0..max_index {\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers.extend_from_slice(&numbers[max_index..]);\n    max_numbers\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `i`\n  --> /tmp/tmp_mg18cdi.rs:18:9\n   |\n18\
    \ |     for i in 0..max_index {\n   |         ^ help: if this is intentional,\
    \ prefix it with an underscore: `_i`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `numbers`\n   --> /tmp/tmp_mg18cdi.rs:21:36\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n21  |     max_numbers.extend_from_slice(&numbers[max_index..]);\n\
    \    |                                    ^^^^^^^ value borrowed here after move\n\
    \    |\nnote: this function takes ownership of the receiver `self`, which moves\
    \ `numbers`\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor\
    \ more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > result[i - 1] {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpycmmvg0j.rs:6:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = 0;\n    for i in numbers.iter().rev() {\n\
    \        if *i > max_number {\n            max_number = *i;\n            max_index\
    \ = i;\n        }\n    }\n    for i in numbers.iter().rev() {\n        if *i ==\
    \ max_number {\n            result.push(max_index);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd4tm6lc4.rs:12:25\n   |\n\
    12 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \           max_index = *i;\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for \n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpy1ibfbhz.rs:79:1\n  \
    \ |\n79 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy1ibfbhz.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy1ibfbhz.rs:16:21\n   |\n16 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpy1ibfbhz.rs:17:26\n   |\n17 |             max_so_far = number;\n\
    \   |                          ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n17 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:23:21\n\
    \   |\n23 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:24:26\n   |\n24 |\
    \             max_so_far = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    24 |             max_so_far = *number;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:30:21\n   |\n30 |         if number\
    \ > max_so_far {\n   |                     ^^^^^^^^^^\n   |                   "
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for index in 1..numbers.len() {\n        if numbers[index]\
    \ > max_value {\n            max_value = numbers[index];\n            max_index\
    \ = index;\n        }\n    }\n    result.push(max_value);\n    result.push(max_index);\n\
    \    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfbcp8crt.rs:16:17\n   |\n\
    16 |     result.push(max_index);\n   |                 ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n16 |     result.push(max_index.try_into().unwrap());\n\
    \   |                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        } else {\n            result.push(max_value);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpkt2z0phf.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              -------\n    |              |\n    |              `numbers` moved\
    \ due to this implicit call to `.into_iter()`\n    |              help: consider\
    \ borrowing to avoid moving into the for loop: `&numbers`\n...\n13  |     for\
    \ n in numbers {\n    |              ^^^^^^^ value used here after move\n    |\n\
    note: this function takes ownership of the receiver `self`, which moves `numbers`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..numbers.len() {\n        if numbers[i] > max_value {\n \
    \           max_value = numbers[i];\n            max_idx = i;\n        }\n   \
    \ }\n    vec![max_value, max_idx]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9lnek_6.rs:14:21\n   |\n\
    14 |     vec![max_value, max_idx]\n   |                     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     vec![max_value, max_idx.try_into().unwrap()]\n\
    \   |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    let mut max_so_far = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    let mut max_so_far\
    \ = numbers[0];\n    for number in numbers.iter().rev() {\n        if number >\
    \ max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    let mut max_so_far = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    let mut max_so_far = numbers[0];\n\
    \    for number in numbers.iter().rev() {\n        if number \n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpte36dza5.rs:82:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n72 |  \
    \   for number in numbers.iter().rev() {\n   |                               \
    \         - this delimiter might not be properly closed...\n73 |         if number\
    \ \n74 | }\n   | - ...as it matches this but it has different indentation\n...\n\
    82 | }\n   |   ^\n\nerror: expected `{`, found `}`\n  --> /tmp/tmpte36dza5.rs:74:1\n\
    \   |\n73 |         if number \n   |         -- this `if` expression has a condition,\
    \ but no block\n74 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpte36dza5.rs:9:21\n  |\n9 |         if number > max_so_far {\n  |\
    \                     ^^^^^^^^^^\n  |                     |\n  |             \
    \        expected `&isize`, found `isize`\n  |                     help: consider\
    \ borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpte36dza5.rs:10:26\n\
    \   |\n10 |             max_so_far = number;\n   |                          ^^^^^^\
    \ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n\
    \   |\n10 |             max_so_far = *number;\n   |                          +\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpte36dza5.rs:17:21\n   |\n17 |\
    \         if number > max_so_far {\n   |                     ^^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpte36dza5.rs:18:26\n   |\n18 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n18 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpte36dza5.rs:25:21\n   |\n25 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for idx in 1..numbers.len() {\n        if numbers[idx] > max_value {\n\
    \            max_value = numbers[idx];\n            max_idx = idx;\n        }\n\
    \    }\n    vec![max_value, max_idx]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdb9o8chn.rs:14:21\n   |\n\
    14 |     vec![max_value, max_idx]\n   |                     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     vec![max_value, max_idx.try_into().unwrap()]\n\
    \   |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    let mut current_index = 0;\n    for number in\
    \ numbers.iter() {\n        if number > max_value {\n            max_value = number;\n\
    \            max_index = current_index;\n        }\n        current_index += 1;\n\
    \    }\n    result.push(max_value);\n    result.push(max_index);\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9_89ffs6.rs:11:21\n   |\n\
    11 |         if number > max_value {\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&max_value`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp9_89ffs6.rs:12:25\n   |\n12 |             max_value\
    \ = number;\n   |                         ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n12 |             max_value\
    \ = *number;\n   |                         +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = -1;\n    for index in 1..numbers.len() {\n        if numbers[index] > max_value\
    \ {\n            max_value = numbers[index];\n            max_index = index;\n\
    \        }\n    }\n    vec![max_value, max_index]\n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmpejty2tsh.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpejty2tsh.rs:14:21\n   |\n14 |     vec![max_value, max_index]\n   | \
    \                    ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n14 |     vec![max_value, max_index.try_into().unwrap()]\n   |   \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for value in numbers {\n        if value > max_value {\n            max_value\
    \ = value;\n        }\n        result.push(max_value);\n    }\n    result\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp1191kg30.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp9cn1v4ot.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers.iter().rev() {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbr5leqce.rs:15:21\n   |\n\
    15 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpbr5leqce.rs:16:26\n   |\n16 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             max_number = *number;\n   |                          +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for number in numbers {\n        if number > max_value {\n            max_value\
    \ = number;\n        }\n    }\n    for number in numbers {\n        if number\
    \ == max_value {\n            result.push(number);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmp63p7beem.rs:13:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n13  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747952
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_index\
    \ = numbers[0];\n    for &n in numbers {\n        if n > max_value {\n       \
    \     max_value = n;\n            max_index = n;\n        }\n    }\n    let mut\
    \ result = vec![max_value];\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            result.push(max_value);\n            max_value =\
    \ numbers[i];\n            max_index = i;\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp39qjobma.rs:8:9\n  |\n8 |\
    \     for &n in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp39qjobma.rs:19:25\n   |\n19 |             max_index\
    \ = i;\n   |                         ^ expected `isize`, found `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = -1;\n    for &i in numbers {\n        if i > max_value\
    \ {\n            max_value = i;\n            max_index = i;\n        }\n    }\n\
    \    for i in numbers {\n        if i == max_index {\n            result.push(max_value);\n\
    \        } else {\n            result.push(i);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpnfy1q8wo.rs:9:9\n  |\n9 |\
    \     for &i in numbers {\n  |         ^^    ------- this expression has type\
    \ `isize`\n  |         |\n  |         expected `isize`, found reference\n  |\n\
    \  = note:   expected type `isize`\n          found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmprk4416jb.rs:11:55\n\
    \   |\n11 |             max_index = numbers.iter().position(|x| x == number).unwrap();\n\
    \   |                                                       ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n\nerror[E0277]: a value of type `Vec<isize>` cannot\
    \ be built from an iterator over elements of type `&isize`\n  --> /tmp/tmprk4416jb.rs:14:68\n\
    \   |\n14 |     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_value = numbers[0];\n\
    \    for n in numbers {\n        if n > max_value {\n            max_value = n;\n\
    \        }\n    }\n    for n in numbers {\n        if n == max_value {\n     \
    \       result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpqywk3nn0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max = numbers[0];\n    for n in numbers {\n   \
    \     if n > max {\n            max = n;\n        }\n    }\n    vec![max]\n}\n\
    \nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpkhswymew.rs:6:19

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for n in numbers {\n        if n > max_number {\n          \
    \  max_number = n;\n            max_index = numbers.iter().position(|&x| x ==\
    \ n).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpji80wxqr.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_number =\
    \ numbers[0];\n    let mut max_index = -1;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = result.len();\n        }\n        result.push(number);\n\
    \    }\n    result[max_index..].into_iter().collect()\n}\n\nfn main() {\n    let\
    \ candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp873g8nqy.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp873g8nqy.rs:11:26\n   |\n11 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             max_number = *number;\n   |                          +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp873g8nqy.rs:8:25\n\
    \  |\n8 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0277]: a value of type `Vec<isize>`\
    \ cannot be built from an iterator over elements of type `&&isize`\n  --> /tmp/tmp873g8nqy.rs:16:37\n\
    \   |\n16 |     result[max_index..].into_iter().collect()\n   |              \
    \                       ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&&isize>`\n   |\n   = help: the trait `FromIterator<&&isize>`\
    \ is not implemented for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_rolling_max = numbers[max_so_far_index];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max\
    \ {\n            max_so_far_rolling_max = number;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_max_rolling_max = numbers[max_so_far_index];\n    for number\
    \ in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max = number;\n        }\n   \
    \ }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max = numbers[max_so_far_index];\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max = number;\n  \
    \      }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = numbers[max_so_far_index];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max {\n\
    \            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max = number;\n\
    \        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = numbers[max_so_far_index];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n    let mut max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = numbers[max_so_far_index];\n    for number in numbers.iter().rev() {\n   \
    \     if number > max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ {\n            max_so_far_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max_rolling_max\
    \ = number;\n        }\n    }\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8ky1gimg.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8ky1gimg.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8ky1gimg.rs:16:21\n   |\n16 |         if number > max_so_far_rolling_max\
    \ {\n   |                     ^^^^^^^^^^^^^^^^^^^^^^\n   |                   \
    \  |\n   |                     expected `&isize`, found `isize`\n   |        \
    \             help: consider borrowing here: `&max_so_far_rolling_max`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8ky1gimg.rs:17:38\n   |\n17 |             max_so_far_rolling_max\
    \ = number;\n   |                                      ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n17 |  \
    \           max_so_far_rolling_max = *number;\n   |                          \
    \            +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ky1gimg.rs:22:21\n\
    \   |\n22 |         if number > max_so_far_rolling_max_rolling_max {\n   |   \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n   |                  \
    \   |\n   |                     expected `&isize`, found `isize`\n   |       \
    \              help: consider borrowing here: `&max_so_far_rolling_max_rolling_max`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp8ky1gimg.rs:23:50\n   |\n23 |\
    \             max_so_far_rolling_max_rolling_max = number;\n   |             \
    \                                     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n23 |             max_so_far_rolling_max_rolling_max\
    \ = *number;\n   |                                                  +\n\nerror[E0308]:\
    \ mi"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    let mut max_so_far_rolling_index = 0;\n    for n in numbers {\n  \
    \      if n > max_so_far_rolling {\n            max_so_far_rolling = n;\n    \
    \        max_so_far_rolling_index = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling\
    \ = 0;\n    let mut max_so_far_rolling_rolling_index = 0;\n    for n in numbers\
    \ {\n        if n > max_so_far_rolling_rolling {\n            max_so_far_rolling_rolling\
    \ = n;\n            max_so_far_rolling_rolling_index = n;\n        }\n    }\n\
    \    let mut max_so_far_rolling_rolling_rolling = 0;\n    let mut max_so_far_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling\
    \ {\n            max_so_far_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling\
    \ = 0;\n    let mut max_so_far_rolling_rolling_rolling_rolling_index = 0;\n  \
    \  for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling {\n \
    \           max_so_far_rolling_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far_rolling_rolling_rolling_rolling\
    \ {\n            max_so_far_rolling_rolling_rolling_rolling = n;\n           \
    \ max_so_far_rolling_rolling_rolling_index = n;\n        }\n    }\n    let mut\
    \ max_so_far_rolling_rolling_rolling_rolling_index = 0;\n    for n in numbers\
    \ {\n        if n > max_so_far_rolling_rolling_rolling_rolling {\n           \
    \ max_so_far_rolling_rolling_rolling_rolling = n;\n            max_so_far_rolling_rolling_rolling_index\
    \ = n;\n        }\n    }\n    let mut max_so_far_rolling_rolling_rolling_rolling_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_f\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpbwau6ghq.rs:71:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n61 |  \
    \   for n in numbers {\n   |                      - this delimiter might not be\
    \ properly closed...\n62 |         if n > max_so_f\n63 | }\n   | - ...as it matches\
    \ this but it has different indentation\n...\n71 | }\n   |   ^\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmpbwau6ghq.rs:63:1\n   |\n62 |         if n > max_so_f\n\
    \   |         -- this `if` expression has a condition, but no block\n63 | }\n\
    \   | ^ expected `{`\n\nerror[E0308]: mismatched types\n --> /tmp/tmpbwau6ghq.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n        }\n    }\n    let mut max_so_far_rolling\
    \ = 0;\n    for n in numbers {\n        if n == max_so_far_index {\n         \
    \   max_so_far_rolling += 1;\n        }\n    }\n    max_so_far_rolling += 1;\n\
    \    max_so_far_rolling\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv8qawigt.rs:21:5\n   |\n\
    5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |               \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     max_so_far_rolling\n   |     ^^^^^^^^^^^^^^^^^^ expected struct\
    \ `Vec`, found integer\n   |\n   = note: expected struct `Vec<isize>`\n      \
    \          found type `{integer}`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    for i in 1..numbers.len() {\n        if numbers[i]\
    \ > max_value {\n            max_value = numbers[i];\n            max_index =\
    \ i;\n        }\n    }\n    for i in 0..numbers.len() {\n        if i == max_index\
    \ {\n            result.push(max_value);\n        } else {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmptnv112vn.rs:7:25

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = Vec::new();\n    let mut max_value = numbers[0];\n\
    \    let mut max_index = 0;\n    let mut max_index2 = 0;\n    let mut max_index3\
    \ = 0;\n    let mut max_index4 = 0;\n    let mut max_index5 = 0;\n    let mut\
    \ max_index6 = 0;\n    let mut max_index7 = 0;\n    let mut max_index8 = 0;\n\
    \    let mut max_index9 = 0;\n    let mut max_index10 = 0;\n    let mut max_index11\
    \ = 0;\n    let mut max_index12 = 0;\n    let mut max_index13 = 0;\n    let mut\
    \ max_index14 = 0;\n    let mut max_index15 = 0;\n    let mut max_index16 = 0;\n\
    \    let mut max_index17 = 0;\n    let mut max_index18 = 0;\n    let mut max_index19\
    \ = 0;\n    let mut max_index20 = 0;\n    let mut max_index21 = 0;\n    let mut\
    \ max_index22 = 0;\n    let mut max_index23 = 0;\n    let mut max_index24 = 0;\n\
    \    let mut max_index25 = 0;\n    let mut max_index26 = 0;\n    let mut max_index27\
    \ = 0;\n    let mut max_index28 = 0;\n    let mut max_index29 = 0;\n    let mut\
    \ max_index30 = 0;\n    let mut max_index31 = 0;\n    let mut max_index32 = 0;\n\
    \    let mut max_index33 = 0;\n    let mut max_index34 = 0;\n    let mut max_index35\
    \ = 0;\n    let mut max_index36 = 0;\n    let mut max_index37 = 0;\n    let mut\
    \ max_index38 = 0;\n    let mut max_index39 = 0;\n    let mut max_index40 = 0;\n\
    \    let mut max_index41 = 0;\n    let mut max_index42 = 0;\n    let mut max_index43\
    \ = 0;\n    let mut max_index44 = 0;\n    let mut max_index45 = 0;\n    let mut\
    \ max_index46 = 0;\n    let mut max_index47 = 0;\n    let mut max_index48 = 0;\n\
    \    let mut max_index49 = 0;\n    let mut max_index50 = 0;\n    let mut max_index51\
    \ = 0;\n    let mut max_index52 = 0;\n    let mut max_index53 = 0;\n    let mut\
    \ max_index54 = 0;\n    let mut max_index55 = 0;\n    let mut max_index56 = 0;\n\
    \    let mut max_index57 = 0;\n    let mut max_index58 = 0;\n    let mut max_index59\
    \ = 0;\n    let mut max_index60 = 0;\n    let mut max_index61 = 0;\n    let mut\
    \ max_index62 = 0;\n    let mut max_\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpa6lt0xpg.rs:70:17\n   |\n\
    70 |     let mut max_\n   |                 ^ help: add `;` here\n71 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n --> /tmp/tmpa6lt0xpg.rs:5:40\n\
    \  |\n5 | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n  |    -----------\
    \                         ^^^^^^^^^^ expected struct `Vec`, found `()`\n  |  \
    \  |\n  |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \  |\n  = note: expected struct `Vec<isize>`\n          found unit type `()`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    let mut max_so_far_rolling_max = 0;\n    let mut max_so_far_rolling_max_index\
    \ = 0;\n    for n in numbers {\n        if n > max_so_far {\n            max_so_far\
    \ = n;\n            max_so_far_index = n;\n            max_so_far_rolling_max\
    \ = max_so_far;\n            max_so_far_rolling_max_index = max_so_far_index;\n\
    \        }\n        if n == max_so_far {\n            max_so_far_rolling_max +=\
    \ n;\n            max_so_far_rolling_max_index += 1;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_max_rolling_max = max_so_far_rolling_max;\n    for n\
    \ in numbers {\n        if n == max_so_far {\n            max_so_far_rolling_max_rolling_max\
    \ += n;\n        }\n    }\n    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_index;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_rolling_max_rolling_max += max_so_far_rolling_max_rolling_max;\n\
    \    max_so_far_roll\n}\n\nfn main() {\n    let candidate = rolling_max;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `max_so_far_roll` in this scope\n  -->\
    \ /tmp/tmplhoat1wa.rs:42:5\n   |\n42 |     max_so_far_roll\n   |     ^^^^^^^^^^^^^^^\
    \ help: a local variable with a similar name exists: `max_so_far`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0425`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for i in 1..numbers.len() {\n        if numbers[i] > max_number\
    \ {\n            max_number = numbers[i];\n        }\n        max_numbers.push(max_number);\n\
    \    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp9cn1v4ot.rs:7:26

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpfhramxkw.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number = numbers[0];\n    let mut max_index\
    \ = -1;\n    let mut max_value = numbers[0];\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_number {\n            max_number = number;\n    \
    \        max_index = numbers.iter().rev().position(|&x| x == number).unwrap();\n\
    \            max_value = numbers[max_index];\n        }\n    }\n    vec![max_value,\
    \ max_number, max_index]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5srw0y71.rs:10:21\n   |\n\
    10 |         if number > max_number {\n   |                     ^^^^^^^^^^\n \
    \  |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_number`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp5srw0y71.rs:11:26\n   |\n11 |\
    \             max_number = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    11 |             max_number = *number;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5srw0y71.rs:12:65\n   |\n12 |             max_index\
    \ = numbers.iter().rev().position(|&x| x == number).unwrap();\n   |          \
    \                                                       ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n12 |  \
    \           max_index = numbers.iter().rev().position(|&x| x == *number).unwrap();\n\
    \   |                                                                 +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n --> /tmp/tmp5srw0y71.rs:7:25\n\
    \  |\n7 |     let mut max_index = -1;\n  |                         ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5srw0y71.rs:16:33\n   |\n16 |     vec![max_value, max_number, max_index]\n\
    \   |                                 ^^^^^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n16 |     vec![max_value, max_number, max_index.try_into().unwrap()]\n\
    \   |                                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 101
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![numbers[0]];\n    for i in 1..numbers.len()\
    \ {\n        if numbers[i] > result[result.len() - 1] {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp2pd8t3dc.rs:6:27

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_numbers = Vec::new();\n    let mut max_number\
    \ = numbers[0];\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n        }\n    }\n    max_numbers.push(max_number);\n\
    \    for number in numbers {\n        if number == max_number {\n            max_numbers.push(number);\n\
    \        } else {\n            max_numbers.push(max_number);\n        }\n    }\n\
    \    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpc5ym_l1a.rs:14:19\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for number in numbers {\n\
    \    |                   -------\n    |                   |\n    |           \
    \        `numbers` moved due to this implicit call to `.into_iter()`\n    |  \
    \                 help: consider borrowing to avoid moving into the for loop:\
    \ `&numbers`\n...\n14  |     for number in numbers {\n    |                  \
    \ ^^^^^^^ value used here after move\n    |\nnote: this function takes ownership\
    \ of the receiver `self`, which moves `numbers`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_so_far_index).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmp4i5qhwqh.rs:14:43\n   |\n14 |\
    \     numbers.iter().skip(max_so_far_index).collect()\n   |                  \
    \                         ^^^^^^^ value of type `Vec<isize>` cannot be built from\
    \ `std::iter::Iterator<Item=&isize>`\n   |\n   = help: the trait `FromIterator<&isize>`\
    \ is not implemented for `Vec<isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for number in numbers.iter().rev()\
    \ {\n        if number > max_so_far {\n            max_so_far = number;\n    \
    \        max_so_far_index = numbers.len() - 1;\n        }\n    }\n    let mut\
    \ max_so_far_index = 0;\n    for number in numbers.iter().rev() {\n        if\
    \ number > max_so_far {\n            max_so_far = number;\n            max_so_far_index\
    \ = numbers.len() - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n\
    \    for number in numbers.iter().rev() {\n        if number > max_so_far {\n\
    \            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    let mut max_so_far_index = 0;\n    for number in\
    \ numbers.iter().rev() {\n        if number > max_so_far {\n            max_so_far\
    \ = number;\n            max_so_far_index = numbers.len() - 1;\n        }\n  \
    \  }\n    let mut max_so_far_index = 0;\n    for \n}\n\nfn main() {\n    let candidate\
    \ = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4,\
    \ 3, 2, 1]), vec![4, 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]),\
    \ vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpy1ibfbhz.rs:79:1\n  \
    \ |\n79 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n --> /tmp/tmpy1ibfbhz.rs:9:21\n\
    \  |\n9 |         if number > max_so_far {\n  |                     ^^^^^^^^^^\n\
    \  |                     |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy1ibfbhz.rs:16:21\n   |\n16 |         if number > max_so_far {\n\
    \   |                     ^^^^^^^^^^\n   |                     |\n   |       \
    \              expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&max_so_far`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpy1ibfbhz.rs:17:26\n   |\n17 |             max_so_far = number;\n\
    \   |                          ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n17 |             max_so_far = *number;\n\
    \   |                          +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:23:21\n\
    \   |\n23 |         if number > max_so_far {\n   |                     ^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&max_so_far`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:24:26\n   |\n24 |\
    \             max_so_far = number;\n   |                          ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    24 |             max_so_far = *number;\n   |                          +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy1ibfbhz.rs:30:21\n   |\n30 |         if number\
    \ > max_so_far {\n   |                     ^^^^^^^^^^\n   |                   "
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers[max_so_far_index]\n}\n\nfn main() {\n  \
    \  let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpy48wzgi0.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpy48wzgi0.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpy48wzgi0.rs:14:5\n   |\n5  | fn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n   |                                        ---------- expected\
    \ `Vec<isize>` because of return type\n...\n14 |     numbers[max_so_far_index]\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `Vec`, found `isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n                found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers.iter().rev() {\n        if number > max_so_far\
    \ {\n            max_so_far = number;\n            max_so_far_index = numbers.len()\
    \ - 1;\n        }\n    }\n    numbers.iter().rev().take(max_so_far_index + 1).collect()\n\
    }\n\nfn main() {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp8b6u8e4d.rs:9:21\n  |\n9 |\
    \         if number > max_so_far {\n  |                     ^^^^^^^^^^\n  |  \
    \                   |\n  |                     expected `&isize`, found `isize`\n\
    \  |                     help: consider borrowing here: `&max_so_far`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8b6u8e4d.rs:10:26\n   |\n10 |             max_so_far\
    \ = number;\n   |                          ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n10 |             max_so_far\
    \ = *number;\n   |                          +\n\nerror[E0277]: a value of type\
    \ `Vec<isize>` cannot be built from an iterator over elements of type `&isize`\n\
    \  --> /tmp/tmp8b6u8e4d.rs:14:53\n   |\n14 |     numbers.iter().rev().take(max_so_far_index\
    \ + 1).collect()\n   |                                                     ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut result = vec![];\n    let mut max_number = numbers[0];\n\
    \    for n in numbers {\n        if n > max_number {\n            max_number =\
    \ n;\n        }\n    }\n    for n in numbers {\n        if n == max_number {\n\
    \            result.push(n);\n        }\n    }\n    result\n}\n\nfn main() {\n\
    \    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `numbers`\n   --> /tmp/tmpyjhewuu0.rs:13:14\n\
    \    |\n5   | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n    |     \
    \           ------- move occurs because `numbers` has type `Vec<isize>`, which\
    \ does not implement the `Copy` trait\n...\n8   |     for n in numbers {\n   \
    \ |              ------- `numbers` moved due to this implicit call to `.into_iter()`\n\
    ...\n13  |     for n in numbers {\n    |              ^^^^^^^ value used here\
    \ after move\n    |\nnote: this function takes ownership of the receiver `self`,\
    \ which moves `numbers`\nhelp: consider iterating over a slice of the `Vec<isize>`'s\
    \ content to avoid moving into the `for` loop\n    |\n8   |     for n in &numbers\
    \ {\n    |              +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_element: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_element {\n\
    \            max_element = number;\n            max_index = numbers.iter().position(|&number|\
    \ number == max_element).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmp28mh1sgc.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = number;\n        }\n\
    \    }\n    let mut max_numbers = Vec::new();\n    for i in 0..numbers.len() {\n\
    \        if numbers[i] != max_index {\n            max_numbers.push(numbers[i]);\n\
    \        }\n    }\n    max_numbers\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx_up_m2g.rs:11:25\n   |\n\
    11 |             max_index = number;\n   |                         ^^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpx_up_m2g.rs:16:26\n\
    \   |\n16 |         if numbers[i] != max_index {\n   |                       \
    \   ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n16 |     \
    \    if numbers[i] != max_index.try_into().unwrap() {\n   |                  \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_number: isize = 0;\n    let mut max_index:\
    \ usize = 0;\n    for number in numbers {\n        if number > max_number {\n\
    \            max_number = number;\n            max_index = numbers.iter().position(|&x|\
    \ x == number).unwrap();\n        }\n    }\n    numbers.iter().skip(max_index).take(numbers.len()\
    \ - max_index).collect()\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpfhramxkw.rs:14:68\n   |\n14 |\
    \     numbers.iter().skip(max_index).take(numbers.len() - max_index).collect()\n\
    \   |                                                                    ^^^^^^^\
    \ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747953
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_value = numbers[0];\n    let mut max_idx =\
    \ 1;\n    for idx in 1..numbers.len() {\n        if numbers[idx] > max_value {\n\
    \            max_value = numbers[idx];\n            max_idx = idx;\n        }\n\
    \    }\n    vec![max_value, max_idx]\n}\n\nfn main() {\n    let candidate = rolling_max;\n\
    \    assert_eq!(candidate(Vec::<isize>::new()), Vec::<isize>::new());\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, 4]), vec![1, 2, 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4,\
    \ 4, 4, 4]);\n    assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100,\
    \ 100]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdb9o8chn.rs:14:21\n   |\n\
    14 |     vec![max_value, max_idx]\n   |                     ^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n14 |     vec![max_value, max_idx.try_into().unwrap()]\n\
    \   |                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747954
- exit_code: 1
  program: "/// From a given vector of integers, generate a vector of rolling maximum\
    \ element found until given moment\n/// in the sequence.\n/// >>> rolling_max(vec![1,\
    \ 2, 3, 2, 3, 4, 2])\n/// vec![1, 2, 3, 3, 3, 4, 4]\nfn rolling_max(numbers: Vec<isize>)\
    \ -> Vec<isize> {\n    let mut max_so_far = numbers[0];\n    let mut max_so_far_index\
    \ = 0;\n    for number in numbers {\n        if number > max_so_far {\n      \
    \      max_so_far = number;\n            max_so_far_index = numbers.len();\n \
    \       }\n    }\n    let mut max_so_far_rolling_index = 0;\n    for number in\
    \ numbers {\n        if number == max_so_far {\n            max_so_far_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_index_rolling_index += 1;\n        }\n    }\n    let\
    \ mut max_so_far_rolling_index_rolling_index_rolling_index = 0;\n    for number\
    \ in numbers {\n        if number == max_so_far {\n            max_so_far_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_index_rolling_index_rolling_index_rolling_index +=\
    \ 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ += 1;\n        }\n    }\n    let mut max_so_far_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index_rolling_index\
    \ = 0;\n    for number in numbers {\n        if number == max_so_far {\n     \
    \       max_so_far_rolling_index_rolling_index_rolling_index_\n}\n\nfn main()\
    \ {\n    let candidate = rolling_max;\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![1, 2, 3, 4]), vec![1, 2,\
    \ 3, 4]);\n    assert_eq!(candidate(vec![4, 3, 2, 1]), vec![4, 4, 4, 4]);\n  \
    \  assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3, 3, 3, 100, 100]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmph31d9hko.rs:68:3\n\
    \   |\n5  | fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |        \
    \                                           - unclosed delimiter\n...\n57 |  \
    \   for number in numbers {\n   |                           - unclosed delimiter\n\
    58 |         if number == max_so_far {\n   |                                 -\
    \ this delimiter might not be properly closed...\n59 |             max_so_far_rolling_index_rolling_index_rolling_index_\n\
    60 | }\n   | - ...as it matches this but it has different indentation\n...\n68\
    \ | }\n   |   ^\n\nerror[E0425]: cannot find value `max_so_far_rolling_index_rolling_index_rolling_index_`\
    \ in this scope\n  --> /tmp/tmph31d9hko.rs:59:13\n   |\n59 |             max_so_far_rolling_index_rolling_index_rolling_index_\n\
    \   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help:\
    \ a local variable with a similar name exists: `max_so_far_rolling_index_rolling_index_rolling_index`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmph31d9hko.rs:57:5\n   |\n5  | \
    \  fn rolling_max(numbers: Vec<isize>) -> Vec<isize> {\n   |                 \
    \                         ---------- expected `Vec<isize>` because of return type\n\
    ...\n57 | /     for number in numbers {\n58 | |         if number == max_so_far\
    \ {\n59 | |             max_so_far_rolling_index_rolling_index_rolling_index_\n\
    60 | | }\n...  |\n67 | |     assert_eq!(candidate(vec![3, 2, 3, 100, 3]), vec![3,\
    \ 3, 3, 100, 100]);\n68 | | }\n   | |__^ expected struct `Vec`, found `()`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n           found unit type `()`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747954
