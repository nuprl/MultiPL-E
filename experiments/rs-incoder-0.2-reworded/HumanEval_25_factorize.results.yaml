name: HumanEval_25_factorize
language: rs
results:
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n            i += 1;\n        }\n\
    \    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate\
    \ = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpv85umsxo.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = vec![];\n\
    \    let mut primes = vec![];\n    let mut primes_size = vec![];\n    let mut\
    \ primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let\
    \ mut primes_size = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size\
    \ = vec![];\n    let mut primes_size = vec![];\n    let mut primes_size = vec![];\n\
    \    let mut primes_size = vec![];\n    let mut prime\n}\n\nfn main() {\n    let\
    \ candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpbxkck4eu.rs:62:18\n   |\n\
    62 |     let mut prime\n   |                  ^ help: add `;` here\n63 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbxkck4eu.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_index = Vec::new();\n    let mut prime_factors_count_min_index\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = Vec::new();\n    let mut prime_factors_count_max_value = Vec::new();\n   \
    \ let mut prime_factors_count_min_value = Vec::new();\n    let mut prime_factors_count_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_min_value = Vec::new();\n   \
    \ let mut prime_factors_count_max_value = Vec::new();\n    let mut prime_factors_count_min_value\
    \ = \n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpn2us537g.rs:49:1\n\
    \   |\n49 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max = Vec::new();\n   \
    \ let mut prime_factors_count_index_max_index = Vec::new();\n    let mut prime_factors_count_index_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_index = Vec::new();\n\
    \    let mut prime_factors_count_index_max_value_max = Vec::new();\n    let mut\
    \ prime_factors_count_index_max_value_max_index = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_index_max_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_index\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_index_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_max\
    \ = Vec::new();\n    let mut prime_factors_count_index_max_value_max_value_max_value_max_value_index_max_max\
    \ = \n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n  --> /tmp/tmpcsdqn470.rs:40:1\n\
    \   |\n40 | }\n   | ^ expected expression\n\nerror: aborting due to previous error\n\
    \n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut factorization = Vec::new();\n    let mut factorization_primes = Vec::new();\n\
    \    let mut factorization_prime_factors = Vec::new();\n    let mut factorization_prime_factors_count\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max = Vec::new();\n\
    \    let mut factorization_prime_factors_count_min = Vec::new();\n    let mut\
    \ factorization_prime_factors_count_max_prime = Vec::new();\n    let mut factorization_prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpgwwtlvk0.rs:36:80\n   |\n\
    36 |     let mut factorization_prime_factors_count_max_prime_prime_prime_prime_prime\n\
    \   |                                                                        \
    \        ^ help: add `;` here\n37 | }\n   | - unexpected token\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgwwtlvk0.rs:10:27\n   |\n10 | fn factorize(n:\
    \ isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^ expected struct\
    \ `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its body has\
    \ no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = vec![true; n + 1];\n    let mut i = 2;\n    while i <= n\
    \ {\n        if primes[i] {\n            factors.push(i);\n            primes[i]\
    \ = false;\n        }\n        i += i;\n    }\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpy7i44nsd.rs:12:33\n   |\n\
    12 |     let mut primes = vec![true; n + 1];\n   |                           \
    \      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n12 |     let\
    \ mut primes = vec![true; (n + 1).try_into().unwrap()];\n   |                \
    \                 +     +++++++++++++++++++++\n\nerror[E0277]: the type `[bool]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpy7i44nsd.rs:15:12\n   |\n15 |  \
    \       if primes[i] {\n   |            ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror[E0277]: the type `[bool]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpy7i44nsd.rs:17:13\n   |\n17 |            \
    \ primes[i] = false;\n   |             ^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[bool]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<bool>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = vec![];\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    if n > 1 {\n        factors.push(n);\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp20052cad.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors.push(factor);\n\
    \    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfap3spo9.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n   \
    \ let mut primes_size_rem = Vec::new();\n    let mut primes_size_rem_size = Vec::new();\n\
    \    let mut primes_size_rem_size_rem = Vec::new();\n    let mut primes_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem = Vec::new();\n\
    \    let mut primes_size_rem_size_rem_size_rem_size = Vec::new();\n    let mut\
    \ primes_size_rem_size_rem_size_rem_size_rem = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size_rem_size\
    \ = Vec::new();\n    let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_re\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpd6nvaybm.rs:32:72\n   |\n\
    32 |     let mut primes_size_rem_size_rem_size_rem_size_rem_size_rem_size_re\n\
    \   |                                                                        ^\
    \ help: add `;` here\n33 | }\n   | - unexpected token\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd6nvaybm.rs:10:27\n   |\n10 | fn factorize(n: isize) ->\
    \ Vec<isize> {\n   |    ---------              ^^^^^^^^^^ expected struct `Vec`,\
    \ found `()`\n   |    |\n   |    implicitly returns `()` as its body has no tail\
    \ or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n    \
    \       found unit type `()`\n\nerror: aborting due to 2 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut primes_size = Vec::new();\n   \
    \ let mut primes_size_reverse = Vec::new();\n    let mut primes_size_reverse_sorted\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse = Vec::new();\n\
    \    let mut primes_size_reverse_sorted_reverse_size = Vec::new();\n    let mut\
    \ primes_size_reverse_sorted_reverse_size_reverse = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_reverse_size\
    \ = Vec::new();\n    let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_\n\
    }\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp5fvms3bs.rs:33:106\n   |\n\
    33 |     let mut primes_size_reverse_sorted_reverse_size_reverse_size_sorted_reverse_size_reverse_size_sorted_\n\
    \   |                                                                        \
    \                                  ^ help: add `;` here\n34 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5fvms3bs.rs:10:27\n \
    \  |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------         \
    \     ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n != 1 {\n        if n % factor == 0 {\n \
    \           factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpyckib0h5.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpdi_8xluu.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_tm0gbkl.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1018vabd.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut factor = 1;\n    while n > 1 {\n        if n % factor == 0 {\n  \
    \          factors.push(factor);\n            n /= factor;\n        } else {\n\
    \            factor *= factor;\n        }\n    }\n    factors\n}\n\nfn main()\
    \ {\n    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n\
    \    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8), vec![2,\
    \ 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpppz8wmdh.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= factor;\n\
    \   |             ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        }\n        i += 1;\n    }\n\
    \    factors.push(n);\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmppng22hm4.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_prime = Vec::new();\n    let mut prime_factors_count_min_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime = Vec::new();\n \
    \   let mut prime_factors_count_min_prime_prime_prime_prime = Vec::new();\n  \
    \  let mut prime_factors_count_max_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime = Vec::new();\n\
    \    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_min_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime_factors_count_max_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = Vec::new();\n    let mut prime\n}\n\nfn main() {\n    let candidate = factorize;\n\
    \    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4), vec![2,\
    \ 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmphakr4k8m.rs:36:18\n   |\n\
    36 |     let mut prime\n   |                  ^ help: add `;` here\n37 | }\n \
    \  | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphakr4k8m.rs:10:27\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------        \
    \      ^^^^^^^^^^ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n           found unit type `()`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = vec![];\n\
    \    let mut primes = vec![];\n    let mut prime_counter = 1;\n    let mut factor\
    \ = 1;\n    let mut i = 1;\n    while i * factor <= n {\n        if n % i == 0\
    \ {\n            factors.push(factor);\n            primes.push(i);\n        \
    \    factor = 1;\n            i += 1;\n        } else {\n            factor *=\
    \ i;\n        }\n    }\n    if factor > 1 {\n        factors.push(factor);\n \
    \       primes.push(1);\n    }\n    primes.sort_unstable();\n    primes.reverse();\n\
    \    for i in primes {\n        factors.push(factor);\n        factor = 1;\n \
    \   }\n    factors\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[1, 1, 1, 1]`,\n right: `[2]`', /tmp/tmpfg11d4vx.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut primes = Vec::new();\n    let mut prime_factors = Vec::new();\n \
    \   let mut prime_factors_count = Vec::new();\n    let mut prime_factors_count_max\
    \ = Vec::new();\n    let mut prime_factors_count_min = Vec::new();\n    let mut\
    \ prime_factors_count_max_min = Vec::new();\n    let mut prime_factors_count_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min = Vec::new();\n\
    \    let mut prime_factors_count_max_min_max_min_max = Vec::new();\n    let mut\
    \ prime_factors_count_max_min_max_min_max_min = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min\
    \ = Vec::new();\n    let mut prime_factors_count_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max_min_max\
    \ = Vec::new();\n\n}\n\nfn main() {\n    let candidate = factorize;\n    assert_eq!(candidate(2),\
    \ vec![2]);\n    assert_eq!(candidate(4), vec![2, 2]);\n    assert_eq!(candidate(8),\
    \ vec![2, 2, 2]);\n    assert_eq!(candidate(57), vec![3, 19]);\n    assert_eq!(candidate(3249),\
    \ vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193), vec![3, 3, 3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19, 19]);\n    assert_eq!(candidate(18),\
    \ vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn5u6tzv2.rs:10:27\n   |\n\
    10 | fn factorize(n: isize) -> Vec<isize> {\n   |    ---------              ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Return vector of prime factors of given integer in the order from\
    \ smallest to largest.\n/// Each of the factors should be vectored number of times\
    \ corresponding to how many times it appeares in factorization.\n/// Input number\
    \ should be equal to the product of all factors\n/// >>> factorize(8)\n/// vec![2,\
    \ 2, 2]\n/// >>> factorize(25)\n/// vec![5, 5]\n/// >>> factorize(70)\n/// vec![2,\
    \ 5, 7]\nfn factorize(n: isize) -> Vec<isize> {\n    let mut factors = Vec::new();\n\
    \    let mut i = 1;\n    while i * i <= n {\n        if n % i == 0 {\n       \
    \     factors.push(i);\n            n /= i;\n        } else {\n            i +=\
    \ 1;\n        }\n    }\n    factors.push(n);\n    factors\n}\n\nfn main() {\n\
    \    let candidate = factorize;\n    assert_eq!(candidate(2), vec![2]);\n    assert_eq!(candidate(4),\
    \ vec![2, 2]);\n    assert_eq!(candidate(8), vec![2, 2, 2]);\n    assert_eq!(candidate(57),\
    \ vec![3, 19]);\n    assert_eq!(candidate(3249), vec![3, 3, 19, 19]);\n    assert_eq!(candidate(185193),\
    \ vec![3, 3, 3, 19, 19, 19]);\n    assert_eq!(candidate(20577), vec![3, 19, 19,\
    \ 19]);\n    assert_eq!(candidate(18), vec![2, 3, 3]);\n}\n"
  stdout: ''
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpey2s4t1j.rs:16:13\n\
    \   |\n10 | fn factorize(n: isize) -> Vec<isize> {\n   |              - help:\
    \ consider making this binding mutable: `mut n`\n...\n16 |             n /= i;\n\
    \   |             ^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  exit_code: 1
  status: SyntaxError
