name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it returns\
  \ true if there are two distinct elements in the vector that\n/// sum to zero, and\
  \ false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n///\
  \ >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
  \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
  \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: ["    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n        sum +=\
    \ i;\n    }\n    sum == 0", "    let mut sum = 0;\n    for x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == l.len()", "    let mut seen = HashSet::new();\n    for &i in l {\n      \
    \  if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "  \
    \  let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    let mut seen = HashSet::new();\n    for &i in l {\n        if\
    \ seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \        sum += i;\n    }\n    sum == 0", "    let mut sum = 0;\n    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        sum += i;\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n    let mut\
    \ seen = vec![];\n    for x in l {\n        if seen.is_empty() {\n           \
    \ seen = vec![true];\n        }\n        if seen[x - 1] {\n            seen[x\
    \ - 1] = false;\n            sum += x;\n        } else {\n            seen[x -\
    \ 1] = true;\n        }\n    }\n    sum == 0 && seen.is_empty()", "    let mut\
    \ sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum = 0;\n    let\
    \ mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n        sum\
    \ += x;\n    }\n    sum == 0", "    let mut sum = 0;\n    let mut seen = vec![];\n\
    \    for &x in l {\n        if seen.is_empty() {\n            sum += x;\n    \
    \        seen.push(x);\n        } else if seen.is_some() {\n            if sum\
    \ == 0 {\n                return false;\n            }\n            if sum ==\
    \ x {\n                seen.pop();\n            } else {\n                sum\
    \ += x;\n                seen.push(x);\n            }\n        }\n    }\n    true",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return true;\n        }\n\
    \        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|x|\
    \ x).sum() == 0", '    l.iter().fold(false, |a, b| a && b && (a + b) == 0)', " \
    \   let mut sum = 0;\n    let mut i = 0;\n    while i < l.len() {\n        sum\
    \ += l[i];\n        if sum == 0 {\n            return true;\n        }\n     \
    \   i += 1;\n    }\n    false", "    let mut sum = 0;\n    for i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n  \
    \      if sum == 0 {\n            return true;\n        }\n    }\n    false",
  '    l.iter().fold(false, |a, b| a && b && (a + b) == 0)', "    let mut sum = 0;\n\
    \    let mut pairs = Vec::new();\n    for &i in l {\n        if i != 0 {\n   \
    \         sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum\
    \ == 0 {\n        return true;\n    }\n    let mut i = 0;\n    let mut j = 0;\n\
    \    while i < pairs.len() && j < pairs.len() {\n        if pairs[i] + pairs[j]\
    \ == 0 {\n            i += 1;\n            j += 1;\n        } else {\n       \
    \     i += 1;\n        }\n    }\n    i == pairs.len()", '    l.iter().fold(false,
    |acc, x| acc && x.pairs().fold(false, |acc, y| acc && y.sum() == 0))', "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut pairs = vec![];\n\
    \    for i in l {\n        for j in l {\n            if i != j && i + j == 0 {\n\
    \                pairs.push((i, j));\n            }\n        }\n    }\n    pairs.len()\
    \ == l.len() && pairs.iter().all(|&(_, v)| v == 0)", "    let mut sum = 0;\n \
    \   for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|&i|\
    \ i).filter(|&i| i != 0).count() == l.len()", "    let mut sum = 0;\n    for i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for x in l {\n     \
    \   sum += x;\n    }\n    sum == 0 && l.len() > 1", "    let mut sum = 0;\n  \
    \  for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for\
    \ &x in l {\n        pairs.push((x, sum));\n        sum += x;\n    }\n    let\
    \ mut seen = vec![];\n    for &(x, y) in pairs {\n        if seen.is_empty() {\n\
    \            seen.push(x);\n        }\n        if seen.is_empty() {\n        \
    \    seen.push(y);\n        }\n        if seen.is_empty() {\n            return\
    \ false;\n        }\n        if seen[0] == seen[1] {\n            seen.pop();\n\
    \        }\n    }\n    true", "    let mut sum = 0;\n    for i in l {\n      \
    \  sum += i;\n    }\n    sum == 0 && l.len() > 1", '    l.iter().fold(false, |b,
    x| b && b == x.checked_add(0, |a, b| a == b).unwrap())', "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        sum += i;\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().map(|x| x).filter(|x| x == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    let mut seen = HashSet::new();\n   \
    \ for &i in l {\n        if seen.contains(&i) {\n            return false;\n \
    \       }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0 &&\
    \ seen.len() == l.len()", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        if i != 0 {\n            sum += i;\n            pairs.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        return true;\n    }\n    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < pairs.len() && j < pairs.len() {\n\
    \        if pairs[i] + pairs[j] == 0 {\n            i += 1;\n            j +=\
    \ 1;\n        } else {\n            i += 1;\n        }\n    }\n    i == pairs.len()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    let mut pair = false;\n    for &x in l {\n\
    \        if x == 0 {\n            pair = true;\n        } else {\n           \
    \ sum += x;\n        }\n    }\n    pair && sum == 0", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum =\
    \ 0;\n    let mut pairs = Vec::new();\n    for &i in l {\n        if i != 0 {\n\
    \            sum += i;\n            pairs.push(i);\n        }\n    }\n    if sum\
    \ == 0 {\n        true\n    } else {\n        false\n    }", "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut sum = 0;\n  \
    \  let mut i = 0;\n    while i < l.len() {\n        if l[i] == 0 {\n         \
    \   i += 1;\n        } else {\n            sum += l[i];\n            i += 1;\n\
    \        }\n    }\n    sum == 0", '    l.iter().fold(false, |b, i| b && b == (l.iter().skip(i).fold(false,
    |b, j| b + j) == 0))', "    let mut sum = 0;\n    for i in l {\n        sum +=\
    \ i;\n    }\n    sum == 0 && l.len() > 1", "    let mut sum = 0;\n    for &i in\
    \ l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum\
    \ = 0;\n    let mut pair = false;\n    for &i in l {\n        if i == 0 {\n  \
    \          pair = true;\n        }\n        sum += i;\n        if sum == 0 {\n\
    \            pair = true;\n        }\n    }\n    !pair", "    let mut sum = 0;\n\
    \    let mut pair = false;\n    for &i in l {\n        if i != 0 {\n         \
    \   sum += i;\n            if sum == 0 {\n                pair = true;\n     \
    \       }\n        }\n    }\n    pair", "    let mut sum = 0;\n    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        seen.insert(i);\n        sum += i;\n\
    \    }\n    sum == 0", "    let mut pairs = vec![];\n    for i in l {\n      \
    \  for j in l {\n            if i == j {\n                continue;\n        \
    \    }\n            if i + j == 0 {\n                pairs.push((i, j));\n   \
    \         }\n        }\n    }\n    pairs.len() == l.len() && pairs.iter().all(|&(i,\
    \ j)| i == j)", "    let mut seen = HashSet::new();\n    for &i in l {\n     \
    \   if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "  \
    \  let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut sum = 0;\n    let mut i = 0;\n    for &x\
    \ in l {\n        if x == 0 {\n            i += 1;\n        } else {\n       \
    \     sum += x;\n        }\n        if sum == 0 {\n            return false;\n\
    \        }\n    }\n    true", "    let mut sum = 0;\n    for i in l {\n      \
    \  sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &i in\
    \ l {\n        if i != 0 {\n            sum += i;\n        } else {\n        \
    \    if sum == 0 {\n                pairs.push(vec![sum, i]);\n            }\n\
    \            sum = 0;\n        }\n    }\n    pairs.len() == 1 && pairs[0][1] ==\
    \ 0", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n   \
    \ sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", " \
    \   let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &i in l {\n   \
    \     if i != 0 {\n            sum += i;\n            pairs.push(i);\n       \
    \ }\n    }\n    if sum == 0 {\n        return true;\n    }\n    for &i in pairs\
    \ {\n        if i != 0 {\n            if sum == i {\n                return true;\n\
    \            }\n        }\n    }\n    false", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count()", "    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut seen =\
    \ vec![];\n    for &i in l {\n        if *i == 0 {\n            seen.append(i);\n\
    \        } else {\n            sum += *i;\n            if sum == 0 {\n       \
    \         seen.append(i);\n            }\n        }\n    }\n    !seen.contains(&0)",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 || sum ==\
    \ 1", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n   \
    \ sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut pairs\
    \ = vec![];\n    let mut sum = 0;\n    for &i in l {\n        if i != 0 {\n  \
    \          pairs.push((i, sum));\n            sum += i;\n        }\n    }\n  \
    \  pairs.len() == 1 && pairs.iter().all(|&(_, s)| s == 0)", '    l.iter().fold(false,
    |acc, x| acc && x.iter().fold(false, |acc, y| acc && y == 0))', "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count()", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    let mut has_pair = false;\n\
    \    for &i in l {\n        if i == 0 {\n            has_pair = true;\n      \
    \  } else {\n            sum += i;\n            if sum == 0 {\n              \
    \  has_pair = true;\n            }\n        }\n    }\n    has_pair", '    l.iter().fold(false,
    |acc, x| acc && x.to_usize() == 0)', "    let mut sum = 0;\n    for &i in l {\n\
    \        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i ==\
    \ 0).count() == 2", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == 2",
  "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for &i in l {\n    \
    \    sum += i;\n        pairs.push(i);\n    }\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    pairs.sort();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = pairs.into_iter().filter(|&i|\
    \ i != 0).collect::<Vec<_>>();\n    let mut pairs = ", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum\
    \ = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() >\
    \ 1", "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n   \
    \ sum == 0 && l.len() == 2", "    let mut sum = 0;\n    for &i in l {\n      \
    \  sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n \
    \   }\n    sum == 0 || sum == l.iter().filter(|&i| i == 0).count() == l.len()\
    \ - 2", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n \
    \   sum == 0", "    let mut sum = 0;\n    let mut i = 0;\n    for &x in l {\n\
    \        if x == 0 {\n            sum += i;\n        }\n        i += 1;\n    }\n\
    \    sum == 0 && l.len() == i", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return true;\n        }\n\
    \        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    let mut pairs = vec![];\n\
    \    for x in l {\n        if x == 0 {\n            pairs.push(vec![]);\n    \
    \    } else {\n            if sum == x {\n                pairs.push(vec![]);\n\
    \            } else {\n                pairs.push(vec![x]);\n            }\n \
    \       }\n        sum += x;\n    }\n    pairs.len() == pairs.iter().filter(|&x|\
    \ x.len() == 1).count() || pairs.len() == pairs.iter().filter(|&x| x.len() ==\
    \ 2).count()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n \
    \   }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut sum = 0;\n    let mut pairs = vec![];\n    for &i in l {\n        sum\
    \ += i;\n        pairs.push(i);\n    }\n    if sum == 0 {\n        return true;\n\
    \    }\n    let mut i = 0;\n    while i < pairs.len() {\n        if pairs[i] ==\
    \ 0 {\n            pairs.remove(&i);\n        } else {\n            i += 1;\n\
    \        }\n    }\n    pairs.len() == 0", "    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut sum = 0;\n    let mut has_pair = false;\n   \
    \ for &i in l {\n        sum += i;\n        if sum == 0 {\n            has_pair\
    \ = true;\n            break;\n        }\n    }\n    has_pair", "    let mut sum\
    \ = 0;\n    let mut i = 0;\n    let mut j = 0;\n    while i < l.len() && j < l.len()\
    \ {\n        if l[i] == l[j] {\n            i += 1;\n            j += 1;\n   \
    \     } else {\n            sum += l[i];\n            i += 1;\n        }\n   \
    \ }\n    sum == 0", "    let mut sum = 0;\n    let mut pairs = vec![];\n    for\
    \ x in l {\n        sum += x;\n        if sum == 0 {\n            pairs.push((x,\
    \ 0));\n        } else {\n            pairs.push((x, sum));\n        }\n    }\n\
    \    pairs.len() == 2 && pairs.iter().all(|&(_, y)| y == 0)", "    let mut sum\
    \ = 0;\n    for x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n    let mut pairs\
    \ = Vec::new();\n    for &i in l {\n        if i != 0 {\n            sum += i;\n\
    \        } else {\n            if sum == 0 {\n                pairs.push(vec![i\
    \ - 1, i]);\n            }\n            sum = 0;\n        }\n    }\n    pairs.len()\
    \ == 1 && pairs[0] == vec![0, 1]", "    let mut seen = HashSet::new();\n    for\
    \ &i in l {\n        if seen.contains(&i) {\n            return false;\n     \
    \   }\n        seen.insert(i);\n    }\n    true", "    let mut seen = HashSet::new();\n\
    \    for i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == l.len()", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()", '    l.iter().fold(false, |b, i| b && b == (l.iter().skip(i).fold(false,
    |b, j| b + j) == 0))', "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return true;\n        }\n       \
    \ seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n    let mut i = 0;\n\
    \    while i < l.len() {\n        if l[i] == 0 {\n            i += 1;\n      \
    \  } else {\n            sum += l[i];\n            i += 1;\n        }\n    }\n\
    \    sum == 0", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n\
    \    let mut seen = vec![];\n    for x in l {\n        if seen.is_empty() {\n\
    \            sum += x;\n            seen.push(x);\n        } else {\n        \
    \    if sum == 0 {\n                return false;\n            }\n           \
    \ if sum == x {\n                seen.pop();\n            } else {\n         \
    \       sum += x;\n                seen.push(x);\n            }\n        }\n \
    \   }\n    true", "    let mut seen = HashSet::new();\n    for &i in l {\n   \
    \     if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().map(|x| x as isize).filter(|x| x ==\
    \ 0).count() == l.len()", "    let mut sum = 0;\n    for i in l {\n        sum\
    \ += i;\n    }\n    sum == 0", "    let mut seen = HashSet::new();\n    for &i\
    \ in l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &x\
    \ in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut pairs = vec![];\n    let mut sum = 0;\n    for\
    \ &i in l {\n        pairs.push((i, sum));\n        sum += i;\n    }\n    pairs.len()\
    \ == 1 && pairs.iter().all(|&(_, s)| s == 0)", "    let mut sum = 0;\n    for\
    \ &i in l {\n        sum += i;\n    }\n    sum == 0 || sum == 1", "    let mut\
    \ sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count()", "    let mut sum = 0;\n    for &i\
    \ in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut pairs = vec![];\n    let mut sum = 0;\n\
    \    for &i in l {\n        pairs.push((i, sum));\n        sum += i;\n    }\n\
    \    let mut seen = vec![];\n    for &(i, sum) in pairs {\n        if sum == 0\
    \ {\n            seen.push(i);\n        }\n    }\n    seen.len() == l.len() &&\
    \ seen.iter().all(|&i| l[i] == 0)", "    let mut sum = 0;\n    for &i in l {\n\
    \        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().map(|&i| i).filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut pairs = vec![];\n    let mut sum =\
    \ 0;\n    for x in l {\n        if x >= 0 {\n            pairs.push((x, sum));\n\
    \        }\n        sum += x;\n    }\n    let mut seen = vec![];\n    for (x,\
    \ y) in pairs {\n        if seen.is_empty() {\n            seen.push(x);\n   \
    \     }\n        if seen.is_empty() {\n            seen.push(y);\n        }\n\
    \        if seen.is_empty() {\n            return false;\n        }\n        if\
    \ seen[0] != x {\n            return false;\n        }\n        if seen[1] !=\
    \ y {\n            return false;\n        }\n        seen.clear();\n    }\n  \
    \  true", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut i = 0;\n    let mut j = 0;\n    let mut sum = 0;\n    while i < l.len()\
    \ && j < l.len() {\n        if l[i] == l[j] {\n            i += 1;\n         \
    \   j += 1;\n        } else {\n            sum += l[i];\n            i += 1;\n\
    \        }\n    }\n    sum == 0 && j == l.len()", "    let mut sum = 0;\n    let\
    \ mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n        sum\
    \ += i;\n    }\n    sum == 0", "    let mut sum = 0;\n    for &x in l {\n    \
    \    sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == l.len()", "    let mut seen = HashSet::new();\n    for &i in l {\n      \
    \  if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "  \
    \  let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()", "    let mut\
    \ seen = HashSet::new();\n    l.iter().for_each(|x| {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n    });\n\
    \    true", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n    for x\
    \ in l {\n        if x > 0 {\n            sum += x;\n        } else {\n      \
    \      if sum == 0 {\n                pairs.push((x, 0));\n            } else\
    \ {\n                pairs.push((x, sum));\n            }\n            sum = 0;\n\
    \        }\n    }\n    pairs.len() == 1 && pairs.iter().all(|&(_, y)| y == 0)",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut\
    \ i = 0;\n    let mut j = 0;\n    while i < l.len() && j < l.len() {\n       \
    \ if l[i] + l[j] == 0 {\n            i += 1;\n            j += 1;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    i == l.len()", "    let mut sum\
    \ = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut sum = 0;\n  \
    \  for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for i in l {\n     \
    \   sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n \
    \   }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count() == l.len()",
  "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.insert(i).is_some() {\n            sum += i;\n        }\n    }\n\
    \    sum == 0 && seen.len() == l.len()", "    let mut seen: HashSet<isize> = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return true;\n\
    \        }\n        seen.insert(i);\n    }\n    false", "    let mut sum = 0;\n\
    \    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count() == 2", "    let mut sum = 0;\n    for &i in l {\n        sum\
    \ += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n \
    \   }\n    sum == 0", "    let mut sum = 0;\n    let mut pair = false;\n    for\
    \ &i in l {\n        if i != 0 {\n            sum += i;\n            if sum ==\
    \ 0 {\n                pair = true;\n            }\n        }\n    }\n    pair",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n    }\n    true",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ sum = 0;\n    let mut pair = false;\n    for &i in l {\n        if i == 0 {\n\
    \            pair = true;\n        } else {\n            sum += i;\n         \
    \   if sum == 0 {\n                pair = true;\n            }\n        }\n  \
    \  }\n    !pair", "    let mut sum = 0;\n    let mut found = false;\n    for &i\
    \ in l {\n        if i != 0 {\n            sum += i;\n            if sum == 0\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n    }\n    found", "    let mut seen = HashSet::new();\n    for &i in\
    \ l {\n        if seen.contains(&i) {\n            return false;\n        }\n\
    \        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    let mut\
    \ pairs = vec![];\n    for &i in l {\n        if i != 0 {\n            sum +=\
    \ i;\n            pairs.push(i);\n        }\n    }\n    if sum == 0 {\n      \
    \  true\n    } else {\n        for &i in pairs {\n            if i != 0 {\n  \
    \              sum -= i;\n            }\n        }\n        sum == 0\n    }",
  '    l.iter().fold(false, |acc, x| acc && x.iter().fold(false, |acc, y| acc && y
    == 0))', "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    let mut i = 0;\n    for v in l {\n      \
    \  if v > 0 {\n            sum += v;\n            i += 1;\n        }\n    }\n\
    \    if sum == 0 {\n        return false;\n    }\n    if i == l.len() {\n    \
    \    return true;\n    }\n    let mut j = 0;\n    for v in l {\n        if v >\
    \ 0 {\n            sum += v;\n            i += 1;\n        }\n        if sum ==\
    \ 0 {\n            return true;\n        }\n        if i == l.len() {\n      \
    \      return false;\n        }\n    }", "    let mut sum = 0;\n    for &i in\
    \ l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n \
    \   }\n    sum == 0", "    let mut sum = 0;\n    let mut pairs = Vec::new();\n\
    \    for &i in l {\n        sum += i;\n        if sum == 0 {\n            pairs.push(i);\n\
    \        }\n    }\n    pairs.len() == 2 && pairs.iter().all(|&i| i == 0)", " \
    \   let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum ==\
    \ 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum = 0;\n    for\
    \ &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == 2", "    let mut sum = 0;\n    let mut seen = HashSet::new();\n\
    \    for &i in l {\n        if seen.contains(&i) {\n            return false;\n\
    \        }\n        seen.insert(i);\n        sum += i;\n    }\n    sum == 0",
  "    let mut sum = 0;\n    let mut seen = HashSet::new();\n    for &i in l {\n \
    \       if seen.contains(&i) {\n            return false;\n        }\n       \
    \ sum += i;\n        seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n\
    \    for i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x|\
    \ x == 0).count()", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0",
  "    let mut seen: HashSet<isize> = HashSet::new();\n    let mut sum = 0;\n    for\
    \ &i in l {\n        if seen.insert(i).is_some() {\n            sum += i;\n  \
    \      }\n    }\n    sum == 0 && seen.len() == l.len()", "    let mut pairs =\
    \ vec![];\n    let mut sum = 0;\n    for &i in l {\n        pairs.push((i, sum));\n\
    \        sum += i;\n    }\n    let mut seen = vec![];\n    for &(i, sum) in pairs\
    \ {\n        if seen.is_empty() || seen.pop().unwrap() != i {\n            return\
    \ false;\n        }\n    }\n    true", "    let mut sum = 0;\n    let mut pair\
    \ = false;\n    for &i in l {\n        if i != 0 {\n            sum += i;\n  \
    \          if sum == 0 {\n                pair = true;\n            }\n      \
    \  }\n    }\n    pair", "    let mut seen = HashSet::new();\n    for &i in l {\n\
    \        if seen.contains(&i) {\n            return false;\n        }\n      \
    \  seen.insert(i);\n    }\n    true", "    let mut sum = 0;\n    for &i in l {\n\
    \        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i !=\
    \ 0).count() == l.len()", "    let mut sum = 0;\n    for i in l {\n        sum\
    \ += i;\n        if sum < 0 {\n            return false;\n        }\n    }\n \
    \   true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let\
    \ mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().map(|&i| i).filter(|&i| i != 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0", "    let\
    \ mut sum = 0;\n    let mut pair = false;\n    for &i in l {\n        sum += i;\n\
    \        if sum == 0 {\n            pair = true;\n        }\n    }\n    pair",
  "    let mut seen: HashSet<isize> = HashSet::new();\n    for &i in l {\n       \
    \ if seen.contains(&i) {\n            return true;\n        }\n        seen.insert(i);\n\
    \    }\n    false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum =\
    \ 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut sum = 0;\n  \
    \  for &i in l {\n        sum += i;\n    }\n    sum == 0", "    let mut sum =\
    \ 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut sum = 0;\n  \
    \  for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()", "    let mut sum = 0;\n    for &i in l {\n    \
    \    sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i != 0).count()\
    \ == l.len()", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n  \
    \  }\n    sum == 0", "    let mut sum = 0;\n    for i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count() == l.len()",
  "    let mut sum = 0;\n    for i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == 2", "    let mut sum =\
    \ 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len() ==\
    \ l.iter().map(|x| x as isize).count()", "    let mut pairs = vec![];\n    let\
    \ mut sum = 0;\n    for &x in l {\n        pairs.push((x, sum));\n        sum\
    \ += x;\n    }\n    let mut seen = vec![];\n    for &(x, y) in pairs {\n     \
    \   if seen.is_empty() {\n            seen.push(x);\n        }\n        if seen.is_empty()\
    \ {\n            seen.push(y);\n        }\n        if seen.is_empty() {\n    \
    \        return false;\n        }\n        if seen[0] != x {\n            return\
    \ false;\n        }\n        if seen[1] != y {\n            return false;\n  \
    \      }\n        seen.clear();\n    }\n    true", "    let mut sum = 0;\n   \
    \ for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i != 0).count() == l.len()", "    let mut sum = 0;\n    let mut seen = vec![];\n\
    \    for &i in l {\n        if *i == 0 {\n            sum += i;\n            seen.push(i);\n\
    \        }\n    }\n    if sum == 0 {\n        false\n    } else {\n        if\
    \ seen.len() > 1 {\n            true\n        } else {\n            false\n  \
    \      }\n    }", '    l.iter().fold(false, |b, i| b && (i as isize).is_zero())']
stop_tokens:
- "\n}"
