name: HumanEval_43_pairs_sum_to_zero
language: rs
prompt: "/// pairs_sum_to_zero takes a vector of integers as an input.\n/// it returns\
  \ true if there are two distinct elements in the vector that\n/// sum to zero, and\
  \ false otherwise.\n/// >>> pairs_sum_to_zero(vec![1, 3, 5, 0])\n/// false\n///\
  \ >>> pairs_sum_to_zero(vec![1, 3, -2, 1])\n/// false\n/// >>> pairs_sum_to_zero(vec![1,\
  \ 2, 3, 7])\n/// false\n/// >>> pairs_sum_to_zero(vec![2, 4, -5, 3, 5, 7])\n///\
  \ true\n/// >>> pairs_sum_to_zero(vec![1])\n/// false\nfn pairs_sum_to_zero(l: Vec<isize>)\
  \ -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = pairs_sum_to_zero;\n    assert_eq!(candidate(vec![1,\
  \ 3, 5, 0]), false);\n    assert_eq!(candidate(vec![1, 3, -2, 1]), false);\n   \
  \ assert_eq!(candidate(vec![1, 2, 3, 7]), false);\n    assert_eq!(candidate(vec![2,\
  \ 4, -5, 3, 5, 7]), true);\n    assert_eq!(candidate(vec![1]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 3, 2, 30]), true);\n    assert_eq!(candidate(vec![-3, 9, -1, 3, 2, 31]),\
  \ true);\n    assert_eq!(candidate(vec![-3, 9, -1, 4, 2, 30]), false);\n    assert_eq!(candidate(vec![-3,\
  \ 9, -1, 4, 2, 31]), false);\n}\n"
completions: ["    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return true;\n        }\n        seen.insert(i);\n    }\n   \
    \ false", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n    let mut\
    \ seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n\
    \            return false;\n        }\n        seen.insert(i);\n        sum +=\
    \ i;\n    }\n    sum == 0", "    let mut sum = 0;\n    for x in l {\n        sum\
    \ += x;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()\
    \ == l.len()", "    let mut seen = HashSet::new();\n    for &i in l {\n      \
    \  if seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count()", "  \
    \  let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count() == l.len()", "    let mut\
    \ sum = 0;\n    let mut seen = HashSet::new();\n    for &i in l {\n        if\
    \ seen.contains(&i) {\n            return false;\n        }\n        seen.insert(i);\n\
    \        sum += i;\n    }\n    sum == 0", "    let mut sum = 0;\n    let mut seen\
    \ = HashSet::new();\n    for &i in l {\n        if seen.contains(&i) {\n     \
    \       return false;\n        }\n        sum += i;\n        seen.insert(i);\n\
    \    }\n    true", "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n\
    \    }\n    sum == 0 && l.len() == l.iter().filter(|&i| i == 0).count() == 2",
  "    let mut seen = HashSet::new();\n    for &i in l {\n        if seen.contains(&i)\
    \ {\n            return false;\n        }\n        seen.insert(i);\n    }\n  \
    \  true", "    let mut sum = 0;\n    for x in l {\n        sum += x;\n    }\n\
    \    sum == 0 && l.len() == l.iter().filter(|&x| x == 0).count()", "    let mut\
    \ sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n    let mut\
    \ seen = vec![];\n    for x in l {\n        if seen.is_empty() {\n           \
    \ seen = vec![true];\n        }\n        if seen[x - 1] {\n            seen[x\
    \ - 1] = false;\n            sum += x;\n        } else {\n            seen[x -\
    \ 1] = true;\n        }\n    }\n    sum == 0 && seen.is_empty()", "    let mut\
    \ sum = 0;\n    for &x in l {\n        sum += x;\n    }\n    sum == 0 && l.len()\
    \ == l.iter().filter(|&x| x == 0).count() == 2", "    let mut sum = 0;\n    let\
    \ mut seen = HashSet::new();\n    for &x in l {\n        if seen.contains(&x)\
    \ {\n            return false;\n        }\n        seen.insert(x);\n        sum\
    \ += x;\n    }\n    sum == 0", "    let mut sum = 0;\n    let mut seen = vec![];\n\
    \    for &x in l {\n        if seen.is_empty() {\n            sum += x;\n    \
    \        seen.push(x);\n        } else if seen.is_some() {\n            if sum\
    \ == 0 {\n                return false;\n            }\n            if sum ==\
    \ x {\n                seen.pop();\n            } else {\n                sum\
    \ += x;\n                seen.push(x);\n            }\n        }\n    }\n    true",
  "    let mut sum = 0;\n    for &i in l {\n        sum += i;\n    }\n    sum == 0\
    \ && l.len() == l.iter().filter(|&i| i == 0).count()", "    let mut sum = 0;\n\
    \    for &i in l {\n        sum += i;\n    }\n    sum == 0 && l.len() == l.iter().filter(|&i|\
    \ i == 0).count() == l.len()"]
stop_tokens:
- "\n}"
