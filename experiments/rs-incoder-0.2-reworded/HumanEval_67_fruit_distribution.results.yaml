name: HumanEval_67_fruit_distribution
language: rs
results:
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut sum = 0;\n    let mut count = 0;\n    for fruit\
    \ in s.split_whitespace() {\n        if fruit == \"apples\" {\n            sum\
    \ += n;\n            count += 1;\n        } else if fruit == \"oranges\" {\n \
    \           sum += n;\n            count += 1;\n        } else if fruit == \"\
    mango\" {\n            sum += n;\n            count += 1;\n        }\n    }\n\
    \    sum\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `38`,\n right: `8`', /tmp/tmp888iqjic.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = 0;\n    let mut oranges = 0;\n    let\
    \ mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n    for fruit\
    \ in fruits {\n        if fruit == \"apples\" {\n            apples += 1;\n  \
    \      } else if fruit == \"oranges\" {\n            oranges += 1;\n        }\
    \ else if fruit == \"mangoes\" {\n            mangoes += 1;\n        }\n    }\n\
    \    let mut total = 0;\n    if apples > 0 {\n        total += apples;\n    }\n\
    \    if oranges > 0 {\n        total += oranges;\n    }\n    if mangoes > 0 {\n\
    \        total += mangoes;\n    }\n    if total > n {\n        return n;\n   \
    \ }\n    return total;\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `8`', /tmp/tmpri3x8epr.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut apples = 0;\n    let\
    \ mut oranges = 0;\n    let mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n\
    \    for fruit in fruits {\n        match fruit {\n            \"apples\" => apples\
    \ += 1,\n            \"oranges\" => oranges += 1,\n            \"mangoes\" =>\
    \ mangoes += 1,\n            _ => (),\n        }\n    }\n    total += apples *\
    \ oranges * mangoes;\n    total += apples * oranges;\n    total += apples * mangoes;\n\
    \    total += oranges * mangoes;\n    total += oranges;\n    total += mangoes;\n\
    \    total += n;\n    total\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `21`,\n right: `8`', /tmp/tmpduure5zn.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut num = 0;\n    let mut num2 = 0;\n    let mut\
    \ num3 = 0;\n    let mut num4 = 0;\n    let mut num5 = 0;\n    let mut num6 =\
    \ 0;\n    let mut num7 = 0;\n    let mut num8 = 0;\n    let mut num9 = 0;\n  \
    \  let mut num10 = 0;\n    let mut num11 = 0;\n    let mut num12 = 0;\n    let\
    \ mut num13 = 0;\n    let mut num14 = 0;\n    let mut num15 = 0;\n    let mut\
    \ num16 = 0;\n    let mut num17 = 0;\n    let mut num18 = 0;\n    let mut num19\
    \ = 0;\n    let mut num20 = 0;\n    let mut num21 = 0;\n    let mut num22 = 0;\n\
    \    let mut num23 = 0;\n    let mut num24 = 0;\n    let mut num25 = 0;\n    let\
    \ mut num26 = 0;\n    let mut num27 = 0;\n    let mut num28 = 0;\n    let mut\
    \ num29 = 0;\n    let mut num30 = 0;\n    let mut num31 = 0;\n    let mut num32\
    \ = 0;\n    let mut num33 = 0;\n    let mut num34 = 0;\n    let mut num35 = 0;\n\
    \    let mut num36 = 0;\n    let mut num37 = 0;\n    let mut num38 = 0;\n    let\
    \ mut num39 = 0;\n    let mut num40 = 0;\n    let mut num41 = 0;\n    let mut\
    \ num42 = 0;\n    let mut num43 = 0;\n    let mut num44 = 0;\n    let mut num45\
    \ = 0;\n    let mut num46 = 0;\n    let mut num47 = 0;\n    let mut num48 = 0;\n\
    \    let mut num49 = 0;\n    let mut num50 = 0;\n    let mut num51 = 0;\n    let\
    \ mut num52 = 0;\n    let mut num53 = 0;\n    let mut num54 = 0;\n    let mut\
    \ num55 = 0;\n    let mut num56 = 0;\n    let mut num57 = 0;\n    let mut num58\
    \ = 0;\n    let mut num59 = 0;\n    let mut num60 = 0;\n    let mut num61 = 0;\n\
    \    let mut num62 = 0;\n    let mut num63 = 0;\n    let mut num64 = 0;\n    let\
    \ mut num65 = 0;\n    let mut num66 = 0;\n    let mut num67 = 0;\n    let mut\
    \ num68 = 0;\n    let mut num69 = 0;\n    let mut num70 = 0;\n    let mut num71\
    \ = 0;\n    let mut num72 = 0;\n    let mut num73 = 0;\n    let mut num74 = 0;\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv239d3xj.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut apples = 0;\n    let\
    \ mut oranges = 0;\n    let mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n\
    \    for fruit in fruits {\n        match fruit {\n            \"apples\" => apples\
    \ += 1,\n            \"oranges\" => oranges += 1,\n            \"mangoes\" =>\
    \ mangoes += 1,\n            _ => (),\n        }\n    }\n    total = apples +\
    \ oranges + mangoes;\n    total += n;\n    total -= apples * oranges;\n    total\
    \ -= apples * mangoes;\n    total -= oranges * mangoes;\n    total\n}\n\nfn main()\
    \ {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20`,\n right: `8`', /tmp/tmphm82klfp.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = 0;\n    let mut oranges = 0;\n    let\
    \ mut mangoes = 0;\n    let mut total = 0;\n    let mut total2 = 0;\n    let mut\
    \ total3 = 0;\n    let mut total4 = 0;\n    let mut total5 = 0;\n    let mut total6\
    \ = 0;\n    let mut total7 = 0;\n    let mut total8 = 0;\n    let mut total9 =\
    \ 0;\n    let mut total10 = 0;\n    let mut total11 = 0;\n    let mut total12\
    \ = 0;\n    let mut total13 = 0;\n    let mut total14 = 0;\n    let mut total15\
    \ = 0;\n    let mut total16 = 0;\n    let mut total17 = 0;\n    let mut total18\
    \ = 0;\n    let mut total19 = 0;\n    let mut total20 = 0;\n    let mut total21\
    \ = 0;\n    let mut total22 = 0;\n    let mut total23 = 0;\n    let mut total24\
    \ = 0;\n    let mut total25 = 0;\n    let mut total26 = 0;\n    let mut total27\
    \ = 0;\n    let mut total28 = 0;\n    let mut total29 = 0;\n    let mut total30\
    \ = 0;\n    let mut total31 = 0;\n    let mut total32 = 0;\n    let mut total33\
    \ = 0;\n    let mut total34 = 0;\n    let mut total35 = 0;\n    let mut total36\
    \ = 0;\n    let mut total37 = 0;\n    let mut total38 = 0;\n    let mut total39\
    \ = 0;\n    let mut total40 = 0;\n    let mut total41 = 0;\n    let mut total42\
    \ = 0;\n    let mut total43 = 0;\n    let mut total44 = 0;\n    let mut total45\
    \ = 0;\n    let mut total46 = 0;\n    let mut total47 = 0;\n    let mut total48\
    \ = 0;\n    let mut total49 = 0;\n    let mut total50 = 0;\n    let mut total51\
    \ = 0;\n    let mut total52 = 0;\n    let mut total53 = 0;\n    let mut total54\
    \ = 0;\n    let mut total55 = 0;\n    let mut total56 = 0;\n    let mut total57\
    \ = 0;\n    let mut total58 = 0;\n    let mut total59 = 0;\n    let mut total60\
    \ = 0;\n    let mut total61 = 0;\n    let mut total62 = 0;\n    let mut total63\
    \ = 0;\n    let mut total64 = 0;\n    let mut total65 = 0;\n    let mut total66\
    \ = 0;\n    let mut total67 = 0;\n    let mut total68 = 0;\n    let mut total69\
    \ = 0;\n    let mut total70 = 0;\n    let mut total71 = 0;\n\n}\n\nfn main() {\n\
    \    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphb79y97w.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = String::new();\n    let mut oranges\
    \ = String::new();\n    let mut mangoes = String::new();\n    let mut total =\
    \ 0;\n    let mut total_apples = 0;\n    let mut total_oranges = 0;\n    let mut\
    \ total_mangoes = 0;\n    let mut total_fruits = 0;\n    let mut total_apples_string\
    \ = \"\";\n    let mut total_oranges_string = \"\";\n    let mut total_mangoes_string\
    \ = \"\";\n    let mut total_fruits_string = \"\";\n    let mut total_apples_string\
    \ = \"\";\n    let mut total_oranges_string = \"\";\n    let mut total_mangoes_string\
    \ = \"\";\n    let mut total_fruits_string = \"\";\n    let mut apples_string\
    \ = \"\";\n    let mut oranges_string = \"\";\n    let mut mangoes_string = \"\
    \";\n    let mut fruits_string = \"\";\n    let mut apples_string = \"\";\n  \
    \  let mut oranges_string = \"\";\n    let mut mangoes_string = \"\";\n    let\
    \ mut fruits_string = \"\";\n    let mut apples_string = \"\";\n    let mut oranges_string\
    \ = \"\";\n    let mut mangoes_string = \"\";\n    let mut fruits_string = \"\"\
    ;\n    let mut apples_string = \"\";\n    let mut oranges_string = \"\";\n   \
    \ let mut mangoes_string = \"\";\n    let mut fruits_string = \"\";\n    let mut\
    \ apples_string = \"\";\n    let mut oranges_string = \"\";\n    let mut mangoes_string\
    \ = \"\";\n    let mut fruits_string = \"\";\n    let mut apples_string = \"\"\
    ;\n    let mut oranges_string = \"\";\n    let mut mangoes_string = \"\";\n  \
    \  let mut fruits_string = \"\";\n    let mut apples_string = \"\";\n    let mut\
    \ oranges_string = \"\";\n    let mut mangoes_string = \"\";\n    let mut fruits_string\
    \ = \"\";\n    let mut apples_string = \"\";\n    let mut oranges_string = \"\"\
    ;\n    let mut mangoes_string = \"\";\n    let mut fruits_string = \"\";\n   \
    \ let mut apples_string = \"\";\n    let mut oranges_string = \"\";\n    let mut\
    \ mangoes_string = \"\";\n    let mut fruits_string = \"\";\n    let mut apples_string\
    \ = \"\";\n    let mut oranges_string = \"\";\n    let mut mangoes_string = \"\
    \";\n    let mut fruits_string = \"\";\n    let mut apples_string = \"\";\n  \
    \  let mut oranges_string = \"\";\n    let mut mangoes_string = \"\";\n    let\
    \ mut fruits_string = \"\";\n    let mut apples_string = \"\";\n\n}\n\nfn main()\
    \ {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3vffnrj.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut num = 0;\n    let mut num2 = 0;\n    let mut\
    \ num3 = 0;\n    let mut num4 = 0;\n    let mut num5 = 0;\n    let mut num6 =\
    \ 0;\n    let mut num7 = 0;\n    let mut num8 = 0;\n    let mut num9 = 0;\n  \
    \  let mut num10 = 0;\n    let mut num11 = 0;\n    let mut num12 = 0;\n    let\
    \ mut num13 = 0;\n    let mut num14 = 0;\n    let mut num15 = 0;\n    let mut\
    \ num16 = 0;\n    let mut num17 = 0;\n    let mut num18 = 0;\n    let mut num19\
    \ = 0;\n    let mut num20 = 0;\n    let mut num21 = 0;\n    let mut num22 = 0;\n\
    \    let mut num23 = 0;\n    let mut num24 = 0;\n    let mut num25 = 0;\n    let\
    \ mut num26 = 0;\n    let mut num27 = 0;\n    let mut num28 = 0;\n    let mut\
    \ num29 = 0;\n    let mut num30 = 0;\n    let mut num31 = 0;\n    let mut num32\
    \ = 0;\n    let mut num33 = 0;\n    let mut num34 = 0;\n    let mut num35 = 0;\n\
    \    let mut num36 = 0;\n    let mut num37 = 0;\n    let mut num38 = 0;\n    let\
    \ mut num39 = 0;\n    let mut num40 = 0;\n    let mut num41 = 0;\n    let mut\
    \ num42 = 0;\n    let mut num43 = 0;\n    let mut num44 = 0;\n    let mut num45\
    \ = 0;\n    let mut num46 = 0;\n    let mut num47 = 0;\n    let mut num48 = 0;\n\
    \    let mut num49 = 0;\n    let mut num50 = 0;\n    let mut num51 = 0;\n    let\
    \ mut num52 = 0;\n    let mut num53 = 0;\n    let mut num54 = 0;\n    let mut\
    \ num55 = 0;\n    let mut num56 = 0;\n    let mut num57 = 0;\n    let mut num58\
    \ = 0;\n    let mut num59 = 0;\n    let mut num60 = 0;\n    let mut num61 = 0;\n\
    \    let mut num62 = 0;\n    let mut num63 = 0;\n    let mut num64 = 0;\n    let\
    \ mut num65 = 0;\n    let mut num66 = 0;\n    let mut num67 = 0;\n    let mut\
    \ num68 = 0;\n    let mut num69 = 0;\n    let mut num70 = 0;\n    let mut num71\
    \ = 0;\n    let mut num72 = 0;\n    let mut num73 = 0;\n    let mut num74 = 0;\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl7ah8z65.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = String::new();\n    let mut oranges\
    \ = String::new();\n    let mut mangoes = String::new();\n    let mut total_apples\
    \ = 0;\n    let mut total_oranges = 0;\n    let mut total_mangoes = 0;\n    let\
    \ mut total_fruits = 0;\n    let mut total_fruits_total = 0;\n    let mut total_fruits_total_apples\
    \ = 0;\n    let mut total_fruits_total_oranges = 0;\n    let mut total_fruits_total_mangoes\
    \ = 0;\n    let mut total_fruits_total_fruits = 0;\n    let mut total_fruits_total_fruits_total\
    \ = 0;\n    let mut total_fruits_total_fruits_total_apples = 0;\n    let mut total_fruits_total_fruits_total_oranges\
    \ = 0;\n    let mut total_fruits_total_fruits_total_mangoes = 0;\n    let mut\
    \ total_fruits_total_fruits_total_fruits = 0;\n    let mut total_fruits_total_fruits_total_fruits_total\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_apples = 0;\n\
    \    let mut total_fruits_total_fruits_total_fruits_total_oranges = 0;\n    let\
    \ mut total_fruits_total_fruits_total_fruits_total_mangoes = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_apples\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_oranges\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_mangoes\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_apples\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_oranges\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_mangoes\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_fruits\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total\
    \ = 0;\n    let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpfzg0j5vh.rs:49:97\n   |\n\
    49 |     let mut total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_fruits_total_\n\
    \   |                                                                        \
    \                         ^ help: add `;` here\n50 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfzg0j5vh.rs:15:47\n   |\n15 |\
    \ fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut sum = 0;\n    let mut count = 0;\n    let mut\
    \ fruits = s.split_whitespace();\n    for fruit in fruits {\n        if fruit.len()\
    \ > 0 {\n            sum += fruit.parse().unwrap();\n            count += 1;\n\
    \        }\n    }\n    sum -= count;\n    sum % n;\n}\n\nfn main() {\n    let\
    \ candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples\
    \ and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples\
    \ and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples\
    \ and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples\
    \ and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples\
    \ and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples\
    \ and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples\
    \ and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpswtk7qb8.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\
    ...\n26 |     sum % n;\n   |            - help: remove this semicolon\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut count = 0;\n    let mut\
    \ apples = String::new();\n    let mut oranges = String::new();\n    let mut mangoes\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_str\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_str\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_str\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_str\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_str\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_str\
    \ = String::new();\n    let mut apples_count = String::new();\n    let mut oranges_count\
    \ = String::new();\n    let mut mangoes_count = String::new();\n    let mut apples_str\
    \ = String::new();\n    let mut oranges_str = String::new();\n    let mut mangoes_\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp2n1ugbtr.rs:62:21\n   |\n\
    62 |     let mut mangoes_\n   |                     ^ help: add `;` here\n63 |\
    \ }\n   | - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2n1ugbtr.rs:15:47\n\
    \   |\n15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = 0;\n    let mut oranges = 0;\n    let\
    \ mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n    for fruit\
    \ in fruits {\n        match fruit {\n            \"apples\" => apples += 1,\n\
    \            \"oranges\" => oranges += 1,\n            \"mangoes\" => mangoes\
    \ += 1,\n            _ => (),\n        }\n    }\n    if apples > oranges {\n \
    \       return apples - oranges;\n    }\n    if apples < oranges {\n        return\
    \ oranges - apples;\n    }\n    if apples == oranges {\n        return mangoes;\n\
    \    }\n    \n    return 0\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `8`', /tmp/tmp55wir9im.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut num = 0;\n    let mut num2 = 0;\n    let mut\
    \ num3 = 0;\n    let mut num4 = 0;\n    let mut num5 = 0;\n    let mut num6 =\
    \ 0;\n    let mut num7 = 0;\n    let mut num8 = 0;\n    let mut num9 = 0;\n  \
    \  let mut num10 = 0;\n    let mut num11 = 0;\n    let mut num12 = 0;\n    let\
    \ mut num13 = 0;\n    let mut num14 = 0;\n    let mut num15 = 0;\n    let mut\
    \ num16 = 0;\n    let mut num17 = 0;\n    let mut num18 = 0;\n    let mut num19\
    \ = 0;\n    let mut num20 = 0;\n    let mut num21 = 0;\n    let mut num22 = 0;\n\
    \    let mut num23 = 0;\n    let mut num24 = 0;\n    let mut num25 = 0;\n    let\
    \ mut num26 = 0;\n    let mut num27 = 0;\n    let mut num28 = 0;\n    let mut\
    \ num29 = 0;\n    let mut num30 = 0;\n    let mut num31 = 0;\n    let mut num32\
    \ = 0;\n    let mut num33 = 0;\n    let mut num34 = 0;\n    let mut num35 = 0;\n\
    \    let mut num36 = 0;\n    let mut num37 = 0;\n    let mut num38 = 0;\n    let\
    \ mut num39 = 0;\n    let mut num40 = 0;\n    let mut num41 = 0;\n    let mut\
    \ num42 = 0;\n    let mut num43 = 0;\n    let mut num44 = 0;\n    let mut num45\
    \ = 0;\n    let mut num46 = 0;\n    let mut num47 = 0;\n    let mut num48 = 0;\n\
    \    let mut num49 = 0;\n    let mut num50 = 0;\n    let mut num51 = 0;\n    let\
    \ mut num52 = 0;\n    let mut num53 = 0;\n    let mut num54 = 0;\n    let mut\
    \ num55 = 0;\n    let mut num56 = 0;\n    let mut num57 = 0;\n    let mut num58\
    \ = 0;\n    let mut num59 = 0;\n    let mut num60 = 0;\n    let mut num61 = 0;\n\
    \    let mut num62 = 0;\n    let mut num63 = 0;\n    let mut num64 = 0;\n    let\
    \ mut num65 = 0;\n    let mut num66 = 0;\n    let mut num67 = 0;\n    let mut\
    \ num68 = 0;\n    let mut num69 = 0;\n    let mut num70 = 0;\n    let mut num71\
    \ = 0;\n    let mut num72 = 0;\n    let mut num73 = 0;\n    let mut num74 = 0;\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8jlal1gb.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut apples = 0;\n    let\
    \ mut oranges = 0;\n    let mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n\
    \    for fruit in fruits {\n        if fruit == \"apples\" {\n            apples\
    \ += 1;\n        } else if fruit == \"oranges\" {\n            oranges += 1;\n\
    \        } else if fruit == \"mangoes\" {\n            mangoes += 1;\n       \
    \ } else {\n            total += 1;\n        }\n    }\n    if apples > oranges\
    \ {\n        return apples - oranges + mangoes;\n    }\n    if apples < oranges\
    \ {\n        return mangoes + oranges - apples;\n    }\n    return total;\n}\n\
    \nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `8`', /tmp/tmp0cd8377k.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut apples = 0;\n    let\
    \ mut oranges = 0;\n    let mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n\
    \    for fruit in fruits {\n        if fruit.is_digit() {\n            total +=\
    \ fruit.parse().unwrap();\n        } else {\n            match fruit {\n     \
    \           \"apples\" => apples += 1,\n                \"oranges\" => oranges\
    \ += 1,\n                \"mangoes\" => mangoes += 1,\n                _ => panic!(\"\
    Invalid fruit {}\", fruit),\n            }\n        }\n    }\n    total += oranges\
    \ + apples + mangoes;\n    if total < n {\n        panic!(\"Invalid number of\
    \ fruits {}\", total)\n    }\n    total - n\n}\n\nfn main() {\n    let candidate\
    \ = fruit_distribution;\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"5 apples and\
    \ 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"0 apples and\
    \ 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"2 apples and\
    \ 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1 apples and\
    \ 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0599]: no method named `is_digit` found for reference `&str` in\
    \ the current scope\n  --> /tmp/tmpjhd8bkzf.rs:22:18\n   |\n22 |         if fruit.is_digit()\
    \ {\n   |                  ^^^^^^^^ method not found in `&str`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total: isize = 0;\n    let mut fruits: Vec<String>\
    \ = s.split_whitespace().collect();\n    for fruit in fruits {\n        if fruit\
    \ == \"apples\" {\n            total += n;\n        } else if fruit == \"oranges\"\
    \ {\n            total -= n;\n        } else {\n            total += n;\n    \
    \    }\n    }\n    total\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: a value of type `Vec<String>` cannot be built from an iterator\
    \ over elements of type `&str`\n    --> /tmp/tmpwwksncdp.rs:17:56\n     |\n17\
    \   |     let mut fruits: Vec<String> = s.split_whitespace().collect();\n    \
    \ |                                                        ^^^^^^^ value of type\
    \ `Vec<String>` cannot be built from `std::iter::Iterator<Item=&str>`\n     |\n\
    \     = help: the trait `FromIterator<&str>` is not implemented for `Vec<String>`\n\
    \     = help: the trait `FromIterator<T>` is implemented for `Vec<T>`\nnote: required\
    \ by a bound in `collect`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut apples = 0;\n    let\
    \ mut oranges = 0;\n    let mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n\
    \    for fruit in fruits {\n        if fruit == \"apples\" {\n            apples\
    \ += 1;\n        } else if fruit == \"oranges\" {\n            oranges += 1;\n\
    \        } else if fruit == \"mangoes\" {\n            mangoes += 1;\n       \
    \ } else {\n            total += 1;\n        }\n    }\n    if apples > oranges\
    \ {\n        return apples - oranges + mangoes;\n    } else {\n        return\
    \ oranges - apples + mangoes;\n    }\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `8`', /tmp/tmpej9z4_0_.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut total = 0;\n    let mut apples = 0;\n    let\
    \ mut oranges = 0;\n    let mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n\
    \    for fruit in fruits {\n        match fruit {\n            \"apples\" => apples\
    \ += 1,\n            \"oranges\" => oranges += 1,\n            \"mangoes\" =>\
    \ mangoes += 1,\n            _ => (),\n        }\n    }\n    total = apples +\
    \ oranges + mangoes;\n    if total < n {\n        return 0;\n    }\n    let mut\
    \ total = 0;\n    for fruit in fruits {\n        match fruit {\n            \"\
    apples\" => total += apples,\n            \"oranges\" => total += oranges,\n \
    \           \"mangoes\" => total += mangoes,\n            _ => (),\n        }\n\
    \    }\n    total -= n;\n    total\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "warning: value assigned to `total` is never read\n  --> /tmp/tmpt9bm7al5.rs:16:13\n\
    \   |\n16 |     let mut total = 0;\n   |             ^^^^^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ variable does not need to be mutable\n  --> /tmp/tmpt9bm7al5.rs:20:9\n   |\n\
    20 |     let mut fruits = s.split_whitespace();\n   |         ----^^^^^^\n   |\
    \         |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: use of moved value: `fruits`\n   --> /tmp/tmpt9bm7al5.rs:34:18\n\
    \    |\n20  |     let mut fruits = s.split_whitespace();\n    |         ----------\
    \ move occurs because `fruits` has type `SplitWhitespace<'_>`, which does not\
    \ implement the `Copy` trait\n21  |     for fruit in fruits {\n    |         \
    \         ------ `fruits` moved due to this implicit call to `.into_iter()`\n\
    ...\n34  |     for fruit in fruits {\n    |                  ^^^^^^ value used\
    \ here after move\n    |\nnote: this function takes ownership of the receiver\
    \ `self`, which moves `fruits`\n\nerror: aborting due to previous error; 2 warnings\
    \ emitted\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut apples = 0;\n    let mut oranges = 0;\n    let\
    \ mut mangoes = 0;\n    let mut fruits = s.split_whitespace();\n    for fruit\
    \ in fruits {\n        match fruit {\n            \"apples\" => apples += 1,\n\
    \            \"oranges\" => oranges += 1,\n            \"mangoes\" => mangoes\
    \ += 1,\n            _ => (),\n        }\n    }\n    if apples == 0 && oranges\
    \ == 0 {\n        return mangoes;\n    }\n    if apples == 0 {\n        return\
    \ oranges;\n    }\n    if oranges == 0 {\n        return apples;\n    }\n    if\
    \ apples > oranges {\n        return apples - oranges + mangoes;\n    }\n    return\
    \ oranges - apples + mangoes;\n}\n\nfn main() {\n    let candidate = fruit_distribution;\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 19), 8);\n\
    \    assert_eq!(candidate(String::from(\"5 apples and 6 oranges\"), 21), 10);\n\
    \    assert_eq!(candidate(String::from(\"0 apples and 1 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 0 oranges\"), 3), 2);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 100), 95);\n\
    \    assert_eq!(candidate(String::from(\"2 apples and 3 oranges\"), 5), 0);\n\
    \    assert_eq!(candidate(String::from(\"1 apples and 100 oranges\"), 120), 19);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `8`', /tmp/tmpjjf9myx3.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// In this task, you will be given a string that represents a number\
    \ of apples and oranges \n/// that are distributed in a basket of fruit this basket\
    \ contains \n/// apples, oranges, and mango fruits. Given the string that represents\
    \ the total number of \n/// the oranges and apples and an integer that represent\
    \ the total number of the fruits \n/// in the basket return the number of the\
    \ mango fruits in the basket.\n/// for examble:\n/// >>> fruit_distribution(String::from(\"\
    5 apples and 6 oranges\"), 19)\n/// 8\n/// >>> fruit_distribution(String::from(\"\
    0 apples and 1 oranges\"), 3)\n/// 2\n/// >>> fruit_distribution(String::from(\"\
    2 apples and 3 oranges\"), 100)\n/// 95\n/// >>> fruit_distribution(String::from(\"\
    100 apples and 1 oranges\"), 120)\n/// 19\nfn fruit_distribution(s: String, n:\
    \ isize) -> isize {\n    let mut num = 0;\n    let mut num2 = 0;\n    let mut\
    \ num3 = 0;\n    let mut num4 = 0;\n    let mut num5 = 0;\n    let mut num6 =\
    \ 0;\n    let mut num7 = 0;\n    let mut num8 = 0;\n    let mut num9 = 0;\n  \
    \  let mut num10 = 0;\n    let mut num11 = 0;\n    let mut num12 = 0;\n    let\
    \ mut num13 = 0;\n    let mut num14 = 0;\n    let mut num15 = 0;\n    let mut\
    \ num16 = 0;\n    let mut num17 = 0;\n    let mut num18 = 0;\n    let mut num19\
    \ = 0;\n    let mut num20 = 0;\n    let mut num21 = 0;\n    let mut num22 = 0;\n\
    \    let mut num23 = 0;\n    let mut num24 = 0;\n    let mut num25 = 0;\n    let\
    \ mut num26 = 0;\n    let mut num27 = 0;\n    let mut num28 = 0;\n    let mut\
    \ num29 = 0;\n    let mut num30 = 0;\n    let mut num31 = 0;\n    let mut num32\
    \ = 0;\n    let mut num33 = 0;\n    let mut num34 = 0;\n    let mut num35 = 0;\n\
    \    let mut num36 = 0;\n    let mut num37 = 0;\n    let mut num38 = 0;\n    let\
    \ mut num39 = 0;\n    let mut num40 = 0;\n    let mut num41 = 0;\n    let mut\
    \ num42 = 0;\n    let mut num43 = 0;\n    let mut num44 = 0;\n    let mut num45\
    \ = 0;\n    let mut num46 = 0;\n    let mut num47 = 0;\n    let mut num48 = 0;\n\
    \    let mut num49 = 0;\n    let mut num50 = 0;\n    let mut num51 = 0;\n    let\
    \ mut num52 = 0;\n    let mut num53 = 0;\n    let mut num54 = 0;\n    let mut\
    \ num55 = 0;\n    let mut num56 = 0;\n    let mut num57 = 0;\n    let mut num58\
    \ = 0;\n    let mut num59 = 0;\n    let mut num60 = 0;\n    let mut num61 = 0;\n\
    \    let mut num62 = 0;\n    let mut num63 = 0;\n    let mut num64 = 0;\n    let\
    \ mut num65 = 0;\n    let mut num66 = 0;\n    let mut num67 = 0;\n    let mut\
    \ num68 = 0;\n    let mut num69 = 0;\n    let mut num70 = 0;\n    let mut num71\
    \ = 0;\n    let mut num72 = 0;\n    let mut num73 = 0;\n    let mut num74 = 0;\n\
    }\n\nfn main() {\n    let candidate = fruit_distribution;\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 19), 8);\n    assert_eq!(candidate(String::from(\"\
    5 apples and 6 oranges\"), 21), 10);\n    assert_eq!(candidate(String::from(\"\
    0 apples and 1 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 0 oranges\"), 3), 2);\n    assert_eq!(candidate(String::from(\"2\
    \ apples and 3 oranges\"), 100), 95);\n    assert_eq!(candidate(String::from(\"\
    2 apples and 3 oranges\"), 5), 0);\n    assert_eq!(candidate(String::from(\"1\
    \ apples and 100 oranges\"), 120), 19);\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg6d0whg6.rs:15:47\n   |\n\
    15 | fn fruit_distribution(s: String, n: isize) -> isize {\n   |    ------------------\
    \                         ^^^^^ expected `isize`, found `()`\n   |    |\n   |\
    \    implicitly returns `()` as its body has no tail or `return` expression\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
