name: HumanEval_161_solve
language: rs
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// >>> solve(String::from(\"1234\"))\n///\
  \ String::from(\"4321\")\n/// >>> solve(String::from(\"ab\"))\n/// String::from(\"\
  AB\")\n/// >>> solve(String::from(\"#a@C\"))\n/// String::from(\"#A@c\")\nfn solve(s:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
  AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
  )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
  ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
  ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
  \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
  \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n"
completions: ["    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n\
    \            s.swap(i, i + 1);\n            res.swap(i, i + 1);\n            i\
    \ += 1;\n        } else {\n            i += 1;\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut result = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            result.push_str(&s[i .. i + 1]);\n            i += 1;\n     \
    \   } else {\n            result.push_str(&s[i .. i + 1].to_uppercase());\n  \
    \          i += 1;\n        }\n    }\n    result", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(c);\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   if s.is_empty() {\n        String::from(\"\")\n    } else {\n        let mut\
    \ s = s;\n        for c in s.chars() {\n            if c.is_uppercase() {\n  \
    \              s = s.chars().map(|c| if c == c { c } else { c.to_uppercase() }).collect();\n\
    \            } else {\n                s = s.chars().map(|c| if c == c { c } else\
    \ { c.to_lowercase() }).collect();\n            }\n        }\n        s\n    }",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.is_lowercase() {\n              \
    \  res.push_str(&c.to_uppercase());\n            } else {\n                res.push_str(&c.to_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c);\n        }\n \
    \   }\n    res", "    if s.is_empty() {\n        return String::new();\n    }\n\
    \    let mut s = s;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            s[i] = s[i].to_ascii_uppercase();\n        } else {\n       \
    \     s[i] = s[i].to_ascii_lowercase();\n        }\n        i += 1;\n    }\n \
    \   s", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(&c.to_uppercase());\n        } else {\n        \
    \    res.push_str(&c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(&s.to_lowercase());\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii())\
    \ {\n            let c = s.chars().nth(i).unwrap();\n            if c.is_ascii()\
    \ {\n                let c = c.to_ascii_lowercase();\n                res.push_str(&c);\n\
    \                i += 1;\n            } else {\n                let c = c.to_ascii_uppercase();\n\
    \                res.push_str(&c);\n                i += 1;\n            }\n \
    \       } else {\n            res.push_str(&s);\n            i += 1;\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   if s.is_empty() {\n        String::new()\n    } else {\n        let mut s\
    \ = s;\n        let mut res = String::new();\n        for c in s.chars() {\n \
    \           if c.is_ascii() {\n                let c = c.to_ascii_lowercase();\n\
    \                if c.is_ascii() {\n                    res.push(c);\n       \
    \         } else {\n                    res.push(c);\n                }\n    \
    \        } else {\n                res.push(c);\n            }\n        }\n  \
    \      res\n    }", "    let mut s = s;\n    let mut res = String::new();\n  \
    \  let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            res.push_str(&s[i .. i + 1]);\n            i += 1;\n        }\
    \ else {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n   \
    \         i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase()) {\n    \
    \        res.push_str(&s[..i].to_lowercase());\n            i += 1;\n        }\
    \ else {\n            res.push_str(&s[..i].to_uppercase());\n            i +=\
    \ 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i]);\n            i += 1;\n \
    \       }\n    }\n    res.push_str(&s[..i]);\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    if s.is_empty() {\n        return String::from(\"\"\
    );\n    }\n    let mut s = String::from(s);\n    let mut i = 0;\n    while i <\
    \ s.len() {\n        let c = s.chars().nth(i).unwrap();\n        if c.is_ascii_lowercase()\
    \ {\n            s.swap(i, i + 1);\n            i += 1;\n        } else if c.is_ascii_uppercase()\
    \ {\n            s.swap(i, i + 1);\n            i += 1;\n        } else {\n  \
    \          i += 1;\n        }\n    }\n    s", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else {\n   \
    \         res.push_str(c.to_ascii_lowercase());\n        }\n    }\n    res", " \
    \   if s.is_empty() {\n        String::from(\"\")\n    } else {\n        let mut\
    \ s = String::from(s);\n        let mut i = 0;\n        while i < s.len() {\n\
    \            if s[i].is_ascii() {\n                let c = s[i].to_ascii_lowercase();\n\
    \                s[i] = c;\n                s[i] = c.to_ascii_uppercase();\n \
    \           } else {\n                s[i] = s[i];\n            }\n          \
    \  i += 1;\n        }\n        s\n    }", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            }\n        } else {\n            res.push_str(&c.to_string());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase()\
    \ {\n                res.push_str(c.to_uppercase());\n            } else {\n \
    \               res.push_str(c.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(c);\n        }\n    }\n    res", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n        } else\
    \ {\n            res.push_str(c.to_lowercase());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            }\n  \
    \      } else {\n            res.push_str(&c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        let c = s.chars().nth(i).unwrap();\n        if\
    \ c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \            i += 1;\n        } else if c.is_ascii_uppercase() {\n           \
    \ res.push_str(&c.to_ascii_lowercase());\n            i += 1;\n        } else\
    \ {\n            res.push_str(&c);\n            i += 1;\n        }\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    while !s.is_empty()\
    \ {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase() {\n\
    \            res.push_str(c.to_lowercase());\n        } else {\n            res.push_str(c.to_uppercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase()) {\n\
    \            res.push_str(&s[..i].to_uppercase());\n            i += 1;\n    \
    \    } else {\n            res.push_str(&s[..i].to_lowercase());\n           \
    \ i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    while !s.is_empty() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>());\n\
    \        } else {\n            res.push_str(s.chars().map(|c| c.to_ascii_uppercase()).collect::<String>());\n\
    \        }\n        s = s.chars().next().unwrap();\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase()) {\n    \
    \        s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len() - i - 1);\n\
    \            i += 1;\n        } else {\n            i += 1;\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_lowercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n   \
    \             res.push_str(c.to_ascii_uppercase());\n            } else {\n  \
    \              res.push_str(c.to_ascii_lowercase());\n            }\n        }\
    \ else {\n            res.push_str(c);\n        }\n    }\n    res", "    if s.is_empty()\
    \ {\n        return s;\n    }\n    let mut s = s;\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_ascii() {\n            i += 1;\n        }\
    \ else {\n            s[i] = s.chars().map(|c| match c {\n                'a'\
    \ => { 'A' },\n                'b' => { 'B' },\n                'c' => { 'C' },\n\
    \                'd' => { 'D' },\n                'e' => { 'E' },\n          \
    \      'f' => { 'F' },\n                'g' => { 'G' },\n                'h' =>\
    \ { 'H' },\n                'i' => { 'I' },\n                'j' => { 'J' },\n\
    \                'k' => { 'K' },\n                'l' => { 'L' },\n          \
    \      'm' => { 'M' },\n                'n' => { 'N' },\n                'o' =>\
    \ { 'O' },\n                'p' => { 'P' },\n                'q' => { 'Q' },\n\
    \                'r' => { 'R' },\n                's' => { 'S' },\n          \
    \      't' => { 'T' },\n                'u' => { 'U' },\n                'v' =>\
    \ { 'V' },\n                'w' => { 'W' },\n                'x' => { 'X' },\n\
    \                'y' => { 'Y' },\n                'z' => { 'Z' },\n          \
    \      _ => {\n                    let mut j = i;\n                    while j\
    \ > 0 && s[j].is_ascii() {\n                        s[j] = s[j].to_lowercase();\n\
    \                        j -= 1;\n                    }\n                    s[j]\
    \ = s[j].to_uppercase();\n                }\n            }).collect();\n     \
    \       i += 1;\n        }\n    }\n    s", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_uppercase() {\n\
    \            res.push_str(&c.to_lowercase());\n        } else {\n            res.push_str(&c.to_uppercase());\n\
    \        }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    let mut i =\
    \ 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n      \
    \      s[i] = s[i].to_ascii_uppercase();\n        } else {\n            s[i] =\
    \ s[i].to_ascii_lowercase();\n        }\n        res.push_str(&s[i]);\n      \
    \  i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        let c = s[i];\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i].to_uppercase());\n       \
    \     i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(&c.to_ascii_uppercase());\n        } else {\n  \
    \          res.push_str(&c.to_ascii_lowercase());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s[i].is_ascii_lowercase() {\n            s[i] = s[i].to_ascii_uppercase();\n\
    \        } else {\n            s[i] = s[i].to_ascii_lowercase();\n        }\n\
    \        res.push_str(&s[i]);\n        i += 1;\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    let mut i = 0;\n    while i <\
    \ s.len() {\n        if s[i].is_ascii_letter() {\n            i += 1;\n      \
    \  } else {\n            res.push_str(&s[..i]);\n            i += 1;\n       \
    \ }\n    }\n    res.push_str(&s[..i]);\n    res", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(&c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            res.push_str(&c.to_ascii_lowercase());\n        } else {\n  \
    \          res.push_str(&c);\n        }\n    }\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            res.push_str(c.to_ascii_lowercase());\n        } else {\n   \
    \         res.push_str(c);\n        }\n    }\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(c);\n        }\n  \
    \  }\n    res", "    if s.is_empty() {\n        String::new()\n    } else {\n\
    \        let mut s = String::from(s);\n        let mut i = 0;\n        while i\
    \ < s.len() {\n            if s[i].is_ascii_lowercase() {\n                s[i]\
    \ = s[i].to_ascii_uppercase();\n                i += 1;\n            } else if\
    \ s[i].is_ascii_uppercase() {\n                s[i] = s[i].to_ascii_lowercase();\n\
    \                i += 1;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        s\n    }", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    while !s.is_empty() {\n        let mut c = s.chars().next();\n\
    \        if c.is_none() {\n            break;\n        }\n        let c = c.unwrap();\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_uppercase());\n      \
    \  }\n    }\n    res", "    if s.is_empty() {\n        return String::new();\n\
    \    }\n    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res", "    if s.is_empty() {\n        String::from(\"0\")\n    } else {\n\
    \        let mut s = s;\n        let mut i = 0;\n        while i < s.len() {\n\
    \            if s.chars().any(|c| c.is_ascii_lowercase()) {\n                s\
    \ = s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>().to_owned();\n\
    \            } else {\n                s = s.chars().map(|c| c.to_ascii_uppercase()).collect::<String>().to_owned();\n\
    \            }\n            i += 1;\n        }\n        s\n    }", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    while !s.is_empty() {\n      \
    \  if s.chars().any(|c| c.is_ascii_lowercase()) {\n            res.push_str(&s.to_lowercase());\n\
    \        } else {\n            res.push_str(&s.to_uppercase());\n        }\n \
    \       s = s.chars().skip_while(|c| !c.is_ascii_lowercase()).collect();\n   \
    \ }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    while !s.is_empty()\
    \ {\n        let c = s.chars().next().unwrap();\n        if c.is_lowercase() {\n\
    \            res.push_str(&c.to_uppercase());\n        } else {\n            res.push_str(&c.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            res.push_str(&s[i .. i + 1]);\n            i += 1;\n        }\
    \ else {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n   \
    \         i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n        \
    \    if s[i].is_lowercase() {\n                res.push_str(&s[i .. i + 1]);\n\
    \                i += 1;\n            } else {\n                res.push_str(&s[i\
    \ .. i + 1].to_uppercase());\n                i += 1;\n            }\n       \
    \ } else {\n            res.push_str(&s[i .. i + 1]);\n            i += 1;\n \
    \       }\n    }\n    res", "    if s.is_empty() {\n        String::new()\n  \
    \  } else {\n        let mut s = s;\n        let mut i = 0;\n        while i <\
    \ s.len() {\n            if s[i].is_ascii_lowercase() {\n                s[i]\
    \ = s[i].to_ascii_uppercase();\n                i += 1;\n            } else if\
    \ s[i].is_ascii_uppercase() {\n                s[i] = s[i].to_ascii_lowercase();\n\
    \                i += 1;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        s\n    }", "    if s.is_empty() {\n        String::new()\n\
    \    } else {\n        let mut s = s;\n        let mut i = 0;\n        while i\
    \ < s.len() {\n            if s[i].is_ascii() {\n                let c = s[i].to_ascii_lowercase();\n\
    \                s[i] = c;\n                s[i] = c.to_ascii_uppercase();\n \
    \           } else {\n                s[i] = s[i].to_ascii_lowercase();\n    \
    \        }\n            i += 1;\n        }\n        s\n    }", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n       \
    \         res.push_str(c.to_ascii_uppercase());\n            } else {\n      \
    \          res.push_str(c.to_ascii_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(c);\n        }\n    }\n    res", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    while\
    \ !s.is_empty() {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii() {\n            if c.is_lowercase() {\n          \
    \      res.push_str(c.to_uppercase());\n            } else {\n               \
    \ res.push_str(c.to_lowercase());\n            }\n        } else {\n         \
    \   res.push_str(&c);\n        }\n    }\n    res", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_ascii_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase() == c {\n\
    \                res.push(c::to_ascii_uppercase());\n            } else {\n  \
    \              res.push(c::to_ascii_lowercase());\n            }\n        } else\
    \ {\n            res.push(c);\n        }\n    }\n    res", "    let mut s = s;\n\
    \    let mut res = String::new();\n    for c in s.chars() {\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s.to_lowercase());\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    while !s.is_empty() {\n      \
    \  let c = s.chars().next().unwrap();\n        if c.is_uppercase() {\n       \
    \     res.push_str(&c.to_lowercase());\n        } else {\n            res.push_str(&c.to_uppercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    if s.is_empty() {\n        String::from(\"1234\")\n\
    \    } else {\n        let mut s = String::from(s);\n        let mut i = 0;\n\
    \        while i < s.len() {\n            if s[i].is_ascii() {\n             \
    \   let c = s[i].to_ascii_lowercase();\n                s[i] = c;\n          \
    \      s[i] = c.to_ascii_uppercase();\n            } else {\n                s[i]\
    \ = s[i];\n            }\n            i += 1;\n        }\n        s\n    }", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n            s[i]\
    \ = s[i].to_ascii_uppercase();\n        } else {\n            s[i] = s[i].to_ascii_lowercase();\n\
    \        }\n        res.push_str(&s[i]);\n        i += 1;\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    if s.is_empty() {\n        return String::from(\"\");\n \
    \   }\n    let mut s = s;\n    let mut res = String::from(\"\");\n    while !s.is_empty()\
    \ {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase() {\n\
    \            res.push_str(&c.to_lowercase());\n        } else {\n            res.push_str(&c.to_uppercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_ascii_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    if res.is_empty() {\n        res.push_str(\"_\");\n    }\n  \
    \  res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(&c.to_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_lowercase());\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n        \
    \    if s[i].is_lowercase() {\n                res.push_str(&s[i .. i + 1]);\n\
    \                i += 1;\n            } else {\n                res.push_str(&s[i\
    \ .. i + 1].to_uppercase());\n                i += 1;\n            }\n       \
    \ } else {\n            res.push_str(&s[i .. i + 1]);\n            i += 1;\n \
    \       }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            s[i] = s[i].to_ascii_uppercase();\n        } else {\n       \
    \     s[i] = s[i].to_ascii_lowercase();\n        }\n        res.push_str(&s[i]);\n\
    \        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(&c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(&s);\n    }\n    res", "    let mut s = s;\n  \
    \  let mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(&c.to_ascii_lowercase());\n        } else {\n  \
    \          res.push_str(&c.to_ascii_uppercase());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_ascii_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        let c = s.chars().nth(i).unwrap();\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n      \
    \      if c.to_ascii_lowercase() == c {\n                res.push(c);\n      \
    \      } else {\n                res.push(c.to_ascii_uppercase());\n         \
    \   }\n        } else {\n            res.push(c);\n        }\n    }\n    res",
  "    if s.is_empty() {\n        String::new()\n    } else {\n        let mut s =\
    \ s;\n        let mut i = 0;\n        while i < s.len() {\n            if s[i].is_ascii_lowercase()\
    \ {\n                s[i] = s[i].to_ascii_uppercase();\n            } else if\
    \ s[i].is_ascii_uppercase() {\n                s[i] = s[i].to_ascii_lowercase();\n\
    \            } else {\n                s[i] = s[i];\n            }\n         \
    \   i += 1;\n        }\n        s\n    }", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_lowercase() {\n\
    \            res.push_str(c.to_uppercase());\n        } else {\n            res.push_str(c.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut result = String::new();\n \
    \   for c in s.chars() {\n        if c.is_ascii() {\n            result.push(c);\n\
    \        } else {\n            let mut c = c.to_lowercase();\n            if c.is_ascii()\
    \ {\n                result.push(c);\n            } else {\n                let\
    \ mut c = c.to_uppercase();\n                if c.is_ascii() {\n             \
    \       result.push(c);\n                } else {\n                    result.push(c);\n\
    \                }\n            }\n        }\n    }\n    result", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n    \
    \            res.push_str(c.to_ascii_uppercase());\n            } else {\n   \
    \             res.push_str(c.to_ascii_lowercase());\n            }\n        }\
    \ else {\n            res.push_str(&c.to_string());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase()\
    \ {\n                res.push_str(c.to_uppercase());\n            } else {\n \
    \               res.push_str(c.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(c);\n        }\n    }\n    res", "    if s.is_empty()\
    \ {\n        String::new()\n    } else {\n        let mut s = String::from(s);\n\
    \        let mut i = 0;\n        while i < s.len() {\n            if s.chars().any(|c|\
    \ c.is_ascii_lowercase()) {\n                s.swap(i, s.len() - i - 1);\n   \
    \             i += 1;\n            } else {\n                i += 1;\n       \
    \     }\n        }\n        s\n    }", "    if s.is_empty() {\n        return\
    \ String::from(\"\");\n    }\n    let mut s = s;\n    let mut res = String::from(\"\
    \");\n    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        let c = s[i];\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(&s[i .. i + 1]);\n            i += 1;\n        }\
    \ else {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n   \
    \         i += 1;\n        }\n    }\n    res.push_str(&s[i .. s.len()]);\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    while !s.is_empty()\
    \ {\n        let c = s.chars().next().unwrap();\n        if c.is_lowercase() {\n\
    \            res.push_str(&c.to_uppercase());\n        } else {\n            res.push_str(&c.to_lowercase());\n\
    \        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_uppercase());\n      \
    \  }\n    }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_ascii_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    if s.is_empty() {\n        String::new()\n    } else {\n\
    \        let mut s = s;\n        let mut i = 0;\n        while i < s.len() {\n\
    \            if s[i].is_ascii_lowercase() {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else if s[i].is_ascii_uppercase() {\n                s[i] = s[i].to_ascii_lowercase();\n\
    \            } else {\n                s[i] = s[i];\n            }\n         \
    \   i += 1;\n        }\n        s\n    }", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(c.to_ascii_uppercase());\n        } else if c.is_ascii_uppercase()\
    \ {\n            res.push_str(c.to_ascii_lowercase());\n        } else {\n   \
    \         res.push(c);\n        }\n    }\n    res", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(c);\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n\
    \            res.push_str(&s[i .. i + 1]);\n            i += 1;\n        } else\
    \ {\n            res.push_str(&s[i .. i + 1].to_uppercase());\n            i +=\
    \ 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(&c.to_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_lowercase());\n        }\n \
    \   }\n    res", "    if s.is_empty() {\n        String::from(\"\")\n    } else\
    \ {\n        let mut s = s;\n        let mut i = 0;\n        while i < s.len()\
    \ {\n            if s[i].is_ascii_lowercase() {\n                s[i] = s[i].to_ascii_uppercase();\n\
    \            } else {\n                s[i] = s[i].to_ascii_lowercase();\n   \
    \         }\n            i += 1;\n        }\n        s\n    }", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_ascii() {\n            if c.is_lowercase() {\n                res.push_str(c.to_uppercase());\n\
    \            } else if c.is_uppercase() {\n                res.push_str(c.to_lowercase());\n\
    \            } else {\n                res.push_str(c);\n            }\n     \
    \   } else {\n            res.push_str(c);\n        }\n    }\n    res", "    let\
    \ mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n   \
    \     if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.is_lowercase()\
    \ {\n                res.push_str(&c.to_uppercase());\n            } else {\n\
    \                res.push_str(&c.to_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(&c);\n        }\n    }\n    res", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii() {\n       \
    \         res.push_str(c.to_ascii_uppercase());\n            } else {\n      \
    \          res.push_str(c.to_ascii_lowercase());\n            }\n        } else\
    \ {\n            res.push_str(c);\n        }\n    }\n    res", "    let mut s\
    \ = s;\n    let mut res = String::new();\n    for c in s.chars() {\n        if\
    \ c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n        } else\
    \ {\n            res.push_str(c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    while !s.is_empty() {\n        let mut c =\
    \ s.chars().next();\n        if c.is_none() {\n            break;\n        }\n\
    \        let c = c.unwrap();\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push(c);\n            } else {\n               \
    \ res.push(c.to_ascii_uppercase());\n            }\n        } else {\n       \
    \     res.push(c);\n        }\n    }\n    res", "    let mut s = s;\n    let mut\
    \ res = String::new();\n    while !s.is_empty() {\n        if s.is_lowercase()\
    \ {\n            res.push_str(s.to_uppercase());\n        } else {\n         \
    \   res.push_str(s.to_lowercase());\n        }\n        s = s.chars().next().unwrap();\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n\
    \            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n    \
    \    } else {\n            res.push_str(&s[..i].to_uppercase());\n           \
    \ i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res =\
    \ String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii()\
    \ {\n            if s[i].to_ascii_lowercase() == s[i] {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(&s[i].to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&s[i]);\n        }\n\
    \        i += 1;\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(&c.to_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_lowercase());\n        }\n \
    \   }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n\
    \            i += 1;\n        } else {\n            res.push_str(&s[..i]);\n \
    \           i += 1;\n        }\n    }\n    res.push_str(&s[..i]);\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            match c.to_ascii_lowercase() {\n     \
    \           Ok(c) => res.push_str(&c.to_string()),\n                Err(_) =>\
    \ res.push_str(&c.to_string()),\n            }\n        } else {\n           \
    \ match c.to_ascii_uppercase() {\n                Ok(c) => res.push_str(&c.to_string()),\n\
    \                Err(_) => res.push_str(&c.to_string()),\n            }\n    \
    \    }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    if s.is_empty() {\n        String::new()\n    } else\
    \ {\n        let mut s = String::from(s);\n        let mut i = 0;\n        while\
    \ i < s.len() {\n            if s.chars().any(|c| c.is_ascii_lowercase()) {\n\
    \                s = s.chars().map(|c| c.to_ascii_lowercase()).collect();\n  \
    \          } else {\n                s = s.chars().map(|c| c.to_ascii_uppercase()).collect();\n\
    \            }\n            i += 1;\n        }\n        s\n    }", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(&c.to_uppercase());\n      \
    \  } else {\n            res.push_str(&c.to_lowercase());\n        }\n    }\n\
    \    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    let mut i = 0;\n   \
    \ while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n            res.push_str(&s[i\
    \ .. i + 1]);\n            i += 1;\n        } else {\n            res.push_str(&s[i\
    \ .. i + 1].to_uppercase());\n            i += 1;\n        }\n    }\n    res.push_str(&s[i\
    \ .. s.len()]);\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii() {\n \
    \           if s[i].to_ascii_lowercase() == s[i] {\n                res.push_str(&s[i..i]);\n\
    \                i += 1;\n            } else {\n                res.push_str(&s[i].to_ascii_uppercase());\n\
    \                i += 1;\n            }\n        } else {\n            res.push_str(&s[i]);\n\
    \            i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(c.to_uppercase());\n        } else {\n         \
    \   res.push_str(c.to_lowercase());\n        }\n    }\n    res", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n       \
    \ } else {\n            res.push_str(c.to_lowercase());\n        }\n    }\n  \
    \  if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n\
    \            res.push_str(&s[i .. i + 1]);\n            i += 1;\n        } else\
    \ {\n            res.push_str(&s[i .. i + 1].to_ascii_lowercase());\n        \
    \    i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii_lowercase()\
    \ {\n            res.push_str(&c.to_ascii_uppercase());\n        } else {\n  \
    \          res.push_str(&c.to_ascii_lowercase());\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_uppercase());\n      \
    \  }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(&c.to_lowercase());\n\
    \        } else {\n            res.push_str(&c.to_uppercase());\n        }\n \
    \   }\n    if res.chars().count() == 0 {\n        res.push_str(&s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    if s.is_empty() {\n        String::from(\"\")\n    } else\
    \ {\n        let mut s = s;\n        let mut i = 0;\n        while i < s.len()\
    \ {\n            if s[i].is_ascii() {\n                let c = s[i].to_ascii_lowercase();\n\
    \                s[i] = c;\n                s[i] = c.to_ascii_uppercase();\n \
    \           } else {\n                s[i] = s[i];\n            }\n          \
    \  i += 1;\n        }\n        s\n    }", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    for c in s.chars() {\n        if c.is_ascii() {\n    \
    \        match c.to_ascii_lowercase() {\n                Some(c) => res.push(c),\n\
    \                None => res.push(c),\n            }\n        } else {\n     \
    \       match c.to_ascii_uppercase() {\n                Some(c) => res.push(c),\n\
    \                None => res.push(c),\n            }\n        }\n    }\n    res",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    while\
    \ !s.is_empty() {\n        let c = s.chars().next().unwrap();\n        if c.is_uppercase()\
    \ {\n            res.push_str(c.to_lowercase());\n        } else {\n         \
    \   res.push_str(c.to_uppercase());\n        }\n    }\n    res", "    if s.is_empty()\
    \ {\n        String::new()\n    } else {\n        let mut s = s;\n        let\
    \ mut i = 0;\n        while i < s.len() {\n            if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n                s = s.chars().map(|c| c.to_ascii_lowercase()).collect::<String>();\n\
    \            } else {\n                s = s.chars().map(|c| c.to_ascii_uppercase()).collect::<String>();\n\
    \            }\n            i += 1;\n        }\n        s\n    }", "    let mut\
    \ s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n       \
    \ if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            res.push_str(&s[..i].to_lowercase());\n            i += 1;\n\
    \        } else {\n            res.push_str(&s[..i].to_uppercase());\n       \
    \     i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let mut res\
    \ = String::new();\n    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c|\
    \ c.is_ascii_lowercase()) {\n            s.swap(i, s.len() - 1 - i);\n       \
    \     res.swap(i, s.len() - 1 - i);\n            i += 1;\n        } else {\n \
    \           i += 1;\n        }\n    }\n    res", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    while !s.is_empty() {\n        let c = s.chars().next().unwrap();\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    } else {\n        res.push_str(s.to_uppercase());\n    }\n    res", "   \
    \ let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push(c);\n        }\n    }\n    res", "   \
    \ let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii_lowercase() {\n            res.push_str(&c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(&c.to_ascii_lowercase());\n      \
    \  }\n    }\n    res", "    if s.is_empty() {\n        return s;\n    }\n    let\
    \ mut s = s;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            s[i] = s[i].to_ascii_uppercase();\n        } else {\n       \
    \     s[i] = s[i].to_ascii_lowercase();\n        }\n        i += 1;\n    }\n \
    \   s", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res"]
stop_tokens:
- "\n}"
