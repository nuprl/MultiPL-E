name: HumanEval_161_solve
language: rs
prompt: "/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// >>> solve(String::from(\"1234\"))\n///\
  \ String::from(\"4321\")\n/// >>> solve(String::from(\"ab\"))\n/// String::from(\"\
  AB\")\n/// >>> solve(String::from(\"#a@C\"))\n/// String::from(\"#A@c\")\nfn solve(s:\
  \ String) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!(candidate(String::from(\"\
  AsDf\")), String::from(\"aSdF\"));\n    assert_eq!(candidate(String::from(\"1234\"\
  )), String::from(\"4321\"));\n    assert_eq!(candidate(String::from(\"ab\")), String::from(\"\
  AB\"));\n    assert_eq!(candidate(String::from(\"#a@C\")), String::from(\"#A@c\"\
  ));\n    assert_eq!(candidate(String::from(\"#AsdfW^45\")), String::from(\"#aSDFw^45\"\
  ));\n    assert_eq!(candidate(String::from(\"#6@2\")), String::from(\"2@6#\"));\n\
  \    assert_eq!(candidate(String::from(\"#$a^D\")), String::from(\"#$A^d\"));\n\
  \    assert_eq!(candidate(String::from(\"#ccc\")), String::from(\"#CCC\"));\n}\n"
completions: ["    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase().is_ascii()\
    \ {\n                res.push_str(c.to_ascii_uppercase());\n            } else\
    \ {\n                res.push_str(c.to_ascii_lowercase());\n            }\n  \
    \      } else {\n            res.push_str(&c.to_string());\n        }\n    }\n\
    \    res", "    let mut s = s;\n    let mut res = String::new();\n    for c in\
    \ s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s);\n    }\n   \
    \ res", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_uppercase() {\n            res.push_str(c.to_lowercase());\n\
    \        } else {\n            res.push_str(c.to_uppercase());\n        }\n  \
    \  }\n    if res.chars().count() == 0 {\n        res.push_str(s.to_lowercase());\n\
    \    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    let\
    \ mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase() {\n\
    \            s.swap(i, i + 1);\n            res.swap(i, i + 1);\n            i\
    \ += 1;\n        } else {\n            i += 1;\n        }\n    }\n    res", " \
    \   let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_ascii_lowercase())\
    \ {\n            s.swap(i, s.len() - i - 1);\n            res.swap(i, s.len()\
    \ - i - 1);\n            i += 1;\n        } else {\n            i += 1;\n    \
    \    }\n    }\n    res", "    let mut s = s;\n    let mut res = String::new();\n\
    \    for c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else {\n            res.push_str(c.to_ascii_lowercase());\n       \
    \ }\n    }\n    res", "    let mut s = s;\n    let mut result = String::new();\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            result.push_str(&s[i .. i + 1]);\n            i += 1;\n     \
    \   } else {\n            result.push_str(&s[i .. i + 1].to_uppercase());\n  \
    \          i += 1;\n        }\n    }\n    result", "    let mut s = s;\n    let\
    \ mut res = String::new();\n    for c in s.chars() {\n        if c.is_ascii()\
    \ {\n            if c.to_ascii_lowercase().is_ascii() {\n                res.push_str(c.to_ascii_uppercase());\n\
    \            } else {\n                res.push_str(c.to_ascii_lowercase());\n\
    \            }\n        } else {\n            res.push_str(c);\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii_lowercase() {\n            res.push_str(c.to_ascii_uppercase());\n\
    \        } else if c.is_ascii_uppercase() {\n            res.push_str(c.to_ascii_lowercase());\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    res", " \
    \   if s.is_empty() {\n        String::from(\"\")\n    } else {\n        let mut\
    \ s = s;\n        for c in s.chars() {\n            if c.is_uppercase() {\n  \
    \              s = s.chars().map(|c| if c == c { c } else { c.to_uppercase() }).collect();\n\
    \            } else {\n                s = s.chars().map(|c| if c == c { c } else\
    \ { c.to_lowercase() }).collect();\n            }\n        }\n        s\n    }",
  "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars() {\n\
    \        if c.is_ascii() {\n            if c.is_lowercase() {\n              \
    \  res.push_str(&c.to_uppercase());\n            } else {\n                res.push_str(&c.to_lowercase());\n\
    \            }\n        } else {\n            res.push_str(&c);\n        }\n \
    \   }\n    res", "    if s.is_empty() {\n        return String::new();\n    }\n\
    \    let mut s = s;\n    let mut i = 0;\n    while i < s.len() {\n        if s[i].is_ascii_lowercase()\
    \ {\n            s[i] = s[i].to_ascii_uppercase();\n        } else {\n       \
    \     s[i] = s[i].to_ascii_lowercase();\n        }\n        i += 1;\n    }\n \
    \   s", "    let mut s = s;\n    let mut res = String::new();\n    for c in s.chars()\
    \ {\n        if c.is_lowercase() {\n            res.push_str(c.to_uppercase());\n\
    \        } else {\n            res.push_str(c.to_lowercase());\n        }\n  \
    \  }\n    res", "    let mut s = s;\n    let mut res = String::new();\n    for\
    \ c in s.chars() {\n        if c.is_ascii() {\n            if c.to_ascii_lowercase()\
    \ == c {\n                res.push_str(c.to_ascii_uppercase());\n            }\
    \ else {\n                res.push_str(c.to_ascii_lowercase());\n            }\n\
    \        } else {\n            res.push_str(c);\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(s);\n    }\n    res", "    let mut s = s;\n   \
    \ let mut res = String::new();\n    for c in s.chars() {\n        if c.is_lowercase()\
    \ {\n            res.push_str(&c.to_uppercase());\n        } else {\n        \
    \    res.push_str(&c.to_lowercase());\n        }\n    }\n    if res.chars().count()\
    \ == 0 {\n        res.push_str(&s.to_lowercase());\n    }\n    res"]
stop_tokens:
- "\n}"
