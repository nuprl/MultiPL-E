name: HumanEval_29_filter_by_prefix
language: rs
prompt: "/// Filter an input vector of strings only for ones that start with a given\
  \ prefix.\n/// >>> filter_by_prefix(vec![], String::from(\"a\"))\n/// vec![]\n///\
  \ >>> filter_by_prefix(vec![String::from(\"abc\"), String::from(\"bcd\"), String::from(\"\
  cde\"), String::from(\"array\")], String::from(\"a\"))\n/// vec![String::from(\"\
  abc\"), String::from(\"array\")]\nfn filter_by_prefix(strings: Vec<String>, prefix:\
  \ String) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = filter_by_prefix;\n    assert_eq!(candidate(Vec::<String>::new(),\
  \ String::from(\"john\")), Vec::<String>::new());\n    assert_eq!(candidate(vec![String::from(\"\
  xxx\"), String::from(\"asd\"), String::from(\"xxy\"), String::from(\"john doe\"\
  ), String::from(\"xxxAAA\"), String::from(\"xxx\")], String::from(\"xxx\")), vec![String::from(\"\
  xxx\"), String::from(\"xxxAAA\"), String::from(\"xxx\")]);\n}\n"
completions: ["    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    let mut\
    \ result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    *\");\n    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    let mut result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut filtered_strings = Vec::new();\n    for s in\
    \ strings {\n        if s.starts_with(prefix) {\n            filtered_strings.push(*s);\n\
    \        }\n    }\n    filtered_strings", "    let mut result = Vec::new();\n\
    \    for s in strings {\n        if s.starts_with(prefix) {\n            result.push(s);\n\
    \        }\n    }\n    result", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    let mut result\
    \ = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix) {\n\
    \            result.push(s);\n        }\n    }\n    result", "    strings\n  \
    \      .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut filtered_strings = Vec::new();\n    for s in strings {\n        if\
    \ s.starts_with(prefix) {\n            filtered_strings.push(*s);\n        }\n\
    \    }\n    filtered_strings", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut strings = strings.clone();\n    strings.retain(|s|\
    \ s.starts_with(prefix));\n    strings", "    strings\n        .iter()\n     \
    \   .filter_map(|s| {\n            if s.starts_with(prefix) {\n              \
    \  Some(s)\n            } else {\n                None\n            }\n      \
    \  })\n        .collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        if next.unwrap().starts_with(prefix)\
    \ {\n            iter.collect::<Vec<_>>()\n        } else {\n            iter.collect::<Vec<_>>()\n\
    \        }\n    }", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()", "    let mut strings = strings.into_iter();\n    strings.filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut iter = strings.iter();\n    let mut prefix\
    \ = prefix.to_string();\n    loop {\n        let next = iter.next();\n       \
    \ if next.is_none() {\n            break;\n        }\n        if next.unwrap().starts_with(prefix)\
    \ {\n            iter.collect::<Vec<_>>()\n        } else {\n            iter.collect::<Vec<_>>()\n\
    \        }\n    }", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push_str(\"\
    *\");\n    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut strings = strings.clone();\n    strings.retain(|s|\
    \ s.starts_with(prefix));\n    strings", "    strings\n        .iter()\n     \
    \   .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n  \
    \      .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut iter = strings.iter();\n    iter.for_each(|s| {\n        if s.starts_with(prefix)\
    \ {\n            iter.next();\n        }\n    });\n    iter", "    strings\n \
    \       .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| {\n            if s.starts_with(prefix)\
    \ {\n                Some(s)\n            } else {\n                None\n   \
    \         }\n        })\n        .collect()", "    strings\n        .iter()\n\
    \        .filter(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    strings.into_iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter_map(|s|\
    \ {\n            if s.starts_with(prefix) {\n                Some(s)\n       \
    \     } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings.iter().filter(|s| s.starts_with(prefix)).collect()", "    let mut\
    \ result = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            result.push(s);\n        }\n    }\n    result", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n        .collect()",
  "    let mut iter = strings.iter();\n    let mut prefix = prefix.to_string();\n\
    \    loop {\n        let next = iter.next();\n        if next.is_none() {\n  \
    \          break;\n        }\n        if next.unwrap().starts_with(prefix) {\n\
    \            iter.collect::<Vec<_>>()\n        } else {\n            iter.collect::<Vec<_>>()\n\
    \        }\n    }", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut result = vec![];\n    for s in strings {\n\
    \        if s.starts_with(prefix) {\n            result.push(s);\n        }\n\
    \    }\n    result", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    let mut filtered = Vec::new();\n    for s in strings {\n        if s.starts_with(prefix)\
    \ {\n            filtered.push(s);\n        }\n    }\n    filtered", "    strings\n\
    \        .iter()\n        .filter_map(|s| s.to_lowercase().contains(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    let mut prefix = prefix.to_string();\n    prefix.push_str(\"*\");\n    strings.iter().filter(|s|\
    \ s.starts_with(prefix)).collect()", "    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    let mut prefix = prefix.to_string();\n\
    \    let mut strings = strings.into_iter();\n    let mut result = Vec::new();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = prefix.to_string();\n    let mut prefix = prefix.to_string();\n\
    \    let mut prefix = ", "    strings\n        .iter()\n        .filter_map(|s|\
    \ s.starts_with(prefix))\n        .collect()", "    strings\n        .iter()\n\
    \        .filter_map(|s| s.starts_with(prefix))\n        .collect()", "    strings\n\
    \        .iter()\n        .filter(|s| s.starts_with(prefix))\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.to_lowercase().starts_with(prefix.to_lowercase()))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    let mut filtered = Vec::new();\n    for s in strings {\n\
    \        if s.starts_with(prefix) {\n            filtered.push(s);\n        }\n\
    \    }\n    filtered", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n    \
    \    .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    let mut prefix = prefix.to_string();\n    prefix.push('_');\n\
    \    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n  \
    \      .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| {\n\
    \            if s.starts_with(prefix) {\n                Some(s)\n           \
    \ } else {\n                None\n            }\n        })\n        .collect()",
  "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter(|s| s.starts_with(prefix))\n\
    \        .collect()", "    strings\n        .iter()\n        .filter_map(|s| s.starts_with(prefix))\n\
    \        .collect()"]
stop_tokens:
- "\n}"
