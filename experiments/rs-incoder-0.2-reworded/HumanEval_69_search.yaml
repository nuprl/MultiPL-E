name: HumanEval_69_search
language: rs
prompt: "/// You are given a non-empty vector of positive integers. Return the greatest\
  \ integer that is greater than \n/// zero, and has a frequency greater than or equal\
  \ to the value of the integer itself. \n/// The frequency of an integer is the number\
  \ of times it appears in the vector.\n/// If no such a value exist, return -1.\n\
  /// Examples:\n/// >>> search(vec![4, 1, 2, 2, 3, 1])\n/// 2\n/// >>> search(vec![1,\
  \ 2, 2, 3, 3, 3, 4, 4, 4])\n/// 3\n/// >>> search(vec![5, 5, 4, 4, 4])\n/// -1\n\
  fn search(lst: Vec<isize>) -> isize {\n"
tests: "}\n\nfn main() {\n    let candidate = search;\n    assert_eq!(candidate(vec![5,\
  \ 5, 5, 5, 1]), 1);\n    assert_eq!(candidate(vec![4, 1, 4, 1, 4, 4]), 4);\n   \
  \ assert_eq!(candidate(vec![3, 3]), -1);\n    assert_eq!(candidate(vec![8, 8, 8,\
  \ 8, 8, 8, 8, 8]), 8);\n    assert_eq!(candidate(vec![2, 3, 3, 2, 2]), 2);\n   \
  \ assert_eq!(candidate(vec![2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1,\
  \ 7, 4, 10, 8, 1]), 1);\n    assert_eq!(candidate(vec![3, 2, 8, 2]), 2);\n    assert_eq!(candidate(vec![6,\
  \ 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]), 1);\n    assert_eq!(candidate(vec![8, 8, 3,\
  \ 6, 5, 6, 4]), -1);\n    assert_eq!(candidate(vec![6, 9, 6, 7, 1, 4, 7, 1, 8, 8,\
  \ 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]), 1);\n    assert_eq!(candidate(vec![1,\
  \ 9, 10, 1, 3]), 1);\n    assert_eq!(candidate(vec![6, 9, 7, 5, 8, 7, 5, 3, 7, 5,\
  \ 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]), 5);\n    assert_eq!(candidate(vec![1]),\
  \ 1);\n    assert_eq!(candidate(vec![8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6,\
  \ 10, 4, 2, 1, 10, 2, 1, 1, 5]), 4);\n    assert_eq!(candidate(vec![2, 10, 4, 8,\
  \ 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]), 2);\n    assert_eq!(candidate(vec![1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]), 1);\n    assert_eq!(candidate(vec![9, 2,\
  \ 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8,\
  \ 10, 9, 4]), 4);\n    assert_eq!(candidate(vec![2, 6, 4, 2, 8, 7, 5, 6, 4, 10,\
  \ 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]), 4);\n    assert_eq!(candidate(vec![9,\
  \ 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]), 2);\n    assert_eq!(candidate(vec![5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]), -1);\n    assert_eq!(candidate(vec![10]),\
  \ -1);\n    assert_eq!(candidate(vec![9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]),\
  \ 2);\n    assert_eq!(candidate(vec![5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]), 1);\n\
  \    assert_eq!(candidate(vec![7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5,\
  \ 6, 7, 6, 7, 7, 6]), 1);\n    assert_eq!(candidate(vec![3, 10, 10, 9, 2]), -1);\n\
  }\n"
completions: ["    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = 0;\n\
    \    for x in freq.iter() {\n        if *x > max {\n            max = *x;\n  \
    \      }\n    }\n    if max == 0 {\n        -1\n    } else {\n        max\n  \
    \  }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = 0;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n\
    \            max_freq = freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq\
    \ {\n        -1\n    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (k, v) in freq.iter()\
    \ {\n        if v > max_freq {\n            max_freq = v;\n            max_val\
    \ = k;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq =\
    \ -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n    }\n  \
    \  \n    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] >\
    \ max_freq {\n            max = x;\n            max_freq = freq[x];\n        }\n\
    \    }\n    if max < 0 {\n        -1\n    } else {\n        max\n    }", "   \
    \ let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(x).unwrap()\
    \ + 1);\n    }\n    let mut max = 0;\n    let mut max_freq = 0;\n    for x in\
    \ freq {\n        if x > max_freq {\n            max_freq = x;\n            max\
    \ = x;\n        }\n    }\n    if max_freq == 0 {\n        return -1;\n    }\n\
    \    freq.iter().filter(|&x| x > 0).max().unwrap()", "    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for val in lst {\n        if val > 0 {\n     \
    \       if *val > max_freq {\n                max_freq = *val;\n             \
    \   max_val = val;\n            }\n        }\n    }\n    if max_freq == -1 {\n\
    \        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    match max {\n        Some(x) => x,\n\
    \        None => -1,\n    }", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(&x)?.clone()\
    \ + 1);\n    }\n    let mut max_freq = -1;\n    for x in freq {\n        if x\
    \ > max_freq {\n            max_freq = x;\n        }\n    }\n    if max_freq ==\
    \ -1 {\n        return -1;\n    }\n    for x in freq {\n        if freq[x] >=\
    \ max_freq {\n            return x;\n        }\n    }\n    return -1;", "    let\
    \ mut freq = HashMap::new();\n    for ele in lst {\n        freq.entry(ele).or_insert(0)\
    \ += 1;\n    }\n    freq.max_by_key(|&(_, count)| count).unwrap()", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] >= max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for val in lst {\n        if val > 0 {\n\
    \            if *val > max_freq {\n                max_freq = *val;\n        \
    \        max_val = val;\n            }\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    }\
    \ else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    max_freq",
  "    let mut freq = vec![0];\n    for x in lst {\n        freq[x] += 1;\n    }\n\
    \    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq {\n\
    \        if x > max_freq {\n            max_freq = x;\n            max_val = x;\n\
    \        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    for\
    \ x in freq {\n        if freq[x] >= max_freq {\n            return x;\n     \
    \   }\n    }\n    return -1;", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n    \
    \    if freq[x] > max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    freq.entry(max_val).or_insert(0)", "    let mut freq = vec![];\n\
    \    for x in lst {\n        freq.push(freq.get(x).unwrap() + 1);\n    }\n   \
    \ let mut max_freq = freq.iter().max().unwrap();\n    let mut max_val = -1;\n\
    \    for x in freq {\n        if x >= max_freq {\n            max_freq = x;\n\
    \            max_val = x;\n        }\n    }\n    if max_val == -1 {\n        return\
    \ -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (k, v) in freq.iter() {\n        if\
    \ v > max_freq {\n            max_freq = v;\n            max_val = k;\n      \
    \  }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut max_freq = -1;\n    let mut max_val = -1;\n    for val in\
    \ lst {\n        if val > 0 {\n            if *val > max_freq {\n            \
    \    max_freq = *val;\n                max_val = val;\n            }\n       \
    \ }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    }\
    \ else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    freq.max_by_key(|x|\
    \ x.1).unwrap().1", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = vec![0; lst.len()];\n    for &i in lst {\n        freq[i\
    \ as usize] += 1;\n    }\n    let mut max_freq = -1;\n    for i in freq.iter()\
    \ {\n        if *i > max_freq {\n            max_freq = *i;\n        }\n    }\n\
    \    if max_freq == -1 {\n        -1\n    } else {\n        max_freq\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == 0 {\n        return -1;\n\
    \    }\n    max_freq", "    let mut freq = vec![];\n    for x in lst {\n     \
    \   freq.push(freq.get(&x)?.clone() + 1);\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq {\n        if x > max_freq {\n \
    \           max_freq = x;\n            max_val = x;\n        }\n    }\n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    for x in freq {\n        if\
    \ x > max_freq {\n            max_freq = x;\n            max_val = x;\n      \
    \  }\n    }\n    return max_val;", "    let mut freq = vec![];\n    for x in lst\
    \ {\n        freq.push(freq.get(x).unwrap() + 1);\n    }\n    let mut max = -1;\n\
    \    for x in freq {\n        if x > max {\n            max = x;\n        }\n\
    \    }\n    if max > 0 {\n        max\n    } else {\n        -1\n    }", "   \
    \ let mut freq = HashMap::new();\n    for x in lst {\n        if freq.contains_key(&x)\
    \ {\n            freq.entry(x).or_insert(0) += 1;\n        } else {\n        \
    \    freq.insert(x, 1);\n        }\n    }\n    let mut max = -1;\n    let mut\
    \ max_freq = -1;\n    for x in freq.iter() {\n        if *x.value >= *max_freq\
    \ {\n            max = *x.key;\n            max_freq = *x.value;\n        }\n\
    \    }\n    max", "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(x).unwrap()\
    \ + 1);\n    }\n    let mut max_freq = freq.iter().max().unwrap();\n    for x\
    \ in freq.iter() {\n        if *x > max_freq {\n            max_freq = *x;\n \
    \       }\n    }\n    if max_freq == 0 {\n        return -1;\n    }\n    for x\
    \ in freq.iter() {\n        if *x >= max_freq {\n            return x;\n     \
    \   }\n    }\n    return -1;", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_value = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_value = x;\n\
    \        }\n    }\n    if max_freq == 0 {\n        return -1;\n    }\n    max_value",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    max_val", "    let mut freq = vec![];\n\
    \    let mut max = -1;\n    for x in lst {\n        if freq.contains(&x) {\n \
    \           freq.insert(x, freq.iter().filter(|&x| x == x).count() as isize);\n\
    \        } else {\n            freq.push(x);\n        }\n        if freq.iter().filter(|&x|\
    \ x == x).count() > max {\n            max = freq.iter().filter(|&x| x == x).count();\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = 0;\n\
    \    for x in freq.keys() {\n        if freq[x] >= max {\n            max = x;\n\
    \        }\n    }\n    if freq[max] == 0 {\n        -1\n    } else {\n       \
    \ max\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    \n    for x in freq.keys() {\n\
    \        if freq[x] >= *x {\n            return x;\n        }\n    }\n    \n \
    \   -1", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    max", "    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for val in lst {\n        if val > 0 {\n     \
    \       if *val > max_freq {\n                max_freq = *val;\n             \
    \   max_val = val;\n            }\n        }\n    }\n    if max_freq == -1 {\n\
    \        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_value = -1;\n    for (value, freq)\
    \ in freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_value = value;\n        }\n    }\n    \n    if max_freq == 0\
    \ {\n        return -1;\n    }\n    \n    return max_value;", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max: isize = 0;\n    for x in freq.keys() {\n        if freq[x] >= max {\n\
    \            max = x;\n        }\n    }\n    if max == 0 {\n        -1\n    }\
    \ else {\n        max\n    }", "    let mut freq = HashMap::new();\n    for x\
    \ in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max =\
    \ -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n            max\
    \ = x;\n        }\n    }\n    max", "    let mut freq = vec![];\n    for x in\
    \ lst {\n        freq.push(freq.get(&x)?.clone() + 1);\n    }\n    let mut max_freq\
    \ = freq.iter().max().unwrap();\n    let mut max_val = -1;\n    for x in freq\
    \ {\n        if x > max_freq {\n            max_freq = x;\n            max_val\
    \ = x;\n        }\n    }\n    if max_freq == 0 {\n        return -1;\n    }\n\
    \    return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(&x)?.clone()\
    \ + 1);\n    }\n    let mut max = -1;\n    for x in freq {\n        if x > max\
    \ {\n            max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] >= max_freq {\n            max_freq = freq[x];\n         \
    \   max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max\
    \ = -1;\n    let mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max = x;\n            max_freq = freq[x];\n      \
    \  }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n    } else {\n \
    \       max\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(&x).unwrap_or(0)+1);\n\
    \    }\n    let mut max = -1;\n    for x in freq.iter() {\n        if x >= max\
    \ {\n            max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    max_freq", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == 0 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut max_freq = -1;\n    let mut max_val = -1;\n    for val in\
    \ lst {\n        if val > 0 {\n            if *val > max_freq {\n            \
    \    max_freq = *val;\n                max_val = val;\n            }\n       \
    \ }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut freq = vec![0];\n    for x in lst {\n        freq[x] +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq {\n        if x > max_freq {\n            max_freq = x;\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    for x in freq {\n        if freq[x] >= max_freq {\n            return\
    \ x;\n        }\n    }\n    return -1;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = 0;\n    for x in freq.iter() {\n        if x.value >= max {\n    \
    \        max = x.value;\n        }\n    }\n    if max == 0 {\n        return -1;\n\
    \    }\n    freq.entry(max).or_insert(0)", "    let mut freq = HashMap::new();\n\
    \    for el in lst {\n        freq.entry(el).or_insert(0) += 1;\n    }\n    \n\
    \    let mut max_freq = -1;\n    let mut max_el = -1;\n    for (el, _) in freq.iter()\
    \ {\n        if freq[el] > max_freq {\n            max_freq = freq[el];\n    \
    \        max_el = el;\n        }\n    }\n    \n    if max_freq == -1 {\n     \
    \   return -1;\n    }\n    \n    freq.entry(max_el).or_insert(0) -+ 1;\n    max_el",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == 0 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(&x)?.clone()\
    \ + 1);\n    }\n    let mut max_freq = -1;\n    for x in freq {\n        if x\
    \ > max_freq {\n            max_freq = x;\n        }\n    }\n    if max_freq ==\
    \ -1 {\n        return -1;\n    }\n    for x in freq {\n        if freq.get(&x)?.clone()\
    \ > max_freq {\n            max_freq = x;\n        }\n    }\n    return max_freq;",
  "    let mut freq = vec![0];\n    for x in lst {\n        freq[x] += 1;\n    }\n\
    \    let mut max: isize = 0;\n    for x in freq {\n        if x > max {\n    \
    \        max = x;\n        }\n    }\n    if max > 0 {\n        max\n    } else\
    \ {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_val = key;\n    \
    \    }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    \n    if max_freq == 0 {\n        return -1;\n    }\n    \n    max_freq",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max: isize = 0;\n    for x in freq.iter() {\n    \
    \    if *x.1 > max {\n            max = *x.1;\n        }\n    }\n    if max ==\
    \ 0 {\n        return -1;\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    max_val", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![0; lst.len()];\n    for x in lst {\n        freq[x] +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for i\
    \ in freq.iter() {\n        if *i > max_freq {\n            max_freq = *i;\n \
    \           max_val = i;\n        }\n    }\n    if max_freq == -1 {\n        -1\n\
    \    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    max_val", "    let mut freq = HashMap::new();\n    for x in lst {\n     \
    \   freq.entry(x).or_insert(0) += 1;\n    }\n    \n    if freq.values().any(|x|\
    \ x > 0) && freq.values().all(|x| x > freq.values().first()) {\n        freq.max_key().unwrap()\n\
    \    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    max_val", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = vec![0];\n    for x in lst {\n        freq[x]\
    \ += 1;\n    }\n    let mut max_freq = freq[0];\n    for x in freq {\n       \
    \ if x > max_freq {\n            max_freq = x;\n        }\n    }\n    if max_freq\
    \ == 0 {\n        -1\n    } else {\n        max_freq\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;", "    let mut freq = vec![];\n    for\
    \ x in lst {\n        freq.push(freq.get(&x).unwrap_or(0)+1);\n    }\n    let\
    \ mut max_freq = freq.iter().max().unwrap();\n    for x in freq {\n        if\
    \ x > max_freq {\n            max_freq = x;\n        }\n    }\n    if max_freq\
    \ == 0 {\n        return -1;\n    }\n    for x in freq {\n        if freq[x] ==\
    \ max_freq {\n            return x;\n        }\n    }\n    return -1;", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.keys() {\n        if\
    \ freq[x] > max {\n            max = x;\n        }\n    }\n    freq.get(max).unwrap_or(-1)",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == 0 {\n\
    \        return -1;\n    }\n    max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    \n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    \n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = freq[x];\n        }\n    }\n    if max < 0 {\n        -1\n   \
    \ } else {\n        max\n    }", "    let mut freq = HashMap::new();\n    for\
    \ elt in lst {\n        freq.entry(elt).or_insert(0) += 1;\n    }\n    let mut\
    \ max_freq = -1;\n    let mut max_elt = -1;\n    for (elt, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_elt\
    \ = elt;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    return max_elt;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![0];\n    for x in lst {\n        freq[x] += 1;\n    }\n\
    \    let mut max = -1;\n    for x in freq {\n        if x > max {\n          \
    \  max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val\
    \ > max_freq {\n            max_freq = val;\n            max_val = key;\n    \
    \    }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (key, val) in freq.iter() {\n        if val > max_freq {\n          \
    \  max_freq = val;\n            max_val = key;\n        }\n    }\n    \n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    \n    return max_val;", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = vec![];\n\
    \    for x in lst {\n        freq.push(freq.iter().filter(|&x| x == x).count());\n\
    \    }\n    let mut max_freq = freq.iter().max().unwrap();\n    for x in freq\
    \ {\n        if x > max_freq {\n            max_freq = x;\n        }\n    }\n\
    \    if max_freq == 0 {\n        return -1;\n    }\n    for x in freq {\n    \
    \    if x > max_freq {\n            return x;\n        }\n    }\n    return -1;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in\
    \ freq.iter() {\n        if freq > max_freq {\n            max_freq = freq;\n\
    \            max_val = val;\n        }\n    }\n    \n    if max_freq == -1 {\n\
    \        return -1;\n    }\n    \n    max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut max_freq = -1;\n    let mut max_val\
    \ = -1;\n    for val in lst {\n        if val > 0 {\n            if max_freq ==\
    \ -1 || max_freq < val {\n                max_freq = val;\n                max_val\
    \ = val;\n            }\n        }\n    }\n    if max_freq == -1 || max_freq <\
    \ 0 {\n        return -1;\n    }\n    return max_val;", "    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for val in lst {\n        if val > 0 {\n\
    \            if *val > max_freq {\n                max_freq = *val;\n        \
    \        max_val = val;\n            }\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] >= max {\n            max = x;\n\
    \        }\n    }\n    max", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for (key, val) in freq.iter() {\n        if val > max_freq\
    \ {\n            max_freq = val;\n            max_val = key;\n        }\n    }\n\
    \    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    let mut freq = vec![];\n\
    \    for x in lst {\n        freq.push(x);\n        if freq.len() > max_freq {\n\
    \            max_freq = freq.len();\n            max_val = x;\n        }\n   \
    \ }\n    if max_freq == -1 {\n        return -1;\n    }\n    for x in freq {\n\
    \        if x > max_freq {\n            return -1;\n        }\n    }\n    return\
    \ max_val;", "    let mut freq = vec![];\n    for x in lst {\n        freq.push(freq.get(&x).unwrap_or(0)\
    \ + 1);\n    }\n    let mut max = -1;\n    for x in freq.iter() {\n        if\
    \ *x > max {\n            max = *x;\n        }\n    }\n    if max == -1 {\n  \
    \      -1\n    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    }\
    \ else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max\
    \ = -1;\n    for x in freq.iter() {\n        if *x.1 > max {\n            max\
    \ = *x.1;\n        }\n    }\n    if max < 0 {\n        -1\n    } else {\n    \
    \    max\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n  \
    \      freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    let\
    \ mut max_freq = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max = x;\n            max_freq = freq[x];\n        }\n    }\n\
    \    if freq[max] >= max_freq {\n        -1\n    } else {\n        max\n    }",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for x in\
    \ freq.keys() {\n        if freq[x] > max_freq {\n            max = x;\n     \
    \       max_freq = freq[x];\n        }\n    }\n    if max != -1 && max_freq >=\
    \ freq[max] {\n        max\n    } else {\n        -1\n    }", "    let mut freq\
    \ = vec![];\n    for x in lst {\n        freq.push(freq.get(x).unwrap() + 1);\n\
    \    }\n    let mut max: isize = 0;\n    for x in freq {\n        if x > max {\n\
    \            max = x;\n        }\n    }\n    if max > 0 {\n        max\n    }\
    \ else {\n        -1\n    }", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max = -1;\n    let mut\
    \ max_freq = 0;\n    for x in freq.keys() {\n        if freq[x] > max_freq {\n\
    \            max = x;\n            max_freq = freq[x];\n        }\n    }\n   \
    \ if freq[max] >= max_freq {\n        -1\n    } else {\n        max\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    for x in freq.iter() {\n        if freq[x] > 0 {\n \
    \           return x;\n        }\n    }\n    \n    -1", "    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for val in lst {\n        if val > 0 {\n\
    \            if max_freq < val {\n                max_freq = val;\n          \
    \      max_val = val;\n            }\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    freq.max_by_key(|x|\
    \ x.1).unwrap().1", "    let mut max_freq = -1;\n    let mut max_val = -1;\n \
    \   for val in lst {\n        if val > 0 {\n            if *val > max_freq {\n\
    \                max_freq = *val;\n                max_val = val;\n          \
    \  }\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n \
    \   return max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![0; lst.len()];\n    for &x in lst {\n        freq[x] +=\
    \ 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for &x in\
    \ freq {\n        if x > max {\n            max = x;\n            max_freq = freq[x];\n\
    \        }\n    }\n    if max_freq == 0 {\n        -1\n    } else {\n        max\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut max_freq = -1;\n    let mut max_val = -1;\n    for val\
    \ in lst {\n        if val > 0 {\n            if *val > max_freq {\n         \
    \       max_freq = *val;\n                max_val = val;\n            }\n    \
    \    }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n   \
    \         max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    }\
    \ else {\n        max_val\n    }", "    let mut freq = vec![0];\n    for x in\
    \ lst {\n        freq[x] += 1;\n    }\n    let mut max_freq = freq[0];\n    for\
    \ x in freq {\n        if x > max_freq {\n            max_freq = x;\n        }\n\
    \    }\n    if max_freq == 0 {\n        return -1;\n    }\n    for x in freq {\n\
    \        if freq[x] >= max_freq {\n            return x;\n        }\n    }\n \
    \   return -1;", "    let mut freq = HashMap::new();\n    for x in lst {\n   \
    \     freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n  \
    \  let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n        if freq\
    \ > max_freq {\n            max_freq = freq;\n            max_val = val;\n   \
    \     }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut max_freq = -1;\n    let mut max_val = -1;\n    for val in\
    \ lst {\n        if val > 0 {\n            if *val >= *max_freq {\n          \
    \      max_freq = *val;\n                max_val = val;\n            }\n     \
    \   }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (val, freq) in freq.iter() {\n        if freq > max_freq {\n        \
    \    max_freq = freq;\n            max_val = val;\n        }\n    }\n    \n  \
    \  if max_freq == -1 {\n        -1\n    } else {\n        max_val\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max = -1;\n    let mut max_freq = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max =\
    \ key;\n            max_freq = val;\n        }\n    }\n    \n    if max_freq ==\
    \ 0 {\n        return -1;\n    }\n    \n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = -1;\n    for x in freq.iter() {\n        if *x.value >= max {\n  \
    \          max = *x.value;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if let Some(count) = freq.get_mut(&x) {\n       \
    \     *count += 1;\n        } else {\n            freq.insert(x, 1);\n       \
    \ }\n    }\n    freq.iter().max_by_key(|&(_, count)| count).unwrap()", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    freq.entry(max_val).or_insert(0)",
  "    let mut max_freq = 0;\n    let mut max_val = -1;\n    for val in lst {\n  \
    \      if val > 0 {\n            if max_freq < val {\n                max_freq\
    \ = val;\n                max_val = val;\n            }\n        }\n    }\n  \
    \  if max_freq == 0 {\n        return -1;\n    }\n    return max_val;", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = vec![0;\
    \ lst.len()];\n    for x in lst {\n        freq[x] += 1;\n    }\n    let mut max\
    \ = -1;\n    for i in freq.iter().rev() {\n        if freq[i] > max {\n      \
    \      max = i;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max = -1;\n    for x in freq.keys() {\n        if freq[x] >= max {\n\
    \            max = x;\n        }\n    }\n    \n    match max {\n        Some(x)\
    \ => x,\n        None => -1,\n    }", "    let mut freq = HashMap::new();\n  \
    \  for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n   \
    \ let mut max = -1;\n    let mut max_freq = 0;\n    for x in freq.keys() {\n \
    \       if freq[x] > max_freq {\n            max = x;\n            max_freq =\
    \ freq[x];\n        }\n    }\n    \n    if freq[max] > max_freq {\n        -1\n\
    \    } else {\n        max\n    }", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n    let mut\
    \ max_freq = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter()\
    \ {\n        if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    return max_val;", "    let mut freq = vec![0; lst.len()];\n\
    \    for x in lst {\n        freq[x] += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq {\n        if x > max_freq {\n \
    \           max_freq = x;\n            max_val = x;\n        }\n    }\n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    for x in freq {\n        if\
    \ x > max_freq {\n            max_freq = x;\n            max_val = x;\n      \
    \  }\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for\
    \ x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter() {\n    \
    \    if val > max_freq {\n            max_freq = val;\n            max_val = key;\n\
    \        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n       \
    \ max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst {\n \
    \       freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = vec![0];\n    for x in lst {\n        freq[x] += 1;\n    }\n\
    \    let mut max = -1;\n    for x in freq {\n        if x >= max {\n         \
    \   max = x;\n        }\n    }\n    max", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max = 0;\n    for (k, v) in freq.iter() {\n        if v > max {\n      \
    \      max = v;\n        }\n    }\n    if max == 0 {\n        return -1;\n   \
    \ }\n    freq.entry(max).or_insert(0)", "    let mut max_freq = 0;\n    let mut\
    \ max_value = -1;\n    for value in lst {\n        if value > max_value {\n  \
    \          max_freq = 0;\n            max_value = value;\n        }\n        if\
    \ value > max_freq {\n            max_freq = value;\n        }\n    }\n    if\
    \ max_freq == 0 {\n        return -1;\n    }\n    return max_value;", "    let\
    \ mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    max_val", "    let mut freq =\
    \ vec![];\n    for x in lst {\n        freq.push(freq.get(x).unwrap() + 1);\n\
    \    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq\
    \ {\n        if x > max_freq {\n            max_freq = x;\n            max_val\
    \ = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n\
    \    for x in freq {\n        if x > max_freq {\n            max_freq = x;\n \
    \           max_val = x;\n        }\n    }\n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.keys() {\n        if\
    \ freq[x] > max {\n            max = x;\n        }\n    }\n    freq.entry(max).or_insert(0)",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for x in freq.iter() {\n        if\
    \ *x.value >= *x.key {\n            max = *x.key;\n        }\n    }\n    max",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    let mut max_freq = -1;\n    for (k,\
    \ v) in freq.iter() {\n        if v > max_freq {\n            max = k;\n     \
    \       max_freq = v;\n        }\n    }\n    max - 1", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for (val, freq) in freq.iter() {\n   \
    \     if freq > max_freq {\n            max_freq = freq;\n            max_val\
    \ = val;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut freq = HashMap::new();\n    for x in lst\
    \ {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == 0 {\n        return -1;\n    }\n    max_freq", "    let\
    \ mut freq = HashMap::new();\n    for ele in lst {\n        freq.entry(ele).or_insert(0)\
    \ += 1;\n    }\n    let mut max = -1;\n    for (key, val) in freq.iter() {\n \
    \       if val > max {\n            max = key;\n        }\n    }\n    max", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for (key, val) in freq.iter() {\n        if val > max_freq {\n          \
    \  max_freq = val;\n            max_val = key;\n        }\n    }\n    \n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    \n    max_val", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = vec![0];\n\
    \    for x in lst {\n        freq[x] += 1;\n    }\n    let mut max = 0;\n    for\
    \ x in freq {\n        if x > max {\n            max = x;\n        }\n    }\n\
    \    if max >= freq.len() {\n        -1\n    } else {\n        max\n    }", " \
    \   let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    freq.max_by_key(|x| x.1)\n        .expect(\"no such value\"\
    )\n        .1", "    let mut freq = HashMap::new();\n    for x in lst {\n    \
    \    freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n   \
    \ let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq =\
    \ freq[x];\n            max_val = x;\n        }\n    }\n    if max_freq == -1\
    \ {\n        return -1;\n    }\n    return max_val;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    \n \
    \   let mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    \n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    \n    max_val", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == 0 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut freq = HashMap::new();\n    for x in lst {\n       \
    \ freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n    let\
    \ mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (val, freq) in freq.iter() {\n        if freq > max_freq {\n            max_freq\
    \ = freq;\n            max_val = val;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        if freq.contains_key(&x) {\n            freq.entry(x).or_insert(0)\
    \ += 1;\n        } else {\n            freq.insert(x, 1);\n        }\n    }\n\
    \    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys()\
    \ {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n      \
    \      max_val = x;\n        }\n    }\n    if freq.contains_key(&max_val) {\n\
    \        max_freq\n    } else {\n        -1\n    }", "    let mut freq = vec![0;\
    \ lst.len()];\n    for &i in lst {\n        freq[i] = freq[i] + 1;\n    }\n  \
    \  let mut max = 0;\n    for i in freq.iter() {\n        if *i > max {\n     \
    \       max = *i;\n        }\n    }\n    if max == 0 {\n        return -1;\n \
    \   }\n    max - 1", "    let mut freq = HashMap::new();\n    for x in lst {\n\
    \        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x] > max_freq\
    \ {\n            max_freq = freq[x];\n            max_val = x;\n        }\n  \
    \  }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n   \
    \ }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max = 0;\n    let mut max_freq = 0;\n    for x in\
    \ freq.iter() {\n        if *x.value >= *x.key {\n            max = *x.key;\n\
    \            max_freq = *x.value;\n        }\n    }\n    if max_freq == 0 {\n\
    \        return -1;\n    }\n    return max;", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] >= max_freq {\n            max_freq = freq[x];\n         \
    \   max_val = x;\n        }\n    }\n    if max_freq == -1 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n        max_val\n\
    \    }", "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    \n    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for x in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq\
    \ = freq[x];\n            max_val = x;\n        }\n    }\n    \n    if max_freq\
    \ == -1 {\n        return -1;\n    }\n    \n    return max_val;", "    let mut\
    \ freq = vec![];\n    for x in lst {\n        freq.push(freq.get(&x)?.clone()\
    \ + 1);\n    }\n    let mut max_freq = freq.iter().max().unwrap();\n    let mut\
    \ max_val = -1;\n    for x in freq {\n        if x > max_freq {\n            max_freq\
    \ = x;\n            max_val = x;\n        }\n    }\n    if max_freq == 0 {\n \
    \       return -1;\n    }\n    max_val", "    let mut freq = vec![];\n    for\
    \ x in lst {\n        freq.push(freq.get(x).unwrap() + 1);\n    }\n    let mut\
    \ max_freq = freq.iter().max().unwrap();\n    for x in freq {\n        if x >\
    \ max_freq {\n            max_freq = x;\n        }\n    }\n    if max_freq ==\
    \ 0 {\n        return -1;\n    }\n    for x in freq {\n        if freq.get(x).unwrap()\
    \ >= max_freq {\n            return x;\n        }\n    }\n    return -1;", " \
    \   let mut freq = vec![0; lst.len()];\n    for x in lst {\n        freq[x] +=\
    \ 1;\n    }\n    let mut max = 0;\n    for i in 0..lst.len() {\n        if freq[i]\
    \ > max {\n            max = freq[i];\n        }\n    }\n    if max > 0 {\n  \
    \      max\n    } else {\n        -1\n    }", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n\
    \        if freq[x] > max_freq {\n            max_freq = freq[x];\n          \
    \  max_val = x;\n        }\n    }\n    if max_freq == 0 {\n        return -1;\n\
    \    }\n    return max_val;", "    let mut freq = HashMap::new();\n    for x in\
    \ lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let mut max_freq\
    \ = -1;\n    let mut max_val = -1;\n    for x in freq.keys() {\n        if freq[x]\
    \ > max_freq {\n            max_freq = freq[x];\n            max_val = x;\n  \
    \      }\n    }\n    if max_freq == -1 {\n        return -1;\n    }\n    return\
    \ max_val;", "    let mut max_freq = -1;\n    let mut max_val = -1;\n    for v\
    \ in lst {\n        if v > 0 {\n            if *v > max_freq {\n             \
    \   max_freq = *v;\n                max_val = v;\n            }\n        }\n \
    \   }\n    if max_freq == -1 {\n        return -1;\n    }\n    return max_val;",
  "    let mut freq = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0)\
    \ += 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for\
    \ (key, val) in freq.iter() {\n        if val > max_freq {\n            max_freq\
    \ = val;\n            max_val = key;\n        }\n    }\n    if max_freq == -1\
    \ {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq = vec![0];\n\
    \    for x in lst {\n        freq[x] += 1;\n    }\n    let mut max_freq = -1;\n\
    \    let mut max_val = -1;\n    for x in freq {\n        if x > max_freq {\n \
    \           max_freq = x;\n            max_val = x;\n        }\n    }\n    if\
    \ max_freq == -1 {\n        return -1;\n    }\n    for x in freq {\n        if\
    \ freq[x] >= max_freq {\n            max_freq = freq[x];\n            max_val\
    \ = x;\n        }\n    }\n    max_val", "    let mut freq = HashMap::new();\n\
    \    for x in lst {\n        freq.entry(x).or_insert(0) += 1;\n    }\n    let\
    \ mut max_freq = -1;\n    let mut max_val = -1;\n    for (key, val) in freq.iter()\
    \ {\n        if val > max_freq {\n            max_freq = val;\n            max_val\
    \ = key;\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n\
    \        max_val\n    }", "    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    for val in lst {\n        if val > 0 {\n            if max_freq < val {\n\
    \                max_freq = val;\n                max_val = val;\n           \
    \ }\n        }\n    }\n    if max_freq == -1 {\n        -1\n    } else {\n   \
    \     max_val\n    }", "    let mut max_freq = -1;\n    let mut max_val = -1;\n\
    \    let mut freq = 0;\n    for v in lst {\n        if v > 0 {\n            freq\
    \ += 1;\n            if freq > max_freq {\n                max_freq = freq;\n\
    \                max_val = v;\n            }\n        }\n    }\n    if max_freq\
    \ == -1 {\n        -1\n    } else {\n        max_val\n    }", "    let mut freq\
    \ = HashMap::new();\n    for x in lst {\n        freq.entry(x).or_insert(0) +=\
    \ 1;\n    }\n    let mut max_freq = -1;\n    let mut max_val = -1;\n    for x\
    \ in freq.keys() {\n        if freq[x] > max_freq {\n            max_freq = freq[x];\n\
    \            max_val = x;\n        }\n    }\n    if max_freq == -1 {\n       \
    \ return -1;\n    }\n    return max_val;"]
stop_tokens:
- "\n}"
