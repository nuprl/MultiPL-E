name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
  /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n\
  /// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
  \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
  \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
  \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
  \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
  \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
completions: ['    x <= y + z && x >= y + z && x <= z && x >= z', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x
    <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x <= y && y <= z && x >=
    z', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()']
stop_tokens:
- "\n}"
