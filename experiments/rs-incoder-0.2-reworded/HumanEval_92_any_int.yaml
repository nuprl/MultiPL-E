name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
  /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n\
  /// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
  \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
  \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
  \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
  \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
  \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
completions: ['    x <= y + z && x >= y + z && x <= z && x >= z', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x
    <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x <= y && y <= z && x >=
    z', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', "    x.is_integer() && y.is_integer() && z.is_integer()\
    \ &&\n        x.checked_add(y).checked_add(z).is_some()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64()
    + z.to_f64() == x.to_f64()', '    x <= y + z && x <= z + y && x <= y + z', " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', "    let x: f64 = x.floor();\n\
    \    let y: f64 = y.floor();\n    let z: f64 = z.floor();\n    x >= y && x >=\
    \ z && y >= z", "    x.is_integer() && y.is_integer() && z.is_integer()\n    \
    \    && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == x.to_f64() + y.to_f64() + z.to_f64()', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', "    let x: f64 = x.floor();\n\
    \    let y: f64 = y.floor();\n    let z: f64 = z.floor();\n    if x == y || x\
    \ == z || y == z {\n        return true;\n    }\n    false", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_ok()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap()
    + f64::from(y).unwrap() + f64::from(z).unwrap()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x <= y + z &&
    x >= y - z', '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()', "  \
    \  x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x
    <= y && x <= z && x >= y && x >= z', '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    let x: f64 = x.floor();\n    let y: f64 = y.floor();\n    let z: f64 = z.floor();\n\
    \    x >= y && x >= z && y >= z", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap()
    + f64::from(y).unwrap() + f64::from(z).unwrap()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x <= y && x <= z && x >= y && x >= z', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x <= y && x <= z && y <= z', "    let x_int = x as i32;\n    let y_int = y\
    \ as i32;\n    let z_int = z as i32;\n    if x_int == y_int && y_int == z_int\
    \ {\n        return true;\n    }\n    if x_int == y_int || y_int == z_int || x_int\
    \ == z_int {\n        return true;\n    }\n    if x_int == y_int || y_int == z_int\
    \ || z_int == x_int {\n        return true;\n    }\n    if x_int == y_int || y_int\
    \ == z_int || z_int == x_int || x_int == z_int {\n        return true;\n    }\n\
    \    if x_int == y_int || y_int == z_int || z_int == x_int || x_int == z_int ||\
    \ y_int == z_int {\n        return true;\n    }\n    if x_int == y_int || y_int\
    \ == z_int || z_int == x_int || x_int == z_int || y_int == z_int || z_int == x_int\
    \ {\n        return true;\n    }\n    if x_int == y_int || y_int == z_int || z_int\
    \ == x_int || x_int == z_int || y_int == z_int || z_int == x_int || x_int == z_int\
    \ {\n        return true;\n    }\n    if x_int == y_int || y_int == z_int || z_int\
    \ == x_int || x_int == z_int || y_int == z_int || z_int == x_int || x_int == z_int\
    \ || y_int == z_int {\n        return true;\n    }\n    if x_int == y_int || y_int\
    \ == z_int || z_int == x_int || x_int == z_int || y_int == z_int || z_int == x_int\
    \ || x_int == z_int || y_int == z_int || z_int == x_int {\n        return true;\n\
    \    }\n    if x_int == y_int || y_int == z_int || z_int == x_int || x_int ==\
    \ z_int || y_int == z_int || z_int == x_int || x_int == z_int || y_int == z_int\
    \ || z_int == x_int || x_int == z_int {\n        return true;\n    }\n    if x_int\
    \ == y_int || y_int == z_int || z_int == x_int || x_int == z_int || y_int == z_int\
    \ || z_int == x_int || x_int == z_int || y_int == z_int || z_int == x_int || x_int\
    \ == z_int || y_int == z_int {\n        return true;\n    }\n    if x_int == y_int\
    \ || y_int == z_int || z_int ", '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\
    \ &&\n        x.checked_add(y).checked_add(z).is_some()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    match x_int + y_int + z_int {\n        0 => true,\n\
    \        _ => false,\n    }", '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", "    let x_int = x as i32;\n    let\
    \ y_int = y as i32;\n    let z_int = z as i32;\n    if x_int == y_int && x_int\
    \ == z_int {\n        return true;\n    }\n    if x_int > y_int {\n        if\
    \ x_int > z_int {\n            return true;\n        }\n    } else {\n       \
    \ if y_int > z_int {\n            return true;\n        }\n    }\n    return false;",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && y <= z && x >= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == x.to_f64()
    + y.to_f64() + z.to_f64()', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()', "    let x_int\
    \ = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int = z.floor()\
    \ as i32;\n    let x_int = x_int as usize;\n    let y_int = y_int as usize;\n\
    \    let z_int = z_int as usize;\n    if x_int == y_int && x_int == z_int\n  \
    \      || (x_int == y_int && z_int != z_int)\n        || (x_int != y_int && y_int\
    \ != z_int)\n    {\n        return true;\n    }\n    false", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap() + f64::from(y).unwrap()
    + f64::from(z).unwrap()', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap() + f64::from(y).unwrap()
    + f64::from(z).unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x + y + z)', "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == x.to_f64() + y.to_f64() +
    z.to_f64()', "    x.is_integer() && y.is_integer() && z.is_integer()\n       \
    \ && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', "    let x_int: i64 = x.floor() as i64;\n    let y_int: i64 =\
    \ y.floor() as i64;\n    let z_int: i64 = z.floor() as i64;\n    let x_int2 =\
    \ x_int as i64;\n    let y_int2 = y_int as i64;\n    let z_int2 = z_int as i64;\n\
    \    let x_int3 = x_int2 as i64;\n    let y_int3 = y_int2 as i64;\n    let z_int3\
    \ = z_int as i64;\n    if x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3\
    \ == x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n\
    \        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2\
    \ + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 ==\
    \ x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n\
    \        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2\
    \ + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 ==\
    \ x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n\
    \        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2\
    \ + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 ==\
    \ x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n\
    \        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2\
    \ + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 ==\
    \ x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n\
    \        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2\
    \ + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n        x_int3 ==\
    \ x_int2 + y_int2 + z_int2 &&\n        x_int3 == x_int2 + y_int2 + z_int2 &&\n\
    \        x_int3 == x_int2 + y_int2 + ", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == x.to_f64() + y.to_f64() + z.to_f64()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    let x: i64 = x.into();\n    let y: i64 = y.into();\n    let z: i64 = z.into();\n\
    \    x <= y && y <= z && x >= z", '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    let mut sum = 0;\n    sum += x;\n    sum\
    \ += y;\n    sum += z;\n    sum == sum * 3", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()', '    x <=
    y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()', '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    let mut sum: f64 = x + y + z;\n    sum.cmp(&sum)\
    \ == Ordering::Equal", '    x <= y && x <= z && y <= z', '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x <= y + z && x >= y - z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x + y + z)', '    x <= y && x <= z
    && x >= y && x >= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x <= y && x <= z && y <= z', "   \
    \ x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\
    \ &&\n        x.checked_add(y).checked_add(z).is_ok()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64()\
    \ == x.to_f64()", '    x.is_integer() && y.is_integer() && z.is_integer() && x
    + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', "    let x: f64 = x.floor();\n    let y: f64 = y.floor();\n    let\
    \ z: f64 = z.floor();\n    if x == y {\n        if x == z {\n            true\n\
    \        } else {\n            false\n        }\n    } else {\n        false\n\
    \    }", '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()']
stop_tokens:
- "\n}"
