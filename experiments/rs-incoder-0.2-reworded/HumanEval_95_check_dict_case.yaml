name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a HashMap, return true if all\
  \ keys are strings in lower \n/// case or all keys are strings in upper case, else\
  \ return false.\n/// The function should return false is the given HashMap is empty.\n\
  /// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"\
  apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n/// true\n/// >>>\
  \ check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")),\
  \ (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"\
  banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"\
  a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"\
  pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"\
  B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\"\
  )), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"),\
  \ String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])),\
  \ true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n"
completions: ['    dict.iter().all(|&(k, _)| k.is_lowercase() || k.is_uppercase())',
  "    if dict.is_empty() {\n        return false;\n    }\n    for k in dict.keys()\
    \ {\n        if k.len() != 1 {\n            return false;\n        }\n    }\n\
    \    for k in dict.keys() {\n        if k.len() != 1 {\n            return false;\n\
    \        }\n        if k.to_lowercase() != k.to_uppercase() {\n            return\
    \ false;\n        }\n    }\n    true", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(\"name\") => value.to_lowercase() == String::from(\"john\"\
    ),\n            Some(\"age\") => value.to_lowercase() == String::from(\"36\"),\n\
    \            Some(\"city\") => value.to_lowercase() == String::from(\"houston\"\
    ),\n            _ => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.to_lowercase() == key {\n            true\n        } else\
    \ {\n            false\n        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    match dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        if key.to_lowercase()\
    \ == key {\n            true\n        } else {\n            false\n        }\n\
    \    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    match dict.len() {\n        0 => false,\n        1 => true,\n        _ => false,\n\
    \    }", "    match dict.len() {\n        0 => false,\n        1 => true,\n  \
    \      _ => dict.values().iter().all(|s| s.is_lowercase()),\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        match value.to_lowercase() {\n            Some(value) =>\
    \ true,\n            None => false,\n        }\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        let mut key = key.to_lowercase();\n        let mut value = value.to_lowercase();\n\
    \        key == value || key.to_uppercase() == value\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        if let Some(key)\
    \ = key.to_lowercase() {\n            true\n        } else if let Some(key) =\
    \ key.to_uppercase() {\n            true\n        } else {\n            false\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(key_lower) => value.to_lowercase() == key_lower,\n     \
    \       None => false,\n        }\n    })", "    match dict.len() {\n        0\
    \ => false,\n        _ => true,\n    }", "    if dict.is_empty() {\n        return\
    \ false;\n    }\n    let mut keys = dict.keys();\n    while let Some(key) = keys.next()\
    \ {\n        if key.to_lowercase() == key {\n            continue;\n        }\n\
    \        if key.to_uppercase() == key {\n            continue;\n        }\n  \
    \      return false;\n    }\n    true", '    dict.iter().all(|&(k, _)| k.is_lowercase()
    || k.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        let mut lower = String::new();\n        let mut upper = String::new();\n\
    \        value.chars().for_each(|c| {\n            match c {\n               \
    \ 'A' => {\n                    lower = String::from(c.to_string());\n       \
    \         }\n                'a' => {\n                    lower = String::from(c.to_string());\n\
    \                }\n                'B' => {\n                    upper = String::from(c.to_string());\n\
    \                }\n                'b' => {\n                    upper = String::from(c.to_string());\n\
    \                }\n                _ => {}\n            }\n        });\n    \
    \    lower == upper\n    })", "    if dict.is_empty() {\n        return false;\n\
    \    }\n    let mut keys = dict.keys();\n    while let Some(key) = keys.next()\
    \ {\n        if key.to_lowercase() == key {\n            continue;\n        }\n\
    \        if key.to_uppercase() == key {\n            continue;\n        }\n  \
    \      return false;\n    }\n    return true;", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.to_lowercase() == key {\n            true\n        } else\
    \ {\n            false\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        value.chars().all(|c| c.is_ascii_lowercase() || c.is_ascii_uppercase())\n\
    \    })", "    match dict.len() {\n        0 => false,\n        _ => true,\n \
    \   }", "    match dict.len() {\n        0 => false,\n        _ => true,\n   \
    \ }", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', " \
    \   dict.iter().all(|(_, value)| {\n        let mut lower = value.to_lowercase();\n\
    \        let mut upper = value.to_uppercase();\n        lower.chars().all(|c|\
    \ !c.is_ascii_lowercase());\n        upper.chars().all(|c| !c.is_ascii_uppercase());\n\
    \        lower == upper\n    })", '    !dict.is_empty() && dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|&(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(lower) => value == lower,\n            None => false,\n        }\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(key_lower) => key_lower == value,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        if key.to_lowercase()\
    \ == key {\n            true\n        } else {\n            false\n        }\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(key_lower) => value.to_lowercase() == key_lower,\n     \
    \       None => false,\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        if key.len() != value.len() {\n            return false;\n\
    \        }\n        key.chars().all(|c| c >= 'a' && c <= 'z')\n            ||\
    \ key.chars().all(|c| c >= 'A' && c <= 'Z')\n    })", "    match dict.len() {\n\
    \        0 => false,\n        _ => true,\n    }", '    dict.iter().all(|(key,
    _)| key.to_lowercase() == key)', "    dict.iter().all(|(key, value)| {\n     \
    \   match key.to_lowercase() {\n            Some(key_lower) => value.to_lowercase()\
    \ == key_lower,\n            None => false,\n        }\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            None => false,\n        \
    \    Some(lower) => value == lower,\n        }\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        key.to_lowercase() == value.to_lowercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", "    match dict.len() {\n        0 => false,\n\
    \        _ => true,\n    }", "    dict.iter().all(|(key, value)| {\n        let\
    \ mut lower = String::new();\n        let mut upper = String::new();\n       \
    \ key.to_lowercase(&mut lower);\n        value.to_uppercase(&mut upper);\n   \
    \     lower == upper\n    })", "    dict.iter().all(|(_, value)| {\n        match\
    \ value.to_lowercase() {\n            Some(value) => true,\n            None =>\
    \ false,\n        }\n    })", "    if dict.is_empty() {\n        return false;\n\
    \    }\n    let mut keys = dict.keys().collect::<Vec<_>>();\n    let mut keys_lower\
    \ = keys.iter().map(|&key| key.to_lowercase()).collect::<Vec<_>>();\n    let mut\
    \ keys_upper = keys.iter().map(|&key| key.to_uppercase()).collect::<Vec<_>>();\n\
    \    let mut keys_diff = keys_lower - keys_upper;\n    if keys_diff.is_empty()\
    \ {\n        return true;\n    }\n    let mut keys_diff_lower = keys_diff.iter().map(|&key|\
    \ key.to_lowercase()).collect::<Vec<_>>();\n    let mut keys_diff_upper = keys_diff.iter().map(|&key|\
    \ key.to_uppercase()).collect::<Vec<_>>();\n    let mut keys_diff_diff = keys_diff_lower\
    \ - keys_diff_upper;\n    if keys_diff_diff.is_empty() {\n        return true;\n\
    \    }\n    false", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        key.to_lowercase() == value.to_lowercase()\n    })", "  \
    \  dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => value ==\
    \ key.to_uppercase(),\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.is_lowercase() {\n            true\n        } else if key.is_uppercase()\
    \ {\n            true\n        } else {\n            false\n        }\n    })",
  "    if dict.is_empty() {\n        return false;\n    }\n    let mut keys = dict.keys();\n\
    \    let mut keys_iter = keys.iter();\n    let mut current_key = keys_iter.next();\n\
    \    let mut current_value = current_key.clone();\n    while current_key != None\
    \ {\n        if current_key.clone() != current_value.clone() {\n            return\
    \ false;\n        }\n        current_key = keys_iter.next();\n        current_value\
    \ = current_key.clone();\n    }\n    true", "    if dict.is_empty() {\n      \
    \  return false;\n    }\n    let mut lower = true;\n    let mut upper = true;\n\
    \    for (_, val) in dict.iter() {\n        if !val.to_lowercase().is_ok() {\n\
    \            lower = false;\n        }\n        if !val.to_uppercase().is_ok()\
    \ {\n            upper = false;\n        }\n    }\n    lower && upper", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            None => false,\n\
    \            Some(lower) => value == lower,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == lower,\n            None => false,\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   if dict.is_empty() {\n        return false;\n    }\n    let mut keys = dict.keys().collect::<Vec<_>>();\n\
    \    let mut keys_lower = keys.iter().map(|key| key.to_lowercase()).collect::<Vec<_>>();\n\
    \    let mut keys_upper = keys.iter().map(|key| key.to_uppercase()).collect::<Vec<_>>();\n\
    \    keys_lower.sort();\n    keys_upper.sort();\n    if keys_lower == keys_upper\
    \ {\n        return true;\n    }\n    false", "    dict.iter().all(|(_, value)|\
    \ {\n        value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(\"name\") =>\
    \ value.to_lowercase() == String::from(\"john\"),\n            Some(\"age\") =>\
    \ value.to_lowercase() == String::from(\"36\"),\n            Some(\"city\") =>\
    \ value.to_lowercase() == String::from(\"houston\"),\n            Some(\"state\"\
    ) => value.to_lowercase() == String::from(\"nc\"),\n            Some(\"zip\")\
    \ => value.to_lowercase() == String::from(\"12345\"),\n            _ => false,\n\
    \        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, _)| {\n        key.to_lowercase() == key\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        if key.len() != value.len() {\n\
    \            return false\n        }\n        let mut i = 0;\n        while i\
    \ < key.len() {\n            if key[i] != value[i] {\n                return false\n\
    \            }\n            i += 1;\n        }\n        true\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        if key.is_lowercase() {\n      \
    \      true\n        } else if key.is_uppercase() {\n            true\n      \
    \  } else {\n            false\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        if key.len() > 1 && key.to_lowercase() == key {\n       \
    \     false\n        } else {\n            true\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    if dict.is_empty() {\n        return false;\n    }\n    let mut iter\
    \ = dict.iter();\n    let mut key_iter = iter.keys().cloned();\n    let mut value_iter\
    \ = iter.values().cloned();\n    let mut first_key_is_upper = false;\n    let\
    \ mut first_value_is_upper = false;\n    loop {\n        let key = key_iter.next().unwrap();\n\
    \        let value = value_iter.next().unwrap();\n        if first_key_is_upper\
    \ {\n            if key.to_lowercase() == key {\n                first_key_is_upper\
    \ = false;\n            } else {\n                return false;\n            }\n\
    \        }\n        if first_value_is_upper {\n            if value.to_lowercase()\
    \ == value {\n                first_value_is_upper = false;\n            } else\
    \ {\n                return false;\n            }\n        }\n        if key.to_lowercase()\
    \ == key {\n            first_key_is_upper = true;\n        }\n        if value.to_lowercase()\
    \ == value {\n            first_value_is_upper = true;\n        }\n    }\n   \
    \ true", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() ||\
    \ value.is_uppercase()\n    })", "    dict.iter().all(|(key, value)| {\n     \
    \   match key.to_lowercase() {\n            Some(\"name\") => value.to_lowercase()\
    \ == String::from(\"john\"),\n            Some(\"age\") => value.to_lowercase()\
    \ == String::from(\"36\"),\n            Some(\"city\") => value.to_lowercase()\
    \ == String::from(\"houston\"),\n            _ => false,\n        }\n    })",
  '    dict.iter().all(|&(k, _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(_,\
    \ value)| {\n        value.len() == 1 && value.chars().all(|c| c.is_ascii_lowercase()\
    \ || c.is_ascii_uppercase())\n    })", "    dict.iter().all(|(_, value)| {\n \
    \       value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        if key.len() == 0 {\n            return false;\n        }\n\
    \        if key.len() == 1 && key[0] >= 'A' && key[0] <= 'Z' {\n            return\
    \ true;\n        }\n        if key.len() == 1 && key[0] >= 'a' && key[0] <= 'z'\
    \ {\n            return true;\n        }\n        return false;\n    })", "  \
    \  match dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key,\
    \ value)| {\n        key.to_lowercase() == value.to_lowercase()\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    if dict.is_empty() {\n      \
    \  return false;\n    }\n    for entry in dict.iter() {\n        let key = entry.key().to_lowercase();\n\
    \        let value = entry.value().to_lowercase();\n        if key != value {\n\
    \            return false;\n        }\n    }\n    true", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(lower) => value == lower,\n            None => false,\n        }\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            None => false,\n            Some(lower) => value == lower,\n\
    \        }\n    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", "    dict.iter().all(|(_, value)| {\n    \
    \    value.is_lowercase() || value.is_uppercase()\n    })", "    match dict.len()\
    \ {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        let value = value.to_lowercase();\n        !value.is_empty()\
    \ && value.is_uppercase()\n    })", "    dict.iter().all(|(key, value)| {\n  \
    \      match key.to_lowercase() {\n            Some(\"name\") => value.to_lowercase()\
    \ == Some(\"john\"),\n            Some(\"age\") => value.to_lowercase() == Some(\"\
    36\"),\n            Some(\"city\") => value.to_lowercase() == Some(\"houston\"\
    ),\n            _ => false,\n        }\n    })", "    match dict.len() {\n   \
    \     0 => false,\n        1 => true,\n        _ => dict.values().iter().all(|s|\
    \ s.is_lowercase()),\n    }", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", '    !dict.is_empty() && dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => value ==\
    \ key.to_uppercase(),\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => value == key.to_uppercase(),\n        }\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    match dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key,\
    \ value)| {\n        if let Ok(key) = key.to_lowercase() {\n            true\n\
    \        } else if let Ok(key) = key.to_uppercase() {\n            true\n    \
    \    } else {\n            false\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n   \
    \         Some(lower) => value == lower,\n            None => false,\n       \
    \ }\n    })", "    if dict.is_empty() {\n        return false;\n    }\n    let\
    \ mut keys = dict.keys();\n    while let Some(key) = keys.next() {\n        if\
    \ key.to_lowercase() == key {\n            return false;\n        }\n        if\
    \ key.to_uppercase() == key {\n            return false;\n        }\n    }\n \
    \   true", "    if dict.is_empty() {\n        return false;\n    }\n    let mut\
    \ keys = dict.keys();\n    while let Some(key) = keys.next() {\n        if key.to_lowercase()\
    \ == key {\n            return false;\n        }\n        if key.to_uppercase()\
    \ == key {\n            return false;\n        }\n    }\n    true", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|&(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", '    !dict.is_empty() && dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, _)| {\n\
    \        key.to_lowercase() == key\n    })", "    if dict.is_empty() {\n     \
    \   return false;\n    }\n    let mut keys = dict.keys().collect::<Vec<_>>();\n\
    \    let mut values = dict.values().collect::<Vec<_>>();\n    let mut i = 0;\n\
    \    while i < keys.len() {\n        if keys[i].is_uppercase() {\n           \
    \ if !values[i].is_lowercase() {\n                return false;\n            }\n\
    \        } else if keys[i].is_lowercase() {\n            if !values[i].is_uppercase()\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    return false;\n        }\n        i += 1;\n    }\n    true", "    dict.iter().all(|(_,\
    \ value)| {\n        match value.to_lowercase() {\n            true => true,\n\
    \            false => false,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            None => false,\n\
    \            Some(lower) => lower == value,\n        }\n    })", "    match dict.len()\
    \ {\n        0 => false,\n        1 => true,\n        _ => false,\n    }", " \
    \   if dict.is_empty() {\n        return false;\n    }\n    let mut keys = dict.keys();\n\
    \    let mut values = dict.values();\n    while let Some(key) = keys.next() {\n\
    \        if key.to_lowercase() == key {\n            if !values.next().is_some()\
    \ {\n                return false;\n            }\n        } else {\n        \
    \    if key.to_uppercase() == key {\n                if !values.next().is_some()\
    \ {\n                    return false;\n                }\n            } else\
    \ {\n                return false;\n            }\n        }\n    }\n    true",
  "    dict.iter().all(|&(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    if dict.is_empty() {\n        return false;\n    }\n    let mut lower = true;\n\
    \    let mut upper = true;\n    for (key, value) in dict {\n        if key.is_lowercase()\
    \ {\n            lower = false;\n        }\n        if key.is_uppercase() {\n\
    \            upper = false;\n        }\n    }\n    lower && upper", "    dict.iter().all(|(key,\
    \ value)| {\n        if key.to_lowercase() == key {\n            true\n      \
    \  } else {\n            false\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(lower) => value\
    \ == String::from(lower),\n            None => false,\n        }\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.chars().all(|c| c.is_ascii_lowercase()\
    \ || c.is_ascii_uppercase())\n    })", "    dict.iter().all(|(key, _)| {\n   \
    \     key.chars().all(|c| c.is_ascii_lowercase() || c.is_ascii_uppercase())\n\
    \    })", "    dict.iter().all(|(key, _)| {\n        key.to_lowercase() == key\n\
    \    })", '    dict.iter().all(|&(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase() {\n    \
    \        Some(\"name\") => value.to_lowercase() == String::from(\"john\"),\n \
    \           Some(\"age\") => value.to_lowercase() == String::from(\"36\"),\n \
    \           Some(\"city\") => value.to_lowercase() == String::from(\"houston\"\
    ),\n            _ => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        if let Some(key) = key.to_lowercase() {\n            true\n     \
    \   } else if let Some(key) = key.to_uppercase() {\n            true\n       \
    \ } else {\n            false\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        match value.to_lowercase() {\n            Some(value) => true,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(key_lower) => value.to_lowercase()\
    \ == key_lower,\n            Some(key_upper) => value.to_uppercase() == key_upper,\n\
    \            _ => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        if let Ok(key) = key.to_lowercase() {\n            true\n       \
    \ } else if let Ok(key) = key.to_uppercase() {\n            true\n        } else\
    \ {\n            false\n        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(_, value)| {\n        value.is_lowercase()\
    \ || value.is_uppercase()\n    })", "    dict.iter().all(|(key, _)| {\n      \
    \  key.to_lowercase() == key\n    })", "    match dict.len() {\n        0 => false,\n\
    \        _ => true,\n    }", "    match dict.len() {\n        0 => true,\n   \
    \     1 => true,\n        _ => false,\n    }", "    match dict.len() {\n     \
    \   0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        match value.to_lowercase() {\n            Some(lower) => true,\n\
    \            None => false,\n        }\n    })", '    dict.iter().all(|&(k, _)|
    k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)| {\n\
    \        match key.to_lowercase() {\n            None => false,\n            Some(lower)\
    \ => value == lower,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            None => false,\n        \
    \    Some(lower) => value == lower,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        let mut lower = String::new();\n        let mut upper = String::new();\n\
    \        key.to_lowercase(&mut lower);\n        value.to_uppercase(&mut upper);\n\
    \        lower == upper\n    })", '    dict.iter().all(|&(k, _)| k.is_lowercase()
    || k.is_uppercase())', '    !dict.is_empty() && dict.iter().all(|&(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    match dict.len() {\n        0 => false,\n        1\
    \ => true,\n        _ => false,\n    }", "    match dict.len() {\n        0 =>\
    \ false,\n        1 => true,\n        _ => false,\n    }", "    dict.iter().all(|&(_key,\
    \ val)| {\n        match val.to_lowercase() {\n            Some(val) => val ==\
    \ key,\n            None => false,\n        }\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower,\n\
    \            None => false,\n        }\n    })", "    match dict.len() {\n   \
    \     0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(\"name\") => value.to_lowercase()\
    \ == String::from(\"john\"),\n            Some(\"age\") => value.to_lowercase()\
    \ == String::from(\"36\"),\n            Some(\"city\") => value.to_lowercase()\
    \ == String::from(\"houston\"),\n            _ => false,\n        }\n    })",
  "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() ||\
    \ value.is_uppercase()\n    })", "    dict.iter().all(|(key, value)| {\n     \
    \   match key.to_lowercase() {\n            Some(key_lower) => value.to_lowercase()\
    \ == key_lower,\n            None => value.to_uppercase() == key,\n        }\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    if dict.is_empty() {\n        return false;\n    }\n\
    \    let mut keys = dict.keys().collect::<Vec<_>>();\n    let mut keys_lower =\
    \ keys.iter().map(|key| {\n        if key.to_lowercase() == key {\n          \
    \  key\n        } else {\n            key.to_lowercase()\n        }\n    }).collect::<Vec<_>>();\n\
    \    let mut keys_upper = keys.iter().map(|key| {\n        if key.to_uppercase()\
    \ == key {\n            key\n        } else {\n            key.to_uppercase()\n\
    \        }\n    }).collect::<Vec<_>>();\n    let mut keys_diff = keys.iter().filter(|key|\
    \ {\n        if key.to_lowercase() != key.to_uppercase() {\n            true\n\
    \        } else {\n            false\n        }\n    }).collect::<Vec<_>>();\n\
    \    if keys_lower.is_empty() && keys_upper.is_empty() && keys_diff.is_empty()\
    \ {\n        return true;\n    }\n    if keys_lower.is_empty() && keys_upper.is_empty()\
    \ && keys_diff.is_some() {\n        return false;\n    }\n    if keys_lower.is_some()\
    \ && keys_upper.is_some() && keys_diff.is_some() {\n        return false;\n  \
    \  }\n    if keys_lower.is_some() && keys_upper.is_some() && keys_diff.is_none()\
    \ {\n        return true;\n    }\n    if keys_lower.is_none() && keys_upper.is_none()\
    \ && keys_diff.is_none() {\n        return true;\n    }\n    if keys_lower.is_none()\
    \ && keys_upper.is_none() && keys_diff.is_some() {\n        return false;\n  \
    \  }\n    if keys_lower.is_some() && keys_upper.is_some() && keys_diff.is_none()\
    \ {\n        return false;\n    }\n    if keys_lower.is_some() && keys_upper.is_some()\
    \ && keys_diff.is_some() {\n        return false;\n    }\n    if keys_lower.is_some()\
    \ && keys_upper.is_some() && keys_diff.is_some() {\n        return false;\n  \
    \  }\n    if keys_lower.is_some() && keys_upper.is_some() && keys_diff.is_some()\
    \ {\n        return false;\n    }\n    if keys_lower.is_some() && keys_upper.is_some()\
    \ && keys_diff.is_some() {\n        return false;\n    }\n    if keys_lower.is_some()\
    \ && keys_upper.is_some() && keys_diff.is_some() {\n        return false;\n  \
    \  }\n    if keys_lower.is_some() && keys_upper.is_some() && keys_diff.is_some()\
    \ {\n        return false;\n    }\n    if keys_lower.is_some() && keys_upper.is_some()\
    \ && keys_diff.is_some() {\n        return false;\n    }\n    if keys_lower.is_some()\
    \ && keys_upper.is_some() && keys_diff.is_some() {\n        return false;\n  \
    \  }\n    if keys_lower.is_some() && keys_upper.is_some() && keys_diff.is_some()\
    \ {\n        return false;\n    }\n    if ", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.is_lowercase() {\n            true\n        } else {\n   \
    \         false\n        }\n    })", "    dict.iter().all(|(key, value)| {\n \
    \       if key.to_lowercase() == key {\n            true\n        } else {\n \
    \           false\n        }\n    })", "    dict.iter().all(|(_, value)| {\n \
    \       value.is_lowercase() || value.is_uppercase()\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        let mut iter = value.chars().filter(|c| c.is_ascii_lowercase()).collect::<Vec<_>>();\n\
    \        iter.iter().all(|c| !c.is_ascii_uppercase())\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        if key.len() != value.len() {\n            return false;\n      \
    \  }\n        for (i, c) in key.chars().enumerate() {\n            if c != c.to_lowercase()\
    \ {\n                return false;\n            }\n        }\n        for (i,\
    \ c) in key.chars().enumerate() {\n            if c != c.to_uppercase() {\n  \
    \              return false;\n            }\n        }\n        true\n    })",
  '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key,\
    \ value)| {\n        match key.to_lowercase() {\n            Some(\"name\") =>\
    \ value.to_lowercase() == String::from(\"john\"),\n            Some(\"age\") =>\
    \ value.to_lowercase() == String::from(\"36\"),\n            Some(\"city\") =>\
    \ value.to_lowercase() == String::from(\"houston\"),\n            _ => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    dict.iter().all(|(key,\
    \ value)| {\n        key.to_lowercase() == value.to_lowercase()\n    })", "  \
    \  dict.iter().all(|(key, value)| {\n        if key.to_lowercase() == key {\n\
    \            true\n        } else {\n            false\n        }\n    })", " \
    \   if dict.is_empty() {\n        return false;\n    }\n    let mut keys = dict.keys().collect::<Vec<_>>();\n\
    \    keys.sort();\n    for k in keys {\n        let v = dict.get(k).unwrap();\n\
    \        if v.len() != 1 {\n            return false;\n        }\n        if v.chars().any(|c|\
    \ !c.is_ascii_lowercase()) {\n            return false;\n        }\n        if\
    \ v.chars().any(|c| !c.is_ascii_uppercase()) {\n            return false;\n  \
    \      }\n    }\n    true", "    dict.iter().all(|(key, value)| {\n        match\
    \ key.to_lowercase() {\n            Some(\"name\") => value.to_lowercase() ==\
    \ String::from(\"john\"),\n            Some(\"age\") => value.to_lowercase() ==\
    \ String::from(\"36\"),\n            Some(\"city\") => value.to_lowercase() ==\
    \ String::from(\"houston\"),\n            _ => false,\n        }\n    })", " \
    \   match dict.len() {\n        0 => true,\n        1 => dict.get(String::from(\"\
    a\")).map(|s| s.to_lowercase()).unwrap_or(false) == true,\n        _ => dict\n\
    \            .iter()\n            .all(|(_, v)| v.to_lowercase() == dict.get(String::from(\"\
    a\")).unwrap_or(false)),\n    }", "    dict.iter().all(|(key, value)| {\n    \
    \    match key.to_lowercase() {\n            Some(lower) => value == String::from(lower),\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(key_lower) => key_lower\
    \ == value,\n            None => false,\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(key, value)| {\n        let mut key = key.to_lowercase();\n\
    \        let mut value = value.to_lowercase();\n        key.chars().all(|c| {\n\
    \            value.chars().all(|c| c.is_ascii_lowercase())\n        })\n    })",
  "    dict.iter().all(|(key, value)| {\n        key.to_lowercase() == value.to_lowercase()\n\
    \    })", "    match dict.len() {\n        0 => false,\n        _ => true,\n \
    \   }", "    dict.iter().all(|(key, value)| {\n        let mut lower = String::new();\n\
    \        let mut upper = String::new();\n        key.to_lowercase(&mut lower);\n\
    \        value.to_uppercase(&mut upper);\n        lower == upper\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        if key.to_lowercase()\
    \ == key {\n            true\n        } else {\n            false\n        }\n\
    \    })", "    dict.iter().all(|(_, value)| {\n        value.is_lowercase() ||\
    \ value.is_uppercase()\n    })", "    dict.iter().all(|(key, value)| {\n     \
    \   match key.to_lowercase() {\n            Some(lower) => value == lower,\n \
    \           None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value == lower.to_lowercase(),\n\
    \            None => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(\"name\") => value.to_lowercase()\
    \ == String::from(\"john\"),\n            Some(\"age\") => value.to_lowercase()\
    \ == String::from(\"36\"),\n            Some(\"city\") => value.to_lowercase()\
    \ == String::from(\"houston\"),\n            Some(\"state\") => value.to_lowercase()\
    \ == String::from(\"nc\"),\n            Some(\"zip\") => value.to_lowercase()\
    \ == String::from(\"12345\"),\n            _ => false,\n        }\n    })", " \
    \   !dict.is_empty() && dict.iter().all(|(key, value)| {\n        let key = key.to_lowercase();\n\
    \        let value = value.to_lowercase();\n        key == value || key.to_uppercase()\
    \ == value\n    })", "    !dict.is_empty() && dict.iter().all(|(key, value)| {\n\
    \        match key.to_lowercase() {\n            Some(\"name\") => value.to_lowercase()\
    \ == String::from(\"john\"),\n            Some(\"age\") => value.to_lowercase()\
    \ == String::from(\"36\"),\n            Some(\"city\") => value.to_lowercase()\
    \ == String::from(\"houston\"),\n            Some(\"state\") => value.to_lowercase()\
    \ == String::from(\"nc\"),\n            Some(\"zip\") => value.to_lowercase()\
    \ == String::from(\"12345\"),\n            _ => false,\n        }\n    })", '    dict.iter().all(|(_,
    v)| v.is_lowercase() || v.is_uppercase())', "    dict.iter().all(|(key, _)| {\n\
    \        key.to_lowercase() == key\n    })", "    dict.iter().all(|(key, _)| {\n\
    \        key.chars().all(|c| c.is_lowercase() || c.is_uppercase())\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.len() == 1 && value.chars().all(|c|\
    \ c.is_ascii_lowercase() || c.is_ascii_uppercase())\n    })", '    !dict.is_empty()
    && dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())', "    match\
    \ dict.len() {\n        0 => false,\n        _ => true,\n    }", '    dict.iter().all(|(key,
    _)| key.to_lowercase() == key)']
stop_tokens:
- "\n}"
