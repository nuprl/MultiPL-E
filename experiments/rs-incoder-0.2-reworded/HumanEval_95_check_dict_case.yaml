name: HumanEval_95_check_dict_case
language: rs
prompt: "use std::collections::HashMap;\n\n/// Given a HashMap, return true if all\
  \ keys are strings in lower \n/// case or all keys are strings in upper case, else\
  \ return false.\n/// The function should return false is the given HashMap is empty.\n\
  /// Examples:\n/// >>> check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"\
  apple\")), (String::from(\"b\"), String::from(\"banana\"))]))\n/// true\n/// >>>\
  \ check_dict_case(HashMap::from([(String::from(\"a\"), String::from(\"apple\")),\
  \ (String::from(\"A\"), String::from(\"banana\")), (String::from(\"B\"), String::from(\"\
  banana\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  a\"), String::from(\"apple\")), (8, String::from(\"banana\")), (String::from(\"\
  a\"), String::from(\"apple\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))]))\n/// false\n/// >>> check_dict_case(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))]))\n/// true\nfn check_dict_case(dict: HashMap<String, String>) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_dict_case;\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"b\"), String::from(\"banana\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"p\"), String::from(\"\
  pineapple\")), (String::from(\"A\"), String::from(\"banana\")), (String::from(\"\
  B\"), String::from(\"banana\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  p\"), String::from(\"pineapple\")), (String::from(\"5\"), String::from(\"banana\"\
  )), (String::from(\"a\"), String::from(\"apple\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  Name\"), String::from(\"John\")), (String::from(\"Age\"), String::from(\"36\")),\
  \ (String::from(\"City\"), String::from(\"Houston\"))])), false);\n    assert_eq!(candidate(HashMap::from([(String::from(\"\
  STATE\"), String::from(\"NC\")), (String::from(\"ZIP\"), String::from(\"12345\"\
  ))])), true);\n    assert_eq!(candidate(HashMap::from([(String::from(\"fruit\"),\
  \ String::from(\"Orange\")), (String::from(\"taste\"), String::from(\"Sweet\"))])),\
  \ true);\n    assert_eq!(candidate(HashMap::from([])), false);\n}\n"
completions: ['    dict.iter().all(|&(k, _)| k.is_lowercase() || k.is_uppercase())',
  "    if dict.is_empty() {\n        return false;\n    }\n    for k in dict.keys()\
    \ {\n        if k.len() != 1 {\n            return false;\n        }\n    }\n\
    \    for k in dict.keys() {\n        if k.len() != 1 {\n            return false;\n\
    \        }\n        if k.to_lowercase() != k.to_uppercase() {\n            return\
    \ false;\n        }\n    }\n    true", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(\"name\") => value.to_lowercase() == String::from(\"john\"\
    ),\n            Some(\"age\") => value.to_lowercase() == String::from(\"36\"),\n\
    \            Some(\"city\") => value.to_lowercase() == String::from(\"houston\"\
    ),\n            _ => false,\n        }\n    })", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.to_lowercase() == key {\n            true\n        } else\
    \ {\n            false\n        }\n    })", '    dict.iter().all(|(_, v)| v.is_lowercase()
    || v.is_uppercase())', '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    match dict.len() {\n        0 => false,\n        _ => true,\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        value.is_lowercase() || value.is_uppercase()\n    })", " \
    \   dict.iter().all(|(_, value)| {\n        value.is_lowercase() || value.is_uppercase()\n\
    \    })", "    dict.iter().all(|(key, value)| {\n        if key.to_lowercase()\
    \ == key {\n            true\n        } else {\n            false\n        }\n\
    \    })", '    dict.iter().all(|(_, v)| v.is_lowercase() || v.is_uppercase())',
  "    match dict.len() {\n        0 => false,\n        1 => true,\n        _ => false,\n\
    \    }", "    match dict.len() {\n        0 => false,\n        1 => true,\n  \
    \      _ => dict.values().iter().all(|s| s.is_lowercase()),\n    }", "    dict.iter().all(|(_,\
    \ value)| {\n        match value.to_lowercase() {\n            Some(value) =>\
    \ true,\n            None => false,\n        }\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        let mut key = key.to_lowercase();\n        let mut value = value.to_lowercase();\n\
    \        key == value || key.to_uppercase() == value\n    })", '    dict.iter().all(|&(k,
    _)| k.is_lowercase() || k.is_uppercase())', "    dict.iter().all(|(key, value)|\
    \ {\n        match key.to_lowercase() {\n            Some(lower) => value.to_lowercase()\
    \ == lower,\n            None => value.to_uppercase() == key,\n        }\n   \
    \ })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value == lower,\n            None => false,\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        if let Some(key)\
    \ = key.to_lowercase() {\n            true\n        } else if let Some(key) =\
    \ key.to_uppercase() {\n            true\n        } else {\n            false\n\
    \        }\n    })", "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(key_lower) => value.to_lowercase() == key_lower,\n     \
    \       None => false,\n        }\n    })", "    match dict.len() {\n        0\
    \ => false,\n        _ => true,\n    }", "    if dict.is_empty() {\n        return\
    \ false;\n    }\n    let mut keys = dict.keys();\n    while let Some(key) = keys.next()\
    \ {\n        if key.to_lowercase() == key {\n            continue;\n        }\n\
    \        if key.to_uppercase() == key {\n            continue;\n        }\n  \
    \      return false;\n    }\n    true", '    dict.iter().all(|&(k, _)| k.is_lowercase()
    || k.is_uppercase())', "    dict.iter().all(|(key, value)| {\n        match key.to_lowercase()\
    \ {\n            Some(lower) => value.to_lowercase() == lower,\n            None\
    \ => value.to_uppercase() == key,\n        }\n    })", "    dict.iter().all(|(_,\
    \ value)| {\n        let mut lower = String::new();\n        let mut upper = String::new();\n\
    \        value.chars().for_each(|c| {\n            match c {\n               \
    \ 'A' => {\n                    lower = String::from(c.to_string());\n       \
    \         }\n                'a' => {\n                    lower = String::from(c.to_string());\n\
    \                }\n                'B' => {\n                    upper = String::from(c.to_string());\n\
    \                }\n                'b' => {\n                    upper = String::from(c.to_string());\n\
    \                }\n                _ => {}\n            }\n        });\n    \
    \    lower == upper\n    })", "    if dict.is_empty() {\n        return false;\n\
    \    }\n    let mut keys = dict.keys();\n    while let Some(key) = keys.next()\
    \ {\n        if key.to_lowercase() == key {\n            continue;\n        }\n\
    \        if key.to_uppercase() == key {\n            continue;\n        }\n  \
    \      return false;\n    }\n    return true;", "    dict.iter().all(|(key, value)|\
    \ {\n        if key.to_lowercase() == key {\n            true\n        } else\
    \ {\n            false\n        }\n    })", "    dict.iter().all(|(_, value)|\
    \ {\n        value.chars().all(|c| c.is_ascii_lowercase() || c.is_ascii_uppercase())\n\
    \    })", "    match dict.len() {\n        0 => false,\n        _ => true,\n \
    \   }", "    match dict.len() {\n        0 => false,\n        _ => true,\n   \
    \ }"]
stop_tokens:
- "\n}"
