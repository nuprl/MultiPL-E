language: rs
name: HumanEval_119_match_parens
results:
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut last = stack.last().unwrap();\n        \
    \    if last == s.chars().last().unwrap() {\n                stack.pop();\n  \
    \          } else {\n                res += &last;\n            }\n        }\n\
    \    }\n    if stack.len() == 0 {\n        res += &stack[0];\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmpxlbs3l1g.rs:25:21\n\
    \   |\n25 |             if last == s.chars().last().unwrap() {\n   |         \
    \            ^^ no implementation for `&String == char`\n   |\n   = help: the\
    \ trait `PartialEq<char>` is not implemented for `&String`\n   = help: the following\
    \ other types implement trait `PartialEq<Rhs>`:\n             <&'a str as PartialEq<OsString>>\n\
    \             <&'a str as PartialEq<String>>\n             <&'b str as PartialEq<Cow<'a,\
    \ str>>>\n             <String as PartialEq<&'a str>>\n             <String as\
    \ PartialEq<Cow<'a, str>>>\n             <String as PartialEq<str>>\n        \
    \     <String as PartialEq>\n             <str as PartialEq<Cow<'a, str>>>\n \
    \          and 4 others\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            match stack.pop() {\n                Some(s) =>\
    \ {\n                    curr.push_str(s);\n                }\n              \
    \  None => return String::from(\"No\"),\n            }\n        }\n    }\n   \
    \ String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0m62of85.rs:26:35\n   |\n\
    26 |                     curr.push_str(s);\n   |                             \
    \      ^\n   |                                   |\n   |                     \
    \              expected `&str`, found struct `String`\n   |                  \
    \                 help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ if stack.len() == 0 {\n                return String::from(\"No\");\n      \
    \      }\n            let mut cur = stack.pop_front();\n            let mut cur2\
    \ = stack.pop_front();\n            if cur.chars().all(|c| c == ')') {\n     \
    \           if cur2.chars().all(|c| c == ')') {\n                    let mut s\
    \ = cur;\n                    s += cur2;\n                    s += \")\";\n  \
    \                  return s.to_string();\n                }\n            }\n \
    \       }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpby_j1j_a.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut cur = str;\n                while let Some(str) = stack.pop() {\n\
    \                    cur += str;\n                }\n                res += cur;\n\
    \            }\n        }\n    }\n    if stack.len() == 0 {\n        String::from(\"\
    No\")\n    } else {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpbxfl_6av.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0277]: cannot add-assign `_` to `&str`\n  --> /tmp/tmpbxfl_6av.rs:27:25\n\
    \   |\n27 |                     cur += str;\n   |                         ^^ no\
    \ implementation for `&str += _`\n   |\n   = help: the trait `AddAssign<_>` is\
    \ not implemented for `&str`\n   = help: the trait `AddAssign<&str>` is implemented\
    \ for `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    if str.is_empty() {\n                    res = \"Yes\";\n               \
    \     break;\n                }\n                if str.chars().any(|c| c == '(')\
    \ {\n                    res = \"Yes\";\n                    break;\n        \
    \        }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmd8euwi2.rs:26:27\n   |\n\
    16 |     let mut res = String::from(\"No\");\n   |                   ------------------\
    \ expected due to this value\n...\n26 |                     res = \"Yes\";\n \
    \  |                           ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                           |\n   |                           expected struct\
    \ `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmd8euwi2.rs:30:27\n\
    \   |\n16 |     let mut res = String::from(\"No\");\n   |                   ------------------\
    \ expected due to this value\n...\n30 |                     res = \"Yes\";\n \
    \  |                           ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                           |\n   |                           expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(popped_s) = stack.pop() {\n           \
    \     if popped_s == s {\n                    return String::from(\"Yes\");\n\
    \                }\n            }\n        }\n    }\n    String::from(\"No\")\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmporvppvvj.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            match stack.pop() {\n                Some(s) =>\
    \ {\n                    let mut s = s;\n                    let mut i = 0;\n\
    \                    while i < s.len() {\n                        if s.chars().any(|c|\
    \ c == ')') {\n                            break;\n                        }\n\
    \                        i += 1;\n                    }\n                    result.push_str(&s[..i]);\n\
    \                }\n                None => result.push_str(s),\n            }\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphneztm4p.rs:36:41\n   |\n\
    36 |                 None => result.push_str(s),\n   |                       \
    \                  ^\n   |                                         |\n   |   \
    \                                      expected `&str`, found struct `String`\n\
    \   |                                         help: consider borrowing here: `&s`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut cur = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop().unwrap();\n       \
    \     cur.push_str(s);\n            if s.chars().any(|c| c == ')') {\n       \
    \         stack.push(s);\n            } else {\n                cur.push_str(s);\n\
    \            }\n        }\n    }\n    if stack.is_empty() {\n        return String::from(\"\
    Yes\");\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxe78hzd_.rs:28:26\n   |\n\
    28 |             cur.push_str(s);\n   |                          ^\n   |     \
    \                     |\n   |                          expected `&str`, found\
    \ struct `String`\n   |                          help: consider borrowing here:\
    \ `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxe78hzd_.rs:32:30\n  \
    \ |\n32 |                 cur.push_str(s);\n   |                             \
    \ ^\n   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror: aborting due to 2 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(item) = stack.pop() {\n           \
    \     if item.chars().any(|c| c == ')') {\n                    res = \"Yes\";\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq66s9kdo.rs:26:27\n   |\n\
    16 |     let mut res = String::from(\"No\");\n   |                   ------------------\
    \ expected due to this value\n...\n26 |                     res = \"Yes\";\n \
    \  |                           ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                           |\n   |                           expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut res = String::from(\"No\");\n                let mut cur = str;\n\
    \                while let Some(str) = stack.pop() {\n                    let\
    \ mut cur = cur + str;\n                    if cur == \"()\" {\n             \
    \           res = String::from(\"Yes\");\n                        break;\n   \
    \                 }\n                }\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4fu28ea1.rs:28:41\n   |\n\
    28 |                     let mut cur = cur + str;\n   |                      \
    \                   ^^^\n   |                                         |\n   |\
    \                                         expected `&str`, found struct `String`\n\
    \   |                                         help: consider borrowing here: `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(c);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let c = stack.pop();\n            if c != '('\
    \ && c != ')' {\n                return String::from(\"No\");\n            }\n\
    \        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpperrvv18.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpperrvv18.rs:21:24\n\
    \   |\n21 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains(\"(\") {\n            stack.push(s);\n\
    \        } else {\n            if let Some(item) = stack.pop() {\n           \
    \     if item == s {\n                    res = \"Yes\";\n                   \
    \ break;\n                }\n            }\n        }\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu9v2pc1x.rs:23:27\n   |\n\
    16 |     let mut res = String::from(\"No\");\n   |                   ------------------\
    \ expected due to this value\n...\n23 |                     res = \"Yes\";\n \
    \  |                           ^^^^^- help: try using a conversion method: `.to_string()`\n\
    \   |                           |\n   |                           expected struct\
    \ `String`, found `&str`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1n7o_4kg.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1n7o_4kg.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            let mut s = stack.pop().unwrap();\n            s.push(c);\n\
    \        }\n        if stack.len() == 0 {\n            return String::from(\"\
    No\");\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmprd6lag54.rs:25:20\n\
    \   |\n25 |             s.push(c);\n   |                    ^ help: a local variable\
    \ with a similar name exists: `s`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.contains('(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    result.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        result.push_str(str);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpco57w7__.rs:22:33\n   |\n\
    22 |                 result.push_str(str);\n   |                             \
    \    ^^^\n   |                                 |\n   |                       \
    \          expected `&str`, found struct `String`\n   |                      \
    \           help: consider borrowing here: `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpco57w7__.rs:27:25\n   |\n27 |         result.push_str(str);\n\
    \   |                         ^^^\n   |                         |\n   |      \
    \                   expected `&str`, found struct `String`\n   |             \
    \            help: consider borrowing here: `&str`\n\nerror: aborting due to 2\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_front();\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp8eslqdgd.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(popped_s) = stack.pop() {\n           \
    \     if stack.is_empty() {\n                    return popped_s;\n          \
    \      }\n                let mut stack = VecDeque::new();\n                stack.push_back(popped_s);\n\
    \            }\n        }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp86iqe2q2.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  --> /tmp/tmp86iqe2q2.rs:28:33\n\
    \   |\n28 |                 let mut stack = VecDeque::new();\n   |           \
    \                      ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(s) = stack.pop() {\n               \
    \ result.push_str(s);\n            }\n        }\n    }\n    if let Some(s) = stack.pop()\
    \ {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkcv5n6n1.rs:25:33\n   |\n\
    25 |                 result.push_str(s);\n   |                               \
    \  ^\n   |                                 |\n   |                           \
    \      expected `&str`, found struct `String`\n   |                          \
    \       help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkcv5n6n1.rs:30:25\n   |\n30 |         result.push_str(s);\n   |\
    \                         ^\n   |                         |\n   |            \
    \             expected `&str`, found struct `String`\n   |                   \
    \      help: consider borrowing here: `&s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            stack.pop();\n        }\n        if stack.len() !=\
    \ 0 {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpt566qv1m.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut open = Vec::new();\n\
    \    let mut close = Vec::new();\n    let mut res = String::from(\"No\");\n  \
    \  for s in lst {\n        if s.is_empty() {\n            continue;\n        }\n\
    \        if s.chars().any(|c| c == '(') {\n            open.push(s);\n       \
    \ } else {\n            close.push(s);\n        }\n    }\n    if open.len() !=\
    \ close.len() {\n        res = \"No\";\n    } else {\n        match match_parens_helper(open,\
    \ close) {\n            None => res,\n            Some(mut s) => s,\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `match_parens_helper` in this scope\n\
    \  --> /tmp/tmpdn45i90y.rs:32:15\n   |\n32 |         match match_parens_helper(open,\
    \ close) {\n   |               ^^^^^^^^^^^^^^^^^^^ not found in this scope\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpdn45i90y.rs:30:15\n   |\n30 |  \
    \       res = \"No\";\n   |               ^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |               |\n   |               expected struct `String`,\
    \ found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpdn45i90y.rs:32:9\n\
    \   |\n29 |  /     if open.len() != close.len() {\n30 |  |         res = \"No\"\
    ;\n31 |  |     } else {\n32 |  |         match match_parens_helper(open, close)\
    \ {\n   |  |_________^\n33 | ||             None => res,\n34 | ||            \
    \ Some(mut s) => s,\n35 | ||         }\n   | ||_________^ expected `()`, found\
    \ struct `String`\n36 |  |     }\n   |  |_____- expected this to be `()`\n   |\n\
    help: consider using a semicolon here\n   |\n35 |         };\n   |          +\n\
    help: consider using a semicolon here\n   |\n36 |     };\n   |      +\nhelp: you\
    \ might have meant to return this value\n   |\n32 ~         return match match_parens_helper(open,\
    \ close) {\n33 |             None => res,\n34 |             Some(mut s) => s,\n\
    35 ~         };\n   |\n\nerror: aborting due to 3 previous errors\n\nSome errors\
    \ have detailed explanations: E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains(\"(\") {\n            stack.push(s);\n\
    \        } else {\n            if let Some(last) = stack.pop() {\n           \
    \     if last.contains(\"(\") && s.contains(\")\") {\n                    res\
    \ = \"Yes\";\n                    break;\n                }\n            }\n \
    \       }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2bt9zfu9.rs:23:27\n   |\n\
    23 |                     res = \"Yes\";\n   |                           ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains('(') || s.contains(')') {\n\
    \            stack.push(s);\n        } else {\n            if stack.len() == 0\
    \ {\n                res = String::from(\"Yes\");\n                break;\n  \
    \          }\n            let mut last = stack.last().unwrap();\n            if\
    \ last.contains('(') && s.contains(')') {\n                stack.push(s);\n  \
    \          } else if last.contains('(') && !s.contains(')') {\n              \
    \  res = String::from(\"Yes\");\n                break;\n            } else if\
    \ !last.contains('(') && s.contains(')') {\n                res = String::from(\"\
    No\");\n                break;\n            }\n        }\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmpgipg3rqc.rs:42:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   result += str;\n            }\n        }\n    }\n    if let Some(str) = stack.pop()\
    \ {\n        result += str;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:25:27\n   |\n\
    25 |                 result += str;\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:30:19\n\
    \   |\n30 |         result += str;\n   |                   ^^^\n   |         \
    \          |\n   |                   expected `&str`, found struct `String`\n\
    \   |                   help: consider borrowing here: `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(str) = stack.pop() {\n                if\
    \ str.is_empty() {\n                    return String::from(\"No\");\n       \
    \         }\n                if str.chars().any(|c| c == '(') {\n            \
    \        return String::from(\"Yes\");\n                }\n            }\n   \
    \     }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n    --> /tmp/tmpb4pg6uu5.rs:23:12\n\
    \     |\n16   |     for s in lst {\n     |         -    --- this reinitialization\
    \ might get skipped\n     |         |\n     |         move occurs because `s`\
    \ has type `String`, which does not implement the `Copy` trait\n...\n21   |  \
    \           stack.push(s);\n     |                        - value moved here\n\
    22   |         }\n23   |         if s.chars().any(|c| c == ')') {\n     |    \
    \        ^^^^^^^^^ value borrowed here after move\n     |\n     = note: borrow\
    \ occurs due to deref coercion to `str`\nnote: deref defined here\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut cur = String::new();\n            while\
    \ let Some(str) = stack.pop() {\n                cur.push_str(str);\n        \
    \    }\n            res.push_str(cur);\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2gqtugub.rs:26:30\n   |\n\
    26 |                 cur.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2gqtugub.rs:28:26\n\
    \   |\n28 |             res.push_str(cur);\n   |                          ^^^\n\
    \   |                          |\n   |                          expected `&str`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&cur`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_front();\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp8eslqdgd.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ if let Some(item) = stack.pop() {\n                if item == s {\n        \
    \            return String::from(\"Yes\");\n                }\n            }\n\
    \        }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpv5szgqjj.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   result += str;\n            }\n        }\n    }\n    if let Some(str) = stack.pop()\
    \ {\n        result += str;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:25:27\n   |\n\
    25 |                 result += str;\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:30:19\n\
    \   |\n30 |         result += str;\n   |                   ^^^\n   |         \
    \          |\n   |                   expected `&str`, found struct `String`\n\
    \   |                   help: consider borrowing here: `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            stack.pop_front();\n        }\n        if stack.len()\
    \ != 0 {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpmu4nvctd.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    if last.chars().any(|c| c == ')') {\n                    curr = curr.to_owned()\
    \ + last;\n                } else {\n                    return String::from(\"\
    No\");\n                }\n            } else {\n                return String::from(\"\
    No\");\n            }\n        }\n    }\n    curr\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx5jxk9x1.rs:26:46\n   |\n\
    26 |                     curr = curr.to_owned() + last;\n   |                \
    \                              ^^^^\n   |                                    \
    \          |\n   |                                              expected `&str`,\
    \ found struct `String`\n   |                                              help:\
    \ consider borrowing here: `&last`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if let Some(item) = stack.pop() {\n           \
    \     if item.chars().any(|c| c == ')') {\n                    res.push_str(item);\n\
    \                } else {\n                    res.push_str(\"No\");\n       \
    \         }\n            } else {\n                res.push_str(\"No\");\n   \
    \         }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate =\
    \ match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmphbry10n6.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ match stack.pop() {\n                Some(s) if s.chars().any(|c| c == ')')\
    \ => String::from(\"Yes\"),\n                Some(s) if s.chars().any(|c| c ==\
    \ '(') => String::from(\"No\"),\n                Some(s) => panic!(\"Stack underflow\"\
    ),\n                None => panic!(\"Stack underflow\"),\n            }\n    \
    \    }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate =\
    \ match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpbd5xjrap.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpbd5xjrap.rs:26:28\n\
    \   |\n23 | /             match stack.pop() {\n24 | |                 Some(s)\
    \ if s.chars().any(|c| c == ')') => String::from(\"Yes\"),\n   | |           \
    \                                                ------------------- this is found\
    \ to be of type `String`\n25 | |                 Some(s) if s.chars().any(|c|\
    \ c == '(') => String::from(\"No\"),\n   | |                                 \
    \                          ------------------ this is found to be of type `String`\n\
    26 | |                 Some(s) => panic!(\"Stack underflow\"),\n   | |       \
    \                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found\
    \ `()`\n27 | |                 None => panic!(\"Stack underflow\"),\n28 | |  \
    \           }\n   | |_____________- `match` arms have incompatible types\n   |\n\
    \   = note: this error originates in the macro `$crate::panic::panic_2015` (in\
    \ Nightly builds, run with -Z macro-backtrace for more info)\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if let Some(item) = stack.pop() {\n           \
    \     res.push_str(item);\n            }\n        }\n    }\n    if let Some(item)\
    \ = stack.pop() {\n        res.push_str(item);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp5m1mdveb.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut cur = s.clone();\n\
    \                while !cur.is_empty() {\n                    let c = cur.chars().next().unwrap();\n\
    \                    if c == '(' {\n                        stack.push(last);\n\
    \                        break;\n                    }\n                    if\
    \ c == ')' {\n                        let mut last = last.clone();\n         \
    \               break;\n                    }\n                    last = last.clone();\n\
    \                    cur = cur.clone();\n                }\n                let\
    \ mut last = last.clone();\n                while !stack.is_empty() {\n      \
    \              let s = stack.pop().clone();\n                    if s == last\
    \ {\n                        break;\n                    }\n                 \
    \   last = last.clone();\n                }\n                let mut last = last.clone();\n\
    \                let mut cur = s.clone();\n                while !cur.is_empty()\
    \ {\n                    let c = cur.chars().next().unwrap();\n              \
    \      if c == '(' {\n                        stack.push(last);\n            \
    \            break;\n                    }\n                    if c == ')' {\n\
    \                        let mut last = last.clone();\n                      \
    \  break;\n                    }\n                    last = last.clone();\n \
    \                   cur = cur.clone();\n                }\n                let\
    \ mut last = last.clone();\n                let mut cur = s.clone();\n       \
    \         while !cur.is_empty() {\n                    let c = cur.chars().next().unwrap();\n\
    \                    if c == '(' {\n                        stack.push(last);\n\
    \                        break;\n                    }\n                    if\
    \ c == ')' {\n                        let mut last = last.clone();\n         \
    \               break;\n                    }\n                    last = last.clone();\n\
    \                    cur = cur.clone();\n                }\n                let\
    \ mut last = last.clone();\n                let mut cur = s.clone();\n       \
    \         while !cur.is_empty() {\n                    let c = cur.chars().next().unwrap();\n\
    \                    if c == '(' {\n                        stack.push(last);\n\
    \                        break;\n                    }\n                    if\
    \ c == ')' {\n                        let mut last = last.clone();\n         \
    \               break;\n                    }\n                    last = last.clone();\n\
    \                    cur = cur.clone();\n                }\n                let\
    \ mut last = last.clone();\n                let mut cur = s.clone();\n       \
    \         while !cur.is_empty() {\n                    let c = cur.chars().next().unwrap();\n\
    \                    if c == '(' {\n                        stack.push(last);\n\
    \                        break;\n                    }\n                    if\
    \ c == ')' {\n                        let \n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpcxlr_eu_.rs:119:3\n\
    \    |\n14  | fn match_parens(lst: Vec<String>) -> String {\n    |           \
    \                                  - unclosed delimiter\n...\n17  |     for s\
    \ in lst {\n    |                  - unclosed delimiter\n...\n23  |         }\
    \ else {\n    |                - unclosed delimiter\n24  |             if let\
    \ Some(last) = stack.pop() {\n    |                                          \
    \   - unclosed delimiter\n...\n95  |                 while !cur.is_empty() {\n\
    \    |                                       - unclosed delimiter\n...\n101 |\
    \                     if c == ')' {\n    |                                 - this\
    \ delimiter might not be properly closed...\n102 |                         let\
    \ \n103 | }\n    | - ...as it matches this but it has different indentation\n\
    ...\n119 | }\n    |   ^\n\nerror: expected pattern, found `}`\n   --> /tmp/tmpcxlr_eu_.rs:103:1\n\
    \    |\n103 | }\n    | ^ expected pattern\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcxlr_eu_.rs:43:29\n   |\n43 |                     if s == last\
    \ {\n   |                             ^^^^\n   |                             |\n\
    \   |                             expected enum `Option`, found struct `String`\n\
    \   |                             help: try using a variant of the expected enum:\
    \ `Some(last)`\n   |\n   = note: expected enum `Option<String>`\n            found\
    \ struct `String`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpcxlr_eu_.rs:17:5\n\
    \    |\n14  |   fn match_parens(lst: Vec<String>) -> String {\n    |         \
    \                               ------ expected `String` because of return type\n\
    ...\n17  | /     for s in lst {\n18  | |         if s.is_empty() {\n19  | |  \
    \           continue;\n20  | |         }\n...   |\n118 | |     assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n119 | | }\n    | |__^ expected\
    \ struct `String`, found `()`\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(str) = stack.pop() {\n                if\
    \ str.is_empty() {\n                    return String::from(\"No\");\n       \
    \         }\n                if str.chars().any(|c| c == ')') {\n            \
    \        return String::from(\"Yes\");\n                }\n            }\n   \
    \     }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpmgsztioi.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains('(') || s.contains(')') {\n\
    \            stack.push(s);\n        } else {\n            if stack.len() == 0\
    \ {\n                res.push_str(s);\n            } else {\n                let\
    \ mut cur = stack.pop().unwrap();\n                let mut next = s.chars().next().unwrap();\n\
    \                while next != ')' {\n                    if cur == ')' {\n  \
    \                      break;\n                    }\n                    cur\
    \ = cur + next.to_string();\n                    next = s.chars().next().unwrap();\n\
    \                }\n                res.push_str(cur);\n            }\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n  \
    \  assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfmpcisl.rs:22:30\n   |\n\
    22 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0277]: can't compare `String` with `char`\n \
    \ --> /tmp/tmpyfmpcisl.rs:27:28\n   |\n27 |                     if cur == ')'\
    \ {\n   |                            ^^ no implementation for `String == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `String`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyfmpcisl.rs:30:33\n   |\n30 |\
    \                     cur = cur + next.to_string();\n   |                    \
    \             ^^^^^^^^^^^^^^^^\n   |                                 |\n   | \
    \                                expected `&str`, found struct `String`\n   |\
    \                                 help: consider borrowing here: `&next.to_string()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpyfmpcisl.rs:33:30\n   |\n33 |\
    \                 res.push_str(cur);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&cur`\n\nerror: aborting due to 4 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(s) = stack.pop() {\n               \
    \ result.push_str(s);\n            }\n        }\n    }\n    if let Some(s) = stack.pop()\
    \ {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkcv5n6n1.rs:25:33\n   |\n\
    25 |                 result.push_str(s);\n   |                               \
    \  ^\n   |                                 |\n   |                           \
    \      expected `&str`, found struct `String`\n   |                          \
    \       help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkcv5n6n1.rs:30:25\n   |\n30 |         result.push_str(s);\n   |\
    \                         ^\n   |                         |\n   |            \
    \             expected `&str`, found struct `String`\n   |                   \
    \      help: consider borrowing here: `&s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push(c);\n        } else {\n            if stack.len()\
    \ == 0 {\n                return String::from(\"No\");\n            }\n      \
    \      let top = stack.pop();\n            if top != ')' {\n                return\
    \ String::from(\"No\");\n            }\n        }\n    }\n    if stack.len() ==\
    \ 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpv5edpzdm.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpv5edpzdm.rs:21:24\n\
    \   |\n21 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(item) = stack.pop() {\n               \
    \ if item.chars().all(|c| c == ')') {\n                    return String::from(\"\
    Yes\");\n                }\n            }\n        }\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpe94bp9hf.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(' || c == '[' || c == '{') {\n            stack.push_back('(');\n   \
    \     }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back('[');\n\
    \        }\n        if s.chars().any(|c| c == '{') {\n            stack.push_back('{');\n\
    \        }\n        if s.chars().any(|c| c == ')' || c == ']' || c == '}') {\n\
    \            stack.pop();\n        }\n    }\n    if stack.len() == 0 {\n     \
    \   String::from(\"No\")\n    } else {\n        String::from(\"Yes\")\n    }\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpgq4m1ols.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop_front().unwrap();\n \
    \           if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    if stack.is_empty() {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp8lma6yli.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    if str.is_empty() {\n                    res = String::from(\"Yes\");\n \
    \                   break;\n                }\n                if str.chars().all(|c|\
    \ c == ')') {\n                    res = String::from(\"Yes\");\n            \
    \        break;\n                }\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmpbb0f7cld.rs:41:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if let Some(last) = stack.pop()\
    \ {\n                let mut last = last.clone();\n                let mut cur\
    \ = s.clone();\n                while !cur.is_empty() {\n                    if\
    \ cur.chars().any(|c| c == '(' || c == '[' || c == '{') {\n                  \
    \      stack.push(last);\n                        break;\n                   \
    \ }\n                    last = cur;\n                    cur = cur.clone();\n\
    \                }\n                res.push_str(last);\n            }\n     \
    \   }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n \
    \   assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuw5136zy.rs:35:30\n   |\n\
    35 |                 res.push_str(last);\n   |                              ^^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&last`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       for c in s.chars() {\n                if c == '(' {\n                \
    \    stack.push(c);\n                } else if c == ')' {\n                  \
    \  let mut cur = stack.pop().unwrap();\n                    if cur == c {\n  \
    \                      result.push_str(&s);\n                        return String::from(\"\
    Yes\");\n                    }\n                }\n            }\n        }\n\
    \    }\n    result.push_str(&s);\n    String::from(\"No\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmphy0gkrc6.rs:41:22\n\
    \   |\n41 |     result.push_str(&s);\n   |                      ^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphy0gkrc6.rs:30:32\n\
    \   |\n30 |                     stack.push(c);\n   |                         \
    \       ^- help: try using a conversion method: `.to_string()`\n   |         \
    \                       |\n   |                                expected struct\
    \ `String`, found `char`\n\nerror[E0277]: can't compare `String` with `char`\n\
    \  --> /tmp/tmphy0gkrc6.rs:33:28\n   |\n33 |                     if cur == c {\n\
    \   |                            ^^ no implementation for `String == char`\n \
    \  |\n   = help: the trait `PartialEq<char>` is not implemented for `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   let mut cur = str;\n                while let Some(str) = stack.pop() {\n\
    \                    cur += str;\n                }\n                res += cur;\n\
    \            }\n        }\n    }\n    if stack.len() == 0 {\n        String::from(\"\
    No\")\n    } else {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg5w_qs6z.rs:27:28\n   |\n\
    27 |                     cur += str;\n   |                            ^^^\n  \
    \ |                            |\n   |                            expected `&str`,\
    \ found struct `String`\n   |                            help: consider borrowing\
    \ here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpg5w_qs6z.rs:29:24\n\
    \   |\n29 |                 res += cur;\n   |                        ^^^\n   |\
    \                        |\n   |                        expected `&str`, found\
    \ struct `String`\n   |                        help: consider borrowing here:\
    \ `&cur`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push(s);\n        }\n        if s.chars().any(|c| c == ')'\
    \ || c == ']' || c == '}') {\n            if stack.len() == 0 {\n            \
    \    res.push_str(s);\n            } else {\n                let mut cur = stack.pop();\n\
    \                cur.push_str(s);\n                stack.push(cur);\n        \
    \    }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyip6x5ck.rs:26:30\n   |\n\
    26 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0599]: no method named `push_str` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmpyip6x5ck.rs:29:21\n   |\n29 | \
    \                cur.push_str(s);\n   |                     ^^^^^^^^ method not\
    \ found in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyip6x5ck.rs:30:28\n\
    \   |\n30 |                 stack.push(cur);\n   |                           \
    \ ^^^ expected struct `String`, found enum `Option`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Option<String>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            if let Some(item) = stack.pop() {\n               \
    \ if item.chars().all(|c| c == ')') {\n                    return String::from(\"\
    Yes\");\n                }\n            }\n        }\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpuerkd_oa.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.chars().collect::<String>();\n          \
    \      let mut last = last.chars().collect::<String>();\n                let mut\
    \ last = last.chars().collect::<String>();\n                let mut last = last.chars().collect::<String>();\n\
    \                let \n}\n\nfn main() {\n    let candidate = match_parens;\n \
    \   assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp_3d9hjfb.rs:72:3\n\
    \   |\n14 | fn match_parens(lst: Vec<String>) -> String {\n   |              \
    \                               - unclosed delimiter\n...\n17 |     for s in lst\
    \ {\n   |                  - unclosed delimiter\n...\n23 |         } else {\n\
    \   |                - unclosed delimiter\n24 |             if let Some(last)\
    \ = stack.pop() {\n   |                                             - this delimiter\
    \ might not be properly closed...\n...\n56 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n72 | }\n   |   ^\n\nerror: expected pattern,\
    \ found `}`\n  --> /tmp/tmp_3d9hjfb.rs:56:1\n   |\n56 | }\n   | ^ expected pattern\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_3d9hjfb.rs:17:5\n   |\n14 | \
    \  fn match_parens(lst: Vec<String>) -> String {\n   |                       \
    \                 ------ expected `String` because of return type\n...\n17 | /\
    \     for s in lst {\n18 | |         if s.is_empty() {\n19 | |             continue;\n\
    20 | |         }\n...  |\n71 | |     assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n72 | | }\n   | |__^ expected\
    \ struct `String`, found `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut res = String::from(\"Yes\");\n                let mut s = str;\n\
    \                while let Some(str) = stack.pop() {\n                    s =\
    \ s.push_str(str);\n                }\n                res = res.push_str(s);\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxvr4hyrb.rs:28:36\n   |\n\
    28 |                     s = s.push_str(str);\n   |                          \
    \          ^^^\n   |                                    |\n   |              \
    \                      expected `&str`, found struct `String`\n   |          \
    \                          help: consider borrowing here: `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxvr4hyrb.rs:28:25\n   |\n28 |              \
    \       s = s.push_str(str);\n   |                         ^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver\
    \ in-place\n  --> /tmp/tmpxvr4hyrb.rs:28:27\n   |\n28 |                     s\
    \ = s.push_str(str);\n   |                         - ^^^^^^^^ this call modifies\
    \ `s` in-place\n   |                         |\n   |                         you\
    \ probably want to use this value after calling the method...\n   = note: ...instead\
    \ of the `()` output of method `push_str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpxvr4hyrb.rs:30:36\n   |\n30 |                 res = res.push_str(s);\n\
    \   |                                    ^\n   |                             \
    \       |\n   |                                    expected `&str`, found struct\
    \ `String`\n   |                                    help: consider borrowing here:\
    \ `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxvr4hyrb.rs:30:23\n  \
    \ |\n30 |                 res = res.push_str(s);\n   |                       ^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmpxvr4hyrb.rs:30:27\n   |\n30 |         \
    \        res = res.push_str(s);\n   |                       --- ^^^^^^^^ this\
    \ call modifies `res` in-place\n   |                       |\n   |           \
    \            you probably want to use this value after calling the method...\n\
    \   = note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   let mut s = str;\n                while let Some(str) = stack.pop() {\n  \
    \                  s += str;\n                }\n                result += s;\n\
    \            }\n        }\n    }\n    if stack.len() == 0 {\n        result\n\
    \    } else {\n        String::from(\"No\")\n    }\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12nzbqo3.rs:27:26\n   |\n\
    27 |                     s += str;\n   |                          ^^^\n   |  \
    \                        |\n   |                          expected `&str`, found\
    \ struct `String`\n   |                          help: consider borrowing here:\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp12nzbqo3.rs:29:27\n\
    \   |\n29 |                 result += s;\n   |                           ^\n \
    \  |                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(item) = stack.pop() {\n            \
    \    if item.chars().any(|c| c == ')') {\n                    curr = curr.to_owned()\
    \ + item.to_owned();\n                } else {\n                    return String::from(\"\
    No\");\n                }\n            } else {\n                return String::from(\"\
    No\");\n            }\n        }\n    }\n    curr\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyqtnzqcr.rs:26:46\n   |\n\
    26 |                     curr = curr.to_owned() + item.to_owned();\n   |     \
    \                                         ^^^^^^^^^^^^^^^\n   |              \
    \                                |\n   |                                     \
    \         expected `&str`, found struct `String`\n   |                       \
    \                       help: consider borrowing here: `&item.to_owned()`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    if str.is_empty() {\n                    res = \"Yes\";\n               \
    \     break;\n                }\n                let mut cur = str;\n        \
    \        while let Some(str) = stack.pop() {\n                    cur = cur +\
    \ str;\n                }\n                if cur == s {\n                   \
    \ res = \"Yes\";\n                    break;\n                }\n            }\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvyquyrci.rs:26:27\n   |\n\
    26 |                     res = \"Yes\";\n   |                           ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `&str`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpvyquyrci.rs:31:33\n   |\n31 |\
    \                     cur = cur + str;\n   |                                 ^^^\n\
    \   |                                 |\n   |                                \
    \ expected `&str`, found struct `String`\n   |                               \
    \  help: consider borrowing here: `&str`\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmpvyquyrci.rs:34:27\n   |\n34 |                     res = \"Yes\"\
    ;\n   |                           ^^^^^- help: try using a conversion method:\
    \ `.to_string()`\n   |                           |\n   |                     \
    \      expected struct `String`, found `&str`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       if cur == s.chars().last().unwrap() {\n                res.push_str(&s);\n\
    \            } else {\n                res.push_str(&s);\n                res.push_str(&cur);\n\
    \            }\n        }\n    }\n    if stack.is_empty() {\n        res.push_str(\"\
    Yes\");\n    } else {\n        res.push_str(\"No\");\n    }\n    res\n}\n\nfn\
    \ main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `char`\n  --> /tmp/tmp7f6bdavz.rs:28:20\n\
    \   |\n28 |             if cur == s.chars().last().unwrap() {\n   |          \
    \          ^^ no implementation for `String == char`\n   |\n   = help: the trait\
    \ `PartialEq<char>` is not implemented for `String`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut cur = s.clone();\n\
    \                while !cur.is_empty() {\n                    if cur.chars().any(|c|\
    \ c == '(') {\n                        let mut s = String::new();\n          \
    \              s.push('(');\n                        s.push(')');\n          \
    \              s.push(*last);\n                        s.push(*cur);\n       \
    \                 res.push_str(s);\n                        last = s;\n      \
    \                  cur = String::new();\n                    } else {\n      \
    \                  cur = String::new();\n                    }\n             \
    \   }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2f_pu63v.rs:32:32\n   |\n\
    32 |                         s.push(*last);\n   |                            \
    \    ^^^^^ expected `char`, found `str`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2f_pu63v.rs:33:32\n   |\n33 |                         s.push(*cur);\n\
    \   |                                ^^^^ expected `char`, found `str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2f_pu63v.rs:34:38\n   |\n34 |              \
    \           res.push_str(s);\n   |                                      ^\n  \
    \ |                                      |\n   |                             \
    \         expected `&str`, found struct `String`\n   |                       \
    \               help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop_front().unwrap();\n     \
    \       if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpy6pp1pu4.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(item) = stack.pop() {\n               \
    \ if item.chars().all(|c| c == s.chars().first()) {\n                    return\
    \ String::from(\"Yes\");\n                }\n            }\n        }\n    }\n\
    \    String::from(\"No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp_uwms8kh.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0599]: no method named `first` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmp_uwms8kh.rs:25:56\n   |\n25 |                 if item.chars().all(|c|\
    \ c == s.chars().first()) {\n   |                                            \
    \            ^^^^^ method not found in `Chars<'_>`\n\nerror: aborting due to 2\
    \ previous errors\n\nSome errors have detailed explanations: E0433, E0599.\nFor\
    \ more information about an error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ if s.chars().any(|c| c == ')') {\n                res.push_str(s);\n       \
    \     } else {\n                return String::from(\"No\");\n            }\n\
    \        }\n    }\n    res.push_str(\"Yes\");\n    res\n}\n\nfn main() {\n   \
    \ let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13kf89ig.rs:29:30\n   |\n\
    29 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut open = Vec::new();\n\
    \    let mut close = Vec::new();\n    for s in lst {\n        if s.is_empty()\
    \ {\n            continue;\n        }\n        if s.chars().all(|c| c == '(')\
    \ {\n            stack.push(s);\n            open.push(0);\n        }\n      \
    \  if s.chars().all(|c| c == ')') {\n            close.push(stack.len());\n  \
    \          stack.pop();\n        }\n    }\n    if stack.len() == 0 {\n       \
    \ return \"No\";\n    }\n    if stack.len() == 1 {\n        if close.contains(stack.len())\
    \ && close.contains(open[0]) {\n            return \"Yes\";\n        }\n    }\n\
    \    if stack.len() > 1 {\n        if close.contains(stack.len()) && close.contains(open[0])\
    \ {\n            return \"Yes\";\n        }\n    }\n    if stack.len() > 2 {\n\
    \        if close.contains(stack.len()) && close.contains(open[0]) {\n       \
    \     return \"Yes\";\n        }\n    }\n    if stack.len() > 3 {\n        if\
    \ close.contains(stack.len()) && close.contains(open[0]) {\n            return\
    \ \"Yes\";\n        }\n    }\n    if stack.len() > 4 {\n        if close.contains(stack.len())\
    \ && close.contains(open[0]) {\n            return \"Yes\";\n        }\n    }\n\
    \    if stack.len() > 5 {\n        if close.contains(stack.len()) && close.contains(open[0])\
    \ {\n            return \"Yes\";\n        }\n    }\n    if stack.len() > 6 {\n\
    \        if close.contains(stack.len()) && close.contains(open[0]) {\n       \
    \     return \"Yes\";\n        }\n    }\n    if stack.len() > 7 {\n        if\
    \ close.contains(stack.len()) && close.contains(open[0]) {\n            return\
    \ \"Yes\";\n        }\n    }\n    if stack.len() > 8 {\n        if close.contains(stack.len())\
    \ && close.contains(open[0]) {\n            return \"Yes\";\n        }\n    }\n\
    \    if stack.len() > 9 {\n        if close.contains(stack.len()) && close.contains(open[0])\
    \ {\n            return \"Yes\";\n        }\n    }\n    if stack.len() > 10 {\n\
    \        if close.contains(stack.len()) && close.contains(open[0]) {\n       \
    \     return \"Yes\";\n        }\n    }\n    if stack.len() > 11 {\n        if\
    \ close.contains(stack.len()) && close.contains(open[0]) {\n            return\
    \ \"Yes\";\n        }\n    }\n    if stack.len() > 12 {\n        if close.contains(stack.len())\
    \ && close.contains(open[0]) {\n            return \"Yes\";\n        }\n    }\n\
    \    if stack.len() > 13 {\n        if close.contains(stack.len()\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpwmeec9fa.rs:117:3\n\
    \    |\n14  | fn match_parens(lst: Vec<String>) -> String {\n    |           \
    \                                  - unclosed delimiter\n...\n99  |     if stack.len()\
    \ > 13 {\n    |                         - this delimiter might not be properly\
    \ closed...\n100 |         if close.contains(stack.len()\n101 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n117 | }\n    |   ^\n\n\
    error: expected `{`, found `}`\n   --> /tmp/tmpwmeec9fa.rs:101:1\n    |\n100 |\
    \         if close.contains(stack.len()\n    |         -- this `if` expression\
    \ has a condition, but no block\n101 | }\n    | ^ expected `{`\n\nerror: mismatched\
    \ closing delimiter: `}`\n   --> /tmp/tmpwmeec9fa.rs:100:26\n    |\n14  | fn match_parens(lst:\
    \ Vec<String>) -> String {\n    |                                            \
    \ - closing delimiter possibly meant for this\n...\n100 |         if close.contains(stack.len()\n\
    \    |                          ^ unclosed delimiter\n101 | }\n    | ^ mismatched\
    \ closing delimiter\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwmeec9fa.rs:32:16\n\
    \   |\n14 | fn match_parens(lst: Vec<String>) -> String {\n   |              \
    \                        ------ expected `String` because of return type\n...\n\
    32 |         return \"No\";\n   |                ^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                |\n   |                expected\
    \ struct `String`, found `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwmeec9fa.rs:35:27\n\
    \   |\n35 |         if close.contains(stack.len()) && close.contains(open[0])\
    \ {\n   |                           ^^^^^^^^^^^\n   |                        \
    \   |\n   |                           expected `&usize`, found `usize`\n   | \
    \                          help: consider borrowing here: `&stack.len()`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwmeec9fa.rs:35:58\n   |\n35 |         if close.contains(stack.len())\
    \ && close.contains(open[0]) {\n   |                                         \
    \                 ^^^^^^^\n   |                           "
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            stack.pop();\n        }\n        if stack.is_empty()\
    \ {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpo3p2uz5x.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push((s, 0));\n\
    \        } else {\n            let (mut s, mut i) = stack.pop();\n           \
    \ if s.chars().all(|c| c == ')') {\n                i += 1;\n            }\n \
    \           if i == 0 {\n                result.push_str(s);\n            } else\
    \ {\n                result.push_str(\"No\");\n            }\n        }\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpct2j81x7.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if stack.is_empty() {\n                res.push_str(s);\n\
    \            } else {\n                let mut cur = stack.pop().unwrap();\n \
    \               cur.push_str(s);\n                stack.push(cur);\n         \
    \   }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw9lzr77f.rs:25:30\n   |\n\
    25 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw9lzr77f.rs:28:30\n\
    \   |\n28 |                 cur.push_str(s);\n   |                           \
    \   ^\n   |                              |\n   |                             \
    \ expected `&str`, found struct `String`\n   |                              help:\
    \ consider borrowing here: `&s`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop_front().unwrap();\n \
    \           if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpau1jy0lm.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if stack.is_empty() {\n                res.push_str(&s);\n\
    \            } else {\n                let mut s = String::from(\"\");\n     \
    \           while let Some(str) = stack.pop() {\n                    s.push_str(&str);\n\
    \                }\n                res.push_str(&s);\n            }\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n   \
    \ assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No()(\"`,\n right: `\"Yes\"`', /tmp/tmpylw7rh0d.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(c);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let c = stack.pop();\n            if c == '('\
    \ {\n                res.push_str(s);\n            } else {\n                res.push_str(&s[1..]);\n\
    \            }\n        }\n    }\n    if stack.is_empty() {\n        return String::from(\"\
    Yes\");\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpwo0n97ma.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpwo0n97ma.rs:22:24\n\
    \   |\n22 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpwo0n97ma.rs:29:30\n   |\n29 |                 res.push_str(s);\n\
    \   |                              ^\n   |                              |\n  \
    \ |                              expected `&str`, found struct `String`\n   |\
    \                              help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0425,\
    \ E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        }\n        if s.chars().any(|c| c == ')') {\n            if let Some(item)\
    \ = stack.pop() {\n                res.push_str(item);\n            }\n      \
    \  }\n    }\n    if stack.len() == 0 {\n        String::from(\"No\")\n    } else\
    \ {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpt8_hquai.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(item) = stack.pop() {\n            \
    \    if item == ')' {\n                    result += item;\n                }\
    \ else {\n                    result += item;\n                    result += s;\n\
    \                }\n            } else {\n                result += s;\n     \
    \       }\n        }\n    }\n    result\n}\n\nfn main() {\n    let candidate =\
    \ match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `char`\n  --> /tmp/tmpthujdzva.rs:25:25\n\
    \   |\n25 |                 if item == ')' {\n   |                         ^^\
    \ no implementation for `String == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpthujdzva.rs:26:31\n\
    \   |\n26 |                     result += item;\n   |                        \
    \       ^^^^\n   |                               |\n   |                     \
    \          expected `&str`, found struct `String`\n   |                      \
    \         help: consider borrowing here: `&item`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpthujdzva.rs:28:31\n   |\n28 |                     result += item;\n\
    \   |                               ^^^^\n   |                               |\n\
    \   |                               expected `&str`, found struct `String`\n \
    \  |                               help: consider borrowing here: `&item`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpthujdzva.rs:29:31\n   |\n29 |  \
    \                   result += s;\n   |                               ^\n   | \
    \                              |\n   |                               expected\
    \ `&str`, found struct `String`\n   |                               help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpthujdzva.rs:32:27\n\
    \   |\n32 |                 result += s;\n   |                           ^\n \
    \  |                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 5 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut last = stack.len();\n            while last\
    \ > 0 && stack.len() > 0 {\n                let top = stack.pop().unwrap();\n\
    \                if top == s.chars().last().unwrap() {\n                    result\
    \ += top;\n                    break;\n                }\n                last\
    \ -= 1;\n            }\n        }\n    }\n    result.to_string()\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `char`\n  --> /tmp/tmphn9nslj_.rs:27:24\n\
    \   |\n27 |                 if top == s.chars().last().unwrap() {\n   |      \
    \                  ^^ no implementation for `String == char`\n   |\n   = help:\
    \ the trait `PartialEq<char>` is not implemented for `String`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphn9nslj_.rs:28:31\n   |\n28 |              \
    \       result += top;\n   |                               ^^^\n   |         \
    \                      |\n   |                               expected `&str`,\
    \ found struct `String`\n   |                               help: consider borrowing\
    \ here: `&top`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(' || c == '[' || c == '{') {\n            stack.push_back(s);\n     \
    \   }\n        if s.chars().all(|c| c == ')' || c == ']' || c == '}') {\n    \
    \        if stack.is_empty() {\n                return String::from(\"No\");\n\
    \            }\n            let mut s = stack.pop_front().unwrap();\n        \
    \    if s.chars().all(|c| c == '(' || c == '[' || c == '{') {\n              \
    \  stack.push_back(s);\n            }\n        }\n    }\n    String::from(\"Yes\"\
    )\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmppjgiedrc.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop_front().unwrap();\n     \
    \       if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpy6pp1pu4.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains(\"(\") {\n            stack.push(s);\n\
    \        } else {\n            if stack.is_empty() {\n                res = \"\
    No\";\n                break;\n            }\n            let mut s = stack.pop().unwrap();\n\
    \            if s.contains(\"(\") {\n                stack.push(s);\n        \
    \    } else {\n                res = \"Yes\";\n                break;\n      \
    \      }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpa7afbmt9.rs:22:23\n   |\n\
    22 |                 res = \"No\";\n   |                       ^^^^- help: try\
    \ using a conversion method: `.to_string()`\n   |                       |\n  \
    \ |                       expected struct `String`, found `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpa7afbmt9.rs:29:23\n   |\n29 |              \
    \   res = \"Yes\";\n   |                       ^^^^^- help: try using a conversion\
    \ method: `.to_string()`\n   |                       |\n   |                 \
    \      expected struct `String`, found `&str`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(c);\n \
    \       }\n        if s.chars().any(|c| c == ')') {\n            if stack.len()\
    \ == 0 {\n                return String::from(\"No\");\n            }\n      \
    \      stack.pop();\n        }\n        res.push_str(&s);\n    }\n    if stack.len()\
    \ == 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\"\
    )\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpbsdu79x_.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpbsdu79x_.rs:22:24\n\
    \   |\n22 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   result += str;\n            }\n        }\n    }\n    if let Some(str) = stack.pop()\
    \ {\n        result += str;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:25:27\n   |\n\
    25 |                 result += str;\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:30:19\n\
    \   |\n30 |         result += str;\n   |                   ^^^\n   |         \
    \          |\n   |                   expected `&str`, found struct `String`\n\
    \   |                   help: consider borrowing here: `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push(c);\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let c = stack.pop();\n            if c != '('\
    \ && c != ')' {\n                return String::from(\"No\");\n            }\n\
    \        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpsyrffnkb.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpsyrffnkb.rs:21:24\n\
    \   |\n21 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(s) = stack.pop() {\n               \
    \ res.push_str(s);\n            }\n        }\n    }\n    if let Some(s) = stack.pop()\
    \ {\n        res.push_str(s);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1eyaw3ri.rs:25:30\n   |\n\
    25 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eyaw3ri.rs:30:22\n\
    \   |\n30 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(s);\n        } else {\n            let mut\
    \ cur = stack.pop();\n            if cur.is_empty() {\n                return\
    \ String::from(\"No\");\n            }\n            if cur.chars().any(|c| c ==\
    \ '(') {\n                return String::from(\"Yes\");\n            }\n     \
    \   }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate =\
    \ match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `is_empty` found for enum `Option` in the\
    \ current scope\n  --> /tmp/tmp4qgb9q9y.rs:24:20\n   |\n24 |             if cur.is_empty()\
    \ {\n   |                    ^^^^^^^^ method not found in `Option<String>`\n\n\
    error[E0599]: no method named `chars` found for enum `Option` in the current scope\n\
    \  --> /tmp/tmp4qgb9q9y.rs:27:20\n   |\n27 |             if cur.chars().any(|c|\
    \ c == '(') {\n   |                    ^^^^^ method not found in `Option<String>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if stack.is_empty() {\n                res.push_str(s);\n\
    \            } else {\n                let mut cur = stack.pop_front().unwrap();\n\
    \                let mut next = s.chars().collect::<Vec<char>>();\n          \
    \      while !next.is_empty() {\n                    if next.len() == 1 {\n  \
    \                      next.pop();\n                    } else {\n           \
    \             next.pop();\n                        next.pop();\n             \
    \       }\n                    if cur.chars().any(|c| c == next.first()) {\n \
    \                       cur += next.collect::<String>();\n                   \
    \ } else {\n                        break;\n                    }\n          \
    \      }\n                res.push_str(cur);\n            }\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmprzeb466j.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprzeb466j.rs:25:30\n   |\n25 |  \
    \               res.push_str(s);\n   |                              ^\n   |  \
    \                            |\n   |                              expected `&str`,\
    \ found struct `String`\n   |                              help: consider borrowing\
    \ here: `&s`\n\nerror[E0599]: the method `collect` exists for struct `Vec<char>`,\
    \ but its trait bounds were not satisfied\n   --> /tmp/tmprzeb466j.rs:37:37\n\
    \    |\n37  |                           cur += next.collect::<String>();\n   \
    \ |                                       ^^^^^^^ method cannot be called on `Vec<char>`\
    \ due to unsatisfied trait bounds\n    |\n    = note: the following trait bounds\
    \ were not satisfied:\n            `Vec<char>: Iterator`\n            which is\
    \ required by `&mut Vec<char>: Iterator`\n            `[char]: Iterator`\n   \
    \         which is required by `&mut [char]: Iterator`\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0433,\
    \ E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            match stack.pop() {\n                '(' | ')' => return\
    \ String::from(\"Yes\"),\n                _ => return String::from(\"No\"),\n\
    \            }\n        }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpo6bwxsrv.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            stack.pop();\n        }\n    }\n    if stack.is_empty()\
    \ {\n        return String::from(\"Yes\");\n    }\n    String::from(\"No\")\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmptlf565ri.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(pop) = stack.pop() {\n                if\
    \ pop != ')' {\n                    return String::from(\"No\");\n           \
    \     }\n            } else {\n                return String::from(\"No\");\n\
    \            }\n        }\n    }\n    if stack.len() == 0 {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp8uetfkr9.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(s) = stack.pop() {\n               \
    \ result.push_str(s);\n            }\n        }\n    }\n    if let Some(s) = stack.pop()\
    \ {\n        result.push_str(s);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkcv5n6n1.rs:25:33\n   |\n\
    25 |                 result.push_str(s);\n   |                               \
    \  ^\n   |                                 |\n   |                           \
    \      expected `&str`, found struct `String`\n   |                          \
    \       help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpkcv5n6n1.rs:30:25\n   |\n30 |         result.push_str(s);\n   |\
    \                         ^\n   |                         |\n   |            \
    \             expected `&str`, found struct `String`\n   |                   \
    \      help: consider borrowing here: `&s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains('(') || s.contains(')') {\n\
    \            stack.push_back(s);\n        } else {\n            if stack.len()\
    \ == 0 {\n                res.push_str(s);\n            } else {\n           \
    \     let mut cur = stack.pop_front();\n                cur.push_str(s);\n   \
    \             stack.push_back(cur);\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp7zfwfqi1.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7zfwfqi1.rs:22:30\n   |\n22 |  \
    \               res.push_str(s);\n   |                              ^\n   |  \
    \                            |\n   |                              expected `&str`,\
    \ found struct `String`\n   |                              help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ if s.chars().any(|c| c == ')') {\n                curr = curr.to_owned();\n\
    \            } else {\n                curr = curr.push_str(s);\n            }\n\
    \        }\n    }\n    curr.to_owned()\n}\n\nfn main() {\n    let candidate =\
    \ match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk90h1y8v.rs:31:38\n   |\n\
    31 |                 curr = curr.push_str(s);\n   |                          \
    \            ^\n   |                                      |\n   |            \
    \                          expected `&str`, found struct `String`\n   |      \
    \                                help: consider borrowing here: `&s`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpk90h1y8v.rs:31:24\n   |\n31 |              \
    \   curr = curr.push_str(s);\n   |                        ^^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver\
    \ in-place\n  --> /tmp/tmpk90h1y8v.rs:31:29\n   |\n31 |                 curr =\
    \ curr.push_str(s);\n   |                        ---- ^^^^^^^^ this call modifies\
    \ `curr` in-place\n   |                        |\n   |                       \
    \ you probably want to use this value after calling the method...\n   = note:\
    \ ...instead of the `()` output of method `push_str`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ if s.chars().all(|c| c == ')') {\n                curr = curr.to_owned() + s.to_owned();\n\
    \            } else {\n                return String::from(\"No\");\n        \
    \    }\n        }\n    }\n    curr\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzu54ny4c.rs:29:42\n   |\n\
    29 |                 curr = curr.to_owned() + s.to_owned();\n   |            \
    \                              ^^^^^^^^^^^^\n   |                            \
    \              |\n   |                                          expected `&str`,\
    \ found struct `String`\n   |                                          help: consider\
    \ borrowing here: `&s.to_owned()`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ if s.chars().any(|c| c == ')') {\n                result += s;\n           \
    \ } else {\n                return String::from(\"No\");\n            }\n    \
    \    }\n    }\n    match stack.is_empty() {\n        true => String::from(\"Yes\"\
    ),\n        false => String::from(\"No\"),\n    }\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmporhp70b_.rs:29:27\n   |\n\
    29 |                 result += s;\n   |                           ^\n   |    \
    \                       |\n   |                           expected `&str`, found\
    \ struct `String`\n   |                           help: consider borrowing here:\
    \ `&s`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().all(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push(s);\n        } else {\n            if let Some(last) =\
    \ stack.pop() {\n                if last.chars().all(|c| c == ')' || c == ']'\
    \ || c == '}') {\n                    res = \"Yes\".to_string();\n           \
    \     }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmp4dz2507v.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push(s);\n        }\n        if s.chars().any(|c| c == ')'\
    \ || c == ']' || c == '}') {\n            if stack.is_empty() {\n            \
    \    res.push_str(s);\n            } else {\n                let mut cur = stack.pop();\n\
    \                cur.push_str(s);\n                stack.push(cur);\n        \
    \    }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprxqylv6j.rs:26:30\n   |\n\
    26 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0599]: no method named `push_str` found for enum\
    \ `Option` in the current scope\n  --> /tmp/tmprxqylv6j.rs:29:21\n   |\n29 | \
    \                cur.push_str(s);\n   |                     ^^^^^^^^ method not\
    \ found in `Option<String>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmprxqylv6j.rs:30:28\n\
    \   |\n30 |                 stack.push(cur);\n   |                           \
    \ ^^^ expected struct `String`, found enum `Option`\n   |\n   = note: expected\
    \ struct `String`\n                found enum `Option<String>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0308, E0599.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   let mut s = str;\n                s.push(')');\n                s.push('(');\n\
    \                res.push_str(&s);\n            }\n        }\n    }\n    if res.is_empty()\
    \ {\n        String::from(\"No\")\n    } else {\n        String::from(\"Yes\"\
    )\n    }\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmp2qxonshw.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut cur = str;\n                while let Some(str) = stack.pop() {\n\
    \                    cur += str;\n                }\n                if cur ==\
    \ s {\n                    res = \"Yes\";\n                    break;\n      \
    \          }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmprvcatqr6.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmprvcatqr6.rs:30:27\n   |\n30 |  \
    \                   res = \"Yes\";\n   |                           ^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut cur = s.clone();\n\
    \                while !cur.is_empty() {\n                    if cur.chars().any(|c|\
    \ c == '(') {\n                        stack.push(last);\n                   \
    \     break;\n                    }\n                    if cur.chars().any(|c|\
    \ c == ')') {\n                        let mut cur = cur.clone();\n          \
    \              while !cur.is_empty() {\n                            if cur.chars().any(|c|\
    \ c == '(') {\n                                break;\n                      \
    \      }\n                            if cur.chars().any(|c| c == ')') {\n   \
    \                             break;\n                            }\n        \
    \                    cur = cur.clone();\n                        }\n         \
    \               break;\n                    }\n                    cur = cur.clone();\n\
    \                }\n                res.push_str(&last);\n            }\n    \
    \    }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpiuviypou.rs:25:21\n\
    \   |\n25 |                 let mut last = last.clone();\n   |               \
    \      ----^^^^\n   |                     |\n   |                     help: remove\
    \ this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]:\
    \ borrow of moved value: `last`\n  --> /tmp/tmpiuviypou.rs:47:30\n   |\n25 | \
    \                let mut last = last.clone();\n   |                     --------\
    \ move occurs because `last` has type `String`, which does not implement the `Copy`\
    \ trait\n...\n29 |                         stack.push(last);\n   |           \
    \                         ---- value moved here\n...\n47 |                 res.push_str(&last);\n\
    \   |                              ^^^^^ value borrowed here after move\n48 |\
    \             }\n   |             - value moved here, in previous iteration of\
    \ loop\n\nerror: aborting due to previous error; 1 warning emitted\n\nFor more\
    \ information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            if let Some(item) = stack.pop() {\n               \
    \ if item == s {\n                    return String::from(\"Yes\");\n        \
    \        }\n            }\n        }\n    }\n    String::from(\"No\")\n}\n\nfn\
    \ main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpzsdi6aol.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().all(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().all(|c|\
    \ c == ')') {\n            stack.pop();\n        }\n        if stack.len() !=\
    \ 0 {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpt566qv1m.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_back();\n        }\n    }\n    if\
    \ stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmppaezp4ij.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_back();\n        }\n    }\n    if\
    \ stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmppaezp4ij.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut s = str;\n                while let Some(str) = stack.pop() {\n \
    \                   s += str;\n                }\n                if s == s {\n\
    \                    res = \"Yes\";\n                }\n            }\n      \
    \  }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n  \
    \  assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5wvsvuis.rs:27:26\n   |\n\
    27 |                     s += str;\n   |                          ^^^\n   |  \
    \                        |\n   |                          expected `&str`, found\
    \ struct `String`\n   |                          help: consider borrowing here:\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5wvsvuis.rs:30:27\n\
    \   |\n30 |                     res = \"Yes\";\n   |                         \
    \  ^^^^^- help: try using a conversion method: `.to_string()`\n   |          \
    \                 |\n   |                           expected struct `String`,\
    \ found `&str`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop().unwrap();\n       \
    \     if s.chars().any(|c| c == ')') {\n                result += s;\n       \
    \     } else {\n                return String::from(\"No\");\n            }\n\
    \        }\n    }\n    match stack.is_empty() {\n        true => String::from(\"\
    Yes\"),\n        false => String::from(\"No\"),\n    }\n}\n\nfn main() {\n   \
    \ let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4e80tbba.rs:29:27\n   |\n\
    29 |                 result += s;\n   |                           ^\n   |    \
    \                       |\n   |                           expected `&str`, found\
    \ struct `String`\n   |                           help: consider borrowing here:\
    \ `&s`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    if last.chars().any(|c| c == ')') {\n                    result.push_str(last);\n\
    \                    result.push_str(s);\n                } else {\n         \
    \           result.push_str(last);\n                    result.push_str(s);\n\
    \                    result.push_str(\")\");\n                }\n            }\
    \ else {\n                result.push_str(s);\n            }\n        }\n    }\n\
    \    if stack.len() == 0 {\n        result.push_str(\"No\");\n    } else {\n \
    \       result.push_str(\"Yes\");\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl1kq6niv.rs:26:37\n   |\n\
    26 |                     result.push_str(last);\n   |                        \
    \             ^^^^\n   |                                     |\n   |         \
    \                            expected `&str`, found struct `String`\n   |    \
    \                                 help: consider borrowing here: `&last`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl1kq6niv.rs:27:37\n   |\n27 |              \
    \       result.push_str(s);\n   |                                     ^\n   |\
    \                                     |\n   |                                \
    \     expected `&str`, found struct `String`\n   |                           \
    \          help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpl1kq6niv.rs:29:37\n   |\n29 |                     result.push_str(last);\n\
    \   |                                     ^^^^\n   |                         \
    \            |\n   |                                     expected `&str`, found\
    \ struct `String`\n   |                                     help: consider borrowing\
    \ here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpl1kq6niv.rs:30:37\n\
    \   |\n30 |                     result.push_str(s);\n   |                    \
    \                 ^\n   |                                     |\n   |        \
    \                             expected `&str`, found struct `String`\n   |   \
    \                                  help: consider borrowing here: `&s`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpl1kq6niv.rs:34:33\n   |\n34 |              \
    \   result.push_str(s);\n   |                                 ^\n   |        \
    \                         |\n   |                                 expected `&str`,\
    \ found struct `String`\n   |                                 help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 5 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.contains('(') {\n            stack.push(s);\n\
    \        } else {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut last = stack.last().unwrap();\n   \
    \         if last == ')' {\n                stack.pop();\n            } else {\n\
    \                return String::from(\"No\");\n            }\n        }\n    }\n\
    \    if stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n   \
    \ let mut last = stack.last().unwrap();\n    if last == ')' {\n        stack.pop();\n\
    \    } else {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmpk3w05vbm.rs:25:21\n\
    \   |\n25 |             if last == ')' {\n   |                     ^^ no implementation\
    \ for `&String == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&String`\n\nerror[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmpk3w05vbm.rs:36:13\n\
    \   |\n36 |     if last == ')' {\n   |             ^^ no implementation for `&String\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&String`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back('(');\n\
    \        }\n        if s.chars().any(|c| c == ')') {\n            if let Some(pop)\
    \ = stack.pop() {\n                if pop == '(' {\n                    res =\
    \ \"Yes\".to_string();\n                    break;\n                }\n      \
    \      }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpjet99rdi.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       for c in s.chars() {\n                if c == '(' {\n                \
    \    stack.push(c);\n                } else if c == ')' {\n                  \
    \  if stack.len() == 0 {\n                        return String::from(\"No\");\n\
    \                    }\n                    let mut cur = stack.pop().unwrap();\n\
    \                    if cur == c {\n                        result.push_str(&s);\n\
    \                        return String::from(\"Yes\");\n                    }\n\
    \                }\n            }\n        }\n    }\n    result.push_str(&s);\n\
    \    String::from(\"Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmp8ybip2tv.rs:44:22\n\
    \   |\n44 |     result.push_str(&s);\n   |                      ^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ybip2tv.rs:30:32\n\
    \   |\n30 |                     stack.push(c);\n   |                         \
    \       ^- help: try using a conversion method: `.to_string()`\n   |         \
    \                       |\n   |                                expected struct\
    \ `String`, found `char`\n\nerror[E0277]: can't compare `String` with `char`\n\
    \  --> /tmp/tmp8ybip2tv.rs:36:28\n   |\n36 |                     if cur == c {\n\
    \   |                            ^^ no implementation for `String == char`\n \
    \  |\n   = help: the trait `PartialEq<char>` is not implemented for `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(c);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop();\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpy9rf0gip.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpy9rf0gip.rs:21:24\n\
    \   |\n21 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push(s);\n        } else {\n            if let Some(last) =\
    \ stack.pop() {\n                if last.chars().any(|c| c == ')' || c == ']'\
    \ || c == '}') {\n                    res = \"Yes\";\n                    break;\n\
    \                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvqcmep53.rs:26:27\n   |\n\
    26 |                     res = \"Yes\";\n   |                           ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(s) = stack.pop() {\n               \
    \ res.push_str(s);\n            }\n        }\n    }\n    if let Some(s) = stack.pop()\
    \ {\n        res.push_str(s);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1eyaw3ri.rs:25:30\n   |\n\
    25 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eyaw3ri.rs:30:22\n\
    \   |\n30 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop_front().unwrap();\n \
    \           if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    if stack.len() == 0 {\n        return String::from(\"\
    Yes\");\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpzvl5ewps.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(s);\n        } else {\n            if let\
    \ Some(last) = stack.pop() {\n                if last.chars().any(|c| c == ')')\
    \ {\n                    return String::from(\"Yes\");\n                }\n  \
    \          }\n        }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n \
    \   let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmp_ve7tvq5.rs:38:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains('(') {\n            stack.push(s);\n\
    \        } else {\n            if stack.is_empty() {\n                res.push_str(s);\n\
    \            } else {\n                let mut s = String::from(\"\");\n     \
    \           while let Some(str) = stack.pop() {\n                    s += str;\n\
    \                }\n                res.push_str(s);\n            }\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpcu9wkrf9.rs:22:30\n   |\n\
    22 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcu9wkrf9.rs:26:26\n\
    \   |\n26 |                     s += str;\n   |                          ^^^\n\
    \   |                          |\n   |                          expected `&str`,\
    \ found struct `String`\n   |                          help: consider borrowing\
    \ here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcu9wkrf9.rs:28:30\n\
    \   |\n28 |                 res.push_str(s);\n   |                           \
    \   ^\n   |                              |\n   |                             \
    \ expected `&str`, found struct `String`\n   |                              help:\
    \ consider borrowing here: `&s`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push_back(s);\n        } else {\n            if let Some(str)\
    \ = stack.pop() {\n                let mut s = str;\n                while let\
    \ Some(str) = stack.pop() {\n                    s += str;\n                }\n\
    \                if s == s {\n                    res = \"Yes\";\n           \
    \         break;\n                }\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp9lgvi9u8.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp9lgvi9u8.rs:30:27\n   |\n30 |  \
    \                   res = \"Yes\";\n   |                           ^^^^^- help:\
    \ try using a conversion method: `.to_string()`\n   |                        \
    \   |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0433.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_front();\n        }\n    }\n    if\
    \ stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp_ha0kfdy.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       for c in s.chars() {\n                if c == '(' {\n                \
    \    stack.push(c);\n                } else if c == ')' {\n                  \
    \  let mut cur = stack.pop().unwrap();\n                    if cur == c {\n  \
    \                      result.push_str(&s);\n                        return String::from(\"\
    Yes\");\n                    }\n                }\n            }\n        }\n\
    \    }\n    result.push_str(&s);\n    String::from(\"No\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `s` in this scope\n  --> /tmp/tmpcn3wnzn8.rs:41:22\n\
    \   |\n41 |     result.push_str(&s);\n   |                      ^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcn3wnzn8.rs:30:32\n\
    \   |\n30 |                     stack.push(c);\n   |                         \
    \       ^- help: try using a conversion method: `.to_string()`\n   |         \
    \                       |\n   |                                expected struct\
    \ `String`, found `char`\n\nerror[E0277]: can't compare `String` with `char`\n\
    \  --> /tmp/tmpcn3wnzn8.rs:33:28\n   |\n33 |                     if cur == c {\n\
    \   |                            ^^ no implementation for `String == char`\n \
    \  |\n   = help: the trait `PartialEq<char>` is not implemented for `String`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0425.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut last = last.chars().collect::<String>();\n\
    \                last.push(c);\n                result += last;\n            }\
    \ else {\n                let mut last = s.clone();\n                let mut last\
    \ = last.chars().collect::<String>();\n                last.push(c);\n       \
    \         result += last;\n            }\n        }\n    }\n    if stack.len()\
    \ == 0 {\n        String::from(\"Yes\")\n    } else {\n        String::from(\"\
    No\")\n    }\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpw929ube8.rs:27:27\n\
    \   |\n27 |                 last.push(c);\n   |                           ^ help:\
    \ a local variable with a similar name exists: `s`\n\nerror[E0425]: cannot find\
    \ value `c` in this scope\n  --> /tmp/tmpw929ube8.rs:32:27\n   |\n32 |       \
    \          last.push(c);\n   |                           ^ help: a local variable\
    \ with a similar name exists: `s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw929ube8.rs:28:27\n\
    \   |\n28 |                 result += last;\n   |                           ^^^^\n\
    \   |                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&last`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw929ube8.rs:33:27\n\
    \   |\n33 |                 result += last;\n   |                           ^^^^\n\
    \   |                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&last`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(c);\n\
    \        }\n        if s.chars().any(|c| c == ')') {\n            if stack.len()\
    \ == 0 {\n                res.push_str(&s);\n                break;\n        \
    \    }\n            let c = stack.pop();\n            if c != '(' && c != ')'\
    \ {\n                res.push_str(&s);\n                break;\n            }\n\
    \        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp58gs8cr4.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp58gs8cr4.rs:22:24\n\
    \   |\n22 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.contains('(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpshpymblk.rs:22:30\n   |\n\
    22 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpshpymblk.rs:27:22\n\
    \   |\n27 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ if let Some(item) = stack.pop_front() {\n                if item.chars().any(|c|\
    \ c == ')') {\n                    stack.push_back(item.clone());\n          \
    \      } else {\n                    return String::from(\"No\");\n          \
    \      }\n            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn\
    \ main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpqz4wb_fp.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   if str.is_empty() {\n                    res += \"No\";\n                }\
    \ else {\n                    res += \"Yes\";\n                }\n           \
    \ }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"No\"`', /tmp/tmpqam9xjsv.rs:39:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    if last.chars().all(|c| c == ')') {\n                    result += last;\n\
    \                } else {\n                    return String::from(\"No\");\n\
    \                }\n            } else {\n                return String::from(\"\
    No\");\n            }\n        }\n    }\n    result.into_owned()\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp66kurobr.rs:26:31\n   |\n\
    26 |                     result += last;\n   |                               ^^^^\n\
    \   |                               |\n   |                               expected\
    \ `&str`, found struct `String`\n   |                               help: consider\
    \ borrowing here: `&last`\n\nerror[E0599]: no method named `into_owned` found\
    \ for struct `String` in the current scope\n  --> /tmp/tmp66kurobr.rs:35:12\n\
    \   |\n35 |     result.into_owned()\n   |            ^^^^^^^^^^ method not found\
    \ in `String`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut new_str = str;\n                while let Some(str) = stack.pop()\
    \ {\n                    new_str = new_str.push_str(str);\n                }\n\
    \                res = res.push_str(new_str);\n            }\n        }\n    }\n\
    \    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3yymv_5t.rs:27:48\n   |\n\
    27 |                     new_str = new_str.push_str(str);\n   |              \
    \                                  ^^^\n   |                                 \
    \               |\n   |                                                expected\
    \ `&str`, found struct `String`\n   |                                        \
    \        help: consider borrowing here: `&str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3yymv_5t.rs:27:31\n   |\n27 |                     new_str = new_str.push_str(str);\n\
    \   |                               ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`,\
    \ found `()`\n   |\nnote: method `push_str` modifies its receiver in-place\n \
    \ --> /tmp/tmp3yymv_5t.rs:27:39\n   |\n27 |                     new_str = new_str.push_str(str);\n\
    \   |                               ------- ^^^^^^^^ this call modifies `new_str`\
    \ in-place\n   |                               |\n   |                       \
    \        you probably want to use this value after calling the method...\n   =\
    \ note: ...instead of the `()` output of method `push_str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3yymv_5t.rs:29:36\n   |\n29 |                 res = res.push_str(new_str);\n\
    \   |                                    ^^^^^^^\n   |                       \
    \             |\n   |                                    expected `&str`, found\
    \ struct `String`\n   |                                    help: consider borrowing\
    \ here: `&new_str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3yymv_5t.rs:29:23\n\
    \   |\n29 |                 res = res.push_str(new_str);\n   |               \
    \        ^^^^^^^^^^^^^^^^^^^^^ expected struct `String`, found `()`\n   |\nnote:\
    \ method `push_str` modifies its receiver in-place\n  --> /tmp/tmp3yymv_5t.rs:29:27\n\
    \   |\n29 |                 res = res.push_str(new_str);\n   |               \
    \        --- ^^^^^^^^ this call modifies `res` in-place\n   |                \
    \       |\n   |                       you probably want to use this value after\
    \ calling the method...\n   = note: ...instead of the `()` output of method "
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            stack.pop();\n        }\n        if stack.len() !=\
    \ 0 {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpod0m417w.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   let mut iter = str.chars();\n                let mut cur = iter.next();\n\
    \                while cur.unwrap() != ')' {\n                    cur = iter.next();\n\
    \                }\n                res.push_str(&*cur);\n            }\n    \
    \    }\n    }\n    if stack.len() == 0 {\n        String::from(\"Yes\")\n    }\
    \ else {\n        String::from(\"No\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `Option<char>` cannot be dereferenced\n  --> /tmp/tmp4eeat0ab.rs:30:31\n\
    \   |\n30 |                 res.push_str(&*cur);\n   |                       \
    \        ^^^^\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push_back('(');\n        } else {\n            stack.pop_front();\n\
    \        }\n        if stack.len() == 0 {\n            res = \"Yes\".to_string();\n\
    \            break;\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpe1_n6obw.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            let mut cur = stack.front();\n            while\
    \ !stack.is_empty() && cur.chars().any(|c| c == ')') {\n                stack.pop_front();\n\
    \            }\n            if stack.is_empty() {\n                res.push_str(&cur);\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp7jy4czk8.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut cur = String::new();\n            while\
    \ let Some(str) = stack.pop() {\n                cur.push_str(str);\n        \
    \        if s.chars().any(|c| c == ')') {\n                    result.push_str(cur);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvnzsgwcs.rs:26:30\n   |\n\
    26 |                 cur.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvnzsgwcs.rs:28:37\n\
    \   |\n28 |                     result.push_str(cur);\n   |                  \
    \                   ^^^\n   |                                     |\n   |    \
    \                                 expected `&str`, found struct `String`\n   |\
    \                                     help: consider borrowing here: `&cur`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   if str.is_empty() {\n                    result.push_str(str);\n         \
    \       } else {\n                    result.push_str(str);\n                \
    \    result.push_str(s);\n                }\n            } else {\n          \
    \      result.push_str(s);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        result.push_str(str);\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd80nje6r.rs:26:37\n   |\n\
    26 |                     result.push_str(str);\n   |                         \
    \            ^^^\n   |                                     |\n   |           \
    \                          expected `&str`, found struct `String`\n   |      \
    \                               help: consider borrowing here: `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpd80nje6r.rs:28:37\n   |\n28 |              \
    \       result.push_str(str);\n   |                                     ^^^\n\
    \   |                                     |\n   |                            \
    \         expected `&str`, found struct `String`\n   |                       \
    \              help: consider borrowing here: `&str`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd80nje6r.rs:29:37\n   |\n29 |                     result.push_str(s);\n\
    \   |                                     ^\n   |                            \
    \         |\n   |                                     expected `&str`, found struct\
    \ `String`\n   |                                     help: consider borrowing\
    \ here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpd80nje6r.rs:32:33\n\
    \   |\n32 |                 result.push_str(s);\n   |                        \
    \         ^\n   |                                 |\n   |                    \
    \             expected `&str`, found struct `String`\n   |                   \
    \              help: consider borrowing here: `&s`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpd80nje6r.rs:37:25\n   |\n37 |         result.push_str(str);\n\
    \   |                         ^^^\n   |                         |\n   |      \
    \                   expected `&str`, found struct `String`\n   |             \
    \            help: consider borrowing here: `&str`\n\nerror: aborting due to 5\
    \ previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       if cur.chars().all(|c| c == ')') {\n                res.push_str(&cur);\n\
    \            } else {\n                return String::from(\"No\");\n        \
    \    }\n        }\n    }\n    if stack.is_empty() {\n        return String::from(\"\
    Yes\");\n    }\n    return String::from(\"No\");\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmp1uyjrnps.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut cur = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ let mut cur = String::new();\n            for c in s.chars() {\n           \
    \     if c == '(' {\n                    cur.push_str(&s);\n                }\
    \ else if c == ')' {\n                    if cur.len() == 0 {\n              \
    \          return String::from(\"No\");\n                    }\n             \
    \       let s = cur.pop().unwrap();\n                    let mut cur = String::new();\n\
    \                } else {\n                    cur.push_str(&c);\n           \
    \     }\n            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqpckfmb0.rs:39:34\n   |\n\
    39 |                     cur.push_str(&c);\n   |                             \
    \     ^^ expected `str`, found `char`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&char`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    if last.chars().any(|c| c == ')') {\n                    curr.push_str(last);\n\
    \                    curr.push_str(s);\n                } else {\n           \
    \         curr.push_str(last);\n                    curr.push_str(s);\n      \
    \              curr.push_str(\")\");\n                }\n            } else {\n\
    \                curr.push_str(s);\n            }\n        }\n    }\n    curr\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_04k8jz1.rs:26:35\n   |\n\
    26 |                     curr.push_str(last);\n   |                          \
    \         ^^^^\n   |                                   |\n   |               \
    \                    expected `&str`, found struct `String`\n   |            \
    \                       help: consider borrowing here: `&last`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_04k8jz1.rs:27:35\n   |\n27 |              \
    \       curr.push_str(s);\n   |                                   ^\n   |    \
    \                               |\n   |                                   expected\
    \ `&str`, found struct `String`\n   |                                   help:\
    \ consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_04k8jz1.rs:29:35\n\
    \   |\n29 |                     curr.push_str(last);\n   |                   \
    \                ^^^^\n   |                                   |\n   |        \
    \                           expected `&str`, found struct `String`\n   |     \
    \                              help: consider borrowing here: `&last`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_04k8jz1.rs:30:35\n   |\n30 |              \
    \       curr.push_str(s);\n   |                                   ^\n   |    \
    \                               |\n   |                                   expected\
    \ `&str`, found struct `String`\n   |                                   help:\
    \ consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_04k8jz1.rs:34:31\n\
    \   |\n34 |                 curr.push_str(s);\n   |                          \
    \     ^\n   |                               |\n   |                          \
    \     expected `&str`, found struct `String`\n   |                           \
    \    help: consider borrowing here: `&s`\n\nerror: aborting due to 5 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   let mut s = str;\n                while let Some(str) = stack.pop() {\n  \
    \                  s += str;\n                }\n                res.push_str(s);\n\
    \            } else {\n                res.push_str(s);\n            }\n     \
    \   }\n    }\n    if res.chars().any(|c| c == '(') {\n        String::from(\"\
    Yes\")\n    } else {\n        String::from(\"No\")\n    }\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpll3al_oa.rs:27:26\n   |\n\
    27 |                     s += str;\n   |                          ^^^\n   |  \
    \                        |\n   |                          expected `&str`, found\
    \ struct `String`\n   |                          help: consider borrowing here:\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpll3al_oa.rs:29:30\n\
    \   |\n29 |                 res.push_str(s);\n   |                           \
    \   ^\n   |                              |\n   |                             \
    \ expected `&str`, found struct `String`\n   |                              help:\
    \ consider borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpll3al_oa.rs:31:30\n\
    \   |\n31 |                 res.push_str(s);\n   |                           \
    \   ^\n   |                              |\n   |                             \
    \ expected `&str`, found struct `String`\n   |                              help:\
    \ consider borrowing here: `&s`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(c);\n        } else {\n            if let\
    \ Some(c) = (&stack.pop()).pop() {\n                if c == '(' {\n          \
    \          stack.push(c);\n                } else {\n                    return\
    \ String::from(\"No\");\n                }\n            } else {\n           \
    \     return String::from(\"No\");\n            }\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpm7i__ilz.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmpm7i__ilz.rs:21:24\n\
    \   |\n21 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ let mut cur = stack.pop_front();\n            while !stack.is_empty() && cur.chars().any(|c|\
    \ c == ')') {\n                cur = stack.pop_front();\n            }\n     \
    \       if !stack.is_empty() && cur.chars().any(|c| c == '(') {\n            \
    \    stack.push_back(cur);\n            } else {\n                return String::from(\"\
    No\");\n            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpyp519vk1.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if stack.len() == 0 {\n\
    \                return String::from(\"No\");\n            }\n            let\
    \ mut cur = stack.pop().unwrap();\n            for c in s.chars() {\n        \
    \        if c == '(' || c == '[' || c == '{' {\n                    stack.push(c);\n\
    \                } else if c == '}' || c == ')' {\n                    if stack.len()\
    \ == 0 {\n                        return String::from(\"No\");\n             \
    \       }\n                    let mut cur = stack.pop().unwrap();\n         \
    \           if cur == c {\n                        result.push_str(&cur);\n  \
    \                  } else {\n                        result.push_str(&cur);\n\
    \                        result.push_str(&c);\n                    }\n       \
    \         } else {\n                    result.push_str(&cur);\n             \
    \       result.push_str(&c);\n                }\n            }\n        }\n  \
    \  }\n    result.push_str(&stack.pop().unwrap());\n    result.push_str(&stack.pop().unwrap());\n\
    \    result.push_str(&stack.pop().unwrap());\n    result\n}\n\nfn main() {\n \
    \   let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76pa64de.rs:30:32\n   |\n\
    30 |                     stack.push(c);\n   |                                ^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \              |\n   |                                expected struct `String`,\
    \ found `char`\n\nerror[E0277]: can't compare `String` with `char`\n  --> /tmp/tmp76pa64de.rs:36:28\n\
    \   |\n36 |                     if cur == c {\n   |                          \
    \  ^^ no implementation for `String == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp76pa64de.rs:40:41\n\
    \   |\n40 |                         result.push_str(&c);\n   |               \
    \                          ^^ expected `str`, found `char`\n   |\n   = note: expected\
    \ reference `&str`\n              found reference `&char`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp76pa64de.rs:44:37\n   |\n44 |                     result.push_str(&c);\n\
    \   |                                     ^^ expected `str`, found `char`\n  \
    \ |\n   = note: expected reference `&str`\n              found reference `&char`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            let mut last = stack.pop_front();\n           \
    \ if last == s.chars().last().unwrap() {\n                res.push_str(&stack.pop_front().unwrap());\n\
    \            } else {\n                res.push_str(&s);\n            }\n    \
    \    }\n    }\n    if res.is_empty() {\n        String::from(\"No\")\n    } else\
    \ {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmphjzxuu11.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(last) = stack.pop() {\n           \
    \     if last.chars().any(|c| c == ')') {\n                    res = \"Yes\";\n\
    \                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzm0fiuix.rs:26:27\n   |\n\
    26 |                     res = \"Yes\";\n   |                           ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if let Some(item) = stack.pop_front() {\n     \
    \           let mut s = item.clone();\n                s.push(')');\n        \
    \        res.push_str(s);\n            }\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmppsvk_hfw.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_front();\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmplsfnx8tr.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop_front().unwrap();\n     \
    \       if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpy6pp1pu4.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(s) = stack.pop() {\n               \
    \ res.push_str(s);\n            }\n        }\n    }\n    if let Some(s) = stack.pop()\
    \ {\n        res.push_str(s);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1eyaw3ri.rs:25:30\n   |\n\
    25 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1eyaw3ri.rs:30:22\n\
    \   |\n30 |         res.push_str(s);\n   |                      ^\n   |      \
    \                |\n   |                      expected `&str`, found struct `String`\n\
    \   |                      help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if stack.len() == 0 {\n\
    \                return String::from(\"No\");\n            }\n            let\
    \ mut last = stack.last().unwrap();\n            if last == ')' || last == ']'\
    \ || last == '}' || last == ']' {\n                stack.pop();\n            }\
    \ else {\n                return String::from(\"No\");\n            }\n      \
    \  }\n    }\n    if stack.len() == 0 {\n        return String::from(\"Yes\");\n\
    \    }\n    return String::from(\"No\");\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmphcvs85j0.rs:28:21\n\
    \   |\n28 |             if last == ')' || last == ']' || last == '}' || last ==\
    \ ']' {\n   |                     ^^ no implementation for `&String == char`\n\
    \   |\n   = help: the trait `PartialEq<char>` is not implemented for `&String`\n\
    \nerror[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmphcvs85j0.rs:28:36\n\
    \   |\n28 |             if last == ')' || last == ']' || last == '}' || last ==\
    \ ']' {\n   |                                    ^^ no implementation for `&String\
    \ == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented for\
    \ `&String`\n\nerror[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmphcvs85j0.rs:28:51\n\
    \   |\n28 |             if last == ')' || last == ']' || last == '}' || last ==\
    \ ']' {\n   |                                                   ^^ no implementation\
    \ for `&String == char`\n   |\n   = help: the trait `PartialEq<char>` is not implemented\
    \ for `&String`\n\nerror[E0277]: can't compare `&String` with `char`\n  --> /tmp/tmphcvs85j0.rs:28:66\n\
    \   |\n28 |             if last == ')' || last == ']' || last == '}' || last ==\
    \ ']' {\n   |                                                                \
    \  ^^ no implementation for `&String == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `&String`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   result += str;\n            }\n        }\n    }\n    if let Some(str) = stack.pop()\
    \ {\n        result += str;\n    }\n    result\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:25:27\n   |\n\
    25 |                 result += str;\n   |                           ^^^\n   |\
    \                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpkwceex_6.rs:30:19\n\
    \   |\n30 |         result += str;\n   |                   ^^^\n   |         \
    \          |\n   |                   expected `&str`, found struct `String`\n\
    \   |                   help: consider borrowing here: `&str`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(mut s) = stack.pop() {\n           \
    \     if s.chars().any(|c| c == ')') {\n                    curr.push_str(s);\n\
    \                } else {\n                    return String::from(\"No\");\n\
    \                }\n            }\n        }\n    }\n    curr\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqyhgxnh8.rs:26:35\n   |\n\
    26 |                     curr.push_str(s);\n   |                             \
    \      ^\n   |                                   |\n   |                     \
    \              expected `&str`, found struct `String`\n   |                  \
    \                 help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if let Some(last) = stack.pop()\
    \ {\n                let mut last = last.clone();\n                let mut cur\
    \ = s.clone();\n                while !cur.is_empty() {\n                    if\
    \ cur.chars().any(|c| c == '(' || c == '[' || c == '{') {\n                  \
    \      stack.push(last);\n                        break;\n                   \
    \ }\n                    if cur.chars().any(|c| c == '(') {\n                \
    \        break;\n                    }\n                    last = last.clone();\n\
    \                    cur = cur.clone();\n                }\n                res.push_str(last);\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplg0y2__l.rs:38:30\n   |\n\
    38 |                 res.push_str(last);\n   |                              ^^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&last`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut s = s.clone();\n  \
    \              let mut last = last.chars();\n                while let Some(c)\
    \ = last.next() {\n                    if c == '(' {\n                       \
    \ s.push(c);\n                    } else if c == '{' {\n                     \
    \   s.push(c);\n                    } else if c == '}' {\n                   \
    \     s.push(c);\n                    } else if c == '[' {\n                 \
    \       s.push(c);\n                    } else if c == ']' {\n               \
    \         s.push(c);\n                    } else if c == '(' {\n             \
    \           s.push(c);\n                    } else if c == '[' {\n           \
    \             s.push(c);\n                    } else if c == ']' {\n         \
    \               s.push(c);\n                    } else if c == '{' {\n       \
    \                 s.push(c);\n                    } else if c == '}' {\n     \
    \                   s.push(c);\n                    } else {\n               \
    \         break;\n                    }\n                }\n                if\
    \ last.len() == s.len() {\n                    res += &last;\n               \
    \ }\n            }\n        }\n    }\n    if res.is_empty() {\n        String::from(\"\
    No\")\n    } else {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `len` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmpjwcdeqc6.rs:53:25\n   |\n53 |                 if last.len()\
    \ == s.len() {\n   |                         ^^^ method not found in `Chars<'_>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpjwcdeqc6.rs:54:28\n   |\n54 |\
    \                     res += &last;\n   |                            ^^^^^ expected\
    \ `str`, found struct `Chars`\n   |\n   = note: expected reference `&str`\n  \
    \            found reference `&Chars<'_>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut cur = stack.pop().unwrap();\n          \
    \  for c in s.chars() {\n                if c == '(' {\n                    stack.push(cur\
    \ + c);\n                } else {\n                    let mut cur = cur + c;\n\
    \                    if cur.is_empty() {\n                        break;\n   \
    \                 }\n                    result.push_str(&cur);\n            \
    \    }\n            }\n        }\n    }\n    if stack.is_empty() {\n        result\n\
    \    } else {\n        String::from(\"No\")\n    }\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3nmy4b26.rs:27:38\n   |\n\
    27 |                     stack.push(cur + c);\n   |                          \
    \            ^ expected `&str`, found `char`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3nmy4b26.rs:29:41\n   |\n29 |                     let mut cur =\
    \ cur + c;\n   |                                         ^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.contains(\"(\") {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    if str == s {\n                    res = \"Yes\";\n                    break;\n\
    \                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpov9az10u.rs:23:27\n   |\n\
    23 |                     res = \"Yes\";\n   |                           ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push_back('(');\n\
    \        }\n        if s.chars().all(|c| c == ')') {\n            stack.pop();\n\
    \        }\n        if stack.len() == 0 {\n            result.push_str(s);\n \
    \       }\n    }\n    if stack.len() == 0 {\n        result.push_str(\"No\");\n\
    \    } else {\n        result.push_str(\"Yes\");\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpyd1rj8kx.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpyd1rj8kx.rs:28:29\n   |\n28 |  \
    \           result.push_str(s);\n   |                             ^\n   |    \
    \                         |\n   |                             expected `&str`,\
    \ found struct `String`\n   |                             help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0308, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut res = String::from(\"Yes\");\n                let mut s = str;\n\
    \                while let Some(str) = stack.pop() {\n                    s =\
    \ s.push_str(str);\n                }\n                res = res.push_str(s);\n\
    \            }\n        }\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpasbet1ft.rs:28:36\n   |\n\
    28 |                     s = s.push_str(str);\n   |                          \
    \          ^^^\n   |                                    |\n   |              \
    \                      expected `&str`, found struct `String`\n   |          \
    \                          help: consider borrowing here: `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpasbet1ft.rs:28:25\n   |\n28 |              \
    \       s = s.push_str(str);\n   |                         ^^^^^^^^^^^^^^^ expected\
    \ struct `String`, found `()`\n   |\nnote: method `push_str` modifies its receiver\
    \ in-place\n  --> /tmp/tmpasbet1ft.rs:28:27\n   |\n28 |                     s\
    \ = s.push_str(str);\n   |                         - ^^^^^^^^ this call modifies\
    \ `s` in-place\n   |                         |\n   |                         you\
    \ probably want to use this value after calling the method...\n   = note: ...instead\
    \ of the `()` output of method `push_str`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpasbet1ft.rs:30:36\n   |\n30 |                 res = res.push_str(s);\n\
    \   |                                    ^\n   |                             \
    \       |\n   |                                    expected `&str`, found struct\
    \ `String`\n   |                                    help: consider borrowing here:\
    \ `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpasbet1ft.rs:30:23\n  \
    \ |\n30 |                 res = res.push_str(s);\n   |                       ^^^^^^^^^^^^^^^\
    \ expected struct `String`, found `()`\n   |\nnote: method `push_str` modifies\
    \ its receiver in-place\n  --> /tmp/tmpasbet1ft.rs:30:27\n   |\n30 |         \
    \        res = res.push_str(s);\n   |                       --- ^^^^^^^^ this\
    \ call modifies `res` in-place\n   |                       |\n   |           \
    \            you probably want to use this value after calling the method...\n\
    \   = note: ...instead of the `()` output of method `push_str`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n\
    \            stack.push(s);\n        } else {\n            if let Some(str) =\
    \ stack.pop() {\n                if let Some(last) = str.chars().last_mut() {\n\
    \                    if last == ')' || last == ']' || last == '}' || last == ']'\
    \ {\n                        res = \"Yes\".to_string();\n                    \
    \    break;\n                    }\n                }\n            }\n       \
    \ }\n    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n   \
    \ assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `last_mut` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmprvx1u2rs.rs:25:49\n   |\n25 |                 if\
    \ let Some(last) = str.chars().last_mut() {\n   |                            \
    \                     ^^^^^^^^ method not found in `Chars<'_>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    if str == s {\n                    res = \"Yes\";\n                    break;\n\
    \                }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx7h1w6w6.rs:26:27\n   |\n\
    26 |                     res = \"Yes\";\n   |                           ^^^^^-\
    \ help: try using a conversion method: `.to_string()`\n   |                  \
    \         |\n   |                           expected struct `String`, found `&str`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut cur = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ if s.chars().any(|c| c == ')') {\n                cur += s;\n            } else\
    \ {\n                return String::from(\"No\");\n            }\n        }\n\
    \    }\n    if stack.is_empty() {\n        return String::from(\"Yes\");\n   \
    \ }\n    cur\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps2zq60w0.rs:29:24\n   |\n\
    29 |                 cur += s;\n   |                        ^\n   |          \
    \              |\n   |                        expected `&str`, found struct `String`\n\
    \   |                        help: consider borrowing here: `&s`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop_front().unwrap();\n     \
    \       if s.chars().any(|c| c == '(') {\n                stack.push_back(s);\n\
    \            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpd31clx6d.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(last) = stack.pop() {\n           \
    \     if last.chars().any(|c| c == ')') {\n                    res = \"Yes\".to_string();\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmpou0qpado.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n\
    \        } else {\n            if let Some(str) = stack.pop() {\n            \
    \    let mut s = str;\n                while let Some(str) = stack.pop() {\n \
    \                   s = format!(\"{}{}\", s, str);\n                }\n      \
    \          res = format!(\"{}{}\", res, s);\n            } else {\n          \
    \      res = format!(\"{}\", res);\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No()(\"`,\n right: `\"Yes\"`', /tmp/tmp609ymlnf.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       if cur.chars().any(|c| c == ')') {\n                result.push_str(&cur);\n\
    \            } else {\n                result.push_str(&s);\n            }\n \
    \       }\n    }\n    result.push_str(\"Yes\");\n    result\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"()(Yes\"`,\n right: `\"Yes\"`', /tmp/tmpyncq92ga.rs:41:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   if let Some(last_c) = str.chars().last_mut() {\n                    if last_c\
    \ == '(' {\n                        result.push_str(str);\n                  \
    \  } else if last_c == ')' {\n                        result.push_str(str);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   if stack.len() == 0 {\n        result\n    } else {\n        String::from(\"\
    No\")\n    }\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `last_mut` found for struct `Chars` in the\
    \ current scope\n  --> /tmp/tmpdfe_gwk_.rs:25:51\n   |\n25 |                 if\
    \ let Some(last_c) = str.chars().last_mut() {\n   |                          \
    \                         ^^^^^^^^ method not found in `Chars<'_>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdfe_gwk_.rs:27:41\n   |\n27 |              \
    \           result.push_str(str);\n   |                                      \
    \   ^^^\n   |                                         |\n   |                \
    \                         expected `&str`, found struct `String`\n   |       \
    \                                  help: consider borrowing here: `&str`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdfe_gwk_.rs:29:41\n   |\n29 |              \
    \           result.push_str(str);\n   |                                      \
    \   ^^^\n   |                                         |\n   |                \
    \                         expected `&str`, found struct `String`\n   |       \
    \                                  help: consider borrowing here: `&str`\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(item) = stack.pop() {\n            \
    \    if item == ')' {\n                    result += item;\n                }\
    \ else {\n                    result += '(';\n                    stack.push(item);\n\
    \                }\n            } else {\n                result += '(';\n   \
    \             stack.push(s);\n            }\n        }\n    }\n    if stack.len()\
    \ == 0 {\n        result\n    } else {\n        String::from(\"No\")\n    }\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `String` with `char`\n  --> /tmp/tmpw5kxcg_v.rs:25:25\n\
    \   |\n25 |                 if item == ')' {\n   |                         ^^\
    \ no implementation for `String == char`\n   |\n   = help: the trait `PartialEq<char>`\
    \ is not implemented for `String`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw5kxcg_v.rs:26:31\n\
    \   |\n26 |                     result += item;\n   |                        \
    \       ^^^^\n   |                               |\n   |                     \
    \          expected `&str`, found struct `String`\n   |                      \
    \         help: consider borrowing here: `&item`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpw5kxcg_v.rs:28:31\n   |\n28 |                     result += '(';\n\
    \   |                               ^^^ expected `&str`, found `char`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw5kxcg_v.rs:32:27\n   |\n32 |              \
    \   result += '(';\n   |                           ^^^ expected `&str`, found\
    \ `char`\n\nerror: aborting due to 4 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(item) = stack.pop() {\n            \
    \    if item.chars().all(|c| c == ')') {\n                    res += item;\n \
    \               } else {\n                    res += \")\";\n                }\n\
    \            } else {\n                res += \")\";\n            }\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppbaywgp5.rs:26:28\n   |\n\
    26 |                     res += item;\n   |                            ^^^^\n\
    \   |                            |\n   |                            expected `&str`,\
    \ found struct `String`\n   |                            help: consider borrowing\
    \ here: `&item`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let s = stack.pop().unwrap();\n           \
    \ if s.chars().any(|c| c == ')') {\n                res.push_str(s);\n       \
    \     } else {\n                return String::from(\"No\");\n            }\n\
    \        }\n    }\n    if stack.is_empty() {\n        return String::from(\"Yes\"\
    );\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjwh05961.rs:29:30\n   |\n\
    29 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            let mut cur = String::new();\n            while\
    \ let Some(str) = stack.pop_front() {\n                cur.push_str(str);\n  \
    \              if cur.chars().any(|c| c == '(') {\n                    stack.push_back(cur);\n\
    \                    break;\n                }\n            }\n            result.push_str(cur);\n\
    \        }\n    }\n    if stack.len() == 0 {\n        result.push_str(\"No\");\n\
    \    } else {\n        result.push_str(\"Yes\");\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpagguw3g4.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpagguw3g4.rs:32:29\n   |\n32 |  \
    \           result.push_str(cur);\n   |                             ^^^\n   |\
    \                             |\n   |                             expected `&str`,\
    \ found struct `String`\n   |                             help: consider borrowing\
    \ here: `&cur`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0433.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut s = String::from(\"\");\n         \
    \   while let Some(item) = stack.pop_front() {\n                s.push_str(item);\n\
    \            }\n            stack.push_back(s);\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpp93bjav1.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(' || c == '[' || c == '{') {\n            stack.push(s);\n        }\n\
    \        if s.chars().any(|c| c == ')' || c == ']' || c == '}') {\n          \
    \  if stack.len() == 0 {\n                return String::from(\"No\");\n     \
    \       }\n            let s = stack.pop().unwrap();\n            if s.chars().any(|c|\
    \ c == '(' || c == '[' || c == '{') {\n                stack.push(s);\n      \
    \      }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `s`\n    --> /tmp/tmpdym8i65g.rs:23:12\n\
    \     |\n16   |     for s in lst {\n     |         -    --- this reinitialization\
    \ might get skipped\n     |         |\n     |         move occurs because `s`\
    \ has type `String`, which does not implement the `Copy` trait\n...\n21   |  \
    \           stack.push(s);\n     |                        - value moved here\n\
    22   |         }\n23   |         if s.chars().any(|c| c == ')' || c == ']' ||\
    \ c == '}') {\n     |            ^^^^^^^^^ value borrowed here after move\n  \
    \   |\n     = note: borrow occurs due to deref coercion to `str`\nnote: deref\
    \ defined here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut cur = stack.pop().unwrap();\n          \
    \  let mut cur2 = cur.clone();\n            while cur2.chars().all(|c| c == '(')\
    \ {\n                cur2 += s;\n            }\n            res += cur2;\n   \
    \     }\n    }\n    if stack.len() == 0 {\n        String::from(\"No\")\n    }\
    \ else {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_ci99twr.rs:27:25\n   |\n\
    27 |                 cur2 += s;\n   |                         ^\n   |        \
    \                 |\n   |                         expected `&str`, found struct\
    \ `String`\n   |                         help: consider borrowing here: `&s`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp_ci99twr.rs:29:20\n   |\n29 |\
    \             res += cur2;\n   |                    ^^^^\n   |               \
    \     |\n   |                    expected `&str`, found struct `String`\n   |\
    \                    help: consider borrowing here: `&cur2`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if let Some(str) = stack.pop() {\n                if\
    \ str.is_empty() {\n                    return String::from(\"No\");\n       \
    \         }\n                if str.chars().any(|c| c == '(') {\n            \
    \        return String::from(\"Yes\");\n                }\n            }\n   \
    \     }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpaum198vv.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::from(\"\
    No\");\n    for s in lst {\n        if s.is_empty() {\n            continue;\n\
    \        }\n        if s.chars().any(|c| c == '(') {\n            stack.push(c);\n\
    \        }\n        if s.chars().any(|c| c == ')') {\n            if stack.is_empty()\
    \ {\n                res.push_str(&s);\n            } else {\n               \
    \ let c = stack.pop();\n                if c == '(' {\n                    res.push_str(&s);\n\
    \                } else {\n                    res.push_str(&s.chars().filter(|c|\
    \ c != c).collect::<String>());\n                }\n            }\n        }\n\
    \    }\n    res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp8c5ntkba.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error[E0425]: cannot find value `c` in this scope\n  --> /tmp/tmp8c5ntkba.rs:22:24\n\
    \   |\n22 |             stack.push(c);\n   |                        ^ help: a\
    \ local variable with a similar name exists: `s`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0425, E0433.\nFor more information\
    \ about an error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back('(');\n\
    \        }\n        if s.chars().any(|c| c == ')') {\n            if let Some(pop)\
    \ = stack.pop() {\n                if pop == ')' {\n                    res +=\
    \ \")\";\n                } else {\n                    res += \"(\";\n      \
    \          }\n            } else {\n                res += \"(\";\n          \
    \  }\n        }\n    }\n    if stack.len() == 0 {\n        String::from(\"No\"\
    )\n    } else {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpris5dgdd.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(s);\n        } else {\n            if let\
    \ Some(str) = stack.pop() {\n                if str == s {\n                 \
    \   return String::from(\"Yes\");\n                }\n            }\n        }\n\
    \    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"No\"`,\n right: `\"Yes\"`', /tmp/tmp3ttsrcq5.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if let Some(str) = stack.pop()\
    \ {\n                res.push_str(str);\n            }\n        }\n    }\n   \
    \ if let Some(str) = stack.pop() {\n        res.push_str(str);\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbbxqy1q3.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbbxqy1q3.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut open = Vec::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \           open.push(true);\n        } else {\n            if let Some(last)\
    \ = stack.pop() {\n                if last.chars().any(|c| c == ')') {\n     \
    \               let mut last = last.clone();\n                    last.push_str(s);\n\
    \                    if open.is_empty() {\n                        return String::from(last);\n\
    \                    }\n                    let mut open = Vec::new();\n     \
    \               for s in stack {\n                        if s.chars().any(|c|\
    \ c == '(') {\n                            open.push(true);\n                \
    \        } else {\n                            if open.is_empty() {\n        \
    \                        return String::from(last);\n                        \
    \    }\n                            let mut open = Vec::new();\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let candidate =\
    \ match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx0x6ntwc.rs:28:35\n   |\n\
    28 |                     last.push_str(s);\n   |                             \
    \      ^\n   |                                   |\n   |                     \
    \              expected `&str`, found struct `String`\n   |                  \
    \                 help: consider borrowing here: `&s`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_front();\n        }\n    }\n    if\
    \ stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp_ha0kfdy.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().all(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if stack.is_empty() {\n\
    \                res.push_str(s);\n            } else {\n                let mut\
    \ cur = stack.pop().unwrap();\n                let mut next = s.chars().collect::<String>();\n\
    \                while next.len() > 0 {\n                    if next.len() ==\
    \ 1 {\n                        if cur == next.as_str() {\n                   \
    \         res.push_str(cur);\n                            break;\n           \
    \             }\n                    } else {\n                        if cur\
    \ == next.as_str() {\n                            res.push_str(cur);\n       \
    \                     break;\n                        }\n                    \
    \    let mut next = next.split_last_mut(1).unwrap();\n                       \
    \ let mut cur = cur.split_last_mut(1).unwrap();\n                    }\n     \
    \           }\n            }\n        }\n    }\n    res\n}\n\nfn main() {\n  \
    \  let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpilh4qxt6.rs:25:30\n   |\n\
    25 |                 res.push_str(s);\n   |                              ^\n \
    \  |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&s`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpilh4qxt6.rs:32:42\n\
    \   |\n32 | ...                   res.push_str(cur);\n   |                   \
    \                 ^^^\n   |                                    |\n   |       \
    \                             expected `&str`, found struct `String`\n   |   \
    \                                 help: consider borrowing here: `&cur`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpilh4qxt6.rs:37:42\n   |\n37 | ...          \
    \         res.push_str(cur);\n   |                                    ^^^\n  \
    \ |                                    |\n   |                               \
    \     expected `&str`, found struct `String`\n   |                           \
    \         help: consider borrowing here: `&cur`\n\nerror[E0599]: no method named\
    \ `split_last_mut` found for struct `String` in the current scope\n  --> /tmp/tmpilh4qxt6.rs:40:45\n\
    \   |\n40 |                         let mut next = next.split_last_mut(1).unwrap();\n\
    \   |                                             ^^^^^^^^^^^^^^ help: there is\
    \ an associated function with a similar name: `split_at_mut`\n\nerror[E0599]:\
    \ no method named `split_last_mut` found for struct `String` in the current scope\n\
    \  --> /tmp/tmpilh4qxt6.rs:41:43\n   |\n41 |                         let mut cur\
    \ = cur.split_last_mut(1).unwrap();\n   |                                    \
    \       ^^^^^^^^^^^^^^ help: there is an associated function with a similar name:\
    \ `split_at_mut`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0308, E0599.\nFor more information about an error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ let mut cur = stack.pop_front();\n            if cur.chars().any(|c| c == ')')\
    \ {\n                let mut s = String::from(cur);\n                s.push(')');\n\
    \                s.push('(');\n                stack.push_back(&s);\n        \
    \    } else {\n                let mut s = String::from(cur);\n              \
    \  s.push(')');\n                s.push('(');\n                stack.push_back(&s);\n\
    \            }\n        }\n    }\n    if stack.len() == 0 {\n        String::from(\"\
    No\")\n    } else {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n\
    \    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmps7s17jqf.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            let mut cur = stack.pop().unwrap();\n          \
    \  while !stack.is_empty() && stack.last().unwrap().chars().any(|c| c == ')')\
    \ {\n                cur += \")\";\n                stack.pop();\n           \
    \ }\n            result.push_str(&cur);\n        }\n    }\n    if stack.len()\
    \ == 0 {\n        result.push_str(\"Yes\");\n    } else {\n        result.push_str(\"\
    No\");\n    }\n    result\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"()(Yes\"`,\n right: `\"Yes\"`', /tmp/tmpnij9dpta.rs:42:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop_front();\n        \
    \    if cur.chars().any(|c| c == ')') {\n                res.push_str(&cur.to_string());\n\
    \            } else {\n                res.push_str(&cur.to_string().replace(\"\
    )\", \"\").replace(\"(\", \"(\"));\n            }\n        }\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpido5d0f0.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            stack.pop();\n        }\n        if stack.len() !=\
    \ 0 {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpod0m417w.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push_back(s);\n\
    \        } else {\n            if let Some(item) = stack.pop() {\n           \
    \     if item.chars().all(|c| c == ')') {\n                    res += item;\n\
    \                } else {\n                    res += \"(\";\n               \
    \     stack.push_back(s);\n                }\n            } else {\n         \
    \       res += \"(\";\n                stack.push_back(s);\n            }\n  \
    \      }\n    }\n    if stack.len() == 0 {\n        res += \")\";\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpp_z1r55e.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            stack.pop_front();\n        }\n        if stack.len()\
    \ != 0 {\n            return String::from(\"No\");\n        }\n    }\n    String::from(\"\
    Yes\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpmu4nvctd.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(' || c == '[' || c == '{') {\n     \
    \       stack.push(s);\n        } else {\n            if stack.len() == 0 {\n\
    \                return String::from(\"No\");\n            }\n            let\
    \ mut cur = stack.pop().unwrap();\n            if cur.chars().any(|c| c == '('\
    \ || c == '[' || c == '{') {\n                stack.push(cur);\n            }\
    \ else {\n                res.push_str(&cur);\n            }\n        }\n    }\n\
    \    if stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n   \
    \ res\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `\"\"`,\n right: `\"Yes\"`', /tmp/tmpy_r55bpt.rs:43:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    for s in lst {\n        if\
    \ s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push(s);\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop().unwrap();\n       \
    \     if s.chars().any(|c| c == '(') {\n                stack.push(s);\n     \
    \       }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main() {\n   \
    \ let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpynvnv3r5.rs:27:17\n\
    \   |\n27 |             let mut s = stack.pop().unwrap();\n   |              \
    \   ----^\n   |                 |\n   |                 help: remove this `mut`\n\
    \   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0382]: borrow\
    \ of moved value: `s`\n    --> /tmp/tmpynvnv3r5.rs:23:12\n     |\n16   |     for\
    \ s in lst {\n     |         -    --- this reinitialization might get skipped\n\
    \     |         |\n     |         move occurs because `s` has type `String`, which\
    \ does not implement the `Copy` trait\n...\n21   |             stack.push(s);\n\
    \     |                        - value moved here\n22   |         }\n23   |  \
    \       if s.chars().any(|c| c == ')') {\n     |            ^^^^^^^^^ value borrowed\
    \ here after move\n     |\n     = note: borrow occurs due to deref coercion to\
    \ `str`\nnote: deref defined here\n\nerror: aborting due to previous error; 1\
    \ warning emitted\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.is_empty() {\n                return String::from(\"\
    No\");\n            }\n            let mut cur = stack.pop().unwrap();\n     \
    \       for c in s.chars() {\n                if c == '(' {\n                \
    \    stack.push(cur);\n                } else if c == ')' {\n                \
    \    if stack.is_empty() {\n                        return String::from(\"No\"\
    );\n                    }\n                    let mut cur = stack.pop().unwrap();\n\
    \                } else {\n                    cur += c;\n                }\n\
    \            }\n            res += cur;\n        }\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp76tix6fb.rs:37:28\n   |\n\
    37 |                     cur += c;\n   |                            ^ expected\
    \ `&str`, found `char`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp76tix6fb.rs:40:20\n\
    \   |\n40 |             res += cur;\n   |                    ^^^\n   |       \
    \             |\n   |                    expected `&str`, found struct `String`\n\
    \   |                    help: consider borrowing here: `&cur`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut result = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   let mut s = str;\n                while let Some(str) = stack.pop() {\n  \
    \                  s += str;\n                }\n                result += s;\n\
    \            } else {\n                result += \"No\";\n            }\n    \
    \    }\n    }\n    result\n}\n\nfn main() {\n    let candidate = match_parens;\n\
    \    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\")\")]), String::from(\"\
    Yes\"));\n    assert_eq!(candidate(vec![String::from(\")\"), String::from(\")\"\
    )]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"(()(())\"\
    ), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppcpz6cz7.rs:27:26\n   |\n\
    27 |                     s += str;\n   |                          ^^^\n   |  \
    \                        |\n   |                          expected `&str`, found\
    \ struct `String`\n   |                          help: consider borrowing here:\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmppcpz6cz7.rs:29:27\n\
    \   |\n29 |                 result += s;\n   |                           ^\n \
    \  |                           |\n   |                           expected `&str`,\
    \ found struct `String`\n   |                           help: consider borrowing\
    \ here: `&s`\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut cur = s.clone();\n\
    \                while !cur.is_empty() {\n                    if cur.chars().any(|c|\
    \ c == '(') {\n                        stack.push(last);\n                   \
    \     break;\n                    }\n                    if cur.chars().any(|c|\
    \ c == ')') {\n                        let mut cur = cur.clone();\n          \
    \              while !cur.is_empty() {\n                            if cur.chars().any(|c|\
    \ c == '(') {\n                                break;\n                      \
    \      }\n                            if cur.chars().any(|c| c == ')') {\n   \
    \                             break;\n                            }\n        \
    \                    cur = cur.clone();\n                        }\n         \
    \               break;\n                    }\n                    cur = cur.clone();\n\
    \                }\n                res.push_str(last);\n            }\n     \
    \   }\n    }\n    if res.is_empty() {\n        String::from(\"No\")\n    } else\
    \ {\n        String::from(\"Yes\")\n    }\n}\n\nfn main() {\n    let candidate\
    \ = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"), String::from(\"\
    )\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp38u0ihnm.rs:47:30\n   |\n\
    47 |                 res.push_str(last);\n   |                              ^^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&last`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(last) = stack.pop() {\n            \
    \    let mut last = last.clone();\n                let mut last = last.chars().collect::<String>();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.chars().collect::<String>();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let mut last = last.clone();\n                let mut last = last.clone();\n\
    \                let mut last = last.clone();\n                let mut last =\
    \ last.clone();\n                let mut last = last.clone();\n              \
    \  let \n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpdlgjxlw3.rs:90:3\n\
    \   |\n14 | fn match_parens(lst: Vec<String>) -> String {\n   |              \
    \                               - unclosed delimiter\n...\n17 |     for s in lst\
    \ {\n   |                  - unclosed delimiter\n...\n23 |         } else {\n\
    \   |                - unclosed delimiter\n24 |             if let Some(last)\
    \ = stack.pop() {\n   |                                             - this delimiter\
    \ might not be properly closed...\n...\n74 | }\n   | - ...as it matches this but\
    \ it has different indentation\n...\n90 | }\n   |   ^\n\nerror: expected pattern,\
    \ found `}`\n  --> /tmp/tmpdlgjxlw3.rs:74:1\n   |\n74 | }\n   | ^ expected pattern\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdlgjxlw3.rs:17:5\n   |\n14 | \
    \  fn match_parens(lst: Vec<String>) -> String {\n   |                       \
    \                 ------ expected `String` because of return type\n...\n17 | /\
    \     for s in lst {\n18 | |         if s.is_empty() {\n19 | |             continue;\n\
    20 | |         }\n...  |\n89 | |     assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n90 | | }\n   | |__^ expected\
    \ struct `String`, found `()`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut curr = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            let mut s = stack.pop().unwrap();\n       \
    \     while s.chars().any(|c| c == '(') {\n                s = s.replace(\"(\"\
    , \"\");\n                s = s.replace(\")\", \"\");\n                stack.push(s);\n\
    \            }\n            if s.chars().any(|c| c == ')') {\n               \
    \ stack.push(s);\n            } else {\n                return String::from(\"\
    No\");\n            }\n        }\n    }\n    String::from(\"Yes\")\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "warning: unused variable: `curr`\n  --> /tmp/tmpkld7mn3_.rs:16:13\n   |\n\
    16 |     let mut curr = String::new();\n   |             ^^^^ help: if this is\
    \ intentional, prefix it with an underscore: `_curr`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpkld7mn3_.rs:16:9\n\
    \   |\n16 |     let mut curr = String::new();\n   |         ----^^^^\n   |   \
    \      |\n   |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]`\
    \ on by default\n\nerror[E0382]: borrow of moved value: `s`\n    --> /tmp/tmpkld7mn3_.rs:28:19\n\
    \     |\n27   |             let mut s = stack.pop().unwrap();\n     |        \
    \         ----- move occurs because `s` has type `String`, which does not implement\
    \ the `Copy` trait\n28   |             while s.chars().any(|c| c == '(') {\n \
    \    |                   ^^^^^^^^^ value borrowed here after move\n...\n31   |\
    \                 stack.push(s);\n     |                            - value moved\
    \ here, in previous iteration of loop\n...\n38   |         }\n     |         -\
    \ value moved here, in previous iteration of loop\n     |\n     = note: borrow\
    \ occurs due to deref coercion to `str`\nnote: deref defined here\n\nerror: aborting\
    \ due to previous error; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back(s);\n        } else {\n           \
    \ if let Some(item) = stack.pop_front() {\n                if item == s {\n  \
    \                  return String::from(\"Yes\");\n                }\n        \
    \    }\n        }\n    }\n    String::from(\"No\")\n}\n\nfn main() {\n    let\
    \ candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"()(\"\
    ), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmpmisw1eh8.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747741
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = VecDeque::new();\n    for s in lst {\n    \
    \    if s.is_empty() {\n            continue;\n        }\n        if s.chars().any(|c|\
    \ c == '(') {\n            stack.push_back('(');\n        }\n        if s.chars().any(|c|\
    \ c == ')') {\n            if stack.len() == 0 {\n                return String::from(\"\
    No\");\n            }\n            stack.pop_front();\n        }\n    }\n    if\
    \ stack.len() == 0 {\n        return String::from(\"Yes\");\n    }\n    String::from(\"\
    No\")\n}\n\nfn main() {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `VecDeque`\n  -->\
    \ /tmp/tmp_ha0kfdy.rs:15:21\n   |\n15 |     let mut stack = VecDeque::new();\n\
    \   |                     ^^^^^^^^ not found in this scope\n   |\nhelp: consider\
    \ importing this struct\n   |\n1  | use std::collections::VecDeque;\n   |\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1659747740
- exit_code: 1
  program: "/// You are given a vector of two strings, both strings consist of open\n\
    /// parentheses '(' or close parentheses ')' only.\n/// Your job is to check if\
    \ it is possible to concatenate the two strings in\n/// some order, that the resulting\
    \ string will be good.\n/// A string S is considered to be good if and only if\
    \ all parentheses in S\n/// are balanced. For example: the string '(())()' is\
    \ good, while the string\n/// '())' is not.\n/// Return 'Yes' if there's a way\
    \ to make a good string, and return 'No' otherwise.\n/// Examples:\n/// >>> match_parens(vec![String::from(\"\
    ()(\"), String::from(\")\")])\n/// String::from(\"Yes\")\n/// >>> match_parens(vec![String::from(\"\
    )\"), String::from(\")\")])\n/// String::from(\"No\")\nfn match_parens(lst: Vec<String>)\
    \ -> String {\n    let mut stack = Vec::new();\n    let mut res = String::new();\n\
    \    for s in lst {\n        if s.is_empty() {\n            continue;\n      \
    \  }\n        if s.chars().any(|c| c == '(') {\n            stack.push(s);\n \
    \       } else {\n            if let Some(str) = stack.pop() {\n             \
    \   res.push_str(str);\n            }\n        }\n    }\n    if let Some(str)\
    \ = stack.pop() {\n        res.push_str(str);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = match_parens;\n    assert_eq!(candidate(vec![String::from(\"\
    ()(\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\")\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(())\"), String::from(\"())())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )())\"), String::from(\"(()()(\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (())))\"), String::from(\"(()())((\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ()\"), String::from(\"())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (()(\"), String::from(\"()))()\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    ((((\"), String::from(\"((())\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(()\"), String::from(\"(()(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )(\"), String::from(\")(\")]), String::from(\"No\"));\n    assert_eq!(candidate(vec![String::from(\"\
    (\"), String::from(\")\")]), String::from(\"Yes\"));\n    assert_eq!(candidate(vec![String::from(\"\
    )\"), String::from(\"(\")]), String::from(\"Yes\"));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:25:30\n   |\n\
    25 |                 res.push_str(str);\n   |                              ^^^\n\
    \   |                              |\n   |                              expected\
    \ `&str`, found struct `String`\n   |                              help: consider\
    \ borrowing here: `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphc1iyasl.rs:30:22\n\
    \   |\n30 |         res.push_str(str);\n   |                      ^^^\n   |  \
    \                    |\n   |                      expected `&str`, found struct\
    \ `String`\n   |                      help: consider borrowing here: `&str`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
