name: HumanEval_44_change_base
language: rs
prompt: "/// Change numerical base of input number x to base.\n/// return string representation\
  \ after the conversion.\n/// base numbers are less than 10.\n/// >>> change_base(8,\
  \ 3)\n/// String::from(\"22\")\n/// >>> change_base(8, 2)\n/// String::from(\"1000\"\
  )\n/// >>> change_base(7, 2)\n/// String::from(\"111\")\nfn change_base(x: isize,\
  \ base: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = change_base;\n    assert_eq!(candidate(8,\
  \ 3), String::from(\"22\"));\n    assert_eq!(candidate(9, 3), String::from(\"100\"\
  ));\n    assert_eq!(candidate(234, 2), String::from(\"11101010\"));\n    assert_eq!(candidate(16,\
  \ 2), String::from(\"10000\"));\n    assert_eq!(candidate(8, 2), String::from(\"\
  1000\"));\n    assert_eq!(candidate(7, 2), String::from(\"111\"));\n    assert_eq!(candidate(2,\
  \ 3), String::from(\"2\"));\n    assert_eq!(candidate(3, 4), String::from(\"3\"\
  ));\n    assert_eq!(candidate(4, 5), String::from(\"4\"));\n    assert_eq!(candidate(5,\
  \ 6), String::from(\"5\"));\n    assert_eq!(candidate(6, 7), String::from(\"6\"\
  ));\n    assert_eq!(candidate(7, 8), String::from(\"7\"));\n}\n"
completions: ["    let mut s = String::new();\n    let mut x = x as isize;\n    while\
    \ x >= base {\n        s += &format!(\"{}\", x / base);\n        x %= base;\n\
    \    }\n    s += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let mut digit = quotient % base;\n        remainder = quotient /\
    \ base;\n        if digit < 0 {\n            digit += base;\n        }\n     \
    \   s.push((digit as char).to_string());\n    }\n    if remainder > 0 {\n    \
    \    s.push((remainder as char).to_string());\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut remainder =\
    \ x;\n    while remainder > base {\n        remainder -= base;\n        digits.insert(0,\
    \ base);\n    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ 1);\n    }\n    s += &digits;\n    s", "    let mut s = String::new();\n   \
    \ let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut x =\
    \ x;\n    let mut base = base;\n    while x >= base {\n        s *= base;\n  \
    \      x -= base;\n    }\n    s += x;\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    let mut digits = vec![0u8; base];\n    let mut\
    \ digits_len = base;\n    let mut digits_pow = vec![0u8; base];\n    let mut digits_pow_len\
    \ = base;\n    let mut digits_pow2 = vec![0u8; base];\n    let mut digits_pow2_len\
    \ = base;\n    let mut digits_pow3 = vec![0u8; base];\n    let mut digits_pow3_len\
    \ = base;\n    let mut digits_pow4 = vec![0u8; base];\n    let mut digits_pow4_len\
    \ = base;\n    let mut digits_pow5 = vec![0u8; base];\n    let mut digits_pow5_len\
    \ = base;\n    let mut digits_pow6 = vec![0u8; base];\n    let mut digits_pow6_len\
    \ = base;\n    let mut digits_pow7 = vec![0u8; base];\n    let mut digits_pow7_len\
    \ = base;\n    let mut digits_pow8 = vec![0u8; base];\n    let mut digits_pow8_len\
    \ = base;\n    let mut digits_pow9 = vec![0u8; base];\n    let mut digits_pow9_len\
    \ = base;\n    let mut digits_pow10 = vec![0u8; base];\n    let mut digits_pow10_len\
    \ = base;\n    let mut digits_pow11 = vec![0u8; base];\n    let mut digits_pow11_len\
    \ = base;\n    let mut digits_pow12 = vec![0u8; base];\n    let mut digits_pow12_len\
    \ = base;\n    let mut digits_pow13 = vec![0u8; base];\n    let mut digits_pow13_len\
    \ = base;\n    let mut digits_pow14 = vec![0u8; base];\n    let mut digits_pow14_len\
    \ = base;\n    let mut digits_pow15 = vec![0u8; base];\n    let mut digits_pow15_len\
    \ = base;\n    let mut digits_pow16 = vec![0u8; base];\n    let mut digits_pow16_len\
    \ = base;\n    let mut digits_pow17 = vec![0u8; base];\n    let mut digits_pow17_len\
    \ = base;\n    let mut digits_pow18 = vec![0u8; base];\n    let mut digits_pow18_len\
    \ = base;", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.length();\n    while digits_len > base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while base_len > digits_len {\n  \
    \      base = base.chars().nth(base_len).unwrap().to_string();\n        base_len\
    \ -= 1;\n    }\n    while digits_len > 0 {\n        let mut digit = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \        digits = digits.chars().nth(digits_len).unwrap().to_string();\n     \
    \   if base == 10 {\n            digit = digit.chars().nth(digits_len).unwrap().to_string();\n\
    \        }\n        if digit == base {\n            s.push_str(digit);\n     \
    \   } else {\n            s.push_str(digit.to_string().to_string() + &base);\n\
    \        }\n        digits_len -= 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        if digits.len() > base {\n            power = power / base;\n\
    \        }\n        if digits.len() < base {\n            power = power * base;\n\
    \        }\n        s.push((&digits[..base]).to_string() + &format!(\"{}\", power));\n\
    \        digits = &digits[base..];\n        power = 1;\n    }\n    s", "    let\
    \ mut s = String::new();\n    let mut remainder = 0;\n    while x >= base {\n\
    \        remainder += x % base;\n        x /= base;\n    }\n    if x > 0 {\n \
    \       remainder += x;\n    }\n    s += format!(\"{}\", remainder);\n    s",
  "    let mut s = String::new();\n    let mut x = x.to_digits();\n    let mut base\
    \ = base.to_digits();\n    let mut carry = 0;\n    while x.len() > 0 {\n     \
    \   let digit = x.remove(0);\n        let mut digit = digit.to_digits();\n   \
    \     let mut carry = 0;\n        while digit.len() > 0 {\n            let digit\
    \ = digit.remove(0);\n            let mut digit = digit.to_digits();\n       \
    \     let mut carry = 0;\n            if digit > base {\n                carry\
    \ = 1;\n                digit = digit.sub(base);\n            }\n            s.push_str(&digit);\n\
    \        }\n        if carry > 0 {\n            s.push_str(&carry);\n        }\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        let mut carry = 0;\n        for\
    \ &d in &digits[i..] {\n            let mut new_d = d.to_digit(base);\n      \
    \      if carry > 0 {\n                new_d += carry;\n            }\n      \
    \      carry = new_d / 10;\n            new_d %= 10;\n            s.push_str(&new_d.to_string());\n\
    \        }\n        if carry > 0 {\n            s.push_str(&carry.to_string());\n\
    \        }\n        i += 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut x = x;\n    let mut base = base;\n    while x >= base {\n       \
    \ x /= base;\n        s += String::from(\"0\");\n    }\n    s += String::from(\"\
    1\");\n    s += String::from(x.to_string());\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut carry = 0;\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(1).unwrap();\n\
    \        let digit = digit.parse::<usize>().unwrap();\n        let digit = digit\
    \ * base.parse::<usize>().unwrap() + carry;\n        carry = digit / 10;\n   \
    \     s = format!(\"{}{}\", digit, s);\n        digits = digits.chars().nth(1).unwrap();\n\
    \    }\n    if carry > 0 {\n        s = format!(\"{}{}\", carry, s);\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient = quotient / base;\n        s.push(remainder);\n \
    \   }\n    s.push(remainder);\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n  \
    \      let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if base == 0 {\n            s.push('0');\n\
    \            i += 1;\n            continue;\n        }\n        if base < 10 {\n\
    \            s.push('0');\n            i += 1;\n            continue;\n      \
    \  }\n        if base > 10 {\n            s.push('1');\n            i += 1;\n\
    \            continue;\n        }\n        let mut j = i;\n        while j + 1\
    \ < digits.len() {\n            if digits[j] == '0' && digits[j + 1] == '0' {\n\
    \                s.push('0');\n                i += 1;\n                break;\n\
    \            }\n            if digits[j] == '0' && digits[j + 1] == '1' {\n  \
    \              s.push('1');\n                i += 1;\n                break;\n\
    \            }\n            if digits[j] == '1' && digits[j + 1] == '0' {\n  \
    \              s.push('1');\n                i += 1;\n                break;\n\
    \            }\n            if digits[j] == '1' && digits[j + 1] == '1' {\n  \
    \              s.push('0');\n                i += 1;\n                break;\n\
    \            }\n            j += 1;\n        }\n        s.push(*digits[i .. (i\
    \ + 1)]);\n        i += 1;\n    }\n    s", "    let mut s = String::new();\n \
    \   let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s", " \
    \   let mut result = String::new();\n    let mut digits = vec![0u8; base];\n \
    \   let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits[base] = remainder;\n        x /= base;\n    }\n    digits[base]\
    \ = x;\n    for i in 0..digits.len() {\n        result = format!(\"{}{}\", result,\
    \ digits[i]);\n    }\n    result", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base_index = 0;\n    let mut digits_index = 0;\n    while digits_index\
    \ < digits.len() {\n        let mut digit = digits[digits_index];\n        if\
    \ digit >= base[base_index] {\n            digit = digit - base[base_index] +\
    \ 10;\n            digits[digits_index] = digit;\n            base_index += 1;\n\
    \        } else {\n            digit = digit - base[base_index];\n           \
    \ digits[digits_index] = digit;\n            base_index += 1;\n            digits_index\
    \ += 1;\n        }\n    }\n    for digit in digits {\n        s += digit.to_string();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x % base;\n\
    \        digits.push(format!(\"{}\", remainder));\n        x = x / base;\n   \
    \ }\n    digits.push(format!(\"{}\", x));\n    s += digits.clone();\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        remainder *= base;\n        remainder\
    \ %= base;\n        quotient /= base;\n        s.push((quotient as char).to_string());\n\
    \    }\n    s.push((remainder as char).to_string());\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    let mut digits = base;\n   \
    \ while remainder > 0 {\n        remainder %= base;\n        s += digits[remainder];\n\
    \        remainder /= base;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s +=\n            format!(\"\
    {}\", x % base).to_string()\n                .chars()\n                .map(|c|\
    \ match c {\n                    '0' => '0',\n                    '1' => '1',\n\
    \                    '2' => '2',\n                    '3' => '3',\n          \
    \          '4' => '4',\n                    '5' => '5',\n                    '6'\
    \ => '6',\n                    '7' => '7',\n                    '8' => '8',\n\
    \                    '9' => '9',\n                    _ => panic!(\"Invalid base!\"\
    ),\n                })\n                .collect::<Vec<_>>()\n               \
    \ .join();\n        x /= base;\n    }\n    s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i..i + 1]);\n   \
    \         break;\n        }\n        let mut digit = digits[i..i + 1];\n     \
    \   if digit == base.to_string() + '0' {\n            s.push_str(&digit);\n  \
    \          i += 1;\n        } else {\n            s.push_str(&digit + '0');\n\
    \        }\n        i += 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut x = x;\n    while x >= base {\n        s +=\n            format!(\"\
    {}\", x % base).to_string()\n                .chars()\n                .map(|c|\
    \ match c {\n                    '0' => 0,\n                    '1' => 1,\n  \
    \                  '2' => 2,\n                    '3' => 3,\n                \
    \    '4' => 4,\n                    '5' => 5,\n                    '6' => 6,\n\
    \                    '7' => 7,\n                    '8' => 8,\n              \
    \      '9' => 9,\n                    _ => panic!(\"invalid base\"),\n       \
    \         })\n                .collect::<Vec<_>>()\n                .join();\n\
    \        x /= base;\n    }\n    s += format!(\"{}\", x).to_string().chars().collect::<Vec<_>>().join();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] > base {\n      \
    \      digits[i] -= base;\n        } else {\n            digits[i] += base;\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        s\
    \ += digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder, remainder\
    \ = divrem(remainder, base);\n        s.push((remainder % base) as char);\n  \
    \  }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    s += digits.collect();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.size() {\n\
    \        if base > 10 {\n            s.push_str(&digits[i..i + base.len()]);\n\
    \            i += base.len();\n        } else {\n            s.push_str(&digits[i..i\
    \ + 1]);\n            i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    s += digits.reverse();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient = quotient / base;\n        s = format!(\"{}{}\",\
    \ s, remainder);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = 0;\n    while i < digits.size() {\n \
    \       let mut digit = digits[i];\n        let mut base = base[i];\n        if\
    \ digit == '0' {\n            digit = &'1';\n            base = &'0';\n      \
    \  }\n        let mut carry = 0;\n        while base != '0' {\n            let\
    \ mut digit = digit * base + carry;\n            carry = digit / 10;\n       \
    \     digit = digit % 10;\n            base = &bases[base as usize];\n       \
    \ }\n        if carry > 0 {\n            digit = digit + 1;\n        }\n     \
    \   digits[i] = digit;\n        base = bases[base as usize];\n        i += 1;\n\
    \    }\n    while carry > 0 {\n        digits.push(carry % 10);\n        carry\
    \ = carry / 10;\n    }\n    digits.reverse();\n    s += digits.join(\"\");\n \
    \   s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i .. (i + 1)]);\n\
    \            i += 1;\n        } else {\n            s.push_str(&digits[i .. (i\
    \ + 1)].to_string().powf(base.clone()).to_string());\n            i += 1;\n  \
    \      }\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder += x % base;\n        x /= base;\n\
    \    }\n    if x > 0 {\n        remainder += x;\n    }\n    s += &format!(\"{}\"\
    , remainder);\n    String::from(s)", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string();\n    let mut basedigits = digits.chars().map(|c|\
    \ c.to_digit(base)).collect::<Vec<_>>();\n    basedigits.reverse();\n    for digit\
    \ in basedigits {\n        s += digit.to_string();\n    }\n    s", "    let mut\
    \ result = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > base {\n        remainder -= base;\n        result.push((&mut\
    \ digits[..]).to_digit(base).unwrap());\n    }\n    result.push((&mut digits[..]).to_digit(base).unwrap());\n\
    \    result", "    let mut s = String::new();\n    let mut remainder = 0;\n  \
    \  while x >= base {\n        remainder += x % base;\n        x /= base;\n   \
    \ }\n    if x > 0 {\n        remainder += x;\n    }\n    s += format!(\"{}\",\
    \ remainder);\n    String::from(s)", "    let mut s = String::new();\n    let\
    \ mut x = x as isize;\n    let mut base = base as isize;\n    while x >= base\
    \ {\n        s += &format!(\"{}\", x % base);\n        x /= base;\n    }\n   \
    \ s += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s.push((digit as char).to_string());\n\
    \    }\n    s.push((remainder as char).to_string());\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n \
    \           s.push_str(&digits[i .. (i + 1)]);\n            break;\n        }\n\
    \        let mut digit = digits[i .. (i + 1)].parse::<usize>().unwrap();\n   \
    \     if digit < base {\n            s.push_str(&digits[i .. (i + 1)]);\n    \
    \        i += 1;\n        } else {\n            s.push_str(&base);\n         \
    \   i += 1;\n            base = base.to_string();\n        }\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = 1;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", s, digit);\n\
    \        digits += 1;\n    }\n    if digits == 0 {\n        s = \"0\".to_string();\n\
    \    }\n    s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut power = 1;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      if digits.len() - i < base {\n            result.push_str(&digits[..i]);\n\
    \            break;\n        }\n        let mut digit = digits.chars().nth(i);\n\
    \        if digit < '0' || digit > '9' {\n            result.push_str(&digits[..i]);\n\
    \            break;\n        }\n        let mut new_digit = digit - '0';\n   \
    \     if new_digit >= base {\n            new_digit -= base;\n        }\n    \
    \    power = power * base + new_digit;\n        i += 1;\n    }\n    result", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] > base {\n      \
    \      digits[i] -= base;\n        } else {\n            digits[i] += 1;\n   \
    \     }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        s +=\
    \ digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = x.to_string();\n    let mut base = base.to_string();\n    let\
    \ mut carry = 0;\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(1).unwrap();\n\
    \        let digit = digit as usize;\n        let digit = digit + carry as usize;\n\
    \        let digit = digit as usize;\n        let digit = digit as usize;\n  \
    \      let digit = digit as usize;\n        let digit = digit as usize;\n    \
    \    let digit = digit as usize;\n        let digit = digit as usize;\n      \
    \  let digit = digit as usize;\n        let digit = digit as usize;\n        let\
    \ digit = digit as usize;\n        let digit = digit as usize;\n        let digit\
    \ = digit as usize;\n        let digit = digit as usize;\n        let digit =\
    \ digit as usize;\n        let digit = digit as usize;\n        let digit = digit\
    \ as usize;\n        let digit = digit as usize;\n        let digit = digit as\
    \ usize;\n        let digit = digit as usize;\n        let digit = digit as usize;\n\
    \        let digit = digit as usize;\n        let digit = digit as usize;\n  \
    \      let digit = digit as usize;\n        let digit = digit as usize;\n    \
    \    let digit = digit as usize;\n        let digit = digit as usize;\n      \
    \  let digit = digit as usize;\n        let digit = digit as usize;\n        let\
    \ digit = digit as usize;\n        let digit = digit as usize;\n        let digit\
    \ = digit as usize;\n        let digit = digit as usize;\n        let digit =\
    \ digit as usize;\n        let digit = digit as usize;\n        let digit = digit\
    \ as usize;\n        let digit = digit as usize;\n        let digit = digit as\
    \ usize;\n        let digit = digit as usize;\n        let digit = digit as usize;\n\
    \        let digit = digit as usize;\n        let digit = digit as usize;\n  \
    \      let digit = digit as usize;\n        let digit = digit as usize;\n    \
    \    let digit = digit as usize;\n        let digit = digit as usize;\n      \
    \  let digit = digit as usize;\n        let digit = digit as usize;\n        let\
    \ digit = digit as usize;\n        let digit = digit as usize;\n        let digit\
    \ = digit as usize;\n        let digit = digit as usize;\n        let digit =\
    \ digit as usize;\n        let digit = digit as usize;\n        let digit = digit\
    \ as usize;\n        let digit = digit as usize;\n        let digit = digit as\
    \ usize;\n        let digit", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut digits_len\
    \ = digits.length();\n    let mut base_len = base.len();\n    while digits_len\
    \ > 0 {\n        let mut digit = digits.chars().nth(digits_len).unwrap();\n  \
    \      if base == 10 {\n            s.push_str(&digit + &\"0\");\n           \
    \ digits_len -= 1;\n            base_len -= 1;\n        } else {\n           \
    \ s.push_str(&digit + &base);\n            digits_len -= 1;\n            base_len\
    \ -= 1;\n        }\n    }\n    if base_len > 0 {\n        s.push_str(&base);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        if\
    \ base % 10 == 0 {\n            s.push_str(&digits);\n            digits.clear();\n\
    \        } else {\n            digits.push_str(&base);\n            base.clear();\n\
    \        }\n        base /= 10;\n    }\n    s.push_str(&digits);\n    s", "  \
    \  let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       digits.insert(0, base.to_string());\n    }\n    while remainder > 0 {\n\
    \        remainder -= 1;\n        digits.insert(0, base.to_string());\n    }\n\
    \    s += &digits;\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > base {\n\
    \        remainder -= base;\n        digits.insert(0, base.to_string());\n   \
    \ }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ remainder.to_string());\n    }\n    s += digits;\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        let digit = digit.to_digit(base).unwrap();\n       \
    \ let digit = digit + carry;\n        carry = digit / 10;\n        s = format!(\"\
    {}{}\", s, digit);\n        digits = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \    }\n    if carry > 0 {\n        s = format!(\"{}{}\", s, carry);\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if digits[i] >= base {\n     \
    \       digits[i] -= base;\n        } else {\n            digits[i] += base;\n\
    \        }\n        i += 1;\n    }\n    for i in 0..digits.len() {\n        s\
    \ += digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += format!(\"{}\", remainder);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ base = base.to_string();\n    while remainder > 0 {\n        let mut digit =\
    \ remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digits, digit);\n        base = base.to_string();\n    }\n    s", "  \
    \  let mut s = String::new();\n    let mut x = x;\n    let mut base = base;\n\
    \    while x >= base {\n        x /= base;\n        s += String::from(\"0\");\n\
    \    }\n    s += String::from(\"1\");\n    s += String::from(x.to_string());\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        if digits.len() > base {\n            s.push_str(&digits[..base]);\n\
    \            digits.truncate(base);\n            power = 1;\n        } else {\n\
    \            s.push_str(&digits[..digits.len() - base]);\n            digits.truncate(digits.len()\
    \ - base);\n            power = power * base;\n        }\n    }\n    s.push_str(&digits);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits[base] = remainder;\n        s += String::from_utf8(digits.to_vec()).unwrap();\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    for digit in digits[..] {\n\
    \        s.push(digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    for digit in digits\
    \ {\n        s.push(*digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x / base;\n\
    \        x -= base;\n    }\n    remainder += x;\n    s += remainder.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        remainder *= base;\n  \
    \      quotient /= base;\n    }\n    while remainder > 0 {\n        s.push((remainder\
    \ % base).to_string());\n        remainder /= base;\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = base;\n    while remainder > 0 {\n        if remainder % base == 0 {\n   \
    \         s.push((remainder % base).to_string());\n            remainder /= base;\n\
    \        } else {\n            s.push('0');\n        }\n    }\n    if remainder\
    \ > 0 {\n        s.push((remainder).to_string());\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut base10\
    \ = base.to_string();\n    let mut base10_digits = base10.to_string();\n    while\
    \ base10_digits.length() > 0 {\n        if base10_digits.len() > 0 {\n       \
    \     s.push_str(&base10_digits);\n            base10_digits = base10_digits[..];\n\
    \        }\n        let digit = digits.chars().nth(base10_digits.length()).unwrap();\n\
    \        if digit == '0' {\n            s.push_str(&digits[..base10_digits.length()]);\n\
    \            digits = digits[base10_digits.length()..];\n            base10_digits\
    \ = base10_digits[..];\n        } else {\n            s.push_str(&digit);\n  \
    \          digits = digits[1..];\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut i = 0;\n    while i < digits.len() {\n        if base == 10 {\n  \
    \          s.push_str(&digits[i..i + 1]);\n            break;\n        }\n   \
    \     let mut digit = digits[i..i + 1];\n        let mut digit = digit.chars().nth(digit\
    \ as usize).unwrap();\n        if digit >= '0' && digit <= '9' {\n           \
    \ digit -= '0';\n        } else {\n            digit -= 'a' as u8;\n        }\n\
    \        digit *= base;\n        digit += 9 as u8;\n        s.push_str(&digit.to_string());\n\
    \        i += 1;\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    let mut digits_len\
    \ = digits.length();\n    let mut base_len = base.length();\n    let mut i = 0;\n\
    \    while i < digits_len {\n        if digits[i] > base {\n            digits[i]\
    \ = digits[i] - base;\n            i += 1;\n        } else {\n            digits[i]\
    \ = digits[i] + base;\n            i += 1;\n        }\n    }\n    while i < digits_len\
    \ {\n        s += digits[i].to_string();\n        i += 1;\n    }\n    s", "  \
    \  let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ basedigits = digits.chars().map(|c| c as char).collect::<Vec<_>>();\n    basedigits\
    \ = basedigits.iter().cloned().collect();\n    let mut basedigit = basedigits[base];\n\
    \    let mut digit = basedigit;\n    while digit != 0 {\n        s += digit.to_string();\n\
    \        digit /= base;\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0 {\n  \
    \      let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    let mut i = 0;\n    while i < digits.length() {\n        let mut digit =\
    \ digits[i..].parse::<usize>().unwrap();\n        if digit < base {\n        \
    \    digit += base;\n        }\n        s += digit.to_string();\n        i +=\
    \ 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder /=\
    \ base;\n        s.push((&digits[..]).to_digits(base).unwrap().to_string());\n\
    \    }\n    s.push((&digits[..]).to_digits(base).unwrap().to_string());\n    String::from(s)",
  "    let mut s = String::new();\n    let mut x = x as usize;\n    let mut base =\
    \ base as usize;\n    while x > 0 {\n        let r = x % base;\n        s += char::from_u32(r\
    \ as u32).to_string();\n        x /= base;\n    }\n    s += char::from_u32(x as\
    \ u32).to_string();\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string().chars().collect::<Vec<_>>();\n    let mut base = base.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut carry = 0;\n    let mut i = 0;\n    while i < digits.len() {\n  \
    \      let mut digit = digits[i];\n        if digit == '0' {\n            digit\
    \ = &mut carry;\n            carry = 0;\n        }\n        let mut new_digit\
    \ = digit.to_digit(base);\n        if carry > 0 {\n            new_digit += 1;\n\
    \        }\n        i += 1;\n        digits[i] = new_digit;\n    }\n    while\
    \ carry > 0 {\n        digits.push('0');\n        carry -= 1;\n    }\n    for\
    \ i in 0..digits.len() {\n        s += digits[i];\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = s.push_str(&digits[digit].to_string());\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        digits.insert(0, '0');\n    }\n    while remainder < base {\n\
    \        remainder += base;\n        digits.insert(0, '0');\n    }\n    s += digits.to_string();\n\
    \    String::from(s)", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder = x%base;\n\
    \        digits.push(char::from(remainder + '0'));\n        x = x/base;\n    }\n\
    \    digits.push(char::from(x));\n    s += digits.into_owned();\n    s", "   \
    \ let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > base {\n        remainder -= base;\n        digits.insert(0,\
    \ base.to_string());\n    }\n    digits.insert(0, remainder.to_string());\n  \
    \  s += &digits;\n    s", "    let mut s = String::new();\n    let mut remain\
    \ = x;\n    while remain > 0 {\n        let mut digit = remain;\n        remain\
    \ -= digit;\n        if digit >= base {\n            digit -= base;\n        \
    \    s.push((digit as char).to_string());\n        } else {\n            s.push((digit\
    \ as char).to_string());\n        }\n    }\n    String::from(s)", "    let mut\
    \ s = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder += x % base;\n        x /= base;\n\
    \    }\n    s += digits.to_string();\n    s += remainder.to_string();\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digit);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut base =\
    \ base.to_string();\n    let mut i = 0;\n    while i < digits.len() {\n      \
    \  if base == 10 {\n            s += &digits[i..];\n            break;\n     \
    \   }\n        let mut digit = digits[i..].parse::<usize>().unwrap();\n      \
    \  if digit < base {\n            s += &digit.to_string();\n        } else {\n\
    \            s += &base;\n            i += 1;\n        }\n    }\n    s", "   \
    \ let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut power = 1;\n    let mut i = 0;\n    while\
    \ i < digits.length() {\n        if digits[i] > base {\n            power = power.powf(2);\n\
    \            digits = digits.subs_mut(i);\n            i += 1;\n        } else\
    \ {\n            power = power.powf(10);\n            digits = digits.subs_mut(i);\n\
    \            i += 1;\n        }\n    }\n    s = s.push_str(&digits);\n    s =\
    \ s.push_str(&base);\n    s = s.push_str(&power);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ i = 0;\n    while remainder > 0 {\n        let mut digit = digits[digits.len()\
    \ - 1 - i].to_digit(base);\n        remainder -= digit;\n        i += 1;\n   \
    \     s.push((digit as char).to_string());\n    }\n    String::from(s)", "   \
    \ let mut s = String::new();\n    let mut x = x;\n    while x >= base {\n    \
    \    s +=\n            format!(\"{}\", x % base).to_string()\n               \
    \ .chars()\n                .map(|c| c as char)\n                .collect();\n\
    \        x /= base;\n    }\n    s +=\n        format!(\"{}\", x).to_string()\n\
    \            .chars()\n            .map(|c| c as char)\n            .collect();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let digit = quotient %\
    \ base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\",\
    \ digit, s);\n        quotient = quotient / base;\n    }\n    if remainder > 0\
    \ {\n        s = format!(\"{}\", remainder) + s;\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut remain = x;\n    while remain > 0 {\n      \
    \  let mut digit = remain;\n        remain %= base;\n        digit += base;\n\
    \        s += digit.to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    while base.len() > 0 {\n        let mut digit\
    \ = digits.chars().nth(base.len() - 1);\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        digit = digit.to_string();\n    \
    \    digit = digit.to_string();\n        digit = digit.to_string();\n        digit\
    \ = digit.to_string();\n        digit = digit.to_string();\n        digit = digit.to_string();\n\
    \        digit = digit.to_string();\n        ", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   while base.len() > 0 {\n        let mut digit = digits.chars().nth(base.len()\
    \ - 1).unwrap();\n        digit = digit.to_string();\n        s = format!(\"{}{}\"\
    , s, digit);\n        base = base.chars().nth(base.len() - 1).unwrap();\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut digits = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits = base;\n    }\n    while digits > 0 {\n        s.push((remainder\
    \ % digits).to_string());\n        remainder /= digits;\n        digits *= base;\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut remainder\
    \ = 0;\n    while x >= base {\n        remainder = x % base;\n        s += char::from_u32(base).unwrap();\n\
    \        x = x / base;\n    }\n    s += char::from_u32(remainder).unwrap();\n\
    \    s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > base {\n        remainder -=\
    \ base;\n        result.push((&digits[..]).to_digit(base).unwrap());\n    }\n\
    \    result.push((&digits[..]).to_digit(base).unwrap());\n    result", "    let\
    \ mut s = String::new();\n    let mut remainder = 0;\n    while x >= base {\n\
    \        remainder += x % base;\n        x /= base;\n    }\n    if x >= 1 {\n\
    \        remainder += x;\n    }\n    s += format!(\"{}\", remainder);\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > base {\n        remainder -= base;\n \
    \       s += &digits[..base];\n    }\n    s += &digits[..remainder];\n    s",
  "    let mut s = String::new();\n    let mut remainder = 0;\n    while x >= base\
    \ {\n        remainder += x % base;\n        x /= base;\n    }\n    s += &format!(\"\
    {}\", remainder);\n    while x > 0 {\n        remainder += x;\n        x /= base;\n\
    \        s += &format!(\"{}\", remainder);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        digits.push(digit.to_string());\n    }\n    s += digits.reverse();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut basedigits = base.to_string().chars().collect::<Vec<_>>();\n    let\
    \ mut carry = 0;\n    while !digits.is_empty() {\n        let digit = digits.remove(0).unwrap();\n\
    \        let basedigit = basedigits.remove(0).unwrap();\n        let mut newdigit\
    \ = digit + basedigit + carry;\n        if newdigit > 9 {\n            newdigit\
    \ -= 10;\n            carry = 1;\n        } else {\n            carry = 0;\n \
    \       }\n        s.push((newdigit as char).to_string());\n    }\n    if carry\
    \ != 0 {\n        s.push(carry.to_string());\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    while remainder > 0 {\n    \
    \    let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s.push((base as char).to_string());\n    }\n    s.push((remainder as\
    \ char).to_string());\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut digits_len\
    \ = digits.length();\n    let mut base_len = base.length();\n    while digits_len\
    \ > base_len {\n        digits = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \        base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while digits_len < base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ += 1;\n        base_len += 1;\n    }\n    let mut digits_len = digits.length();\n\
    \    let mut base_len = base.length();\n    while digits_len > base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ -= 1;\n        base_len -= 1;\n    }\n    while digits_len < base_len {\n  \
    \      digits = digits.chars().nth(digits_len).unwrap().to_string();\n       \
    \ base = base.chars().nth(base_len).unwrap().to_string();\n        digits_len\
    \ += 1;\n        base_len += 1;\n    }\n    if digits_len == 0 {\n        s +=\
    \ base;\n    } else {\n        while digits_len > 0 {\n            let mut digit\
    \ = digits.chars().nth(digits_len).unwrap().to_string();\n            digits =\
    \ digits.chars().nth(digits_len).unwrap().to_string();\n            s += digit;\n\
    \            digits_len -= 1;\n        }\n        while digits_len < base_len\
    \ {\n            let mut digit = digits.chars().nth(digits_len).unwrap().to_string();\n\
    \            digits = digits.chars().nth(digits_len).unwrap().to_string();\n \
    \           s += digit;\n            digits_len += 1;\n        }\n        s +=\
    \ base;\n    }\n    s", "    let mut s = String::new();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digits[digit]);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut power =\
    \ 1;\n    let mut i = 0;\n    while i < digits.len() {\n        if digits[i] ==\
    \ base {\n            power = power * base;\n            i += 1;\n        } else\
    \ {\n            if power > 0 {\n                s.push_str(&format!(\"{}{}\"\
    , digits[i - 1], power));\n                power = 1;\n            }\n       \
    \     i += 1;\n        }\n    }\n    if power > 0 {\n        s.push_str(&format!(\"\
    {}{}\", digits[i - 1], power));\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s.push((&digits[..]).to_string()\
    \ + &\"0\".to_string());\n    }\n    s.push((&digits[..]).to_string() + &\"0\"\
    .to_string());\n    String::from(s)", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut base =\
    \ base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if base == 0 {\n            s.push_str(&digits[i]);\n\
    \            i += 1;\n        } else {\n            let mut j = i;\n         \
    \   while j < digits.len() && base != 0 {\n                let mut c = digits[j];\n\
    \                digits[j] = digits[j].chars().next().unwrap();\n            \
    \    let mut base = base.chars().collect::<Vec<_>>();\n                base[base.len()\
    \ - 1] += c;\n                base = base.iter().cloned().collect::<Vec<_>>();\n\
    \                j += 1;\n            }\n            s.push_str(&digits[i .. j]);\n\
    \            i += j - i;\n        }\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ digits_len = digits.length();\n    while remainder > base {\n        remainder\
    \ -= base;\n        digits.insert(0, base.to_string());\n        digits_len +=\
    \ 1;\n    }\n    while remainder > 0 {\n        remainder -= 1;\n        digits.insert(0,\
    \ remainder.to_string());\n        digits_len += 1;\n    }\n    s.push_str(&digits[..digits_len]);\n\
    \    s", "    let mut s = String::new();\n    let mut x = x;\n    while x >= base\
    \ {\n        x /= base;\n        s += String::from(format!(\"{}\", x));\n    }\n\
    \    s += String::from(format!(\"{}\", x));\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut\
    \ digits_len = digits.length();\n    while remainder > base {\n        remainder\
    \ -= base;\n        digits.insert(0, &format!(\"{}\", remainder));\n    }\n  \
    \  while digits_len > 0 {\n        let mut digit = digits.chars().nth(digits_len).unwrap();\n\
    \        if digit >= '0' && digit <= '9' {\n            digit -= '0';\n      \
    \  } else {\n            digit -= 'a' - 10;\n        }\n        digits.insert(0,\
    \ &format!(\"{}\", digit));\n        digits_len -= 1;\n    }\n    s += &digits;\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = 0;\n    while\
    \ x >= base {\n        remainder += x % base;\n        x /= base;\n    }\n   \
    \ s += &format!(\"{}\", remainder);\n    while x > 0 {\n        remainder += x;\n\
    \        x /= base;\n        s += &format!(\"{}\", remainder);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s.push((digit as char).to_string());\n    }\n    s.push((remainder\
    \ as char).to_string());\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut remain\
    \ = x;\n    while remain > 0 {\n        let mut digit = remain;\n        remain\
    \ %= base;\n        digit = digit as usize + 1;\n        s.push((digit as char).to_string());\n\
    \    }\n    String::from(s)", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = 0;\n    while digits.len() > 0 {\n\
    \        let digit = digits.chars().nth(digits.len() - 1).unwrap();\n        let\
    \ mut new_digit = digit;\n        let mut new_remainder = 0;\n        while new_digit\
    \ != 0 {\n            let mut new_digit = digit.chars().nth(digits.len() - 1).unwrap();\n\
    \            new_remainder = new_remainder + (new_digit as isize * base);\n  \
    \          new_digit = new_digit as isize - 1;\n        }\n        s = format!(\"\
    {}{}\", s, new_remainder);\n        digits = digits.chars().nth(digits.len() -\
    \ 1);\n    }\n    s", "    let mut s = String::new();\n    let mut remain = x;\n\
    \    while remain > 0 {\n        let mut digit = remain;\n        remain %= base;\n\
    \        digit += base;\n        s.push((digit as char).to_string());\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut carry = 0;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1).unwrap();\n\
    \        let digit = digit.to_digit(base).unwrap();\n        let digit = digit\
    \ + carry;\n        carry = digit / 10;\n        digits = digits.chars().nth(digits.len()\
    \ - 1).unwrap();\n        s = s.push_str(digit.to_string());\n    }\n    if carry\
    \ > 0 {\n        s = s.push_str(&format!(\"{}\", carry));\n    }\n    s", "  \
    \  let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = base;\n    while remainder > 0 {\n        remainder %= base;\n        digits\
    \ = base;\n    }\n    while digits > 0 {\n        s.push((digits as char).to_string());\n\
    \        digits /= base;\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s = format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n    while\
    \ quotient > 0 {\n        let remainder = quotient % base;\n        quotient =\
    \ quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut quotient\
    \ = x;\n    while quotient > 0 {\n        let remainder = quotient % base;\n \
    \       quotient = quotient / base;\n        s = format!(\"{}{}\", s, remainder);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    while base.len() > 0 {\n        let\
    \ mut digit = digits.chars().nth(base.len() - 1).unwrap();\n        if digit ==\
    \ '0' {\n            digit = digits.chars().nth(base.len() - 2).unwrap();\n  \
    \      }\n        base.truncate(base.len() - 1);\n        s += digit;\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i..i + 1]);\n   \
    \         break;\n        }\n        let mut digit = digits[i..i + 1];\n     \
    \   if digit == &base[0] {\n            s.push_str(&digits[0..i]);\n         \
    \   i += 1;\n        } else {\n            s.push_str(&base);\n            base\
    \ = &base[1..];\n        }\n    }\n    s", "    let mut s = String::new();\n \
    \   let mut digits = x.to_string();\n    let mut power = base;\n    while power.is_positive()\
    \ {\n        if digits.len() < power.to_digits().len() {\n            digits.push_str(&format!(\"\
    0{}\", power));\n        }\n        power = power.saturating_sub(1);\n    }\n\
    \    digits.push_str(&format!(\"{}\", power));\n    s += &digits[..];\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i..i + 1]);\n   \
    \         break;\n        }\n        let mut digit = digits[i..i + 1];\n     \
    \   if digit >= base {\n            digit -= base;\n            i += 1;\n    \
    \    }\n        s.push_str(&digit.to_string());\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n  \
    \  while quotient > 0 {\n        let remainder = quotient % base;\n        quotient\
    \ = quotient / base;\n        s.push(remainder);\n    }\n    s.push(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        if base > 10 {\n            s.push_str(&digits[i..]);\n         \
    \   break;\n        }\n        let mut digit = digits[i..];\n        let mut digit\
    \ = digit.chars().nth(digit.len() - 1);\n        let mut base = base.chars().nth(base.len()\
    \ - 1);\n        if digit == base {\n            s.push_str(&digit);\n       \
    \ } else {\n            s.push_str(&digit.to_string());\n            s.push_str(&base.to_string());\n\
    \        }\n        i += 1;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient /= base;\n   \
    \     s.push(remainder);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient = quotient / base;\n\
    \        s.push(remainder);\n    }\n    s.push(remainder);\n    s", "    let mut\
    \ s = String::new();\n    let mut remainder = x;\n    let mut quotient = x;\n\
    \    while quotient > 0 {\n        remainder *= base;\n        remainder %= base;\n\
    \        quotient /= base;\n        s.push((quotient as u32).to_string());\n \
    \   }\n    if remainder > 0 {\n        s.push((remainder as u32).to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut quotient = x;\n    while quotient > 0 {\n        let digit = quotient\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n        quotient = quotient / base;\n    }\n    if remainder > 0\
    \ {\n        s = format!(\"{}\", remainder) + s;\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n   \
    \     remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    while remainder > 0 {\n        let mut digit = remainder % base;\n      \
    \  remainder = remainder / base;\n        s.push((digit as char).to_string());\n\
    \    }\n    s.push((remainder as char).to_string());\n    s", "    let mut result\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    let mut base: isize = base.to_digits();\n    while remainder > 0 {\n\
    \        let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        result = digit.to_string() + result;\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut digits = x.to_string();\n    let mut base\
    \ = base.to_string();\n    let mut digits_len = digits.length();\n    let mut\
    \ base_len = base.len();\n    let mut i = 0;\n    while i < digits_len {\n   \
    \     let mut digit = digits[i..].parse().unwrap();\n        let mut base = base.parse().unwrap();\n\
    \        if digit > base {\n            result.push_str(&base.repeat(digit - base));\n\
    \            digit = digit - base;\n            base = base.parse().unwrap();\n\
    \        }\n        result.push_str(&digit.repeat(base));\n        i += 1;\n \
    \   }\n    result", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut base = base;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        s += char::from_u32(base);\n        base /= base;\n    }\n    s += char::from_u32(remainder);\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut quotient = x;\n    while quotient > 0 {\n        let mut digit = quotient\
    \ % base;\n        remainder = quotient / base;\n        if digit < 10 {\n   \
    \         s.push_str(&format!(\"{}\", digit));\n        } else {\n           \
    \ s.push_str(&format!(\"{}\", digit - 10));\n        }\n        quotient = remainder;\n\
    \    }\n    if remainder > 0 {\n        s.push_str(&format!(\"{}\", remainder));\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = x;\n\
    \    let mut quotient = x;\n    while quotient > 0 {\n        let digit = quotient\
    \ % base;\n        remainder = quotient / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n        quotient = remainder;\n    }\n    if remainder > 0 {\n \
    \       s = format!(\"{}\", remainder);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut x = x.to_digits();\n    let mut base = base.to_digits();\n\
    \    let mut i = 0;\n    while i < x.len() {\n        let mut carry = 0;\n   \
    \     for j in 0..i {\n            let mut z = base[j].to_digits();\n        \
    \    z = z + x[i] * z + carry;\n            carry = z / 10;\n            z = z\
    \ % 10;\n            s.push_str(&format!(\"{}\", z));\n        }\n        if carry\
    \ > 0 {\n            s.push_str(&format!(\"{}\", carry));\n        }\n       \
    \ i += 1;\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    while base.len()\
    \ > 0 {\n        let digit = digits.chars().nth(base.len() - 1).unwrap();\n  \
    \      s += digit;\n        digits -= digit;\n        base /= 10;\n    }\n   \
    \ s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n \
    \   let mut base = base.to_string();\n    while digits.len() > 0 {\n        let\
    \ digit = digits.chars().nth(digits.len() - 1).unwrap();\n        let digit =\
    \ match digit {\n            '0' => 0,\n            '1' => 1,\n            '2'\
    \ => 2,\n            '3' => 3,\n            '4' => 4,\n            '5' => 5,\n\
    \            '6' => 6,\n            '7' => 7,\n            '8' => 8,\n       \
    \     '9' => 9,\n            _ => panic!(\"Invalid digit: {}\", digit),\n    \
    \    };\n        let mut new_digit = digit;\n        for i in base.chars().nth(base.len()\
    \ - 1) {\n            let mut new_digit = digit;\n            new_digit *= i;\n\
    \            if new_digit > 9 {\n                new_digit -= 10;\n          \
    \  }\n            s += char::from_u32(new_digit).unwrap();\n        }\n      \
    \  digits = digits.chars().nth(digits.len() - 1);\n        base = base.chars().nth(base.len()\
    \ - 1);\n    }\n    s", "    let mut s = String::new();\n    let mut digits =\
    \ x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n    \
    \    let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        s = format!(\"{}{}\", digits, digit.to_string());\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while let Some(digit) = digits.iter().next() {\n        let\
    \ mut new_digit = digit;\n        if let Some(base) = base.iter().next() {\n \
    \           let mut new_base = base;\n            if let Some(carry) = carry.iter().next()\
    \ {\n                new_base += carry;\n            }\n            new_digit\
    \ += new_base;\n        }\n        s.push(*new_digit);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        remainder *= base;\n        s += char::from_u32(x as u32).unwrap();\n\
    \    }\n    s", "    let mut result = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut index = digits.len() - 1;\n        while index >= 0 {\n\
    \            let digit = digits.chars().nth(index).unwrap();\n            if digit\
    \ == base[digit] {\n                result.push((digit as char).to_string());\n\
    \                digits.remove(index);\n                break;\n            }\n\
    \            index -= 1;\n        }\n        remainder -= 1;\n    }\n    result",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s.push((digit as char).to_string());\n    }\n    s.push((remainder\
    \ as char).to_string());\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    while base.len()\
    \ > 0 {\n        if base.len() < digits.len() {\n            digits = digits.chars().collect::<String>().to_string();\n\
    \        }\n        let mut digit = digits.chars().nth(base.len() - 1).unwrap();\n\
    \        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2).unwrap();\n        }\n        s += digit;\n        base = base.chars().nth(base.len()\
    \ - 1).unwrap();\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ x = x;\n    let mut base = base;\n    while x >= base {\n        x /= base;\n\
    \        s += &format!(\"{}\", x);\n    }\n    s += &format!(\"{}\", x);\n   \
    \ s", "    let mut s = String::new();\n    let mut digits = String::new();\n \
    \   let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    while x != 0 {\n        digits.push_str(&format!(\"\
    {}\", x));\n        x %= base;\n    }\n    s += digits;\n    if remainder != 0\
    \ {\n        s += &format!(\"{}\", remainder);\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = String::new();\n    let mut remainder\
    \ = x;\n    let mut i = 0;\n    while remainder > 0 {\n        remainder %= base;\n\
    \        digits.push(match remainder {\n            0 => \"0\",\n            1\
    \ => \"1\",\n            2 => \"2\",\n            3 => \"3\",\n            4 =>\
    \ \"4\",\n            5 => \"5\",\n            6 => \"6\",\n            7 => \"\
    7\",\n            8 => \"8\",\n            9 => \"9\",\n            _ => unreachable!(),\n\
    \        });\n        i += 1;\n        remainder /= base;\n    }\n    digits.push(digits[digits.len()\
    \ - 1]);\n    s += digits.clone();\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut power = 1;\n    while digits.len()\
    \ > 0 {\n        if digits.len() > base {\n            digits = &digits[..(digits.len()\
    \ - base)];\n        } else {\n            digits = &digits[..digits.len() - 1];\n\
    \        }\n        power = power << base;\n    }\n    s += power.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    let\
    \ mut digits = 1;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        if digit > 0 {\n   \
    \         s.push_str(&format!(\"{}\", digit));\n            digits += 1;\n   \
    \     }\n    }\n    if digits > 0 {\n        s.push_str(&format!(\"{}\", digits));\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut base = base.to_string();\n    let mut i = 0;\n    while i < digits.len()\
    \ {\n        if base == 10 {\n            s.push_str(&digits[i .. (i + 1)]);\n\
    \            i += 1;\n        } else {\n            let mut digit = digits[i ..\
    \ (i + 1)].parse::<usize>().unwrap();\n            if digit < base {\n       \
    \         digit += base;\n                s.push_str(&digit.to_string());\n  \
    \          } else {\n                s.push_str(&digits[i .. (i + 1)]);\n    \
    \            i += 1;\n            }\n        }\n    }\n    s", "    let mut s\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut remainder\
    \ = x;\n    let mut digits_len = digits.len();\n    let mut remainder_len = remainder.len();\n\
    \    while remainder_len > 0 {\n        let mut digit = digits[digits_len - 1];\n\
    \        let mut remainder_digit = remainder[remainder_len - 1];\n        if digit\
    \ == 0 {\n            digit = remainder_digit;\n            remainder_len -= 1;\n\
    \        } else {\n            digit = digit / base;\n            digit = digit\
    \ * base;\n            digits[digits_len - 1] = digit;\n            remainder_len\
    \ -= 1;\n        }\n        digits_len -= 1;\n        remainder_len -= 1;\n  \
    \  }\n    s += digits.to_string();\n    s", "    let mut s = String::new();\n\
    \    let mut digits = String::new();\n    let mut remainder = 0;\n    while x\
    \ >= base {\n        remainder = x % base;\n        digits.push(format!(\"{}\"\
    , remainder));\n        x /= base;\n    }\n    digits.push(format!(\"{}\", x));\n\
    \    s += digits.into_owned();\n    s", "    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let remainder = quotient % base;\n        quotient /= base;\n   \
    \     result = format!(\"{}{}\", result, remainder);\n    }\n    result", "  \
    \  let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ base = base.to_string();\n    let mut i = 0;\n    while i < digits.len() {\n\
    \        if base == 10 {\n            s.push_str(&digits[i..i + 1]);\n       \
    \     break;\n        }\n        let mut digit = digits[i..i + 1];\n        let\
    \ mut power = 1;\n        while let Some(digit) = digit.chars().nth(0) {\n   \
    \         power = power * base;\n            digit = digit.chars().nth(1);\n \
    \       }\n        let mut new_digit = digit.to_string();\n        new_digit.push_str(&format!(\"\
    {}\", power));\n        s.push_str(&new_digit);\n        i += 1;\n    }\n    s",
  "    let mut s = String::new();\n    let mut digits = x.to_string();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let digit = remainder % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", s, digits[digit]);\n\
    \    }\n    s", "    let mut result = String::new();\n    let mut remainder =\
    \ x;\n    while remainder > 0 {\n        let mut digit = remainder % base;\n \
    \       remainder = remainder / base;\n        result = format!(\"{}{}\", digit,\
    \ result);\n    }\n    result", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut base = base.to_string();\n    let mut i = 0;\n\
    \    while i < digits.length() {\n        if base < 10 {\n            s.push_str(&digits[i..i\
    \ + 1]);\n            i += 1;\n        } else {\n            s.push_str(&digits[i..i\
    \ + base.len()]);\n            i += base.len();\n        }\n    }\n    s", " \
    \   let mut s = String::new();\n    let mut x = x as usize;\n    let mut base\
    \ = base as usize;\n    while x >= base {\n        x /= base;\n        s += &format!(\"\
    {}\", x);\n    }\n    s += &format!(\"{}\", x);\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = x;\n    while remainder\
    \ > base {\n        remainder -= base;\n        s += &digits[..base];\n    }\n\
    \    s += &digits[..remainder];\n    s", "    let mut s = String::new();\n   \
    \ let mut digits = x.to_string();\n    let mut remainder = x;\n    let mut base\
    \ = base;\n    while remainder > 0 {\n        if remainder >= base {\n       \
    \     digits = digits.chars().filter(|&c| c != '0').collect();\n            s.push_str(&digits[..base]);\n\
    \            remainder -= base;\n        } else {\n            s.push_str(&digits[..]);\n\
    \            remainder -= 1;\n        }\n    }\n    s.push_str(&digits[..]);\n\
    \    s", "    let mut result = String::new();\n    let mut remainder = x;\n  \
    \  let mut quotient = x;\n    while quotient > 0 {\n        let remainder = quotient\
    \ % base;\n        quotient = quotient / base;\n        result.push(remainder);\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    let mut digit = String::new();\n    for &d in &digits {\n  \
    \      let mut digit = d.to_string().chars().collect::<Vec<_>>();\n        let\
    \ mut digits = base.clone();\n        digits.insert(0, digit);\n        let mut\
    \ digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.len() - 1];\n        let mut digit = digit.to_string().chars().collect::<Vec<_>>();\n\
    \        let mut digits = digits.clone();\n        digits.insert(0, digit);\n\
    \        let mut digit = digits[digits.", "    let mut s = String::new();\n  \
    \  let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = vec![0u8; base];\n    let mut carry = 0;\n    while x >= base {\n        digits[base]\
    \ = x % base;\n        x /= base;\n        carry = 1;\n    }\n    while x > 0\
    \ {\n        digits[base] = x % base;\n        x /= base;\n        carry = 0;\n\
    \    }\n    if carry != 0 {\n        digits[base] = 1;\n    }\n    for i in 0..digits.len()\
    \ {\n        s += digits[i].to_string();\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = vec![0; base];\n    let mut carry = 0;\n    while x >= base\
    \ {\n        let digit = x % base;\n        digits[digit] += 1;\n        x /=\
    \ base;\n    }\n    for digit in digits.iter() {\n        if *digit > 0 {\n  \
    \          s.push_str(&format!(\"{}\", digit));\n        } else {\n          \
    \  s.push_str(&format!(\"{}\", *digit));\n        }\n    }\n    if carry > 0 {\n\
    \        s.push_str(&format!(\"{}\", carry));\n    }\n    s", "    let mut s =\
    \ String::new();\n    let mut digits = x.to_string();\n    let mut remainder =\
    \ x;\n    while remainder > 0 {\n        let digit = remainder % base;\n     \
    \   remainder = remainder / base;\n        s = format!(\"{}{}\", digits, digit);\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut remainder = 0;\n\
    \    while x >= base {\n        remainder += x % base;\n        x = x / base;\n\
    \    }\n    if x < base {\n        remainder += x;\n    }\n    s += format!(\"\
    {}\", remainder);\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > base {\n\
    \        remainder -= base;\n        s.push((&digits[..]).to_string() + &base.to_string());\n\
    \    }\n    s.push((&digits[..]).to_string() + &remainder.to_string());\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s", "    let mut\
    \ s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ i = 0;\n    while i < digits.len() {\n        if base == 0 {\n            s.push('0');\n\
    \            i += 1;\n            continue;\n        }\n        if base < 10 {\n\
    \            s.push('0');\n            i += 1;\n            continue;\n      \
    \  }\n        let mut j = i;\n        while j < digits.len() {\n            if\
    \ digits[j] < base {\n                s.push('0');\n                j += 1;\n\
    \                continue;\n            }\n            s.push('1');\n        \
    \    j += 1;\n        }\n        i += j - i;\n    }\n    s", "    let mut result\
    \ = String::new();\n    let mut digits = x.to_string();\n    let mut base = base.to_string();\n\
    \    let mut remainder = 0;\n    let mut i = 0;\n    while i < digits.length()\
    \ {\n        let mut digit = digits[i..].parse::<isize>().unwrap();\n        remainder\
    \ += digit * base;\n        i += 1;\n        if remainder >= 10 {\n          \
    \  remainder -= 10;\n            result += &base[remainder];\n        } else {\n\
    \            result += &base[remainder];\n        }\n    }\n    result", "   \
    \ let mut s = String::new();\n    let mut remainder = x;\n    let mut digits =\
    \ String::new();\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        digits.push(digit.to_string());\n\
    \    }\n    for digit in digits {\n        s.push(*digit);\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = 0;\n    let mut digits\
    \ = x.to_string();\n    while !digits.is_empty() {\n        let digit = digits.chars().nth(1).unwrap();\n\
    \        let digit = match digit {\n            '0' => 0,\n            '1' =>\
    \ 1,\n            '2' => 2,\n            '3' => 3,\n            '4' => 4,\n  \
    \          '5' => 5,\n            '6' => 6,\n            '7' => 7,\n         \
    \   '8' => 8,\n            '9' => 9,\n            _ => panic!(\"Invalid digit\
    \ {}\", digit),\n        };\n        let digit = digit as isize;\n        remainder\
    \ = digit % base;\n        s = format!(\"{}{}\", s, digit);\n        digits =\
    \ digits.chars().nth(1).unwrap();\n    }\n    if remainder != 0 {\n        s =\
    \ format!(\"{}{}\", s, remainder);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ remain = x;\n    while remain > 0 {\n        let mut digit = remain;\n     \
    \   remain %= base;\n        digit += base;\n        s.push((digit as char).to_string());\n\
    \    }\n    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digits[digit]);\n    }\n    s", "    let mut s = String::new();\n    let\
    \ mut digits = x.to_string().chars().collect::<Vec<_>>();\n    let mut bases =\
    \ base.to_string().chars().collect::<Vec<_>>();\n    let mut i = 0;\n    while\
    \ i < digits.len() {\n        if digits[i] == bases[i] {\n            i += 1;\n\
    \        } else {\n            s.push_str(&bases[digits[i] - base]);\n       \
    \     i += 1;\n        }\n    }\n    s", "    let mut s = String::new();\n   \
    \ let mut remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut digits\
    \ = x.to_string();\n    let mut remainder = x;\n    while remainder > 0 {\n  \
    \      let mut digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    for digit in digits {\n \
    \       s.push(*digit);\n    }\n    String::from(s)", "    let mut s = String::new();\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n    }\n    if x > 0 {\n        remainder += x;\n    }\n \
    \   s += &format!(\"{}\", remainder);\n    s", "    let mut s = String::new();\n\
    \    let mut remainder = x;\n    while remainder > 0 {\n        let mut digit\
    \ = remainder % base;\n        remainder = remainder / base;\n        s = format!(\"\
    {}{}\", digit, s);\n    }\n    s", "    let mut s = String::new();\n    let mut\
    \ digits = x.to_string();\n    let mut base = base.to_string();\n    while base.len()\
    \ > 0 {\n        let mut digit = digits.chars().nth(base.len() - 1).unwrap();\n\
    \        if digit == '0' {\n            digit = digits.chars().nth(base.len()\
    \ - 2).unwrap();\n        }\n        s += digit;\n        digits.remove(base.len()\
    \ - 1);\n        base = base.chars().nth(base.len() - 1).unwrap();\n    }\n  \
    \  s", "    let mut s = String::new();\n    let mut remainder = x;\n    let mut\
    \ quotient = x;\n    while quotient > 0 {\n        let digit = quotient % base;\n\
    \        remainder = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n\
    \        quotient = quotient / base;\n    }\n    if remainder > 0 {\n        s\
    \ = format!(\"{}\", remainder) + s;\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base10 = base.to_string();\n\
    \    while base10.len() > 0 {\n        let mut digit = digits.chars().nth(base10.len()\
    \ - 1);\n        if digit == b'0' {\n            digits.pop();\n        } else\
    \ {\n            s.push_str(&digit);\n        }\n        base10 -= 1;\n    }\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut basedigits = digits.chars().map(|c| c.to_digit(base)).collect::<Vec<_>>();\n\
    \    let mut i = 0;\n    while i < basedigits.len() {\n        if basedigits[i]\
    \ == 0 {\n            basedigits.remove(i, 1);\n        } else {\n           \
    \ i += 1;\n        }\n    }\n    s += &basedigits.to_string();\n    s", "    let\
    \ mut s = String::new();\n    let mut digits = x.to_string().chars().collect::<Vec<_>>();\n\
    \    let mut base = base.to_string().chars().collect::<Vec<_>>();\n    let mut\
    \ carry = 0;\n    while digits.len() > 0 {\n        let digit = digits.remove(0);\n\
    \        let mut new_digit = digit;\n        if base == 2 {\n            if carry\
    \ > 0 {\n                new_digit += 1;\n            }\n        }\n        if\
    \ base == 8 {\n            if carry > 0 {\n                new_digit += 1;\n \
    \           }\n        }\n        if base == 10 {\n            if carry > 0 {\n\
    \                new_digit += 1;\n            }\n        }\n        if base ==\
    \ 16 {\n            if carry > 0 {\n                new_digit += 1;\n        \
    \    }\n        }\n        if base == 2 {\n            if carry > 0 {\n      \
    \          new_digit += 1;\n            }\n        }\n        if base == 8 {\n\
    \            if carry > 0 {\n                new_digit += 1;\n            }\n\
    \        }\n        if base == 10 {\n            if carry > 0 {\n            \
    \    new_digit += 1;\n            }\n        }\n        if base == 16 {\n    \
    \        if carry > 0 {\n                new_digit += 1;\n            }\n    \
    \    }\n        if base == 2 {\n            if carry > 0 {\n                new_digit\
    \ += 1;\n            }\n        }\n        if base == 8 {\n            if carry\
    \ > 0 {\n                new_digit += 1;\n            }\n        }\n        if\
    \ base == 10 {\n            if carry > 0 {\n                new_digit += 1;\n\
    \            }\n        }\n        if base == 16 {\n            if carry > 0 {\n\
    \                new_digit += 1;\n            }\n        }\n        if base ==\
    \ 2 {\n            if carry > 0 {\n                new_digit += 1;\n         \
    \   }\n        }\n        if base == 8 {\n            if carry > 0 {\n       \
    \         new_digit += 1;\n            }\n        }\n        if base == 10 {\n\
    \            if carry > 0 {\n                new_digit += 1;\n            }\n\
    \        }\n        if base == 16 {\n            if carry > 0 {\n            \
    \    new_digit += 1;\n            }\n        }\n        if base == 2 {\n     \
    \       if carry > 0 {\n                new_digit += 1;\n            }\n     \
    \   }\n        if base == 8 {\n            if carry > 0 {\n                new_digit\
    \ += 1;\n            }\n        }\n        if base == 10 {\n            if carry\
    \ > 0 {\n                new_digit += 1;\n            }\n        }\n        if\
    \ base == 16 {\n            if carry > 0 {\n                new_digit += 1;\n\
    \            }\n        }\n        if base == 2 {\n            if carry > 0 {\n\
    \                new_digit += 1;\n            }\n        }\n        if base ==\
    \ 8 {", "    let mut s = String::new();\n    let mut digits = vec![0u8; base];\n\
    \    let mut remainder = 0;\n    while x >= base {\n        remainder += x % base;\n\
    \        x /= base;\n        digits.insert(0, remainder);\n    }\n    while x\
    \ >= 1 {\n        remainder += x;\n        x /= 1;\n        digits.insert(0, remainder);\n\
    \    }\n    digits.insert(0, x);\n    s.push_str(&digits.iter().map(|x| x.to_string()).collect::<Vec<_>>());\n\
    \    s", "    let mut s = String::new();\n    let mut remainder = x;\n    while\
    \ remainder > 0 {\n        let mut digit = remainder % base;\n        remainder\
    \ = remainder / base;\n        s = format!(\"{}{}\", digit, s);\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s = s.chars().collect::<String>().push(digit as char);\n  \
    \  }\n    s", "    let mut s = String::new();\n    let mut x = x as usize;\n \
    \   let mut base = base as usize;\n    while x >= base {\n        x /= base;\n\
    \        s += &format!(\"{:0{}}\", x, base);\n    }\n    s += &format!(\"{:0{}}\"\
    , x, base);\n    s", "    let mut s = String::new();\n    let mut digits = String::new();\n\
    \    let mut remainder = x;\n    let mut quotient = x;\n    while quotient > 0\
    \ {\n        let digit = quotient % base;\n        quotient = quotient / base;\n\
    \        digits.push(digit.to_string());\n    }\n    while remainder > 0 {\n \
    \       let digit = remainder % base;\n        remainder = remainder / base;\n\
    \        digits.push(digit.to_string());\n    }\n    digits.reverse();\n    for\
    \ digit in digits {\n        s.push(digit);\n    }\n    s", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut remainder = 0;\n    while digits.len()\
    \ > 0 {\n        let digit = digits.chars().nth(digits.len() - 1);\n        let\
    \ digit = digit.parse::<isize>().unwrap();\n        remainder *= base;\n     \
    \   remainder += digit;\n        digits = digits.chars().nth(digits.len() - 1);\n\
    \    }\n    if remainder > 0 {\n        remainder *= base;\n        remainder\
    \ += 1;\n    }\n    format!(\"{}\", remainder)", "    let mut result = String::new();\n\
    \    let mut remainder = x;\n    let mut base = base;\n    while remainder > 0\
    \ {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        result = format!(\"{}{}\", digit, result);\n    }\n    result",
  "    let mut s = String::new();\n    let mut x = x;\n    while x >= base {\n   \
    \     s *= base;\n        s -= x;\n        x /= base;\n    }\n    s *= base;\n\
    \    s + String::from_str(&x.to_string()).unwrap()", "    let mut s = String::new();\n\
    \    let mut digits = x.to_string();\n    let mut base = base.to_string();\n \
    \   let mut digits_len = digits.length();\n    let mut base_len = base.length();\n\
    \    while digits_len > 0 {\n        let mut digit = digits[digits_len - 1];\n\
    \        let mut base = base[base_len - 1];\n        if digit >= base {\n    \
    \        digit = digit - base;\n            digits_len -= 1;\n        } else {\n\
    \            digit = digit + base;\n            digits_len -= 1;\n           \
    \ base = base * 10;\n        }\n        s += digit.to_string();\n    }\n    s",
  "    let mut s = String::new();\n    let mut remainder = x;\n    let mut digits\
    \ = 1;\n    while remainder > 0 {\n        remainder, remainder = remainder /\
    \ base, digits;\n        digits = digits * base;\n    }\n    s += digits.to_string();\n\
    \    s", "    let mut s = String::new();\n    let mut digits = x.to_string();\n\
    \    let mut remainder = x;\n    let mut i = 0;\n    while remainder > base {\n\
    \        remainder /= base;\n        i += 1;\n    }\n    while i < s.len() {\n\
    \        s += &digits[i as usize];\n        i += 1;\n    }\n    String::from(s)",
  "    let mut s = String::new();\n    let mut remainder = x;\n    while remainder\
    \ > 0 {\n        let mut digit = remainder % base;\n        remainder = remainder\
    \ / base;\n        s.push((digit as char).to_string());\n    }\n    s.push((remainder\
    \ as char).to_string());\n    s", "    let mut s = String::new();\n    let mut\
    \ remainder = x;\n    while remainder > 0 {\n        let mut digit = remainder\
    \ % base;\n        remainder = remainder / base;\n        s = format!(\"{}{}\"\
    , s, digit);\n    }\n    s"]
stop_tokens:
- "\n}"
