name: HumanEval_117_select_words
language: rs
prompt: "/// Given a string s and a natural number n, you have been tasked to implement\
  \ \n/// a function that returns a vector of all words from string s that contain\
  \ exactly \n/// n consonants, in order these words appear in the string s.\n///\
  \ If the string s is empty then the function should return an empty vector.\n///\
  \ Note: you may assume the input string contains only letters and spaces.\n/// Examples:\n\
  /// >>> select_words(String::from(\"Mary had a little lamb\"), 4)\n/// vec![String::from(\"\
  little\")]\n/// >>> select_words(String::from(\"Mary had a little lamb\"), 3)\n\
  /// vec![String::from(\"Mary\"), String::from(\"lamb\")]\n/// >>> select_words(String::from(\"\
  simple white space\"), 2)\n/// vec![]\n/// >>> select_words(String::from(\"Hello\
  \ world\"), 4)\n/// vec![String::from(\"world\")]\n/// >>> select_words(String::from(\"\
  Uncle sam\"), 3)\n/// vec![String::from(\"Uncle\")]\nfn select_words(s: String,\
  \ n: isize) -> Vec<String> {\n"
tests: "}\n\nfn main() {\n    let candidate = select_words;\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 4), vec![String::from(\"little\")]);\n    assert_eq!(candidate(String::from(\"\
  Mary had a little lamb\"), 3), vec![String::from(\"Mary\"), String::from(\"lamb\"\
  )]);\n    assert_eq!(candidate(String::from(\"simple white space\"), 2), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"Hello world\"), 4), vec![String::from(\"\
  world\")]);\n    assert_eq!(candidate(String::from(\"Uncle sam\"), 3), vec![String::from(\"\
  Uncle\")]);\n    assert_eq!(candidate(String::from(\"\"), 4), Vec::<String>::new());\n\
  \    assert_eq!(candidate(String::from(\"a b c d e f\"), 1), vec![String::from(\"\
  b\"), String::from(\"c\"), String::from(\"d\"), String::from(\"f\")]);\n}\n"
completions: ["    let mut words = vec![];\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s.chars().any(|c| c.is_consonant() && c != ' ') {\n          \
    \  words.push(s.split_at(i).collect::<Vec<_>>());\n            i += n;\n     \
    \   }\n        i += 1;\n    }\n    words", "    let mut result = vec![];\n   \
    \ let mut s = s;\n    let mut n = n;\n    while n != 0 {\n        if s.chars().any(|c|\
    \ c.is_consonant()) {\n            result.push(s);\n        }\n        n -= 1;\n\
    \        s = s.chars().filter(|c| c.is_consonant()).collect();\n    }\n    result",
  "    let mut words = vec![];\n    let mut vowels = vec![\"a\", \"e\", \"i\", \"\
    o\", \"u\"];\n    let mut consonants = vec![\"b\", \"c\", \"d\", \"f\", \"g\"\
    , \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"v\", \"w\", \"x\", \"y\", \"z\"];\n    let mut vowel_counter = 0;\n    let\
    \ mut consonant_counter = 0;\n    let mut vowel_counter2 = 0;\n    let mut consonant_counter2\
    \ = 0;\n    let mut vowel_counter3 = 0;\n    let mut consonant_counter3 = 0;\n\
    \    let mut vowel_counter4 = 0;\n    let mut consonant_counter4 = 0;\n    let\
    \ mut vowel_counter5 = 0;\n    let mut consonant_counter5 = 0;\n    let mut vowel_counter6\
    \ = 0;\n    let mut consonant_counter6 = 0;\n    let mut vowel_counter7 = 0;\n\
    \    let mut consonant_counter7 = 0;\n    let mut vowel_counter8 = 0;\n    let\
    \ mut consonant_counter8 = 0;\n    let mut vowel_counter9 = 0;\n    let mut consonant_counter9\
    \ = 0;\n    let mut vowel_counter10 = 0;\n    let mut consonant_counter10 = 0;\n\
    \    let mut vowel_counter11 = 0;\n    let mut consonant_counter11 = 0;\n    let\
    \ mut vowel_counter12 = 0;\n    let mut consonant_counter12 = 0;\n    let mut\
    \ vowel_counter13 = 0;\n    let mut consonant_counter13 = 0;\n    let mut vowel_counter14\
    \ = 0;\n    let mut consonant_counter14 = 0;\n    let mut vowel_counter15 = 0;\n\
    \    let mut consonant_counter15 = 0;\n    let mut vowel_counter16 = 0;\n    let\
    \ mut consonant_counter16 = 0;\n    let mut vowel_counter17 = 0;\n    let mut\
    \ consonant_counter17 = 0;\n    let mut vowel_counter18 = 0;\n    let mut consonant_counter18\
    \ = 0;\n    let mut vowel_counter19 = 0;\n    let mut consonant_counter19 = 0;\n\
    \    let mut vowel_counter20 = 0;\n    let mut consonant_counter20 = 0;\n    let\
    \ mut vowel_counter21 = 0;\n    let mut consonant_counter21 = 0;\n    let mut\
    \ vowel_counter22 = 0;\n    let mut consonant_counter22 = 0;\n    let mut vowel_counter23\
    \ = 0;\n    let mut consonant_counter23 = 0;\n    let mut vowel_counter24 = 0;\n\
    \    let mut conson", "    let mut words = vec![];\n    let mut consonants = vec![];\n\
    \    let mut vowels = vec![];\n    let mut vowel_counter = 0;\n    let mut vowel_counter2\
    \ = 0;\n    let mut vowel_counter3 = 0;\n    let mut vowel_counter4 = 0;\n   \
    \ let mut vowel_counter5 = 0;\n    let mut vowel_counter6 = 0;\n    let mut vowel_counter7\
    \ = 0;\n    let mut vowel_counter8 = 0;\n    let mut vowel_counter9 = 0;\n   \
    \ let mut vowel_counter10 = 0;\n    let mut vowel_counter11 = 0;\n    let mut\
    \ vowel_counter12 = 0;\n    let mut vowel_counter13 = 0;\n    let mut vowel_counter14\
    \ = 0;\n    let mut vowel_counter15 = 0;\n    let mut vowel_counter16 = 0;\n \
    \   let mut vowel_counter17 = 0;\n    let mut vowel_counter18 = 0;\n    let mut\
    \ vowel_counter19 = 0;\n    let mut vowel_counter20 = 0;\n    let mut vowel_counter21\
    \ = 0;\n    let mut vowel_counter22 = 0;\n    let mut vowel_counter23 = 0;\n \
    \   let mut vowel_counter24 = 0;\n    let mut vowel_counter25 = 0;\n    let mut\
    \ vowel_counter26 = 0;\n    let mut vowel_counter27 = 0;\n    let mut vowel_counter28\
    \ = 0;\n    let mut vowel_counter29 = 0;\n    let mut vowel_counter30 = 0;\n \
    \   let mut vowel_counter31 = 0;\n    let mut vowel_counter32 = 0;\n    let mut\
    \ vowel_counter33 = 0;\n    let mut vowel_counter34 = 0;\n    let mut vowel_counter35\
    \ = 0;\n    let mut vowel_counter36 = 0;\n    let mut vowel_counter37 = 0;\n \
    \   let mut vowel_counter38 = 0;\n    let mut vowel_counter39 = 0;\n    let mut\
    \ vowel_counter40 = 0;\n    let mut vowel_counter41 = 0;\n    let mut vowel_counter42\
    \ = 0;\n    let mut vowel_counter43 = 0;\n    let mut vowel_counter44 = 0;\n \
    \   let mut vowel_counter45 = 0;\n    let mut vowel_counter46 = 0;\n    let mut\
    \ vowel_counter47 = 0;\n    let mut vowel_counter48 = 0;\n    let mut vowel_counter49\
    \ = 0;\n    let mut vowel_counter50 = 0;\n    let mut vowel_counter51 = 0;\n \
    \   let mut vowel_counter52 = 0;\n    let mut vowel_counter53 = 0;\n    let mut\
    \ vowel_counter54 = 0;\n    let mut ", "    let mut result = vec![];\n    let\
    \ mut s = s;\n    while s.len() > 0 {\n        let mut i = 0;\n        let mut\
    \ j = s.len();\n        while i < j {\n            if s[i] == ' ' {\n        \
    \        i += 1;\n                j -= 1;\n            } else {\n            \
    \    i += 1;\n            }\n        }\n        if i == j {\n            result.push(s.clone());\n\
    \            i += 1;\n        }\n        if i == n {\n            result.push(s.clone());\n\
    \        }\n        s = &s[i..];\n    }\n    result", "    let mut result = vec![];\n\
    \    let mut s = String::from(s);\n    while s.len() > 0 {\n        let mut i\
    \ = 0;\n        let mut j = s.len();\n        while i < j {\n            if s[i]\
    \ == ' ' {\n                i += 1;\n                j -= 1;\n            } else\
    \ {\n                i += 1;\n            }\n        }\n        if i == n {\n\
    \            result.push(s.clone());\n        }\n        s = &s[i..];\n    }\n\
    \    result", "    let mut result = Vec::new();\n    let mut s = String::from(s);\n\
    \    let mut n = n as usize;\n    let mut i = 0;\n    while i < s.len() {\n  \
    \      let mut j = i;\n        while j < s.len() && s.chars().all(|c| c == s.chars().nth(j))\
    \ {\n            j += 1\n        }\n        if j == s.len() {\n            result.push(s.clone());\n\
    \            i += 1;\n        } else {\n            if s.chars().all(|c| c ==\
    \ s.chars().nth(j)) {\n                result.push(s.clone());\n             \
    \   i += 1;\n            } else {\n                i += j - i;\n            }\n\
    \        }\n    }\n    result", "    let mut words = vec![];\n    let mut s =\
    \ String::from(s);\n    let mut n = n;\n    while n != 0 {\n        let mut i\
    \ = 0;\n        while i < s.len() {\n            if s.chars().any(|c| c == ' '\
    \ || c == '\\t' || c == '\\n') {\n                i += 1;\n                continue;\n\
    \            }\n            if s.chars().any(|c| c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u') {\n                i += 1;\n                continue;\n\
    \            }\n            if s.chars().any(|c| c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U') {\n                i += 1;\n                continue;\n\
    \            }\n            if s.chars().any(|c| c == 'y' || c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u') {\n                i += 1;\n      \
    \          continue;\n            }\n            if s.chars().any(|c| c == 'Y'\
    \ || c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n           \
    \     i += 1;\n                continue;\n            }\n            if s.chars().any(|c|\
    \ c == 'i' || c == 'o' || c == 'u') {\n                i += 1;\n             \
    \   continue;\n            }\n            if s.chars().any(|c| c == 'I' || c ==\
    \ 'O' || c == 'U') {\n                i += 1;\n                continue;\n   \
    \         }\n            if s.chars().any(|c| c == 'n' || c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                i += 1;\n          \
    \      continue;\n            }\n            if s.chars().any(|c| c == 'N' ||\
    \ c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n              \
    \  i += 1;\n                continue;\n            }\n            if s.chars().any(|c|\
    \ c == 't' || c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n  \
    \              i += 1;\n                continue;\n            }\n           \
    \ if s.chars().any(|c| c == 'T' || c == 'A' || c == 'E' || c == 'I' || c == 'O'\
    \ || c == 'U') {\n                i += 1;\n                continue;\n       \
    \     }\n            if s.chars().any(|c| c == 'h' || c == 'e' || c == 'l' ||\
    \ c == 'l' || c == 'o' || c == 'r') {\n                i += 1;\n             \
    \   continue;\n            }\n            if s.chars().any(|c| c == 'H' || c ==\
    \ '", "    let mut words = vec![];\n    let mut i = 0;\n    while i < s.len()\
    \ {\n        if s.chars().any(|c| c.is_consonant() && c != ' ') {\n          \
    \  i += 1;\n        } else {\n            if i == s.len() {\n                break;\n\
    \            }\n            words.push(s.to_string());\n            i += 1;\n\
    \        }\n    }\n    words", "    let mut words = vec![];\n    let mut i = 0;\n\
    \    while i < s.len() {\n        let mut j = i;\n        while j < s.len() &&\
    \ s[j] == ' ' {\n            j += 1\n        }\n        if j - i > n {\n     \
    \       words.push(s.subslice(i, j));\n            i = j;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    words", "    let mut words = vec![];\n\
    \    let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n       \
    \ while j < s.len() && s[j] == ' ' {\n            j += 1\n        }\n        if\
    \ j == i {\n            break;\n        }\n        let mut word = String::from(&s[i\
    \ .. j]);\n        let mut count = 0;\n        while j < s.len() && s[j] == '\
    \ ' {\n            j += 1\n        }\n        if j == i {\n            break;\n\
    \        }\n        let mut consonants = String::from(&s[i .. j]);\n        if\
    \ consonants.chars().count() == n {\n            words.push(word);\n         \
    \   i += j - i;\n        }\n        i += j - i;\n    }\n    words", "    let mut\
    \ words = vec![];\n    let mut consonants = vec![];\n    let mut vowels = vec![];\n\
    \    let mut spaces = vec![];\n    let mut punctuation = vec![];\n    let mut\
    \ letters = vec![];\n    let mut numbers = vec![];\n    let mut spaces_at_start\
    \ = vec![];\n    let mut spaces_at_end = vec![];\n    let mut punctuation_at_start\
    \ = vec![];\n    let mut punctuation_at_end = vec![];\n    let mut letters_at_start\
    \ = vec![];\n    let mut letters_at_end = vec![];\n    let mut numbers_at_start\
    \ = vec![];\n    let mut numbers_at_end = vec![];\n    let mut spaces_at_start_at_end\
    \ = vec![];\n    let mut spaces_at_end_at_start = vec![];\n    let mut punctuation_at_start_at_end\
    \ = vec![];\n    let mut punctuation_at_end_at_start = vec![];\n    let mut letters_at_start_at_end\
    \ = vec![];\n    let mut letters_at_end_at_start = vec![];\n    let mut numbers_at_start_at_end\
    \ = vec![];\n    let mut numbers_at_end_at_start = vec![];\n    let mut spaces_at_start_at_end_at_end\
    \ = vec![];\n    let mut spaces_at_end_at_start_at_end = vec![];\n    let mut\
    \ punctuation_at_start_at_end_at_end = vec![];\n    let mut punctuation_at_end_at_start_at_end\
    \ = vec![];\n    let mut letters_at_start_at_end_at_end = vec![];\n    let mut\
    \ letters_at_end_at_start_at_end = vec![];\n    let mut numbers_at_start_at_end_at_end\
    \ = vec![];\n    let mut numbers_at_end_at_start_at_end = vec![];\n    let mut\
    \ spaces_at_start_at_end_at_end_at_end = vec![];\n    let mut spaces_at_end_at_start_at_end_at_end\
    \ = vec![];\n    let mut punctuation_at_start_at_end_at_end_at_end = vec![];\n\
    \    let mut punctuation_at_end_at_start_at_end_at_end = vec![];\n    let mut\
    \ letters_at_start_at_end_at_end_at_end = vec![];\n    let mut letters_at_end_at_start_at_end_at_end\
    \ = vec![];\n    let mut numbers_at_start_at_end_at_end_at_end = vec![];\n   \
    \ let mut numbers_at_end_at_start_at_end_at_end = vec![];\n", "    let mut result\
    \ = vec![];\n    let mut s = String::from(s);\n    let mut n = n as usize;\n \
    \   let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c.is_uppercase()\
    \ && c.is_consonant()) {\n            result.push(s.subslice(i, i + n));\n   \
    \         i += n;\n        }\n        i += 1;\n    }\n    result", "    let mut\
    \ result = vec![];\n    let mut s = String::from(s);\n    let mut n = n as usize;\n\
    \    let mut i = 0;\n    while i < s.len() {\n        if s.chars().any(|c| c !=\
    \ ' ' && c != '\\t' && c != '\\n' && c != '\\r') {\n            if n == 0 {\n\
    \                break;\n            }\n            n -= 1;\n        } else {\n\
    \            result.push(s.subslice(i, i + 1));\n            i += 1;\n       \
    \ }\n    }\n    result", "    let mut result = vec![];\n    let mut s = String::from(s);\n\
    \    while s.len() > 0 {\n        let mut i = 0;\n        let mut j = s.len();\n\
    \        while i < j {\n            if s[i] == ' ' {\n                i += 1;\n\
    \                j -= 1;\n            } else {\n                i += 1;\n    \
    \        }\n        }\n        if i == n {\n            result.push(s.clone());\n\
    \        }\n        s = &s[..i];\n    }\n    result", "    let mut words = vec![];\n\
    \    let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n       \
    \ while j < s.len() && s[j].is_ascii_letter() {\n            j = j + 1;\n    \
    \    }\n        if j == s.len() {\n            break;\n        }\n        let\
    \ mut k = j;\n        while k < s.len() && s[k].is_ascii_letter() {\n        \
    \    k = k + 1;\n        }\n        if k == s.len() {\n            break;\n  \
    \      }\n        let mut c = s[k];\n        while k < s.len() && s[k].is_ascii_letter()\
    \ {\n            c = c + s[k];\n            k = k + 1;\n        }\n        if\
    \ k == s.len() {\n            break;\n        }\n        if c == n {\n       \
    \     words.push(s.subslice(i, j));\n        }\n        i = j;\n    }\n    words",
  "    let mut words = vec![];\n    let mut count = 0;\n    let mut i = 0;\n    while\
    \ i < s.len() {\n        if s.chars().any(|c| c.is_consonant() && c != ' ') {\n\
    \            count += 1;\n            if count == n {\n                words.push(s.to_string());\n\
    \                count = 0;\n            }\n        }\n        i += 1;\n    }\n\
    \    words", "    let mut result = vec![];\n    let mut s = s;\n    let mut n\
    \ = n;\n    while n != 0 {\n        let mut i = 0;\n        while i < s.len()\
    \ {\n            if s.chars().any(|c| c == ' ' || c == '\\t' || c == '\\n' ||\
    \ c == '\\r') {\n                break;\n            }\n            i += 1;\n\
    \        }\n        if i == s.len() {\n            break;\n        }\n       \
    \ let mut j = i;\n        while j < s.len() {\n            if s.chars().any(|c|\
    \ c == ' ' || c == '\\t' || c == '\\n' || c == '\\r') {\n                break;\n\
    \            }\n            i += 1;\n            j += 1\n        }\n        if\
    \ i == j {\n            break;\n        }\n        let mut k = i;\n        while\
    \ k < s.len() {\n            if s.chars().any(|c| c == ' ' || c == '\\t' || c\
    \ == '\\n' || c == '\\r') {\n                break;\n            }\n         \
    \   i += 1;\n            k += 1\n        }\n        if i == k {\n            break;\n\
    \        }\n        let mut m = i;\n        while m < s.len() {\n            if\
    \ s.chars().any(|c| c == ' ' || c == '\\t' || c == '\\n' || c == '\\r') {\n  \
    \              break;\n            }\n            i += 1;\n            m += 1\n\
    \        }\n        if i == m {\n            break;\n        }\n        let mut\
    \ l = i;\n        while l < s.len() {\n            if s.chars().any(|c| c == '\
    \ ' || c == '\\t' || c == '\\n' || c == '\\r') {\n                break;\n   \
    \         }\n            i += 1;\n            l += 1\n        }\n        if i\
    \ == l {\n            break;\n        }\n        let mut n = i;\n        while\
    \ n < s.len() {\n            if s.chars().any(|c| c == ' ' || c == '\\t' || c\
    \ == '\\n' || c == '\\r') {\n                break;\n            }\n         \
    \   i += 1;\n            n += 1\n        }\n        if i == n {\n            break;\n\
    \        }\n        result.push(s.split_whitespace().nth(i).unwrap());\n    }\n\
    \    result", '    select_words(s, n, vec![])', "    let mut words = vec![];\n\
    \    let mut i = 0;\n    while i < s.len() {\n        let mut j = i;\n       \
    \ while j < s.len() && s[j] == ' ' {\n            j += 1\n        }\n        if\
    \ j - i > n {\n            words.push(s.split_whitespace()[i .. (j + 1)].collect::<Vec<_>>());\n\
    \            i = j;\n        }\n    }\n    words"]
stop_tokens:
- "\n}"
