name: HumanEval_46_fib4
language: rs
results:
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    if n == 5 {\n        return 4;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp1j5mnwqs.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 ||\
    \ n == 1 {\n        return 0;\n    }\n    if n == 2 {\n        return 2;\n   \
    \ }\n    if n == 3 {\n        return 0;\n    }\n    if n == 4 {\n        return\
    \ 4;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `6`,\n right: `4`', /tmp/tmp4i831yxz.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    if n == 5 {\n        return 4;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmphl1ota05.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    if n == 5 {\n        return 8;\n\
    \    }\n    if n == 6 {\n        return 14;\n    }\n    if n == 7 {\n        return\
    \ 28;\n    }\n    if n == 8 {\n        return 56;\n    }\n    if n == 9 {\n  \
    \      return 128;\n    }\n    if n == 10 {\n        return 256;\n    }\n    if\
    \ n == 11 {\n        return 512;\n    }\n    if n == 12 {\n        return 1024;\n\
    \    }\n    if n == 13 {\n        return 2048;\n    }\n    if n == 14 {\n    \
    \    return 4096;\n    }\n    if n == 15 {\n        return 8192;\n    }\n    if\
    \ n == 16 {\n        return 16384;\n    }\n    if n == 17 {\n        return 32768;\n\
    \    }\n    if n == 18 {\n        return 65536;\n    }\n    if n == 19 {\n   \
    \     return 131072;\n    }\n    if n == 20 {\n        return 262144;\n    }\n\
    \    if n == 21 {\n        return 524288;\n    }\n    if n == 22 {\n        return\
    \ 1048576;\n    }\n    if n == 23 {\n        return 2097152;\n    }\n    if n\
    \ == 24 {\n        return 4194304;\n    }\n    if n == 25 {\n        return 8388608;\n\
    \    }\n    if n == 26 {\n        return 16777216;\n    }\n    if n == 27 {\n\
    \        return 33554432;\n    }\n    if n == 28 {\n        return 67108864;\n\
    \    }\n    if n == 29 {\n        return 134217728;\n    }\n    if n == 30 {\n\
    \        return 268435456;\n    }\n    if n == 31 {\n        return 536870912;\n\
    \    }\n    if n == 32 {\n        return 1073741824;\n    }\n    if n == 33 {\n\
    \        return 2147483648;\n    }\n    if n == 34 {\n        return 4294967296;\n\
    \    }\n    if n == 35 {\n        return 8589934592;\n    }\n    if n == 36 {\n\
    \        return 17179869184;\n    }\n    if n == 37 {\n        return 34359738368;\n\
    \    }\n    if n == 38 {\n        return 68719476736;\n    }\n    if n == 39 {\n\
    \        return 137438953472;\n    }\n    if n == 40 {\n        return 274877906944;\n\
    \    }\n    if n == 41 {\n        return 54975581388\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpugiapt6b.rs:148:3\n\
    \    |\n14  | fn fib4(n: isize) -> isize {\n    |                            -\
    \ unclosed delimiter\n...\n138 |     if n == 41 {\n    |                - this\
    \ delimiter might not be properly closed...\n139 |         return 54975581388\n\
    140 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    148 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpugiapt6b.rs:14:22\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    if n == 5 {\n        return 4;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n\
    }\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n\
    \    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp68_9_m_q.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 1\n    }\n    if n == 5 {\n        return 2\n  \
    \  }\n    if n == 6 {\n        return 0\n    }\n    if n == 7 {\n        return\
    \ 1\n    }\n    if n == 8 {\n        return 2\n    }\n    if n == 9 {\n      \
    \  return 0\n    }\n    if n == 10 {\n        return 1\n    }\n    if n == 11\
    \ {\n        return 2\n    }\n    if n == 12 {\n        return 0\n    }\n    if\
    \ n == 13 {\n        return 1\n    }\n    if n == 14 {\n        return 2\n   \
    \ }\n    if n == 15 {\n        return 0\n    }\n    if n == 16 {\n        return\
    \ 1\n    }\n    if n == 17 {\n        return 2\n    }\n    if n == 18 {\n    \
    \    return 0\n    }\n    if n == 19 {\n        return 1\n    }\n    if n == 20\
    \ {\n        return 2\n    }\n    if n == 21 {\n        return 0\n    }\n    if\
    \ n == 22 {\n        return 1\n    }\n    if n == 23 {\n        return 2\n   \
    \ }\n    if n == 24 {\n        return 0\n    }\n    if n == 25 {\n        return\
    \ 1\n    }\n    if n == 26 {\n        return 2\n    }\n    if n == 27 {\n    \
    \    return 0\n    }\n    if n == 28 {\n        return 1\n    }\n    if n == 29\
    \ {\n        return 2\n    }\n    if n == 30 {\n        return 0\n    }\n    if\
    \ n == 31 {\n        return 1\n    }\n    if n == 32 {\n        return 2\n   \
    \ }\n    if n == 33 {\n        return 0\n    }\n    if n == 34 {\n        return\
    \ 1\n    }\n    if n == 35 {\n        return 2\n    }\n    if n == 36 {\n    \
    \    return 0\n    }\n    if n == 37 {\n        return 1\n    }\n    if n == 38\
    \ {\n        return 2\n    }\n    if n == 39 {\n        return 0\n    }\n    if\
    \ n == 40 {\n        return 1\n    }\n    if n == 41 {\n        return 2\n   \
    \ }\n    if n == 42 {\n        return 0\n    }\n    if n == 43 {\n        return\
    \ 1\n    }\n    if n == 44 {\n        return 2\n    }\n    if n == 45 {\n    \
    \    return 0\n    }\n    if n == 46 {\n        return 1\n    }\n    if n == 47\
    \ {\n        return 2\n    }\n    if n == 48 {\n        return 0\n    }\n    if\
    \ n == 49 {\n        return 1\n    }\n    if n == 50 {\n        return 2\n   \
    \ }\n    if n == 51 {\n        return 0\n    }\n    if n == 52 {\n        return\
    \ 1\n    }\n    if n == 53 {\n        return 2\n    }\n    if n == 54 {\n    \
    \    return 0\n    }\n    if n == 55 {\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpg56lh1ta.rs:189:3\n\
    \    |\n14  | fn fib4(n: isize) -> isize {\n    |                            -\
    \ unclosed delimiter\n...\n180 |     if n == 55 {\n    |                - this\
    \ delimiter might not be properly closed...\n181 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n189 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpg56lh1ta.rs:14:22\n   |\n14 | fn fib4(n: isize)\
    \ -> isize {\n   |    ----              ^^^^^ expected `isize`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    if n == 5 {\n        return 4;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmp3uoepweq.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 4\n  \
    \  }\n    if n == 6 {\n        return 8\n    }\n    if n == 7 {\n        return\
    \ 14\n    }\n    if n == 8 {\n        return 8\n    }\n    if n == 9 {\n     \
    \   return 16\n    }\n    if n == 10 {\n        return 10\n    }\n    if n ==\
    \ 11 {\n        return 20\n    }\n    if n == 12 {\n        return 30\n    }\n\
    \    if n == 13 {\n        return 40\n    }\n    if n == 14 {\n        return\
    \ 50\n    }\n    if n == 15 {\n        return 60\n    }\n    if n == 16 {\n  \
    \      return 70\n    }\n    if n == 17 {\n        return 80\n    }\n    if n\
    \ == 18 {\n        return 90\n    }\n    if n == 19 {\n        return 100\n  \
    \  }\n    if n == 20 {\n        return 200\n    }\n    if n == 21 {\n        return\
    \ 300\n    }\n    if n == 22 {\n        return 400\n    }\n    if n == 23 {\n\
    \        return 500\n    }\n    if n == 24 {\n        return 600\n    }\n    if\
    \ n == 25 {\n        return 700\n    }\n    if n == 26 {\n        return 800\n\
    \    }\n    if n == 27 {\n        return 900\n    }\n    if n == 28 {\n      \
    \  return 1000\n    }\n    if n == 29 {\n        return 2000\n    }\n    if n\
    \ == 30 {\n        return 3000\n    }\n    if n == 31 {\n        return 4000\n\
    \    }\n    if n == 32 {\n        return 5000\n    }\n    if n == 33 {\n     \
    \   return 6000\n    }\n    if n == 34 {\n        return 7000\n    }\n    if n\
    \ == 35 {\n        return 8000\n    }\n    if n == 36 {\n        return 9000\n\
    \    }\n    if n == 37 {\n        return 10000\n    }\n    if n == 38 {\n    \
    \    return 20000\n    }\n    if n == 39 {\n        return 30000\n    }\n    if\
    \ n == 40 {\n        return 40000\n    }\n    if n == 41 {\n        return 50000\n\
    \    }\n    if n == 42 {\n        return 60000\n    }\n    if n == 43 {\n    \
    \    return 70000\n    }\n    if n == 44 {\n        return 80000\n    }\n    if\
    \ n == 45 {\n        return 90000\n    }\n    if n == 46 {\n        return 100000\n\
    \    }\n    if n == 47 {\n        return 200000\n    }\n    if n == 48 {\n   \
    \     return 300000\n    }\n    if n == 49 {\n        return 400000\n    }\n \
    \   if n == 50 {\n        return 500000\n\n}\n\nfn main() {\n    let candidate\
    \ = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp4atntint.rs:176:3\n\
    \    |\n14  | fn fib4(n: isize) -> isize {\n    |                            -\
    \ unclosed delimiter\n...\n165 |     if n == 50 {\n    |                - this\
    \ delimiter might not be properly closed...\n...\n168 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n176 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4atntint.rs:14:22\n   |\n14 | fn fib4(n: isize)\
    \ -> isize {\n   |    ----              ^^^^^ expected `isize`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmpj94sa177.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    let mut fib4 = fib4(n - 1) + fib4(n\
    \ - 2) + fib4(n - 3) + fib4(n - 4);\n    return fib4;\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `4`', /tmp/tmp7d09naak.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    match n {\n\
    \        0 => 0,\n        1 => 0,\n        2 => 2,\n        3 => 0,\n        _\
    \ => fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    if n == 5 {\n        return 4;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpdjtvmfd3.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 0;\n    }\n    if n == 5 {\n        return 4;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `26`,\n right: `28`', /tmp/tmpno0mkwuv.rs:45:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    if n == 5 {\n        return 8;\n\
    \    }\n    if n == 6 {\n        return 14;\n    }\n    if n == 7 {\n        return\
    \ 28;\n    }\n    if n == 8 {\n        return 56;\n    }\n    if n == 9 {\n  \
    \      return 104;\n    }\n    if n == 10 {\n        return 208;\n    }\n    if\
    \ n == 11 {\n        return 416;\n    }\n    if n == 12 {\n        return 832;\n\
    \    }\n    if n == 13 {\n        return 1664;\n    }\n    if n == 14 {\n    \
    \    return 3368;\n    }\n    if n == 15 {\n        return 6720;\n    }\n    if\
    \ n == 16 {\n        return 13440;\n    }\n    if n == 17 {\n        return 26880;\n\
    \    }\n    if n == 18 {\n        return 51040;\n    }\n    if n == 19 {\n   \
    \     return 107520;\n    }\n    if n == 20 {\n        return 214900;\n    }\n\
    \    if n == 21 {\n        return 429200;\n    }\n    if n == 22 {\n        return\
    \ 859800;\n    }\n    if n == 23 {\n        return 1434000;\n    }\n    if n ==\
    \ 24 {\n        return 2978000;\n    }\n    if n == 25 {\n        return 6341000;\n\
    \    }\n    if n == 26 {\n        return 12875000;\n    }\n    if n == 27 {\n\
    \        return 25395000;\n    }\n    if n == 28 {\n        return 50225000;\n\
    \    }\n    if n == 29 {\n        return 107775000;\n    }\n    if n == 30 {\n\
    \        return 215425000;\n    }\n    if n == 31 {\n        return 429875000;\n\
    \    }\n    if n == 32 {\n        return 856325000;\n    }\n    if n == 33 {\n\
    \        return 1429675000;\n    }\n    if n == 34 {\n        return 2959375000;\n\
    \    }\n    if n == 35 {\n        return 63459375000;\n    }\n    if n == 36 {\n\
    \        return 12898375000;\n    }\n    if n == 37 {\n        return 25398375000;\n\
    \    }\n    if n == 38 {\n        return 5024575000;\n    }\n    if n == 39 {\n\
    \        return 10770275000;\n    }\n    if n == 40 {\n        return 2154875000;\n\
    \    }\n    if n == 41 {\n        return 429607500\n}\n\nfn main() {\n    let\
    \ candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmphv_5c8ki.rs:148:3\n\
    \    |\n14  | fn fib4(n: isize) -> isize {\n    |                            -\
    \ unclosed delimiter\n...\n138 |     if n == 41 {\n    |                - this\
    \ delimiter might not be properly closed...\n139 |         return 429607500\n\
    140 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    148 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphv_5c8ki.rs:14:22\n\
    \   |\n14 | fn fib4(n: isize) -> isize {\n   |    ----              ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    if n == 5 {\n        return 8;\n\
    \    }\n    if n == 6 {\n        return 14;\n    }\n    if n == 7 {\n        return\
    \ 21;\n    }\n    if n == 8 {\n        return 34;\n    }\n    if n == 9 {\n  \
    \      return 55;\n    }\n    if n == 10 {\n        return 89;\n    }\n    if\
    \ n == 11 {\n        return 144;\n    }\n    if n == 12 {\n        return 197;\n\
    \    }\n    if n == 13 {\n        return 252;\n    }\n    if n == 14 {\n     \
    \   return 297;\n    }\n    if n == 15 {\n        return 444;\n    }\n    if n\
    \ == 16 {\n        return 597;\n    }\n    if n == 17 {\n        return 832;\n\
    \    }\n    if n == 18 {\n        return 1177;\n    }\n    if n == 19 {\n    \
    \    return 1522;\n    }\n    if n == 20 {\n        return 1965;\n    }\n    if\
    \ n == 21 {\n        return 2499;\n    }\n    if n == 22 {\n        return 2943;\n\
    \    }\n    if n == 23 {\n        return 4181;\n    }\n    if n == 24 {\n    \
    \    return 5737;\n    }\n    if n == 25 {\n        return 7257;\n    }\n    if\
    \ n == 26 {\n        return 9797;\n    }\n    if n == 27 {\n        return 12353;\n\
    \    }\n    if n == 28 {\n        return 15707;\n    }\n    if n == 29 {\n   \
    \     return 19139;\n    }\n    if n == 30 {\n        return 22527;\n    }\n \
    \   if n == 31 {\n        return 25173;\n    }\n    if n == 32 {\n        return\
    \ 27691;\n    }\n    if n == 33 {\n        return 31009;\n    }\n    if n == 34\
    \ {\n        return 34645;\n    }\n    if n == 35 {\n        return 37913;\n \
    \   }\n    if n == 36 {\n        return 40577;\n    }\n    if n == 37 {\n    \
    \    return 43941;\n    }\n    if n == 38 {\n        return 46617;\n    }\n  \
    \  if n == 39 {\n        return 49243;\n    }\n    if n == 40 {\n        return\
    \ 51897;\n    }\n    if n == 41 {\n        return 54553;\n    }\n    if n == 42\
    \ {\n        return 57227;\n    }\n    if n == 43 {\n        return 60079;\n \
    \   }\n    if n == 44 {\n        return 63655;\n    }\n    if \n}\n\nfn main()\
    \ {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8),\
    \ 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n\
    }\n"
  stdout: ''
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmp7xkrnit2.rs:151:1\n\
    \    |\n151 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 1\n    }\n    if n == 5 {\n        return 2\n  \
    \  }\n    if n == 6 {\n        return 0\n    }\n    if n == 7 {\n        return\
    \ 1\n    }\n    if n == 8 {\n        return 2\n    }\n    if n == 9 {\n      \
    \  return 0\n    }\n    if n == 10 {\n        return 1\n    }\n    if n == 11\
    \ {\n        return 2\n    }\n    if n == 12 {\n        return 0\n    }\n    if\
    \ n == 13 {\n        return 1\n    }\n    if n == 14 {\n        return 2\n   \
    \ }\n    if n == 15 {\n        return 0\n    }\n    if n == 16 {\n        return\
    \ 1\n    }\n    if n == 17 {\n        return 2\n    }\n    if n == 18 {\n    \
    \    return 0\n    }\n    if n == 19 {\n        return 1\n    }\n    if n == 20\
    \ {\n        return 2\n    }\n    if n == 21 {\n        return 0\n    }\n    if\
    \ n == 22 {\n        return 1\n    }\n    if n == 23 {\n        return 2\n   \
    \ }\n    if n == 24 {\n        return 0\n    }\n    if n == 25 {\n        return\
    \ 1\n    }\n    if n == 26 {\n        return 2\n    }\n    if n == 27 {\n    \
    \    return 0\n    }\n    if n == 28 {\n        return 1\n    }\n    if n == 29\
    \ {\n        return 2\n    }\n    if n == 30 {\n        return 0\n    }\n    if\
    \ n == 31 {\n        return 1\n    }\n    if n == 32 {\n        return 2\n   \
    \ }\n    if n == 33 {\n        return 0\n    }\n    if n == 34 {\n        return\
    \ 1\n    }\n    if n == 35 {\n        return 2\n    }\n    if n == 36 {\n    \
    \    return 0\n    }\n    if n == 37 {\n        return 1\n    }\n    if n == 38\
    \ {\n        return 2\n    }\n    if n == 39 {\n        return 0\n    }\n    if\
    \ n == 40 {\n        return 1\n    }\n    if n == 41 {\n        return 2\n   \
    \ }\n    if n == 42 {\n        return 0\n    }\n    if n == 43 {\n        return\
    \ 1\n    }\n    if n == 44 {\n        return 2\n    }\n    if n == 45 {\n    \
    \    return 0\n    }\n    if n == 46 {\n        return 1\n    }\n    if n == 47\
    \ {\n        return 2\n    }\n    if n == 48 {\n        return 0\n    }\n    if\
    \ n == 49 {\n        return 1\n    }\n    if n == 50 {\n        return 2\n   \
    \ }\n    if n == 51 {\n        return 0\n    }\n    if n == 52 {\n        return\
    \ 1\n    }\n    if n == 53 {\n        return 2\n    }\n    if n == 54 {\n    \
    \    return 0\n    }\n    if n == 55 {\n}\n\nfn main() {\n    let candidate =\
    \ fib4;\n    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n\
    \    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp3tuc6o20.rs:189:3\n\
    \    |\n14  | fn fib4(n: isize) -> isize {\n    |                            -\
    \ unclosed delimiter\n...\n180 |     if n == 55 {\n    |                - this\
    \ delimiter might not be properly closed...\n181 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n189 | }\n    |   ^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp3tuc6o20.rs:14:22\n   |\n14 | fn fib4(n: isize)\
    \ -> isize {\n   |    ----              ^^^^^ expected `isize`, found `()`\n \
    \  |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0\n    }\n    if n == 1 {\n        return 1\n    }\n    if n ==\
    \ 2 {\n        return 2\n    }\n    if n == 3 {\n        return 0\n    }\n   \
    \ if n == 4 {\n        return 3\n    }\n    if n == 5 {\n        return 4\n  \
    \  }\n    if n == 6 {\n        return 5\n    }\n    if n == 7 {\n        return\
    \ 6\n    }\n    if n == 8 {\n        return 7\n    }\n    if n == 9 {\n      \
    \  return 8\n    }\n    if n == 10 {\n        return 9\n    }\n    if n == 11\
    \ {\n        return 10\n    }\n    if n == 12 {\n        return 11\n    }\n  \
    \  if n == 13 {\n        return 12\n    }\n    if n == 14 {\n        return 13\n\
    \    }\n    if n == 15 {\n        return 14\n    }\n    if n == 16 {\n       \
    \ return 15\n    }\n    if n == 17 {\n        return 16\n    }\n    if n == 18\
    \ {\n        return 17\n    }\n    if n == 19 {\n        return 18\n    }\n  \
    \  if n == 20 {\n        return 19\n    }\n    if n == 21 {\n        return 20\n\
    \    }\n    if n == 22 {\n        return 21\n    }\n    if n == 23 {\n       \
    \ return 22\n    }\n    if n == 24 {\n        return 23\n    }\n    if n == 25\
    \ {\n        return 24\n    }\n    if n == 26 {\n        return 25\n    }\n  \
    \  if n == 27 {\n        return 26\n    }\n    if n == 28 {\n        return 27\n\
    \    }\n    if n == 29 {\n        return 28\n    }\n    if n == 30 {\n       \
    \ return 29\n    }\n    if n == 31 {\n        return 30\n    }\n    if n == 32\
    \ {\n        return 31\n    }\n    if n == 33 {\n        return 32\n    }\n  \
    \  if n == 34 {\n        return 33\n    }\n    if n == 35 {\n        return 34\n\
    \    }\n    if n == 36 {\n        return 35\n    }\n    if n == 37 {\n       \
    \ return 36\n    }\n    if n == 38 {\n        return 37\n    }\n    if n == 39\
    \ {\n        return 38\n    }\n    if n == 40 {\n        return 39\n    }\n  \
    \  if n == 41 {\n        return 40\n    }\n    if n == 42 {\n        return 41\n\
    \    }\n    if n == 43 {\n        return 42\n    }\n    if n == 44 {\n       \
    \ return 43\n    }\n    if n == 45 {\n        return 44\n    }\n    if n == 46\
    \ {\n        return 45\n    }\n    if n == 47 {\n        return 46\n    }\n  \
    \  if n == 48 {\n        return 47\n    }\n    if n == 49 {\n        return 48\n\
    \    }\n    if n == 50 {\n        return 49\n    }\n    if n == 51 {\n       \
    \ return 50\n    }\n\n}\n\nfn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5),\
    \ 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n\
    \    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "error[E0317]: `if` may be missing an `else` clause\n   --> /tmp/tmpm7i3ck1h.rs:168:5\n\
    \    |\n14  |   fn fib4(n: isize) -> isize {\n    |                        -----\
    \ expected `isize` because of this return type\n...\n168 | /     if n == 51 {\n\
    169 | |         return 50\n170 | |     }\n    | |_____^ expected `isize`, found\
    \ `()`\n    |\n    = note: `if` expressions without `else` evaluate to `()`\n\
    \    = help: consider adding an `else` block that evaluates to the expected type\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0317`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n -\
    \ 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nfn main() {\n    let candidate = fib4;\n\
    \    assert_eq!(candidate(5), 4);\n    assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10),\
    \ 104);\n    assert_eq!(candidate(12), 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `4`', /tmp/tmp702ait6a.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n/// fib4(0) -> 0\n/// fib4(1) -> 0\n/// fib4(2)\
    \ -> 2\n/// fib4(3) -> 0\n/// fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    /// Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n/// >>> fib4(5)\n/// 4\n/// >>> fib4(6)\n\
    /// 8\n/// >>> fib4(7)\n/// 14\nfn fib4(n: isize) -> isize {\n    if n == 0 {\n\
    \        return 0;\n    }\n    if n == 1 {\n        return 0;\n    }\n    if n\
    \ == 2 {\n        return 2;\n    }\n    if n == 3 {\n        return 0;\n    }\n\
    \    if n == 4 {\n        return 4;\n    }\n    if n == 5 {\n        return 0;\n\
    \    }\n    if n == 6 {\n        return 8;\n    }\n    if n == 7 {\n        return\
    \ 14;\n    }\n    fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\n\
    fn main() {\n    let candidate = fib4;\n    assert_eq!(candidate(5), 4);\n   \
    \ assert_eq!(candidate(8), 28);\n    assert_eq!(candidate(10), 104);\n    assert_eq!(candidate(12),\
    \ 386);\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `4`', /tmp/tmpiym33skx.rs:44:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  exit_code: 101
  status: Exception
