name: HumanEval_120_maximum
language: rs
results:
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_element = arr[0];\n    for i in arr.iter().rev() {\n \
    \       if i > max_element {\n            max_element = i;\n        }\n      \
    \  if max_k == 0 {\n            break;\n        }\n        if max_k == 1 {\n \
    \           max_arr.push(max_element);\n            break;\n        }\n      \
    \  if max_k == 2 {\n            if max_element > max_arr[0] {\n              \
    \  max_arr.push(max_element);\n            }\n            max_k -= 1;\n      \
    \  }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n   \
    \ assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp52msbblq.rs:21:16\n   |\n\
    21 |         if i > max_element {\n   |                ^^^^^^^^^^^\n   |     \
    \           |\n   |                expected `&isize`, found `isize`\n   |    \
    \            help: consider borrowing here: `&max_element`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp52msbblq.rs:22:27\n   |\n19 |     let mut max_element =\
    \ arr[0];\n   |                           ------ expected due to this value\n\
    ...\n22 |             max_element = i;\n   |                           ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    22 |             max_element = *i;\n   |                           +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = k;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = k;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = k;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n         \
    \   max_k = k;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n        \
    \    max_k = k;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n        \
    \    max_k = k;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n        \
    \    max_k = k;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[21]\
    \ {\n            max_arr[21] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > \n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp86prcvi3.rs:125:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n110 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n125 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmp86prcvi3.rs:110:1\n    |\n110 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86prcvi3.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    for num in arr {\n        if num > max_num {\n            max_num\
    \ = num;\n        }\n    }\n    for num in arr {\n        if num == max_num {\n\
    \            max_arr.push(num);\n        }\n    }\n    if k == 1 {\n        return\
    \ max_arr;\n    }\n    if k == max_arr.len() {\n        return max_arr;\n    }\n\
    \    if k > max_arr.len() {\n        return max_arr;\n    }\n    let mut max_k\
    \ = k;\n    let mut max_nums = vec![];\n    while max_k > 0 {\n        let mut\
    \ max_nums_temp: Vec<isize> = vec![];\n        for num in max_arr {\n        \
    \    if num == max_num {\n                max_nums_temp.push(num);\n         \
    \   }\n        }\n        if max_nums_temp.len() > max_k {\n            max_k\
    \ = max_nums_temp.len();\n        }\n        max_nums = max_nums.concat(max_nums_temp);\n\
    \    }\n    return max_nums;\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5qwibfe2.rs:32:13\n   |\n\
    32 |     if k == max_arr.len() {\n   |             ^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n32 |     if k == max_arr.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5qwibfe2.rs:35:12\n   |\n35 |     if k > max_arr.len()\
    \ {\n   |            ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n35 |     if k > max_arr.len().try_into().unwrap() {\n   |       \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5qwibfe2.rs:47:34\n   |\n47 |         if max_nums_temp.len() > max_k\
    \ {\n   |                                  ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n47 |         if max_nums_temp.len() > max_k.try_into().unwrap()\
    \ {\n   |                                       ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5qwibfe2.rs:48:21\n   |\n38 |     let mut max_k\
    \ = k;\n   |                     - expected due to this value\n...\n48 |     \
    \        max_k = max_nums_temp.len();\n   |                     ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmp5qwibfe2.rs:50:29\n    |\n50  |\
    \         max_nums = max_nums.concat(max_nums_temp);\n    |                  \
    \           ^^^^^^ ------------- supplied 1 argument\n    |                  \
    \           |\n    |                             expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror[E0277]: the trait bound `[isize]:\
    \ Concat<_>` is not satisfied\n   --> /tmp/tmp5qwibfe2.rs:50:29\n    |\n50  |\
    \         max_nums = max_nums.concat(max_nums_temp);\n    |                  \
    \           ^^^^^^ the trait `Concat<_>` is "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:19:12\n\
    \   |\n19 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:20:19\n   |\n20 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i - max_k +\
    \ k])\n        {\n            max_arr += arr[max_i - max_k + k];\n           \
    \ max_k -= 1;\n        }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnt21bo7.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmnt21bo7.rs:23:39\n   |\n23 |             .any(|&x| x >\
    \ arr[max_i - max_k + k])\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpmnt21bo7.rs:23:37\n   |\n23 |             .any(|&x| x > arr[max_i\
    \ - max_k + k])\n   |                                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmnt21bo7.rs:23:47\n\
    \   |\n23 |             .any(|&x| x > arr[max_i - max_k + k])\n   |          \
    \                                     ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n  --> /tmp/tmpmnt21bo7.rs:23:45\n   |\n23 | \
    \            .any(|&x| x > arr[max_i - max_k + k])\n   |                     \
    \                        ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort_unstable();\n\
    \    max_arr.truncate(k);\n    max_arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9oz2zxdz.rs:19:22\n   |\n\
    19 |     max_arr.truncate(k);\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     max_arr.truncate(k.try_into().unwrap());\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![arr[0]];\n    for i in 1..k {\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n        }\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztcx05gi.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpztcx05gi.rs:22:12\n  \
    \ |\n22 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpztcx05gi.rs:23:26\n   |\n23 |            \
    \ max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![vec![-1000, 1000]];\n    let mut max_k = k;\n\
    \    let mut max_i = -1;\n    for i in 0..arr.len() {\n        if max_k == i {\n\
    \            max_arr[i] = arr[i];\n        } else {\n            if max_arr[i].0\
    \ > arr[i] {\n                max_arr[i] = arr[i];\n                max_k = i;\n\
    \            }\n        }\n    }\n    for i in 0..k {\n        if max_arr[i].0\
    \ > max_arr[i-k].0 {\n            max_arr[i] = max_arr[i-k];\n        }\n    }\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ayq68e9.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ayq68e9.rs:24:21\n   |\n24 |         if max_k == i {\n\
    \   |                     ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n24 |         if max_k == i.try_into().unwrap() {\n   |                \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ayq68e9.rs:25:26\n\
    \   |\n25 |             max_arr[i] = arr[i];\n   |             ----------   ^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |             |\n   |             expected\
    \ due to the type of this binding\n   |\n   = note: expected struct `Vec<{integer}>`\n\
    \                found type `isize`\n\nerror[E0609]: no field `0` on type `Vec<{integer}>`\n\
    \  --> /tmp/tmp8ayq68e9.rs:27:27\n   |\n27 |             if max_arr[i].0 > arr[i]\
    \ {\n   |                           ^ unknown field\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ayq68e9.rs:28:30\n   |\n28 |                 max_arr[i]\
    \ = arr[i];\n   |                 ----------   ^^^^^^ expected struct `Vec`, found\
    \ `isize`\n   |                 |\n   |                 expected due to the type\
    \ of this binding\n   |\n   = note: expected struct `Vec<{integer}>`\n       \
    \         found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ayq68e9.rs:29:25\n\
    \   |\n21 |     let mut max_k = k;\n   |                     - expected due to\
    \ this value\n...\n29 |                 max_k = i;\n   |                     \
    \    ^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[Vec<{integer}>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8ayq68e9.rs:34:12\n   |\n34 |  \
    \       if max_arr[i].0 > max_arr[i-k].0 {\n   |            ^^^^^^^^^^ slice indices\
    \ are of type "
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr;\n  \
    \  }\n    let mut max_idx = k;\n    let mut max_val = arr[k];\n    for i in 0..k\
    \ {\n        if arr[i] > max_val {\n            max_val = arr[i];\n          \
    \  max_idx = i;\n        }\n    }\n    vec![max_val; max_idx]\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3a6vcttx.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3a6vcttx.rs:21:23\n  \
    \ |\n21 |     let mut max_val = arr[k];\n   |                       ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3a6vcttx.rs:23:12\n   |\n23 |  \
    \       if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3a6vcttx.rs:24:23\n   |\n24 |            \
    \ max_val = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3a6vcttx.rs:28:19\n\
    \   |\n28 |     vec![max_val; max_idx]\n   |                   ^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n28 |     vec![max_val; max_idx.try_into().unwrap("
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_element = arr[0];\n    for i in arr.iter().take(max_k)\
    \ {\n        if i > max_element {\n            max_element = i;\n        }\n \
    \   }\n    max_arr.push(max_element);\n    for i in arr.iter().skip(max_k) {\n\
    \        if i < max_element {\n            max_element = i;\n        }\n    }\n\
    \    max_arr.push(max_element);\n    return max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:20:30\n   |\n\
    20 |     for i in arr.iter().take(max_k) {\n   |                             \
    \ ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n20 |     for\
    \ i in arr.iter().take(max_k.try_into().unwrap()) {\n   |                    \
    \               ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2rhjkzw5.rs:21:16\n   |\n21 |         if i > max_element {\n   |   \
    \             ^^^^^^^^^^^\n   |                |\n   |                expected\
    \ `&isize`, found `isize`\n   |                help: consider borrowing here:\
    \ `&max_element`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:22:27\n\
    \   |\n19 |     let mut max_element = arr[0];\n   |                          \
    \ ------ expected due to this value\n...\n22 |             max_element = i;\n\
    \   |                           ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n22 |             max_element = *i;\n\
    \   |                           +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:26:30\n\
    \   |\n26 |     for i in arr.iter().skip(max_k) {\n   |                      \
    \        ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n26\
    \ |     for i in arr.iter().skip(max_k.try_into().unwrap()) {\n   |          \
    \                         ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2rhjkzw5.rs:27:16\n   |\n27 |         if i < max_element {\n  \
    \ |                ^^^^^^^^^^^\n   |                |\n   |                expected\
    \ `&isize`, found `isize`\n   |                help: consider borrowing here:\
    \ `&max_element`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:28:27\n\
    \   |\n19 |     let mut max_element = arr[0];\n   |                          \
    \ ------ expected due to this value\n...\n28 |             max_element = i;\n\
    \   |                           ^ expected `isize`, found `&isize`\n   |\nhelp"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if max_k == 0 {\n            max_k = k;\n        }\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k = 0;\n   \
    \     }\n        if max_k == 0 {\n            max_k = k;\n        }\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k =\
    \ 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n        }\n\
    \        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        \
    \    max_k = 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == 0 {\n            max_k\
    \ = k;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_k = 0;\n        }\n        if max_k == 0 {\n      \
    \      max_k = k;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if max_k == 0 {\n    \
    \        max_k = k;\n        }\n        if arr[i] > max_arr[0] {\n           \
    \ max_arr[0] = arr[i];\n            max_k = 0;\n        }\n        if max_k ==\
    \ 0 {\n            max_k = k;\n        }\n        if arr[i] > max_arr[0] {\n \
    \           max_arr[0] = arr[i];\n            max_k = 0;\n        }\n        if\
    \ max_k == 0 {\n            max_k = k;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if max_k == 0 {\n            max_k = k;\n        }\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k = 0;\n   \
    \     }\n        if max_k == 0 {\n            max_k = k;\n        }\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k =\
    \ 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n        }\n\
    \        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        \
    \    max_k = 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == 0 {\n            max_k\
    \ = k;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_k = 0;\n        }\n        if max_\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpy8ch7mo6.rs:139:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n124 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n139 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmpy8ch7mo6.rs:124:1\n    |\n123 |         if max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy8ch7mo6.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 1;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = 2;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = 3;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = 4;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = 5;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = 6;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = 7;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = 8;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = 9;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = 10;\n        }\n  \
    \      if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n        \
    \    max_k = 11;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = 12;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = 13;\n        }\n \
    \       if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n       \
    \     max_k = 14;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = 15;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = 16;\n        }\n \
    \       if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n       \
    \     max_k = 17;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = 18;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = 19;\n        }\n \
    \       if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n       \
    \     max_k = 20;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = 21;\n        }\n        if arr[i] > max_\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6z40a86r.rs:121:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n106 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n121 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmp6z40a86r.rs:106:1\n    |\n105 |         if arr[i]\
    \ > max_\n    |         -- this `if` expression has a condition, but no block\n\
    106 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6z40a86r.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i] > max {\n\
    \            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhp7cb9f.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplhp7cb9f.rs:22:12\n  \
    \ |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhp7cb9f.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut min_arr = vec![];\n    let mut min_k = k;\n    let mut i =\
    \ 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0] {\n          \
    \  max_arr[0] = arr[i];\n            max_k = max_k - 1;\n        }\n        if\
    \ arr[i] < min_arr[0] {\n            min_arr[0] = arr[i];\n            min_k =\
    \ min_k - 1;\n        }\n        if max_k == 0 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if min_k == 0 {\n            min_arr.push(arr[i]);\n     \
    \   }\n        if arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n \
    \       }\n        if arr[i] < min_arr[0] {\n            min_arr.push(arr[i]);\n\
    \        }\n        i += 1;\n    }\n    if min_k == 0 {\n        min_arr.push(arr[0]);\n\
    \    }\n    if max_k == 0 {\n        max_arr.push(arr[0]);\n    }\n    if min_k\
    \ > max_k {\n        max_arr.push(min_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k >\
    \ max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k >\
    \ max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k >\
    \ max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp4dpvuln9.rs:109:1\n    |\n\
    108 |     if min_\n    |     -- this `if` expression has a condition, but no block\n\
    109 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmple0d3v8z.rs:129:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n114 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n129 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmple0d3v8z.rs:114:1\n    |\n113 |         if arr\n\
    \    |         -- this `if` expression has a condition, but no block\n114 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmple0d3v8z.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbac5mlb.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_len = k;\n    for\
    \ ele in arr {\n        if ele > max_arr[k] {\n            max_arr[k] = ele;\n\
    \            len -= 1;\n        }\n        if len == 0 {\n            break;\n\
    \        }\n    }\n    max_arr.extend_from_slice(&max_arr[0..max_len]);\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error[E0425]: cannot find value `len` in this scope\n  --> /tmp/tmpzu0cb5s_.rs:25:13\n\
    \   |\n25 |             len -= 1;\n   |             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `len` in this scope\n  --> /tmp/tmpzu0cb5s_.rs:27:12\n\
    \   |\n27 |         if len == 0 {\n   |            ^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzu0cb5s_.rs:17:31\n   |\n17 |\
    \     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpzu0cb5s_.rs:23:18\n\
    \   |\n23 |         if ele > max_arr[k] {\n   |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpzu0cb5s_.rs:24:13\n   |\n24 |         \
    \    max_arr[k] = ele;\n   |             ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `std::ops::Range<isize>`\n  --> /tmp/tmpzu0cb5s_.rs:31:32\n   |\n31 |   \
    \  max_arr.extend_from_slice(&max_arr[0..max_len]);\n   |                    \
    \            ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for\
    \ `std::ops::Range<isize>`\n   = help: the following other types implement trait\
    \ `SliceIn"
  exit_code: 1
  status: SyntaxError
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = max_k - 1;\n      \
    \  }\n        if max_k == 0 {\n            break;\n        }\n        if arr[i]\
    \ > max_arr[1] {\n            max_arr[1] = arr[i];\n            max_k -= 1;\n\
    \        }\n        i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  stdout: ''
  stderr: "thread 'main' panicked at 'index out of bounds: the len is 0 but the index\
    \ is 0', /tmp/tmpj4zqas_7.rs:21:21\nnote: run with `RUST_BACKTRACE=1` environment\
    \ variable to display a backtrace\n"
  exit_code: 101
  status: Exception
- program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 1;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = 2;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = 3;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = 4;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = 5;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = 6;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = 7;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = 8;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = 9;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = 10;\n        }\n  \
    \      if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n        \
    \    max_k = 11;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = 12;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = 13;\n        }\n \
    \       if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n       \
    \     max_k = 14;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = 15;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = 16;\n        }\n \
    \       if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n       \
    \     max_k = 17;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = 18;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = 19;\n        }\n \
    \       if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n       \
    \     max_k = 20;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = 21;\n        }\n        if arr[i] > max_arr[21]\
    \ {\n            max_arr[21] = arr[i];\n            max_k = 22;\n        }\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  stdout: ''
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzo01txtk.rs:124:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n109 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n124 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzo01txtk.rs:16:42\n   |\n16 | fn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n   |    -------                               ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  exit_code: 1
  status: SyntaxError
