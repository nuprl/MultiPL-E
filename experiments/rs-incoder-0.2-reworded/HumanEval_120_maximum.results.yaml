language: rs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_element = arr[0];\n    for i in arr.iter().rev() {\n \
    \       if i > max_element {\n            max_element = i;\n        }\n      \
    \  if max_k == 0 {\n            break;\n        }\n        if max_k == 1 {\n \
    \           max_arr.push(max_element);\n            break;\n        }\n      \
    \  if max_k == 2 {\n            if max_element > max_arr[0] {\n              \
    \  max_arr.push(max_element);\n            }\n            max_k -= 1;\n      \
    \  }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n   \
    \ assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp52msbblq.rs:21:16\n   |\n\
    21 |         if i > max_element {\n   |                ^^^^^^^^^^^\n   |     \
    \           |\n   |                expected `&isize`, found `isize`\n   |    \
    \            help: consider borrowing here: `&max_element`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp52msbblq.rs:22:27\n   |\n19 |     let mut max_element =\
    \ arr[0];\n   |                           ------ expected due to this value\n\
    ...\n22 |             max_element = i;\n   |                           ^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    22 |             max_element = *i;\n   |                           +\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = k;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = k;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = k;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = k;\n        }\n   \
    \     if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n         \
    \   max_k = k;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n        \
    \    max_k = k;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n        \
    \    max_k = k;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n        \
    \    max_k = k;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = k;\n        }\n        if arr[i] > max_arr[21]\
    \ {\n            max_arr[21] = arr[i];\n            max_k = k;\n        }\n  \
    \      if arr[i] > \n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp86prcvi3.rs:125:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n110 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n125 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n   --> /tmp/tmp86prcvi3.rs:110:1\n    |\n110 | }\n  \
    \  | ^ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp86prcvi3.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    for num in arr {\n        if num > max_num {\n            max_num\
    \ = num;\n        }\n    }\n    for num in arr {\n        if num == max_num {\n\
    \            max_arr.push(num);\n        }\n    }\n    if k == 1 {\n        return\
    \ max_arr;\n    }\n    if k == max_arr.len() {\n        return max_arr;\n    }\n\
    \    if k > max_arr.len() {\n        return max_arr;\n    }\n    let mut max_k\
    \ = k;\n    let mut max_nums = vec![];\n    while max_k > 0 {\n        let mut\
    \ max_nums_temp: Vec<isize> = vec![];\n        for num in max_arr {\n        \
    \    if num == max_num {\n                max_nums_temp.push(num);\n         \
    \   }\n        }\n        if max_nums_temp.len() > max_k {\n            max_k\
    \ = max_nums_temp.len();\n        }\n        max_nums = max_nums.concat(max_nums_temp);\n\
    \    }\n    return max_nums;\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5qwibfe2.rs:32:13\n   |\n\
    32 |     if k == max_arr.len() {\n   |             ^^^^^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n32 |     if k == max_arr.len().try_into().unwrap()\
    \ {\n   |                          ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5qwibfe2.rs:35:12\n   |\n35 |     if k > max_arr.len()\
    \ {\n   |            ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n35 |     if k > max_arr.len().try_into().unwrap() {\n   |       \
    \                  ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp5qwibfe2.rs:47:34\n   |\n47 |         if max_nums_temp.len() > max_k\
    \ {\n   |                                  ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n47 |         if max_nums_temp.len() > max_k.try_into().unwrap()\
    \ {\n   |                                       ++++++++++++++++++++\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5qwibfe2.rs:48:21\n   |\n38 |     let mut max_k\
    \ = k;\n   |                     - expected due to this value\n...\n48 |     \
    \        max_k = max_nums_temp.len();\n   |                     ^^^^^^^^^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0061]: this function takes 0 arguments\
    \ but 1 argument was supplied\n   --> /tmp/tmp5qwibfe2.rs:50:29\n    |\n50  |\
    \         max_nums = max_nums.concat(max_nums_temp);\n    |                  \
    \           ^^^^^^ ------------- supplied 1 argument\n    |                  \
    \           |\n    |                             expected 0 arguments\n    |\n\
    note: associated function defined here\n\nerror[E0277]: the trait bound `[isize]:\
    \ Concat<_>` is not satisfied\n   --> /tmp/tmp5qwibfe2.rs:50:29\n    |\n50  |\
    \         max_nums = max_nums.concat(max_nums_temp);\n    |                  \
    \           ^^^^^^ the trait `Concat<_>` is "
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:19:12\n\
    \   |\n19 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:20:19\n   |\n20 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i - max_k +\
    \ k])\n        {\n            max_arr += arr[max_i - max_k + k];\n           \
    \ max_k -= 1;\n        }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmnt21bo7.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                        ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmnt21bo7.rs:23:39\n   |\n23 |             .any(|&x| x >\
    \ arr[max_i - max_k + k])\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpmnt21bo7.rs:23:37\n   |\n23 |             .any(|&x| x > arr[max_i\
    \ - max_k + k])\n   |                                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n   = help: the following other types implement trait `Sub<Rhs>`:\n\
    \             <&'a f32 as Sub<f32>>\n             <&'a f64 as Sub<f64>>\n    \
    \         <&'a i128 as Sub<i128>>\n             <&'a i16 as Sub<i16>>\n      \
    \       <&'a i32 as Sub<i32>>\n             <&'a i64 as Sub<i64>>\n          \
    \   <&'a i8 as Sub<i8>>\n             <&'a isize as Sub<isize>>\n           and\
    \ 48 others\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpmnt21bo7.rs:23:47\n\
    \   |\n23 |             .any(|&x| x > arr[max_i - max_k + k])\n   |          \
    \                                     ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add `isize` to `usize`\n  --> /tmp/tmpmnt21bo7.rs:23:45\n   |\n23 | \
    \            .any(|&x| x > arr[max_i - max_k + k])\n   |                     \
    \                        ^ no implementation for `usize + isize`\n   |\n   = help:\
    \ the trait `Add<isize>` is not implemented for `usize`\n   = help: the following\
    \ other types implement trait `Add<Rhs>`:\n             <&'a f32 as Add<f32>>\n\
    \             <&'a f64 as Add<f64>>\n             <&'a i128 as Add<i128>>\n  \
    \           <&'a i16 as Add<i16>>\n             <&'a i32 as Add<i32>>\n      \
    \       <&'a i64 as Add<i64>>\n             <&'a i8 as Add<i8>"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort_unstable();\n\
    \    max_arr.truncate(k);\n    max_arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9oz2zxdz.rs:19:22\n   |\n\
    19 |     max_arr.truncate(k);\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     max_arr.truncate(k.try_into().unwrap());\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![arr[0]];\n    for i in 1..k {\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n        }\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpztcx05gi.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpztcx05gi.rs:22:12\n  \
    \ |\n22 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmpztcx05gi.rs:23:26\n   |\n23 |            \
    \ max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![vec![-1000, 1000]];\n    let mut max_k = k;\n\
    \    let mut max_i = -1;\n    for i in 0..arr.len() {\n        if max_k == i {\n\
    \            max_arr[i] = arr[i];\n        } else {\n            if max_arr[i].0\
    \ > arr[i] {\n                max_arr[i] = arr[i];\n                max_k = i;\n\
    \            }\n        }\n    }\n    for i in 0..k {\n        if max_arr[i].0\
    \ > max_arr[i-k].0 {\n            max_arr[i] = max_arr[i-k];\n        }\n    }\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ayq68e9.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ayq68e9.rs:24:21\n   |\n24 |         if max_k == i {\n\
    \   |                     ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n24 |         if max_k == i.try_into().unwrap() {\n   |                \
    \      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ayq68e9.rs:25:26\n\
    \   |\n25 |             max_arr[i] = arr[i];\n   |             ----------   ^^^^^^\
    \ expected struct `Vec`, found `isize`\n   |             |\n   |             expected\
    \ due to the type of this binding\n   |\n   = note: expected struct `Vec<{integer}>`\n\
    \                found type `isize`\n\nerror[E0609]: no field `0` on type `Vec<{integer}>`\n\
    \  --> /tmp/tmp8ayq68e9.rs:27:27\n   |\n27 |             if max_arr[i].0 > arr[i]\
    \ {\n   |                           ^ unknown field\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp8ayq68e9.rs:28:30\n   |\n28 |                 max_arr[i]\
    \ = arr[i];\n   |                 ----------   ^^^^^^ expected struct `Vec`, found\
    \ `isize`\n   |                 |\n   |                 expected due to the type\
    \ of this binding\n   |\n   = note: expected struct `Vec<{integer}>`\n       \
    \         found type `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8ayq68e9.rs:29:25\n\
    \   |\n21 |     let mut max_k = k;\n   |                     - expected due to\
    \ this value\n...\n29 |                 max_k = i;\n   |                     \
    \    ^ expected `isize`, found `usize`\n\nerror[E0277]: the type `[Vec<{integer}>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp8ayq68e9.rs:34:12\n   |\n34 |  \
    \       if max_arr[i].0 > max_arr[i-k].0 {\n   |            ^^^^^^^^^^ slice indices\
    \ are of type "
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr;\n  \
    \  }\n    let mut max_idx = k;\n    let mut max_val = arr[k];\n    for i in 0..k\
    \ {\n        if arr[i] > max_val {\n            max_val = arr[i];\n          \
    \  max_idx = i;\n        }\n    }\n    vec![max_val; max_idx]\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3a6vcttx.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp3a6vcttx.rs:21:23\n  \
    \ |\n21 |     let mut max_val = arr[k];\n   |                       ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp3a6vcttx.rs:23:12\n   |\n23 |  \
    \       if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp3a6vcttx.rs:24:23\n   |\n24 |            \
    \ max_val = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3a6vcttx.rs:28:19\n\
    \   |\n28 |     vec![max_val; max_idx]\n   |                   ^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n28 |     vec![max_val; max_idx.try_into().unwrap("
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_element = arr[0];\n    for i in arr.iter().take(max_k)\
    \ {\n        if i > max_element {\n            max_element = i;\n        }\n \
    \   }\n    max_arr.push(max_element);\n    for i in arr.iter().skip(max_k) {\n\
    \        if i < max_element {\n            max_element = i;\n        }\n    }\n\
    \    max_arr.push(max_element);\n    return max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:20:30\n   |\n\
    20 |     for i in arr.iter().take(max_k) {\n   |                             \
    \ ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n20 |     for\
    \ i in arr.iter().take(max_k.try_into().unwrap()) {\n   |                    \
    \               ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2rhjkzw5.rs:21:16\n   |\n21 |         if i > max_element {\n   |   \
    \             ^^^^^^^^^^^\n   |                |\n   |                expected\
    \ `&isize`, found `isize`\n   |                help: consider borrowing here:\
    \ `&max_element`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:22:27\n\
    \   |\n19 |     let mut max_element = arr[0];\n   |                          \
    \ ------ expected due to this value\n...\n22 |             max_element = i;\n\
    \   |                           ^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n22 |             max_element = *i;\n\
    \   |                           +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:26:30\n\
    \   |\n26 |     for i in arr.iter().skip(max_k) {\n   |                      \
    \        ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an\
    \ `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n26\
    \ |     for i in arr.iter().skip(max_k.try_into().unwrap()) {\n   |          \
    \                         ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2rhjkzw5.rs:27:16\n   |\n27 |         if i < max_element {\n  \
    \ |                ^^^^^^^^^^^\n   |                |\n   |                expected\
    \ `&isize`, found `isize`\n   |                help: consider borrowing here:\
    \ `&max_element`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2rhjkzw5.rs:28:27\n\
    \   |\n19 |     let mut max_element = arr[0];\n   |                          \
    \ ------ expected due to this value\n...\n28 |             max_element = i;\n\
    \   |                           ^ expected `isize`, found `&isize`\n   |\nhelp"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if max_k == 0 {\n            max_k = k;\n        }\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k = 0;\n   \
    \     }\n        if max_k == 0 {\n            max_k = k;\n        }\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k =\
    \ 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n        }\n\
    \        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        \
    \    max_k = 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == 0 {\n            max_k\
    \ = k;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_k = 0;\n        }\n        if max_k == 0 {\n      \
    \      max_k = k;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if max_k == 0 {\n    \
    \        max_k = k;\n        }\n        if arr[i] > max_arr[0] {\n           \
    \ max_arr[0] = arr[i];\n            max_k = 0;\n        }\n        if max_k ==\
    \ 0 {\n            max_k = k;\n        }\n        if arr[i] > max_arr[0] {\n \
    \           max_arr[0] = arr[i];\n            max_k = 0;\n        }\n        if\
    \ max_k == 0 {\n            max_k = k;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if max_k == 0 {\n            max_k = k;\n        }\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k = 0;\n   \
    \     }\n        if max_k == 0 {\n            max_k = k;\n        }\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k =\
    \ 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n        }\n\
    \        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        \
    \    max_k = 0;\n        }\n        if max_k == 0 {\n            max_k = k;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == 0 {\n            max_k\
    \ = k;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_k = 0;\n        }\n        if max_\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpy8ch7mo6.rs:139:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n124 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n139 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmpy8ch7mo6.rs:124:1\n    |\n123 |         if max_\n\
    \    |         -- this `if` expression has a condition, but no block\n124 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpy8ch7mo6.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 1;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = 2;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = 3;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = 4;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = 5;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = 6;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = 7;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = 8;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = 9;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = 10;\n        }\n  \
    \      if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n        \
    \    max_k = 11;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = 12;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = 13;\n        }\n \
    \       if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n       \
    \     max_k = 14;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = 15;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = 16;\n        }\n \
    \       if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n       \
    \     max_k = 17;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = 18;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = 19;\n        }\n \
    \       if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n       \
    \     max_k = 20;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = 21;\n        }\n        if arr[i] > max_\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp6z40a86r.rs:121:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n106 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n121 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmp6z40a86r.rs:106:1\n    |\n105 |         if arr[i]\
    \ > max_\n    |         -- this `if` expression has a condition, but no block\n\
    106 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6z40a86r.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i] > max {\n\
    \            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhp7cb9f.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                      ++++++++++++++++++++\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmplhp7cb9f.rs:22:12\n  \
    \ |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmplhp7cb9f.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut min_arr = vec![];\n    let mut min_k = k;\n    let mut i =\
    \ 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0] {\n          \
    \  max_arr[0] = arr[i];\n            max_k = max_k - 1;\n        }\n        if\
    \ arr[i] < min_arr[0] {\n            min_arr[0] = arr[i];\n            min_k =\
    \ min_k - 1;\n        }\n        if max_k == 0 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if min_k == 0 {\n            min_arr.push(arr[i]);\n     \
    \   }\n        if arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n \
    \       }\n        if arr[i] < min_arr[0] {\n            min_arr.push(arr[i]);\n\
    \        }\n        i += 1;\n    }\n    if min_k == 0 {\n        min_arr.push(arr[0]);\n\
    \    }\n    if max_k == 0 {\n        max_arr.push(arr[0]);\n    }\n    if min_k\
    \ > max_k {\n        max_arr.push(min_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k >\
    \ max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k >\
    \ max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k >\
    \ max_k {\n        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n\
    \        min_arr.push(max_arr[0]);\n    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n\
    \    }\n    if min_k > max_k {\n        min_arr.push(max_arr[0]);\n    }\n   \
    \ if min_\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp4dpvuln9.rs:109:1\n    |\n\
    108 |     if min_\n    |     -- this `if` expression has a condition, but no block\n\
    109 | }\n    | ^ expected `{`\n\nerror: aborting due to previous error\n\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmple0d3v8z.rs:129:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n114 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n129 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmple0d3v8z.rs:114:1\n    |\n113 |         if arr\n\
    \    |         -- this `if` expression has a condition, but no block\n114 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmple0d3v8z.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbac5mlb.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_len = k;\n    for\
    \ ele in arr {\n        if ele > max_arr[k] {\n            max_arr[k] = ele;\n\
    \            len -= 1;\n        }\n        if len == 0 {\n            break;\n\
    \        }\n    }\n    max_arr.extend_from_slice(&max_arr[0..max_len]);\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `len` in this scope\n  --> /tmp/tmpzu0cb5s_.rs:25:13\n\
    \   |\n25 |             len -= 1;\n   |             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `len` in this scope\n  --> /tmp/tmpzu0cb5s_.rs:27:12\n\
    \   |\n27 |         if len == 0 {\n   |            ^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzu0cb5s_.rs:17:31\n   |\n17 |\
    \     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpzu0cb5s_.rs:23:18\n\
    \   |\n23 |         if ele > max_arr[k] {\n   |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>`\
    \ is implemented for `usize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpzu0cb5s_.rs:24:13\n   |\n24 |         \
    \    max_arr[k] = ele;\n   |             ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is\
    \ not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `std::ops::Range<isize>`\n  --> /tmp/tmpzu0cb5s_.rs:31:32\n   |\n31 |   \
    \  max_arr.extend_from_slice(&max_arr[0..max_len]);\n   |                    \
    \            ^^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for\
    \ `std::ops::Range<isize>`\n   = help: the following other types implement trait\
    \ `SliceIn"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = max_k - 1;\n      \
    \  }\n        if max_k == 0 {\n            break;\n        }\n        if arr[i]\
    \ > max_arr[1] {\n            max_arr[1] = arr[i];\n            max_k -= 1;\n\
    \        }\n        i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpj4zqas_7.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 1;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = 2;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = 3;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = 4;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = 5;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = 6;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = 7;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = 8;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = 9;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = 10;\n        }\n  \
    \      if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n        \
    \    max_k = 11;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = 12;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = 13;\n        }\n \
    \       if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n       \
    \     max_k = 14;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = 15;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = 16;\n        }\n \
    \       if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n       \
    \     max_k = 17;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = 18;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = 19;\n        }\n \
    \       if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n       \
    \     max_k = 20;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = 21;\n        }\n        if arr[i] > max_arr[21]\
    \ {\n            max_arr[21] = arr[i];\n            max_k = 22;\n        }\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpzo01txtk.rs:124:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n109 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n124 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpzo01txtk.rs:16:42\n   |\n16 | fn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n   |    -------                               ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut cur_max = arr[0];\n    let mut cur_max_idx = 1;\n    let mut\
    \ cur_max_val = arr[0];\n    for &i in arr {\n        if cur_max > i {\n     \
    \       cur_max = i;\n            cur_max_idx = cur_max_idx;\n        }\n    \
    \    if cur_max_val > i {\n            cur_max_val = i;\n        }\n        if\
    \ cur_max_idx > k {\n            break;\n        }\n    }\n    max_arr.push(cur_max);\n\
    \    max_arr.push(cur_max_val);\n    max_arr.push(cur_max_idx);\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptt16r_x5.rs:22:9\n   |\n\
    22 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 && max_k > 0 {\n\
    \        if arr[max_idx - 1] > arr[max_idx] {\n            max_arr.pop();\n  \
    \          max_k -= 1;\n        } else {\n            max_arr.pop();\n       \
    \     max_k -= 1;\n            max_idx -= 1;\n        }\n    }\n    max_arr.extend(arr.iter().take(max_k).cloned());\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz4za_v21.rs:30:36\n   |\n\
    30 |     max_arr.extend(arr.iter().take(max_k).cloned());\n   |              \
    \                      ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n30 |     max_arr.extend(arr.iter().take(max_k.try_into().unwrap()).cloned());\n\
    \   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![vec![]; k];\n    for i\
    \ in 0..k {\n        max_arr[i] = arr[i];\n    }\n    for i in 0..k {\n      \
    \  for j in 0..k {\n            if max_arr[j] < max_arr[i] {\n               \
    \ max_arr[j] = max_arr[i];\n            }\n        }\n    }\n    for i in 0..k\
    \ {\n        max_arr[i] = max_arr[i].iter().max().unwrap();\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp21mqv21y.rs:17:36\n   |\n\
    17 |     let mut max_arr = vec![vec![]; k];\n   |                            \
    \        ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n17 |     let\
    \ mut max_arr = vec![vec![]; k.try_into().unwrap()];\n   |                   \
    \                 ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[Vec<_>]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp21mqv21y.rs:19:9\n   |\n19 |         max_arr[i]\
    \ = arr[i];\n   |         ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[Vec<_>]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<Vec<_>>`\n\nerror[E0277]: the type `[isize]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp21mqv21y.rs:19:22\n   |\n19 |         max_arr[i]\
    \ = arr[i];\n   |                      ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[Vec<_>]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp21mqv21y.rs:23:16\n   |\n23 |  \
    \           if max_arr[j] < max_arr[i] {\n   |                ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[Vec<_>]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<Vec<_>>`\n\nerror[E0277]:\
    \ the type `[Vec<_>]` cannot be indexed by `isize`\n  --> /tmp/tmp21mqv21y.rs:23:29\n\
    \   |\n23 |             if max_arr[j] < max_arr[i] {\n   |                   \
    \          ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[Vec<_>]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<Vec<_>>`\n\nerror[E0277]: the "
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![];\n    let mut max_index = -1;\n    for i in\
    \ 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    for i in 0..k {\n        if\
    \ arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n        }\n    }\n\
    \    for i in 0..k {\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n        }\n    }\n    for i in 0..k {\n\
    \        if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n        }\n\
    \    }\n    for i in 0..k {\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n        }\n    }\n    for i in 0..k {\n\
    \        if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n        }\n\
    \    }\n    for i in 0..k {\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n        }\n    }\n    for i in 0..k {\n\
    \        if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n      \
    \  }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[11] {\n        \
    \    max_arr[11] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if\
    \ arr[i] > max_arr[12] {\n            max_arr[12] = arr[i];\n        }\n    }\n\
    \    for i in 0..k {\n        if arr[i] > max_arr[13] {\n            max_arr[13]\
    \ = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[14]\
    \ {\n            max_arr[14] = arr[i];\n        }\n    }\n    for i in 0..k {\n\
    \        if arr[i] > max_arr[15] {\n            max_arr[15] = arr[i];\n      \
    \  }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[16] {\n        \
    \    max_arr[16] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if\
    \ arr[i] > max_arr[17] {\n            max_arr[17] = arr[i];\n        }\n    }\n\
    \    for i in 0..k {\n        if arr[i] > max_arr[18] {\n            max_\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpg1pa_ha3.rs:131:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    113 |     for i in 0..k {\n    |                   - unclosed delimiter\n114 |\
    \         if arr[i] > max_arr[18] {\n    |                                 - this\
    \ delimiter might not be properly closed...\n115 |             max_\n116 | }\n\
    \    | - ...as it matches this but it has different indentation\n...\n131 | }\n\
    \    |   ^\n\nerror[E0425]: cannot find value `max_` in this scope\n   --> /tmp/tmpg1pa_ha3.rs:115:13\n\
    \    |\n115 |             max_\n    |             ^^^^ not found in this scope\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpg1pa_ha3.rs:17:21\n   |\n17 |\
    \     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpg1pa_ha3.rs:23:12\n  \
    \ |\n23 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpg1pa_ha3.rs:24:26\n   |\n24 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpg1pa_ha3.rs:29:12\n   |\n29 |  \
    \       if arr[i] > max_arr[1] {\n   |            ^^^^^^ slice indices are of\
    \ type `usiz"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_arr = vec![];\n        let mut max_idx = -1;\n      \
    \  for (i, val) in arr.iter().enumerate() {\n            if val > max_arr[k] {\n\
    \                max_arr[k] = val;\n                max_idx = i;\n           \
    \ }\n        }\n        max_arr.iter().cloned().take(k).cloned()\n    }\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprzsyyq4a.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprzsyyq4a.rs:23:22\n   |\n23 |  \
    \           if val > max_arr[k] {\n   |                      ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmprzsyyq4a.rs:24:17\n\
    \   |\n24 |                 max_arr[k] = val;\n   |                 ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprzsyyq4a.rs:21:27\n\
    \   |\n21 |         let mut max_idx = -1;\n   |                           ^^ the\
    \ trait `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprzsyyq4a.rs:28:38\n   |\n28 |         max_arr.iter().cloned().take(k).cloned()\n\
    \   |                                      ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n28 |         max_arr.iter().cloned().take(k.try_into().unwrap()).cloned()\n\
    \   |                                      ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmprzsyyq4a.rs:28:9\n   |\n16 | fn maximum(arr:\
    \ Vec<isize>, k: isize) -> Vec<isize> {\n   |                                \
    \          ---------- expected `Vec<isize>` because of return type\n...\n28 |\
    \         max_arr.iter().clone"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![];\n    let mut max_idx = arr.len();\n    let\
    \ mut max_val = arr[0];\n    for i in 1..k {\n        if arr[i] > max_val {\n\
    \            max_val = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   for i in 0..k {\n        max_arr[i] = arr[i];\n    }\n    for i in 0..max_idx\
    \ {\n        max_arr[i] = max_val;\n    }\n    max_arr\n}\n\nfn main() {\n   \
    \ let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpokocwx0t.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpokocwx0t.rs:24:12\n  \
    \ |\n24 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpokocwx0t.rs:25:23\n   |\n25 |  \
    \           max_val = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpokocwx0t.rs:26:23\n   |\n26 |             max_idx = i;\n   |  \
    \                     ^ expected `usize`, found `isize`\n\nerror[E0277]: the type\
    \ `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpokocwx0t.rs:30:9\n   |\n30\
    \ |         max_arr[i] = arr[i];\n   |         ^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpokocwx0t.rs:30:22\n   |\n30 |  \
    \       max_arr[i] = arr[i];\n   |                      ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = vec![];\n    for i in 0..k {\n        if arr[i] > max_arr[0] {\n         \
    \   max_arr[0] = arr[i];\n            max_idx[0] = i;\n        }\n    }\n    for\
    \ i in 1..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_idx[0] = i;\n        }\n    }\n    for i in 0..k {\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx[0]\
    \ = i;\n        }\n    }\n    for i in 1..k {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_idx[0] = i;\n        }\n\
    \    }\n    for i in 2..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx[0] = i;\n        }\n    }\n    for i in 3..k\
    \ {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n    \
    \        max_idx[0] = i;\n        }\n    }\n    for i in 4..k {\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx[0] = i;\n\
    \        }\n    }\n    for i in 5..k {\n        if arr[i] > max_arr[0] {\n   \
    \         max_arr[0] = arr[i];\n            max_idx[0] = i;\n        }\n    }\n\
    \    for i in 6..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx[0] = i;\n        }\n    }\n    for i in 7..k\
    \ {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n    \
    \        max_idx[0] = i;\n        }\n    }\n    for i in 8..k {\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx[0] = i;\n\
    \        }\n    }\n    for i in 9..k {\n        if arr[i] > max_arr[0] {\n   \
    \         max_arr[0] = arr[i];\n            max_idx[0] = i;\n        }\n    }\n\
    \    for i in 10..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx[0] = i;\n        }\n    }\n    for i in 11..k\
    \ {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n    \
    \        max_idx[0] = i;\n        }\n    }\n    for i in 12..k {\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx[0] = i;\n\
    \        }\n    }\n    for i in 13..k {\n        if arr[i] > max_arr[0] {\n  \
    \          max_arr[0] = arr[i];\n            max_idx[0] = i;\n        }\n    }\n\
    \    for i in 14..k {\n        if arr[i] > max_arr[0] {\n}\n\nfn main() {\n  \
    \  let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7ubostv4.rs:132:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    115 |     for i in 14..k {\n    |                    - unclosed delimiter\n116\
    \ |         if arr[i] > max_arr[0] {\n    |                                - this\
    \ delimiter might not be properly closed...\n117 | }\n    | - ...as it matches\
    \ this but it has different indentation\n...\n132 | }\n    |   ^\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7ubostv4.rs:20:12\n\
    \   |\n20 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7ubostv4.rs:21:26\n   |\n21 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7ubostv4.rs:26:12\n   |\n26 |  \
    \       if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp7ubostv4.rs:27:26\n   |\n27 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = 0;\n    let mut min_i = 0;\n    let mut min_k = k;\n\
    \    let mut min_arr = vec![];\n    for x in arr.iter() {\n        if x > max_arr[k]\
    \ {\n            max_arr[k] = x;\n            max_k -= 1;\n        }\n       \
    \ if x < min_arr[k] {\n            min_arr[k] = x;\n            min_k -= 1;\n\
    \        }\n        if max_k == 0 {\n            max_arr.push(min_arr[k]);\n \
    \           min_arr.push(max_arr[k]);\n        }\n        if min_k == 0 {\n  \
    \          max_arr.push(max_arr[k]);\n            min_arr.push(min_arr[k]);\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1n3ku7lu.rs:24:16\n\
    \   |\n24 |         if x > max_arr[k] {\n   |                ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp1n3ku7lu.rs:25:13\n\
    \   |\n25 |             max_arr[k] = x;\n   |             ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp1n3ku7lu.rs:28:16\n   |\n28 |         if\
    \ x < min_arr[k] {\n   |                ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp1n3ku7lu.rs:29:13\n   |\n29 |             min_arr[k]\
    \ = x;\n   |             ^^^^^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp1n3ku7lu.rs:33:26\n   |\n33 |             max_arr.push(min_arr[k]);\n\
    \   |                          ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp1n3ku7lu.rs:34:26\n   |\n34 |             min_arr.push(max_"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_arr = vec![];\n        let mut max_k = k;\n        let\
    \ mut max_idx = arr.len();\n        for i in 0..arr.len() {\n            if arr[i]\
    \ > max_arr[0] {\n                max_arr[0] = arr[i];\n                max_k\
    \ = 1;\n                max_idx = i;\n            } else {\n                if\
    \ arr[i] > max_arr[1] {\n                    max_arr[1] = arr[i];\n          \
    \          max_k = 2;\n                    max_idx = i;\n                }\n \
    \           }\n        }\n        max_arr.truncate(max_k);\n        max_arr.push(arr[max_idx]);\n\
    \        max_arr\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpogq9ybph.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpogq9ybph.rs:36:26\n   |\n36 |         max_arr.truncate(max_k);\n\
    \   |                          ^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n36 |         max_arr.truncate(max_k.try_into().unwrap());\n   | \
    \                         ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort_unstable();\n\
    \    let mut max_k = k;\n    let mut max_idx = arr.len();\n    while max_idx >\
    \ 0 && max_k > 0 {\n        if max_arr[max_idx - 1] > max_arr[max_idx] {\n   \
    \         max_k -= 1;\n        } else {\n            max_idx -= 1;\n        }\n\
    \    }\n    max_arr.drain(..max_idx);\n    max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpzuahfskn.rs:22:35

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    let mut max_idx = 1;\n    for &i in arr {\n        if i > max_num\
    \ {\n            max_num = i;\n            max_idx = 1;\n        }\n        if\
    \ i == max_num {\n            max_idx += 1;\n        }\n    }\n    max_arr.push(max_num);\n\
    \    for _ in 0..k - 1 {\n        max_arr.push(max_num);\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpifeeuzt1.rs:20:9\n   |\n\
    20 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_val = arr[0];\n    for ele in arr {\n        if ele >\
    \ max_val {\n            max_val = ele;\n        }\n        if max_k == 0 {\n\
    \            max_arr.push(ele);\n        } else {\n            if max_k == ele\
    \ {\n                max_arr.push(ele);\n            } else {\n              \
    \  max_arr.push(max_val);\n                max_arr.push(ele);\n              \
    \  max_k -= ele;\n            }\n        }\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-3, -3, -3, -4, 5, 5]`,\n right: `[-4, -3, 5]`', /tmp/tmp2s85wup5.rs:41:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = k - 1;\n        }\n\
    \        if max_k == 0 {\n            break;\n        }\n        if arr[i] > max_arr[k]\
    \ {\n            max_arr[k] = arr[i];\n            max_k--;\n        }\n     \
    \   i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp_gmg39am.rs:30:20\n\
    \   |\n30 |             max_k--;\n   |                    ^ expected expression\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_gmg39am.rs:28:21\n\
    \   |\n28 |         if arr[i] > max_arr[k] {\n   |                     ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_gmg39am.rs:29:13\n\
    \   |\n29 |             max_arr[k] = arr[i];\n   |             ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i])\n      \
    \  {\n            max_arr.push(arr[max_i]);\n            max_k -= 1;\n       \
    \ }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfgnrnw4b.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_val = arr[0];\n    for ele in arr.iter() {\n        if\
    \ ele > max_val {\n            max_val = ele;\n        }\n        if max_k ==\
    \ 0 {\n            max_arr.push(ele);\n        } else {\n            if ele >\
    \ max_arr[0] {\n                max_arr.push(ele);\n            }\n        }\n\
    \        if max_k == 0 {\n            break;\n        }\n        max_k--;\n  \
    \  }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpcg6qralb.rs:34:16\n\
    \   |\n34 |         max_k--;\n   |                ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpcg6qralb.rs:21:18\n   |\n21 |         if ele\
    \ > max_val {\n   |                  ^^^^^^^\n   |                  |\n   |  \
    \                expected `&isize`, found `isize`\n   |                  help:\
    \ consider borrowing here: `&max_val`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpcg6qralb.rs:22:23\n   |\n22 |             max_val = ele;\n   |     \
    \                  ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |             max_val = *ele;\n   |     \
    \                  +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpcg6qralb.rs:36:5\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |      \
    \                                    ---------- expected `Vec<isize>` because\
    \ of return type\n...\n36 |     max_arr\n   |     ^^^^^^^ expected `isize`, found\
    \ `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort();\n\
    \    let mut max_k = k;\n    let mut max_i = arr.len() - 1;\n    while max_i >=\
    \ 0 && max_k > 0 && max_arr[0] > max_arr[max_i] {\n        max_k -= 1;\n     \
    \   max_i -= 1;\n    }\n    max_arr.truncate(max_i);\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-4, -3]`,\n right: `[-4, -3, 5]`', /tmp/tmphc3rh2jt.rs:31:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_idx = arr.len() -\
    \ 1;\n    for i in 0..k {\n        if max_idx < 0 {\n            break;\n    \
    \    }\n        if arr[i] > arr[*max_idx] {\n            max_arr.push(arr[*max_idx]);\n\
    \            max_idx -= 1;\n        } else {\n            max_arr.push(arr[i]);\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj10r9md9.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpj10r9md9.rs:26:12\n\
    \   |\n26 |         if arr[i] > arr[*max_idx] {\n   |            ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0614]:\
    \ type `usize` cannot be dereferenced\n  --> /tmp/tmpj10r9md9.rs:26:25\n   |\n\
    26 |         if arr[i] > arr[*max_idx] {\n   |                         ^^^^^^^^\n\
    \nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmpj10r9md9.rs:27:30\n\
    \   |\n27 |             max_arr.push(arr[*max_idx]);\n   |                   \
    \           ^^^^^^^^\n\nerror[E0277]: the type `[isize]` cannot be indexed by\
    \ `isize`\n  --> /tmp/tmpj10r9md9.rs:30:26\n   |\n30 |             max_arr.push(arr[i]);\n\
    \   |                          ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0614.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_val = arr[0];\n \
    \   for i in 1..k {\n        if arr[i] > max_val {\n            max_val = arr[i];\n\
    \        }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n      \
    \      max_arr.push(arr[i]);\n        }\n    }\n    max_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp07n7u5x3.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:24:23\n   |\n24 |  \
    \           max_val = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:28:12\n   |\n28 |  \
    \       if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:29:26\n   |\n29 |  \
    \           max_arr.push(arr[i]);\n   |                          ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanati"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_val = arr[0];\n \
    \   for i in 1..k {\n        if arr[i] > max_val {\n            max_val = arr[i];\n\
    \        }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n      \
    \      max_arr.push(arr[i]);\n        }\n    }\n    max_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp07n7u5x3.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:24:23\n   |\n24 |  \
    \           max_val = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:28:12\n   |\n28 |  \
    \       if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:29:26\n   |\n29 |  \
    \           max_arr.push(arr[i]);\n   |                          ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanati"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if max_k == k {\n            break;\n       \
    \ }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n    \
    \        max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 0;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp7iv92lll.rs:141:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - unclosed delimiter\n\
    ...\n123 |         if arr[i] > max_arr[0] {\n    |                           \
    \     - this delimiter might not be properly closed...\n...\n126 | }\n    | -\
    \ ...as it matches this but it has different indentation\n...\n141 | }\n    |\
    \   ^\n\nerror[E0425]: cannot find value `max_` in this scope\n   --> /tmp/tmp7iv92lll.rs:125:13\n\
    \    |\n125 |             max_\n    |             ^^^^ help: a local variable\
    \ with a similar name exists: `max_k`\n\nerror[E0308]: mismatched types\n   -->\
    \ /tmp/tmp7iv92lll.rs:20:5\n    |\n16  |   fn maximum(arr: Vec<isize>, k: isize)\
    \ -> Vec<isize> {\n    |                                            ----------\
    \ expected `Vec<isize>` because of return type\n...\n20  | /     while i < arr.len()\
    \ {\n21  | |         if arr[i] > max_arr[0] {\n22  | |             max_arr[0]\
    \ = arr[i];\n23  | |             max_k = 0;\n...   |\n140 | |     assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n141 | | }\n    | |__^ expected\
    \ struct `Vec`, found `()`\n    |\n    = note: expected struct `Vec<isize>`\n\
    \            found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_index\
    \ = 0;\n    for i in 0..k {\n        if arr[i] > max {\n            max = arr[i];\n\
    \            max_index = i;\n        }\n    }\n    vec![max; max_index + k - 1]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprejd6mxm.rs:20:12\n\
    \   |\n20 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmprejd6mxm.rs:21:19\n   |\n21 |  \
    \           max = arr[i];\n   |                   ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmprejd6mxm.rs:25:15\n   |\n25 |     vec![max; max_index + k - 1]\n\
    \   |               ^^^^^^^^^^^^^^^^^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n25 |     vec![max; (max_index + k - 1).try_into().unwrap()]\n\
    \   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ &i in arr {\n            if i > max {\n                max = i;\n          \
    \      max_idx = 1;\n            }\n            if i == max {\n              \
    \  max_idx += 1;\n            }\n        }\n        let mut res = vec![max];\n\
    \        for i in 0..k - 1 {\n            if max_idx > res.len() {\n         \
    \       res.resize(res.len() + 1);\n            }\n            res[max_idx] =\
    \ arr[i];\n            max_idx += 1;\n        }\n        res\n    }\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0x5n03lr.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp0x5n03lr.rs:22:13\n   |\n22 |         for &i in arr {\n\
    \   |             ^^    --- this expression has type `isize`\n   |           \
    \  |\n   |             expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0061]: this function\
    \ takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmp0x5n03lr.rs:34:21\n\
    \     |\n34   |                 res.resize(res.len() + 1);\n     |           \
    \          ^^^^^^ ------------- supplied 1 argument\n     |                  \
    \   |\n     |                     expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0x5n03lr.rs:36:28\n   |\n36 |             res[max_idx]\
    \ = arr[i];\n   |                            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0277, E0308.\nFor\
    \ more information about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result[i] = arr[max_idx - i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiem08xme.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiem08xme.rs:27:35\n   |\n27 |         result[i]\
    \ = arr[max_idx - i];\n   |                                   ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpiem08xme.rs:27:33\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |                      \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if max_k > 0 &&\
    \ arr[i] > max_arr[0] {\n            max_k -= 1;\n        }\n        if max_k\
    \ == 0 {\n            max_arr.push(arr[i]);\n        }\n        if max_k > 0 &&\
    \ arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n        }\n      \
    \  if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr[0] {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && arr[i] > max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp8p8i_aqn.rs:106:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n91  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n106 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n  --> /tmp/tmp8p8i_aqn.rs:91:1\n   |\n90 |         if max_k\
    \ > 0 && arr[i] > max_arr\n   |         -- this `if` expression has a condition,\
    \ but no block\n91 | }\n   | ^ expected `{`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp8p8i_aqn.rs:16:42\n   |\n16 | fn maximum(arr: Vec<isize>, k: isize)\
    \ -> Vec<isize> {\n   |    -------                               ^^^^^^^^^^ expected\
    \ struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n   |\n   = note: expected struct `Vec<isize>`\n\
    \           found unit type `()`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i])\n      \
    \  {\n            max_arr.push(arr[max_i]);\n            max_k -= 1;\n       \
    \ }\n        max_i += 1;\n    }\n    max_arr.push(arr[max_i]);\n    max_arr.sort();\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq2fel95r.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = max_k - 1;\n      \
    \  }\n        if max_k == 0 {\n            break;\n        }\n        if arr[i]\
    \ > max_arr[1] {\n            max_arr[1] = arr[i];\n        }\n        i += 1;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpepdt9w_l.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = vec![];\n    for i in 0..k {\n        max_arr[i] = arr[i];\n        max_idx[i]\
    \ = i;\n    }\n    for i in 0..k {\n        for j in 0..k {\n            if max_arr[j]\
    \ > max_arr[i] {\n                max_arr[j] = max_arr[i];\n                max_idx[j]\
    \ = max_idx[i];\n            }\n        }\n    }\n    for i in 0..k {\n      \
    \  arr[i] = max_arr[i];\n    }\n    arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpxnzvzj9_.rs:20:9\n\
    \   |\n20 |         max_arr[i] = arr[i];\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxnzvzj9_.rs:20:22\n   |\n20 |  \
    \       max_arr[i] = arr[i];\n   |                      ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpxnzvzj9_.rs:21:9\n   |\n21 |   \
    \      max_idx[i] = i;\n   |         ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpxnzvzj9_.rs:25:16\n   |\n25 |             if max_arr[j]\
    \ > max_arr[i] {\n   |                ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpxnzvzj9_.rs:25:29\n   |\n25 |             if max_arr[j]\
    \ > max_arr[i] {\n   |                             ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpxnzvzj9_.rs:26:17\n   |\n26 |         "
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbac5mlb.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:19:12\n\
    \   |\n19 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:20:19\n   |\n20 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut max_arr = vec![];\n    let mut max_idx = -1;\n \
    \   for i in 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx = 0;\n        }\n        if arr[i] > max_arr[1]\
    \ {\n            max_arr[1] = arr[i];\n            max_idx = 1;\n        }\n \
    \   }\n    for i in 0..k {\n        if arr[i] > max_arr[max_idx] {\n         \
    \   max_arr[max_idx] = arr[i];\n        }\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiry2x664.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpiry2x664.rs:24:26\n   |\n24 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpiry2x664.rs:27:12\n   |\n27 |  \
    \       if arr[i] > max_arr[1] {\n   |            ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpiry2x664.rs:28:26\n   |\n28 |  \
    \           max_arr[1] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpiry2x664.rs:33:12\n   |\n33 |  \
    \       if arr[i] > max_arr[max_idx] {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --"
  stdout: ''
  timestamp: 1659747170
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 {\n        let\
    \ mut max_val = arr[0];\n        for i in 1..max_idx {\n            if arr[i]\
    \ > max_val {\n                max_val = arr[i];\n                max_idx = i;\n\
    \            }\n        }\n        max_arr.push(max_val);\n        max_k -= 1;\n\
    \        if max_k == 0 {\n            break;\n        }\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, -3, -3]`,\n right: `[-4, -3, 5]`', /tmp/tmpu4vkl9ok.rs:39:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        arr\n    } else {\n\
    \        let mut max = arr[0];\n        let mut max_idx = 1;\n        for &i in\
    \ arr {\n            if i > max {\n                max = i;\n                max_idx\
    \ = 1;\n            }\n            if i == max {\n                max_idx += 1;\n\
    \            }\n        }\n        let mut result = vec![max];\n        for i\
    \ in 1..k {\n            result.push(arr[max_idx]);\n            max_idx += 1;\n\
    \        }\n        result\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1js1g85h.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1js1g85h.rs:22:13\n   |\n22 |         for &i in arr {\n\
    \   |             ^^    --- this expression has type `isize`\n   |           \
    \  |\n   |             expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbac5mlb.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i])\n      \
    \  {\n            max_arr.push(arr[max_i]);\n            max_k -= 1;\n       \
    \ }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfgnrnw4b.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    for i in 0..k\
    \ {\n        max_arr.push(arr[i]);\n    }\n    for i in 0..k {\n        for j\
    \ in 0..k {\n            if arr[i] > arr[j] {\n                max_arr[i] = arr[i];\n\
    \            }\n        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:19:22\n\
    \   |\n19 |         max_arr.push(arr[i]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:23:16\n\
    \   |\n23 |             if arr[i] > arr[j] {\n   |                ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:23:25\n\
    \   |\n23 |             if arr[i] > arr[j] {\n   |                         ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:24:17\n\
    \   |\n24 |                 max_arr[i] = arr[i];\n   |                 ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:24:30\n\
    \   |\n24 |                 max_arr[i] = arr[i];\n   |                       \
    \       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 5 previous errors\n\nFor more "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = vec![];\n    for i in 0..k {\n        max_arr[i] = arr[i];\n        max_idx[i]\
    \ = i;\n    }\n    for i in 0..k {\n        for j in 0..k {\n            if max_arr[j]\
    \ > max_arr[i] {\n                max_arr[j] = max_arr[i];\n                max_idx[j]\
    \ = max_idx[i];\n            }\n        }\n    }\n    for i in 0..k {\n      \
    \  arr[i] = max_arr[i];\n    }\n    for i in 0..k {\n        max_idx[i] = max_idx[i];\n\
    \    }\n    return arr;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp6_n6tsgh.rs:20:9\n\
    \   |\n20 |         max_arr[i] = arr[i];\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6_n6tsgh.rs:20:22\n   |\n20 |  \
    \       max_arr[i] = arr[i];\n   |                      ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp6_n6tsgh.rs:21:9\n   |\n21 |   \
    \      max_idx[i] = i;\n   |         ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp6_n6tsgh.rs:25:16\n   |\n25 |             if max_arr[j]\
    \ > max_arr[i] {\n   |                ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp6_n6tsgh.rs:25:29\n   |\n25 |             if max_arr[j]\
    \ > max_arr[i] {\n   |                             ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmp6_n6tsgh.rs:26:17\n   |\n26 |         "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.is_empty() {\n        return\
    \ vec![];\n    }\n    let mut max_arr = vec![];\n    let mut max_len = k;\n  \
    \  for ele in arr {\n        if ele > max_arr[k] {\n            max_arr[k] = ele;\n\
    \            len -= 1;\n            if len == 0 {\n                max_len = k;\n\
    \            }\n        }\n    }\n    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    \    max_arr.extend(vec![max_arr[k]]);\n    max_arr.extend(vec![max_arr[k]]);\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `len` in this scope\n  --> /tmp/tmpyamc_2xy.rs:25:13\n\
    \   |\n25 |             len -= 1;\n   |             ^^^ not found in this scope\n\
    \nerror[E0425]: cannot find value `len` in this scope\n  --> /tmp/tmpyamc_2xy.rs:26:16\n\
    \   |\n26 |             if len == 0 {\n   |                ^^^ not found in this\
    \ scope\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpyamc_2xy.rs:23:18\n\
    \   |\n23 |         if ele > max_arr[k] {\n   |                  ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpyamc_2xy.rs:24:13\n\
    \   |\n24 |             max_arr[k] = ele;\n   |             ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpyamc_2xy.rs:31:25\n   |\n31 |     max_arr.extend(vec![max_arr[k]]);\n\
    \   |                         ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpyamc_2xy.rs:32:25\n   |\n32 |     max_arr.extend(vec![max_arr[k]]);\n\
    \   |                         ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpyamc_2xy.rs:33:25\n   |\n33 |     max_arr.extend(vec![max_arr[k]]);\n\
    \   |          "
  stdout: ''
  timestamp: 1659747171
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_len = k;\n        }\n \
    \       if max_len == k {\n            break;\n        }\n        if arr[i] >\
    \ max_arr[1] {\n            max_arr[1] = arr[i];\n        }\n        i += 1;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_oemzd4_.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![0; k];\n    let mut max_idx\
    \ = k;\n    let mut max_val = arr[0];\n    for &i in arr {\n        if i > max_val\
    \ {\n            max_val = i;\n            max_idx = k;\n        }\n        if\
    \ i == max_val {\n            max_idx--;\n        }\n        max_arr[k--] = i;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpcjs3r2dw.rs:26:22\n\
    \   |\n26 |             max_idx--;\n   |                      ^ expected expression\n\
    \nerror: expected expression, found `]`\n  --> /tmp/tmpcjs3r2dw.rs:28:20\n   |\n\
    28 |         max_arr[k--] = i;\n   |                    ^ expected expression\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcjs3r2dw.rs:17:31\n   |\n17 |\
    \     let mut max_arr = vec![0; k];\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut max_arr\
    \ = vec![0; k.try_into().unwrap()];\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpcjs3r2dw.rs:20:9\n   |\n20 | \
    \    for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to 4 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 && max_k > 0 {\n\
    \        if arr[max_idx] > arr[max_idx - 1] {\n            max_arr.pop();\n  \
    \          max_k -= 1;\n        } else {\n            max_arr.push(arr[max_idx\
    \ - 1]);\n            max_k -= 1;\n        }\n        max_idx -= 1;\n    }\n \
    \   max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpxb85x64n.rs:21:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = -1;\n    for i in 0..k {\n        if max_idx < 0 || arr[i] > max_arr[k - i\
    \ - 1] {\n            max_arr[k - i - 1] = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpregrv9z8.rs:20:27\n\
    \   |\n20 |         if max_idx < 0 || arr[i] > max_arr[k - i - 1] {\n   |    \
    \                       ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpregrv9z8.rs:20:36\n   |\n20 |         if max_idx <\
    \ 0 || arr[i] > max_arr[k - i - 1] {\n   |                                   \
    \ ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpregrv9z8.rs:21:13\n   |\n21 |             max_arr[k - i - 1] =\
    \ arr[i];\n   |             ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpregrv9z8.rs:21:34\n   |\n21 |             max_arr[k\
    \ - i - 1] = arr[i];\n   |                                  ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![0; k];\n    let mut max_idx\
    \ = k;\n    for &i in arr {\n        if i >= max_arr[k] {\n            max_arr[k]\
    \ = i;\n        }\n        if i == max_arr[k] {\n            max_idx += 1;\n \
    \       }\n    }\n    max_arr.sort_unstable();\n    max_arr.to_owned()\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplz1a3o29.rs:17:31\n   |\n\
    17 |     let mut max_arr = vec![0; k];\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut max_arr\
    \ = vec![0; k.try_into().unwrap()];\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmplz1a3o29.rs:19:9\n   |\n19 | \
    \    for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplz1a3o29.rs:20:17\n\
    \   |\n20 |         if i >= max_arr[k] {\n   |                 ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplz1a3o29.rs:21:13\n\
    \   |\n21 |             max_arr[k] = i;\n   |             ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<{integer}>`\n\nerror[E0277]: the type\
    \ `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmplz1a3o29.rs:23:17\n\
    \   |\n23 |         if i == max_arr[k] {\n   |                 ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = vec![];\n    for i in 0..k {\n        max_arr[i] = arr[i];\n        max_idx[i]\
    \ = i;\n    }\n    for i in 0..k {\n        for j in 0..k {\n            if max_arr[j]\
    \ > max_arr[i] {\n                max_arr[i] = max_arr[j];\n                max_idx[i]\
    \ = max_idx[j];\n            }\n        }\n    }\n    max_arr.sort_unstable();\n\
    \    max_idx\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpd2s0rd3o.rs:20:9\n\
    \   |\n20 |         max_arr[i] = arr[i];\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpd2s0rd3o.rs:20:22\n   |\n20 |  \
    \       max_arr[i] = arr[i];\n   |                      ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpd2s0rd3o.rs:21:9\n   |\n21 |   \
    \      max_idx[i] = i;\n   |         ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpd2s0rd3o.rs:25:16\n   |\n25 |             if max_arr[j]\
    \ > max_arr[i] {\n   |                ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpd2s0rd3o.rs:25:29\n   |\n25 |             if max_arr[j]\
    \ > max_arr[i] {\n   |                             ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpd2s0rd3o.rs:26:17\n   |\n26 |         "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut res = vec![max];\n\
    \    for i in 0..k {\n        res.push(arr[max_idx - i]);\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8jxna0g2.rs:27:32\n   |\n\
    27 |         res.push(arr[max_idx - i]);\n   |                               \
    \ ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from\
    \ `usize`\n  --> /tmp/tmp8jxna0g2.rs:27:30\n   |\n27 |         res.push(arr[max_idx\
    \ - i]);\n   |                              ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort();\n\
    \    let mut max_k = k;\n    let mut max_idx = arr.len();\n    while max_idx >\
    \ 0 && max_k > 0 {\n        if max_arr[0] > max_arr[max_idx] {\n            max_k\
    \ -= 1;\n        } else {\n            max_k -= 1;\n            max_arr.pop();\n\
    \        }\n        max_idx -= 1;\n    }\n    max_arr.push(arr.last());\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpokdp1wkd.rs:30:18\n   |\n\
    30 |     max_arr.push(arr.last());\n   |                  ^^^^^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![0; k];\n    let mut max_idx\
    \ = k;\n    for i in 0..arr.len() {\n        if arr[i] > max_arr[k] {\n      \
    \      max_arr[k] = arr[i];\n            max_idx = k;\n        }\n        if max_idx\
    \ > k {\n            break;\n        }\n        max_idx--;\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpnhtb2hob.rs:27:18\n\
    \   |\n27 |         max_idx--;\n   |                  ^ expected expression\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpnhtb2hob.rs:17:31\n   |\n17 |  \
    \   let mut max_arr = vec![0; k];\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     let mut max_arr\
    \ = vec![0; k.try_into().unwrap()];\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpnhtb2hob.rs:20:21\n\
    \   |\n20 |         if arr[i] > max_arr[k] {\n   |                     ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror[E0277]: the type `[{integer}]` cannot be indexed by `isize`\n  --> /tmp/tmpnhtb2hob.rs:21:13\n\
    \   |\n21 |             max_arr[k] = arr[i];\n   |             ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[{integer}]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<{integer}>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr;\n    }\n    let mut max_idx = arr.len() - 1;\n    let mut max_val = arr[k\
    \ - 1];\n    for i in 1..k {\n        if arr[i] > max_val {\n            max_idx\
    \ = i;\n            max_val = arr[i];\n        }\n    }\n    vec![max_val; k -\
    \ max_idx]\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx1zjy9u3.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpx1zjy9u3.rs:21:23\n\
    \   |\n21 |     let mut max_val = arr[k - 1];\n   |                       ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpx1zjy9u3.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx1zjy9u3.rs:24:23\n   |\n24 |             max_idx = i;\n   |  \
    \                     ^ expected `usize`, found `isize`\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpx1zjy9u3.rs:25:23\n  \
    \ |\n25 |             max_val = arr[i];\n   |                       ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpx1zjy9u3.rs:28:23\n   |\n28 |     vec![max_val;\
    \ k - max_idx]\n   |                       ^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpx1zjy9u3.rs:28:19\n   |\n28 |\
    \     vec![max_val; k - max_idx]\n   |                   ^^^^"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        arr\n    } else {\n\
    \        let mut max = arr[0];\n        let mut max_idx = 1;\n        for &i in\
    \ arr {\n            if i > max {\n                max = i;\n                max_idx\
    \ = 1;\n            }\n            if i == max {\n                max_idx += 1;\n\
    \            }\n        }\n        let mut res = vec![max];\n        for i in\
    \ 0..k - 1 {\n            res.push(arr[(max_idx + i) % arr.len()]);\n        }\n\
    \        res\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpansgzk_w.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpansgzk_w.rs:22:13\n   |\n22 |         for &i in arr {\n\
    \   |             ^^    --- this expression has type `isize`\n   |           \
    \  |\n   |             expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpansgzk_w.rs:33:42\n   |\n33 |             res.push(arr[(max_idx\
    \ + i) % arr.len()]);\n   |                                          ^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot mod `isize` by `usize`\n\
    \  --> /tmp/tmpansgzk_w.rs:33:40\n   |\n33 |             res.push(arr[(max_idx\
    \ + i) % arr.len()]);\n   |                                        ^ no implementation\
    \ for `isize % usize`\n   |\n   = help: the trait `Rem<usize>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpansgzk_w.rs:33:22\n   |\n33 |             res.push(arr[(max_idx\
    \ + i) % arr.len()]);\n   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for &i in arr {\n        if i > max {\n            max = i;\n      \
    \      max_idx = 1;\n        }\n        if i == max {\n            max_idx +=\
    \ 1;\n        }\n    }\n    let mut res = vec![max];\n    for i in 0..k {\n  \
    \      res.push(arr[i + max_idx - 1]);\n    }\n    res\n}\n\nfn main() {\n   \
    \ let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx9cc5ly2.rs:19:9\n   |\n\
    19 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpx9cc5ly2.rs:30:18\n\
    \   |\n30 |         res.push(arr[i + max_idx - 1]);\n   |                  ^^^^^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_arr = vec![];\n        let mut max_k = k;\n        let\
    \ mut max_idx = arr.len() - 1;\n        while max_idx > 0 && max_k > 0 {\n   \
    \         if arr[max_idx] > arr[max_idx-1] {\n                max_k -= 1;\n  \
    \          } else {\n                max_idx -= 1;\n            }\n        }\n\
    \        for i in 0..max_k {\n            max_arr.push(arr[max_idx]);\n      \
    \      max_idx -= 1;\n        }\n        max_arr\n    }\n}\n\nfn main() {\n  \
    \  let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj5iwxlig.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort_unstable();\n\
    \    max_arr.truncate(k);\n    max_arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9oz2zxdz.rs:19:22\n   |\n\
    19 |     max_arr.truncate(k);\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     max_arr.truncate(k.try_into().unwrap());\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut cur_max = arr[0];\n    for ele in arr {\n        if ele >\
    \ cur_max {\n            cur_max = ele;\n        }\n        if cur_max > max_k\
    \ {\n            max_arr.push(cur_max);\n            max_k = cur_max;\n      \
    \  }\n    }\n    max_arr.push(cur_max);\n    max_arr.push(max_k);\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 5, 5]`,\n right: `[-4, -3, 5]`', /tmp/tmpmki7pchz.rs:36:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:19:12\n\
    \   |\n19 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:20:19\n   |\n20 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_len = k;\n        }\n \
    \       if max_len == k {\n            break;\n        }\n        if arr[i] >\
    \ max_arr[1] {\n            max_arr[1] = arr[i];\n        }\n        i += 1;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp_oemzd4_.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr;\n    }\n    let mut max_num = arr[0];\n    let mut max_idx = 1;\n    for\
    \ i in 1..k {\n        if arr[i] > max_num {\n            max_num = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    let mut max_arr = vec![];\n \
    \   for i in 0..k {\n        if i == max_idx {\n            max_arr.push(max_num);\n\
    \        } else {\n            max_arr.push(arr[i]);\n        }\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe3awsf9q.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpe3awsf9q.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_num {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpe3awsf9q.rs:24:23\n   |\n24 |  \
    \           max_num = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpe3awsf9q.rs:33:26\n   |\n33 |  \
    \           max_arr.push(arr[i]);\n   |                          ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 0;\n    for i in arr.iter().rev() {\n        if i > max {\n            max =\
    \ i;\n            max_idx = i;\n        }\n    }\n    let mut max_k = k;\n   \
    \ let mut max_idx = max_idx;\n    for i in arr.iter().rev() {\n        if i >\
    \ max {\n            max = i;\n            max_idx = i;\n        }\n        if\
    \ max_k == 0 {\n            break;\n        }\n        if max_k > i - max_idx\
    \ {\n            max_k = i - max_idx;\n        }\n    }\n    let mut res = vec![max];\n\
    \    for i in 0..max_k {\n        res.insert(0, arr[i]);\n    }\n    res\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_kq98fj.rs:20:16\n   |\n\
    20 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_kq98fj.rs:21:19\n\
    \   |\n21 |             max = i;\n   |                   ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |        \
    \     max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn_kq98fj.rs:22:23\n   |\n22 |             max_idx = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |             max_idx = *i;\n   |       \
    \                +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn_kq98fj.rs:28:16\n\
    \   |\n28 |         if i > max {\n   |                ^^^\n   |              \
    \  |\n   |                expected `&isize`, found `isize`\n   |             \
    \   help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn_kq98fj.rs:29:19\n   |\n29 |             max = i;\n   |      \
    \             ^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n29 |             max = *i;\n   |                   +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn_kq98fj.rs:30:23\n   |\n30 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n30 |             max_idx = *i;\n\
    \   |                       +\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpn_kq98fj.rs:41:23\n   |\n41 |         res.insert(0,\
    \ arr[i]);\n   |                       ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 7 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E030"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![0; k];\n    let mut max_idx\
    \ = k;\n    let mut max_val = arr[0];\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_val = arr[i];\n            max_idx = i;\n     \
    \   }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n           \
    \ max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_arr[i] = arr[i];\n        }\n    }\n    for i in\
    \ 0..k {\n        if arr[i] > max_val {\n            max_arr[i] = arr[i];\n  \
    \      }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n        \
    \    max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_arr[i] = arr[i];\n        }\n    }\n    for i in\
    \ 0..k {\n        if arr[i] > max_val {\n            max_arr[i] = arr[i];\n  \
    \      }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n        \
    \    max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_arr[i] = arr[i];\n        }\n    }\n    for i in\
    \ 0..k {\n        if arr[i] > max_val {\n            max_arr[i] = arr[i];\n  \
    \      }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n        \
    \    max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_arr[i] = arr[i];\n        }\n    }\n    for i in\
    \ 0..k {\n        if arr[i] > max_val {\n            max_arr[i] = arr[i];\n  \
    \      }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n        \
    \    max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_arr[i] = arr[i];\n        }\n    }\n    for i in\
    \ 0..k {\n        if arr[i] > max_val {\n            max_arr[i] = arr[i];\n  \
    \      }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n        \
    \    max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_val {\n            max_arr[i] = arr[i];\n        }\n    }\n    for i in\
    \ 0..k {\n        if arr[i] > max_val {\n            max_arr[i] = arr[i];\n  \
    \      }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n        \
    \    max_arr[i] = arr[i];\n        }\n    }\n    for i in 0..\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp0uzk2yp0.rs:122:1\n    |\n\
    122 | }\n    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0uzk2yp0.rs:17:31\n\
    \   |\n17 |     let mut max_arr = vec![0; k];\n   |                          \
    \     ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n17 |     let\
    \ mut max_arr = vec![0; k.try_into().unwrap()];\n   |                        \
    \       ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0uzk2yp0.rs:21:12\n   |\n21 |         if arr[i] >\
    \ max_val {\n   |            ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp0uzk2yp0.rs:22:23\n   |\n22 |            \
    \ max_val = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0uzk2yp0.rs:27:12\n   |\n27 |  \
    \       if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[{integer}]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0uzk2yp0.rs:28:13\n   |\n28 |  \
    \           max_arr[i] = arr[i];\n   |             ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[{integer}]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = 0;\n    for i in 0..arr.len() {\n        if max_k\
    \ > 0 && max_k == max_idx {\n            max_arr.push(arr[i]);\n        }\n  \
    \      if max_k > 0 && max_k == i {\n            max_arr.push(arr[i]);\n     \
    \   }\n        if max_k > 0 && max_k == i - 1 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i + 1 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 2 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 3 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 4 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 5 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 6 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 7 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 8 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 9 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 10 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 11 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 12 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 13 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 14 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 15 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 16 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 17 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 18 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 19 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 20 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == i - 21 {\n            max_arr.push(arr[i]);\n\
    \        }\n        if max_k > 0 && max_k == \n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpn82daohd.rs:109:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     for i in 0..arr.len() {\n    |                           - this delimiter\
    \ might not be properly closed...\n...\n94  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n109 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n  --> /tmp/tmpn82daohd.rs:94:1\n   |\n94 | }\n   | ^\
    \ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn82daohd.rs:24:34\n\
    \   |\n24 |         if max_k > 0 && max_k == i {\n   |                       \
    \           ^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n24 |     \
    \    if max_k > 0 && max_k == i.try_into().unwrap() {\n   |                  \
    \                ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpn82daohd.rs:27:34\n   |\n27 |         if max_k > 0 && max_k == i - 1\
    \ {\n   |                                  ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isize` and panic if the converted\
    \ value doesn't fit\n   |\n27 |         if max_k > 0 && max_k == (i - 1).try_into().unwrap()\
    \ {\n   |                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn82daohd.rs:30:34\n   |\n30 |         if max_k\
    \ > 0 && max_k == i + 1 {\n   |                                  ^^^^^ expected\
    \ `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an `isize`\
    \ and panic if the converted value doesn't fit\n   |\n30 |         if max_k >\
    \ 0 && max_k == (i + 1).try_into().unwrap() {\n   |                          \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpn82daohd.rs:33:34\n   |\n33 |         if max_k > 0 && max_k == i - 2\
    \ {\n   |                                  ^^^^^ expected `isize`, found `usize`\n\
    \   |\nhelp: you can convert a `usize` to an `isiz"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:19:12\n\
    \   |\n19 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmphgdqd55j.rs:20:19\n   |\n20 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 1..k {\n        result[i] = arr[i];\n    }\n    result[max_idx..k].clone()\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp5rmatpq0.rs:27:9\n\
    \   |\n27 |         result[i] = arr[i];\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp5rmatpq0.rs:27:21\n   |\n27 |  \
    \       result[i] = arr[i];\n   |                     ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5rmatpq0.rs:29:21\n   |\n29 |     result[max_idx..k].clone()\n\
    \   |                     ^ expected `usize`, found `isize`\n\nerror[E0599]: no\
    \ method named `clone` found for slice `[isize]` in the current scope\n  --> /tmp/tmp5rmatpq0.rs:29:24\n\
    \   |\n29 |     result[max_idx..k].clone()\n   |                        ^^^^^\
    \ method not found in `[isize]`\n\nerror: aborting due to 4 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_idx = -1;\n    for\
    \ i in 0..arr.len() {\n        if max_idx < i && arr[i] > arr[i] {\n         \
    \   max_idx = i;\n        }\n    }\n    for i in 0..k {\n        max_arr.push(arr[max_idx]);\n\
    \        max_idx--;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpaymi0g2p.rs:29:18\n\
    \   |\n29 |         max_idx--;\n   |                  ^ expected expression\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpaymi0g2p.rs:17:31\n   |\n17 |  \
    \   if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpaymi0g2p.rs:21:23\n\
    \   |\n21 |     let mut max_idx = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    vec![max; k - max_idx]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4xxeih7e.rs:25:19\n   |\n\
    25 |     vec![max; k - max_idx]\n   |                   ^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4xxeih7e.rs:25:15\n\
    \   |\n25 |     vec![max; k - max_idx]\n   |               ^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n25 |     vec![max; (k -\
    \ max_idx).try_into().unwrap()]\n   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmp4xxeih7e.rs:25:17\n\
    \   |\n25 |     vec![max; k - max_idx]\n   |                 ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut res = vec![max];\n\
    \    for i in 0..k {\n        res.push(arr[max_idx - i]);\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8jxna0g2.rs:27:32\n   |\n\
    27 |         res.push(arr[max_idx - i]);\n   |                               \
    \ ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from\
    \ `usize`\n  --> /tmp/tmp8jxna0g2.rs:27:30\n   |\n27 |         res.push(arr[max_idx\
    \ - i]);\n   |                              ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result[i] = arr[max_idx - i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiem08xme.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiem08xme.rs:27:35\n   |\n27 |         result[i]\
    \ = arr[max_idx - i];\n   |                                   ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpiem08xme.rs:27:33\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |                      \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = 0;\n    let mut max_j = 0;\n    let mut max_val =\
    \ arr[0];\n    for &i in arr {\n        if i > max_val {\n            max_val\
    \ = i;\n            max_i = i;\n            max_j = i;\n        }\n        if\
    \ i == max_val {\n            if max_k == 1 {\n                max_arr.push(max_i);\n\
    \            } else {\n                max_arr.push(max_i);\n                max_arr.push(max_j);\n\
    \            }\n            max_k -= 1;\n            max_i = max_j;\n        \
    \    max_j = i;\n        }\n        if max_k == 0 {\n            max_arr.push(max_i);\n\
    \        }\n    }\n    max_arr.push(max_i);\n    max_arr.push(max_j);\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq0rib6b8.rs:22:9\n   |\n\
    22 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = 0;\n    let mut max_j = 0;\n    let mut i = 0;\n \
    \   let mut j = 0;\n    while i < arr.len() && j < max_k {\n        if arr[i]\
    \ > arr[j] {\n            max_arr.push(arr[i]);\n            max_k = max_k - 1;\n\
    \            i += 1;\n        } else {\n            max_arr.push(arr[j]);\n  \
    \          max_k = max_k - 1;\n            j += 1;\n        }\n    }\n    while\
    \ i < arr.len() {\n        max_arr.push(arr[i]);\n        i += 1;\n    }\n   \
    \ while j < max_k {\n        max_arr.push(arr[j]);\n        j += 1;\n    }\n \
    \   max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppsa9_21o.rs:24:21\n\
    \   |\n24 |         if arr[i] > arr[j] {\n   |                     ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppsa9_21o.rs:29:26\n\
    \   |\n29 |             max_arr.push(arr[j]);\n   |                          ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmppsa9_21o.rs:39:22\n\
    \   |\n39 |         max_arr.push(arr[j]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i - max_k +\
    \ max_k])\n        {\n            max_arr.push(arr[max_i - max_k + max_k]);\n\
    \        }\n        max_k -= 1;\n        max_i += 1;\n    }\n    max_arr\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc0zir47r.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpc0zir47r.rs:23:39\n   |\n23 |             .any(|&x| x >\
    \ arr[max_i - max_k + max_k])\n   |                                       ^^^^^\
    \ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from\
    \ `usize`\n  --> /tmp/tmpc0zir47r.rs:23:37\n   |\n23 |             .any(|&x| x\
    \ > arr[max_i - max_k + max_k])\n   |                                     ^ no\
    \ implementation for `usize - isize`\n   |\n   = help: the trait `Sub<isize>`\
    \ is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0zir47r.rs:23:47\n\
    \   |\n23 |             .any(|&x| x > arr[max_i - max_k + max_k])\n   |      \
    \                                         ^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot add `isize` to `usize`\n  --> /tmp/tmpc0zir47r.rs:23:45\n\
    \   |\n23 |             .any(|&x| x > arr[max_i - max_k + max_k])\n   |      \
    \                                       ^ no implementation for `usize + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpc0zir47r.rs:25:38\n   |\n25 |             max_arr.push(arr[max_i\
    \ - max_k + max_k]);\n   |                                      ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmpc0zir47r.rs:25:36\n   |\n25 |             max_arr.push(arr[max_i\
    \ - max_k + max_k]);\n   |                                    ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc0zir47r.rs:25:46\n\
    \   |\n25 |             max_arr.push(arr[max_i - max_k + max_k]);\n   |      \
    \                  "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.is_empty() {\n        return\
    \ arr;\n    }\n    let mut max_arr = arr;\n    let mut max_idx = arr.len() - 1;\n\
    \    let mut max_val = arr[0];\n    while max_idx > 0 && max_val < max_arr[0]\
    \ {\n        max_arr.remove(max_idx);\n        max_idx--;\n    }\n    max_arr.push(max_val);\n\
    \    for i in 1..k {\n        max_arr.push(arr[i]);\n    }\n    max_arr\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmpmurz9k4w.rs:25:18\n\
    \   |\n25 |         max_idx--;\n   |                  ^ expected expression\n\n\
    error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmurz9k4w.rs:29:22\n\
    \   |\n29 |         max_arr.push(arr[i]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut cur_max = arr[0];\n    let mut cur_max_idx = 1;\n    for ele\
    \ in arr.iter().rev() {\n        if ele > cur_max {\n            cur_max = ele;\n\
    \            cur_max_idx = 1;\n        }\n        if ele == cur_max {\n      \
    \      cur_max_idx += 1;\n        }\n        if cur_max_idx > max_k {\n      \
    \      max_arr.push(cur_max);\n            max_k = cur_max_idx;\n        }\n \
    \   }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppv35adcu.rs:22:18\n   |\n\
    22 |         if ele > cur_max {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found `isize`\n   |    \
    \              help: consider borrowing here: `&cur_max`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmppv35adcu.rs:23:23\n   |\n23 |             cur_max = ele;\n\
    \   |                       ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n23 |             cur_max = *ele;\n\
    \   |                       +\n\nerror[E0277]: can't compare `&isize` with `isize`\n\
    \  --> /tmp/tmppv35adcu.rs:26:16\n   |\n26 |         if ele == cur_max {\n   |\
    \                ^^ no implementation for `&isize == isize`\n   |\n   = help:\
    \ the trait `PartialEq<isize>` is not implemented for `&isize`\n\nerror: aborting\
    \ due to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut cur_max = arr[0];\n    for &x in arr {\n        if x > cur_max\
    \ {\n            cur_max = x;\n        }\n        if max_len == k {\n        \
    \    max_arr.push(cur_max);\n            break;\n        }\n        if x > cur_max\
    \ {\n            max_len = k;\n        }\n        if max_len == k {\n        \
    \    max_arr.push(cur_max);\n            break;\n        }\n        if max_len\
    \ < k {\n            max_len = k;\n        }\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpnqberndc.rs:20:9\n   |\n\
    20 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut cur_max = arr[0];\n    for &x in arr {\n        if x > cur_max\
    \ {\n            max_arr.push(cur_max);\n            max_k = max_k - 1;\n    \
    \    }\n        cur_max = x;\n    }\n    max_arr.push(cur_max);\n    if max_k\
    \ > 0 {\n        max_arr.push(arr[arr.len() - 1]);\n    }\n    max_arr\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp280vfnk7.rs:20:9\n   |\n\
    20 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmple0d3v8z.rs:129:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n114 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n129 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmple0d3v8z.rs:114:1\n    |\n113 |         if arr\n\
    \    |         -- this `if` expression has a condition, but no block\n114 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmple0d3v8z.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    for num in arr {\n        if num > max_num {\n            max_num\
    \ = num;\n        }\n    }\n    for i in 0..k {\n        max_arr.push(max_num);\n\
    \    }\n    return max_arr;\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 5, 5]`,\n right: `[-4, -3, 5]`', /tmp/tmphxnxw5__.rs:32:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut max_idx = 0;\n    for idx in 0..arr.len() {\n        if idx\
    \ >= max_len {\n            break;\n        }\n        if arr[idx] > max_arr[0]\
    \ {\n            max_arr[0] = arr[idx];\n            max_idx = idx;\n        }\n\
    \    }\n    max_arr.push(arr[max_len]);\n    max_arr.sort_unstable();\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbyzil0p.rs:21:19\n   |\n\
    21 |         if idx >= max_len {\n   |                   ^^^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n21 |         if idx >= max_len.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbyzil0p.rs:29:18\n  \
    \ |\n29 |     max_arr.push(arr[max_len]);\n   |                  ^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr;\n  \
    \  }\n    let mut max_arr = vec![];\n    let mut max_idx = -1;\n    for i in 0..k\
    \ {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n    \
    \        max_idx = i;\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[0] {\n   \
    \         max_arr[0] = arr[i];\n            max_idx = i;\n        }\n    }\n \
    \   for i in 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    for i in 0..k {\n\
    \        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    for i in 0..k {\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx = i;\n \
    \       }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[0] {\n    \
    \        max_arr[0] = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  for i in 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_idx = i;\n        }\n    }\n    for i in 0..k {\n \
    \       if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n         \
    \   max_idx = i;\n        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_idx = i;\n        }\n \
    \   }\n    for i in 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    for i in 0..k {\n\
    \        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        \
    \    max_idx = i;\n        }\n    }\n    for i in 0..k {\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n            max_idx = i;\n \
    \       }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[0] {\n    \
    \        max_arr[0] = arr[i];\n            max_idx = i;\n        }\n    }\n  \
    \  for i in 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_idx = i;\n        }\n    }\n    for i in 0..k {\n \
    \       if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n         \
    \   max_idx = i;\n        }\n    }\n    for i in 0..k {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpyf2q75p9.rs:136:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    118 |     for i in 0..k {\n    |                   - unclosed delimiter\n119 |\
    \         if arr[i] > max_arr[0] {\n    |                                - this\
    \ delimiter might not be properly closed...\n120 |             max_arr[0] = arr\n\
    121 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    136 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpyf2q75p9.rs:17:21\n\
    \   |\n17 |     if arr.len() <= k {\n   |                     ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpyf2q75p9.rs:23:12\n  \
    \ |\n23 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpyf2q75p9.rs:24:26\n   |\n24 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpyf2q75p9.rs:29:12\n   |\n29 |  \
    \       if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result.push(arr[max_idx - i]);\n  \
    \  }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9m23m7cp.rs:27:35\n   |\n\
    27 |         result.push(arr[max_idx - i]);\n   |                            \
    \       ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize`\
    \ from `usize`\n  --> /tmp/tmp9m23m7cp.rs:27:33\n   |\n27 |         result.push(arr[max_idx\
    \ - i]);\n   |                                 ^ no implementation for `usize\
    \ - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = 0;\n    let mut max_j = 0;\n    for i in 0..arr.len()\
    \ {\n        if max_k == 0 {\n            break;\n        }\n        if arr[i]\
    \ > max_arr[j] {\n            max_k = max_k - 1;\n            max_i = i;\n   \
    \         max_j = j;\n        }\n        if max_k == 0 {\n            break;\n\
    \        }\n        if arr[i] > max_arr[j] {\n            max_k = max_k - 1;\n\
    \            max_i = i;\n            max_j = j;\n        }\n    }\n    max_arr.push(arr[max_i]);\n\
    \    max_arr.push(arr[max_j]);\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmpt2_0um4r.rs:25:29\n\
    \   |\n25 |         if arr[i] > max_arr[j] {\n   |                           \
    \  ^ help: a local variable with a similar name exists: `i`\n\nerror[E0425]: cannot\
    \ find value `j` in this scope\n  --> /tmp/tmpt2_0um4r.rs:28:21\n   |\n28 |  \
    \           max_j = j;\n   |                     ^ help: a local variable with\
    \ a similar name exists: `i`\n\nerror[E0425]: cannot find value `j` in this scope\n\
    \  --> /tmp/tmpt2_0um4r.rs:33:29\n   |\n33 |         if arr[i] > max_arr[j] {\n\
    \   |                             ^ help: a local variable with a similar name\
    \ exists: `i`\n\nerror[E0425]: cannot find value `j` in this scope\n  --> /tmp/tmpt2_0um4r.rs:36:21\n\
    \   |\n36 |             max_j = j;\n   |                     ^ help: a local variable\
    \ with a similar name exists: `i`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 0;\n    for idx in 0..arr.len() {\n        if arr[idx] > max {\n           \
    \ max = arr[idx];\n            max_idx = idx;\n        }\n    }\n    let mut result\
    \ = vec![max];\n    for i in 0..k {\n        result[i] = arr[max_idx];\n     \
    \   max_idx += 1;\n    }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp30tn8t6p.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx];\n   |         ^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_element = arr[0];\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max_element {\n            max_element = arr[i];\n  \
    \          max_k = i;\n        }\n        i += 1;\n    }\n    for i in 0..max_k\
    \ {\n        max_arr.push(arr[i]);\n    }\n    max_arr\n}\n\nfn main() {\n   \
    \ let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyyf0f81g.rs:24:21\n   |\n\
    24 |             max_k = i;\n   |                     ^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n \
    \ --> /tmp/tmpyyf0f81g.rs:29:22\n   |\n29 |         max_arr.push(arr[i]);\n  \
    \ |                      ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result[i] = arr[max_idx - i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiem08xme.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiem08xme.rs:27:35\n   |\n27 |         result[i]\
    \ = arr[max_idx - i];\n   |                                   ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpiem08xme.rs:27:33\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |                      \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        let\
    \ mut max_element = arr[max_i];\n        for j in max_i + 1 .. arr.len() {\n \
    \           if arr[j] > max_element {\n                max_element = arr[j];\n\
    \                max_k = j - 1;\n            }\n        }\n        max_arr.push(max_element);\n\
    \        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwiwslwk.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbwiwslwk.rs:25:25\n   |\n25 |                 max_k = j\
    \ - 1;\n   |                         ^^^^^ expected `isize`, found `usize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result.push(arr[(max_idx - i) as usize]);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx77ks_47.rs:27:36\n   |\n\
    27 |         result.push(arr[(max_idx - i) as usize]);\n   |                 \
    \                   ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot\
    \ subtract `isize` from `usize`\n  --> /tmp/tmpx77ks_47.rs:27:34\n   |\n27 | \
    \        result.push(arr[(max_idx - i) as usize]);\n   |                     \
    \             ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = -1;\n    for idx in 0..arr.len() {\n        if idx\
    \ > max_k {\n            break;\n        }\n        if arr[idx] > max_arr[0] {\n\
    \            max_arr[0] = arr[idx];\n            max_idx = idx;\n        }\n \
    \   }\n    max_arr.push(arr[max_idx]);\n    max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgyy05ux6.rs:21:18\n   |\n\
    21 |         if idx > max_k {\n   |                  ^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |         if idx > max_k.try_into().unwrap()\
    \ {\n   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the trait\
    \ bound `usize: Neg` is not satisfied\n  --> /tmp/tmpgyy05ux6.rs:19:23\n   |\n\
    19 |     let mut max_idx = -1;\n   |                       ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max = arr[0];\n    let mut max_idx = 1;\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    let mut res = vec![max];\n    for i in 0..max_idx - 1 {\n\
    \        res.push(arr[i]);\n    }\n    res\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdnspnhs3.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpdnspnhs3.rs:23:12\n  \
    \ |\n23 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdnspnhs3.rs:24:19\n   |\n24 |  \
    \           max = arr[i];\n   |                   ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpdnspnhs3.rs:30:18\n   |\n30 |  \
    \       res.push(arr[i]);\n   |                  ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() < k {\n        return vec![];\n\
    \    }\n    let mut max_arr = vec![];\n    let mut max_idx = vec![];\n    for\
    \ i in 0..k {\n        max_arr[i] = arr[i];\n        max_idx[i] = i;\n    }\n\
    \    for i in 0..k {\n        if max_arr[i] > max_arr[k] {\n            max_arr[i]\
    \ = max_arr[k];\n            max_idx[i] = k;\n        }\n    }\n    for i in 0..k\
    \ {\n        arr[i] = max_arr[i];\n    }\n    for i in 0..k {\n        max_idx[i]\
    \ = max_idx[k];\n    }\n    return arr;\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0mnxgyab.rs:17:20\n   |\n\
    17 |     if arr.len() < k {\n   |                    ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() < k.try_into().unwrap()\
    \ {\n   |                    ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0mnxgyab.rs:23:9\n   |\n23 |   \
    \      max_arr[i] = arr[i];\n   |         ^^^^^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is\
    \ not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0mnxgyab.rs:23:22\n   |\n23 |  \
    \       max_arr[i] = arr[i];\n   |                      ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp0mnxgyab.rs:24:9\n   |\n24 |   \
    \      max_idx[i] = i;\n   |         ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0mnxgyab.rs:27:12\n   |\n27 |         if max_arr[i]\
    \ > max_arr[k] {\n   |            ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp0mnxgyab.rs:27:25\n   |\n27 |         if max_arr[i]\
    \ > max_arr[k] {\n   |                         ^^^^^^^"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_idx = arr.len();\n        let mut max_val = arr[0];\n\
    \        let mut max_so_far = vec![];\n        for i in 0..k {\n            if\
    \ arr[i] > max_val {\n                max_val = arr[i];\n                max_idx\
    \ = i;\n            }\n        }\n        for i in 0..k {\n            if arr[i]\
    \ == max_val {\n                max_so_far.push(arr[i]);\n            }\n    \
    \    }\n        max_so_far\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpffxmabtr.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpffxmabtr.rs:24:16\n   |\n24 |  \
    \           if arr[i] > max_val {\n   |                ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpffxmabtr.rs:25:27\n   |\n25 |  \
    \               max_val = arr[i];\n   |                           ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpffxmabtr.rs:26:27\n   |\n26 |              \
    \   max_idx = i;\n   |                           ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpffxmabtr.rs:30:16\n\
    \   |\n30 |             if arr[i] == max_val {\n   |                ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpffxmabtr.rs:31:33\n\
    \   |\n31 |                 max_so_far.push(arr[i]);\n   |                   \
    \              ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \   = note:"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    for i in 0..k\
    \ {\n        max_arr.push(arr[i]);\n    }\n    for i in 0..k {\n        let mut\
    \ max_element = max_arr[i];\n        for j in (i + 1)..k {\n            if max_element\
    \ > max_arr[j] {\n                max_element = max_arr[j];\n            }\n \
    \       }\n        max_arr[i] = max_element;\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpzyizi4k0.rs:19:22\n\
    \   |\n19 |         max_arr.push(arr[i]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpzyizi4k0.rs:22:31\n\
    \   |\n22 |         let mut max_element = max_arr[i];\n   |                  \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpzyizi4k0.rs:24:30\n   |\n24 |             if max_element > max_arr[j]\
    \ {\n   |                              ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpzyizi4k0.rs:25:31\n   |\n25 |                 max_element\
    \ = max_arr[j];\n   |                               ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpzyizi4k0.rs:28:9\n   |\n28 |         max_arr[i]\
    \ = max_element;\n   |         ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nF"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr.len() < max_k {\n            max_arr.push(arr[max_i]);\n        }\n\
    \        if max_arr[0] > arr[max_i] {\n            max_arr.swap(0, max_i);\n \
    \       }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp34a3b4ob.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp34a3b4ob.rs:21:28\n   |\n21 |         if max_arr.len()\
    \ < max_k {\n   |                            ^^^^^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n21 |         if max_arr.len() < max_k.try_into().unwrap()\
    \ {\n   |                            ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort();\n\
    \    max_arr.truncate(k);\n    max_arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6_pzgf3e.rs:19:22\n   |\n\
    19 |     max_arr.truncate(k);\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     max_arr.truncate(k.try_into().unwrap());\n\
    \   |                      ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    for ele in arr {\n        if max_len < ele {\n            max_len\
    \ = ele;\n        }\n    }\n    for ele in arr {\n        if max_len == ele {\n\
    \            max_arr.push(ele);\n        }\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: use of moved value: `arr`\n   --> /tmp/tmpo30fcjnf.rs:24:16\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \         --- move occurs because `arr` has type `Vec<isize>`, which does not\
    \ implement the `Copy` trait\n...\n19  |     for ele in arr {\n    |         \
    \       ---\n    |                |\n    |                `arr` moved due to this\
    \ implicit call to `.into_iter()`\n    |                help: consider borrowing\
    \ to avoid moving into the for loop: `&arr`\n...\n24  |     for ele in arr {\n\
    \    |                ^^^ value used here after move\n    |\nnote: this function\
    \ takes ownership of the receiver `self`, which moves `arr`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0382`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if max_k == k {\n            break;\n       \
    \ }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n    \
    \        max_k = 1;\n        }\n        if arr[i] > max_arr[0] {\n           \
    \ max_arr[0] = arr[i];\n            max_k = 1;\n        }\n        if max_k ==\
    \ k {\n            break;\n        }\n        if arr[i] > max_arr[0] {\n     \
    \       max_arr[0] = arr[i];\n            max_k = 2;\n        }\n        if arr[i]\
    \ > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k = 2;\n \
    \       }\n        if max_k == k {\n            break;\n        }\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k =\
    \ 3;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 3;\n        }\n        if max_k == k {\n            break;\n\
    \        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_k = 4;\n        }\n        if arr[i] > max_arr[0] {\n       \
    \     max_arr[0] = arr[i];\n            max_k = 4;\n        }\n        if max_k\
    \ == k {\n            break;\n        }\n        if arr[i] > max_arr[0] {\n  \
    \          max_arr[0] = arr[i];\n            max_k = 5;\n        }\n        if\
    \ arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k =\
    \ 5;\n        }\n        if max_k == k {\n            break;\n        }\n    \
    \    if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n            max_k\
    \ = 6;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0] =\
    \ arr[i];\n            max_k = 6;\n        }\n        if max_k == k {\n      \
    \      break;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 7;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 7;\n        }\n   \
    \     if max_k == k {\n            break;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 8;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 8;\n        }\n        if max_k == k {\n            break;\n       \
    \ }\n        if arr[i] > max_arr[0] {\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpe8a0kxjm.rs:136:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - unclosed delimiter\n\
    ...\n120 |         if arr[i] > max_arr[0] {\n    |                           \
    \     - this delimiter might not be properly closed...\n121 | }\n    | - ...as\
    \ it matches this but it has different indentation\n...\n136 | }\n    |   ^\n\n\
    error[E0308]: mismatched types\n   --> /tmp/tmpe8a0kxjm.rs:20:5\n    |\n16  |\
    \   fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |             \
    \                               ---------- expected `Vec<isize>` because of return\
    \ type\n...\n20  | /     while i < arr.len() {\n21  | |         if arr[i] > max_arr[0]\
    \ {\n22  | |             max_arr[0] = arr[i];\n23  | |             max_k = 0;\n\
    ...   |\n135 | |     assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0),\
    \ Vec::<isize>::new());\n136 | | }\n    | |__^ expected struct `Vec`, found `()`\n\
    \    |\n    = note: expected struct `Vec<isize>`\n            found unit type\
    \ `()`\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut max_idx = -1;\n    for &i in arr {\n        if i >= max_len\
    \ {\n            max_len = i;\n            max_idx = i;\n        }\n        if\
    \ i == max_idx {\n            max_arr.push(max_idx);\n        }\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp08_xbtd8.rs:20:9\n   |\n\
    20 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr;\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqh9yh17b.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqh9yh17b.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqh9yh17b.rs:23:19\n   |\n23 |  \
    \           max = arr[i];\n   |                   ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = 1;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = 2;\n        }\n        if arr[i] > max_arr[3]\
    \ {\n            max_arr[3] = arr[i];\n            max_k = 3;\n        }\n   \
    \     if arr[i] > max_arr[4] {\n            max_arr[4] = arr[i];\n           \
    \ max_k = 4;\n        }\n        if arr[i] > max_arr[5] {\n            max_arr[5]\
    \ = arr[i];\n            max_k = 5;\n        }\n        if arr[i] > max_arr[6]\
    \ {\n            max_arr[6] = arr[i];\n            max_k = 6;\n        }\n   \
    \     if arr[i] > max_arr[7] {\n            max_arr[7] = arr[i];\n           \
    \ max_k = 7;\n        }\n        if arr[i] > max_arr[8] {\n            max_arr[8]\
    \ = arr[i];\n            max_k = 8;\n        }\n        if arr[i] > max_arr[9]\
    \ {\n            max_arr[9] = arr[i];\n            max_k = 9;\n        }\n   \
    \     if arr[i] > max_arr[10] {\n            max_arr[10] = arr[i];\n         \
    \   max_k = 10;\n        }\n        if arr[i] > max_arr[11] {\n            max_arr[11]\
    \ = arr[i];\n            max_k = 11;\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n            max_k = 12;\n        }\n \
    \       if arr[i] > max_arr[13] {\n            max_arr[13] = arr[i];\n       \
    \     max_k = 13;\n        }\n        if arr[i] > max_arr[14] {\n            max_arr[14]\
    \ = arr[i];\n            max_k = 14;\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n            max_k = 15;\n        }\n \
    \       if arr[i] > max_arr[16] {\n            max_arr[16] = arr[i];\n       \
    \     max_k = 16;\n        }\n        if arr[i] > max_arr[17] {\n            max_arr[17]\
    \ = arr[i];\n            max_k = 17;\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n            max_k = 18;\n        }\n \
    \       if arr[i] > max_arr[19] {\n            max_arr[19] = arr[i];\n       \
    \     max_k = 19;\n        }\n        if arr[i] > max_arr[20] {\n            max_arr[20]\
    \ = arr[i];\n            max_k = 20;\n        }\n        if arr[i] > max_arr[21]\
    \ {\n            max_arr[21] = arr[i];\n            max_k = 21;\n        }\n\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmp9f7wptth.rs:125:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n110 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n125 | }\n    |   ^\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9f7wptth.rs:16:42\n   |\n16 | fn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n   |    -------                               ^^^^^^^^^^\
    \ expected struct `Vec`, found `()`\n   |    |\n   |    implicitly returns `()`\
    \ as its body has no tail or `return` expression\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n           found unit type `()`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.is_empty() {\n        return\
    \ arr;\n    }\n    let mut max = arr[0];\n    let mut max_idx = 1;\n    for i\
    \ in 1..arr.len() {\n        if arr[i] > max {\n            max = arr[i];\n  \
    \          max_idx = i;\n        }\n    }\n    let mut new_arr = vec![];\n   \
    \ for i in 0..k {\n        new_arr.push(max);\n    }\n    for i in 0..max_idx\
    \ - 1 {\n        new_arr.push(arr[i]);\n    }\n    new_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 5, 5, -3]`,\n right: `[-4, -3, 5]`', /tmp/tmpk2ujpgj5.rs:40:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max = arr[0];\n    let mut max_idx = 1;\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    vec![max; max_idx + 1]\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpux6929fa.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpux6929fa.rs:23:12\n  \
    \ |\n23 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpux6929fa.rs:24:19\n   |\n24 |  \
    \           max = arr[i];\n   |                   ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpux6929fa.rs:28:15\n   |\n28 |     vec![max; max_idx + 1]\n   |\
    \               ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n28 |     vec![max; (max_idx + 1).try_into().unwrap()]\n   |           \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for &i in arr {\n        if i > max {\n            max = i;\n      \
    \      max_idx = 1;\n        }\n        if i == max {\n            max_idx +=\
    \ 1;\n        }\n    }\n    let mut res = vec![max];\n    for i in 0..k {\n  \
    \      res.push(arr[(max_idx - i) as usize]);\n    }\n    res\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprpueenhw.rs:19:9\n   |\n\
    19 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_idx = arr.len() - 1;\n        let mut max_val = arr[k];\n\
    \        let mut max_idx = k;\n        for i in 0..k {\n            if arr[i]\
    \ > max_val {\n                max_val = arr[i];\n                max_idx = i;\n\
    \            }\n        }\n        vec![max_val]\n    }\n}\n\nfn main() {\n  \
    \  let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsacbfoxr.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpsacbfoxr.rs:21:27\n   |\n21 |  \
    \       let mut max_val = arr[k];\n   |                           ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsacbfoxr.rs:24:16\n\
    \   |\n24 |             if arr[i] > max_val {\n   |                ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpsacbfoxr.rs:25:27\n\
    \   |\n25 |                 max_val = arr[i];\n   |                          \
    \ ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help:\
    \ the trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort();\n\
    \    let mut max_k = k;\n    let mut max_val = arr[0];\n    while max_k > 0 &&\
    \ max_k > max_arr.len() {\n        max_k -= max_arr.len();\n    }\n    max_k -=\
    \ 1;\n    for i in 0..max_k {\n        max_arr[i] = max_val;\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpogzbqf9f.rs:21:32\n   |\n\
    21 |     while max_k > 0 && max_k > max_arr.len() {\n   |                    \
    \            ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n21 |     while max_k > 0 && max_k > max_arr.len().try_into().unwrap() {\n\
    \   |                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpogzbqf9f.rs:22:18\n   |\n22 |         max_k\
    \ -= max_arr.len();\n   |                  ^^^^^^^^^^^^^ expected `isize`, found\
    \ `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n  -->\
    \ /tmp/tmpogzbqf9f.rs:22:15\n   |\n22 |         max_k -= max_arr.len();\n   |\
    \               ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpogzbqf9f.rs:26:9\n\
    \   |\n26 |         max_arr[i] = max_val;\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    for &num in arr {\n        if num > max_num {\n            max_num\
    \ = num;\n        }\n    }\n    for i in 0..k {\n        max_arr.push(max_num);\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4_0esx_c.rs:19:9\n   |\n\
    19 |     for &num in arr {\n   |         ^^^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() < k {\n        vec![]\n    } else\
    \ if arr.len() == k {\n        arr\n    } else {\n        let mut max_idx = arr.len()\
    \ - 1;\n        let mut max_val = arr[0];\n        let mut max_val_pos = 0;\n\
    \        for idx in 0..arr.len() {\n            if idx > max_idx {\n         \
    \       break;\n            }\n            if arr[idx] > max_val {\n         \
    \       max_val = arr[idx];\n                max_val_pos = idx;\n            }\n\
    \        }\n        let mut max_val_neg = max_val - max_val_pos;\n        let\
    \ mut max_val_neg_idx = max_val_pos;\n        let mut max_val_neg_pos = 0;\n \
    \       for idx in 0..arr.len() {\n            if idx > max_idx {\n          \
    \      break;\n            }\n            if arr[idx] > max_val {\n          \
    \      max_val = arr[idx];\n                max_val_pos = idx;\n            }\n\
    \        }\n        let mut max_val_neg_neg = max_val - max_val_neg_pos;\n   \
    \     let mut max_val_neg_neg_idx = max_val_neg_pos;\n        let mut max_val_neg_neg_pos\
    \ = 0;\n        for idx in 0..arr.len() {\n            if idx > max_idx {\n  \
    \              break;\n            }\n            if arr[idx] > max_val {\n  \
    \              max_val = arr[idx];\n                max_val_pos = idx;\n     \
    \       }\n        }\n        let mut max_val_neg_neg_neg = max_val - max_val_neg_neg_pos;\n\
    \        let mut max_val_neg_neg_neg_idx = max_val_neg_neg_pos;\n        let mut\
    \ max_val_neg_neg_neg_pos = 0;\n        for idx in 0..arr.len() {\n          \
    \  if idx > max_idx {\n                break;\n            }\n            if arr[idx]\
    \ > max_val {\n                max_val = arr[idx];\n                max_val_pos\
    \ = idx;\n            }\n        }\n        let mut max_val_neg_neg_neg_neg =\
    \ max_val - max_val_neg_neg_neg_pos;\n        let mut max_val_neg_neg_neg_neg_idx\
    \ = max_val_neg_neg_neg_pos;\n        let mut max_val_neg_neg_neg_neg_pos = 0;\n\
    \        for idx in 0..arr.len() {\n            if idx > max_idx {\n         \
    \       break;\n            }\n            if arr[idx] > max_val {\n         \
    \       max_val = arr[idx];\n                max_val_pos = idx;\n            }\n\
    \        }\n        let mut max_val_neg_neg_neg_neg_neg = max_val - max_val_neg_neg_neg_neg_pos;\n\
    \        let mut max_val_neg_neg_neg_neg_neg_idx = max_val_neg_neg_neg_neg_pos;\n\
    \        let mut max_val_neg_neg_neg_neg_neg_pos = 0;\n        for idx in 0..arr.len()\
    \ {\n            if idx > max_idx {\n                break;\n            }\n \
    \           if \n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpctkipxac.rs:105:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    21  |     } else {\n    |            - unclosed delimiter\n...\n85  |        \
    \ for idx in 0..arr.len() {\n    |                                 - this delimiter\
    \ might not be properly closed...\n...\n90  | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n105 | }\n    |   ^\n\nerror: expected\
    \ expression, found `}`\n  --> /tmp/tmpctkipxac.rs:90:1\n   |\n90 | }\n   | ^\
    \ expected expression\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpctkipxac.rs:17:20\n\
    \   |\n17 |     if arr.len() < k {\n   |                    ^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n17 |     if arr.len() < k.try_into().unwrap()\
    \ {\n   |                    ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpctkipxac.rs:19:28\n   |\n19 |     } else if arr.len() ==\
    \ k {\n   |                            ^ expected `usize`, found `isize`\n   |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n   |\n19 |     } else if arr.len() == k.try_into().unwrap() {\n\
    \   |                            ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpctkipxac.rs:34:41\n   |\n34 |         let mut max_val_neg\
    \ = max_val - max_val_pos;\n   |                                         ^^^^^^^^^^^\
    \ expected `isize`, found `usize`\n\nerror[E0277]: cannot subtract `usize` from\
    \ `isize`\n  --> /tmp/tmpctkipxac.rs:34:39\n   |\n34 |         let mut max_val_neg\
    \ = max_val - max_val_pos;\n   |                                       ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpctkipxac.rs:21:12\n\
    \    |\n21  |       } else {\n    |  ____________^\n22  | |         let mut max_idx\
    \ = arr.len() - 1;\n23  | |       "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![];\n    let mut max_k = k;\n    let mut max_element\
    \ = arr[0];\n    for i in 1..arr.len() {\n        if arr[i] > max_element {\n\
    \            max_element = arr[i];\n            max_k = i;\n        }\n    }\n\
    \    max_arr.push(max_element);\n    for i in 1..k {\n        if max_k == i {\n\
    \            max_arr.push(arr[i]);\n        } else {\n            max_arr.push(max_element);\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwg55v67c.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpwg55v67c.rs:26:21\n   |\n26 |             max_k = i;\n\
    \   |                     ^ expected `isize`, found `usize`\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpwg55v67c.rs:32:26\n\
    \   |\n32 |             max_arr.push(arr[i]);\n   |                          ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 0;\n    for i in arr.iter().rev() {\n        if i > max {\n            max =\
    \ i;\n            max_idx = i;\n        }\n    }\n    let mut result = vec![max];\n\
    \    for i in 0..k {\n        if i == max_idx {\n            result.push(i);\n\
    \        } else {\n            result.push(max);\n        }\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpizx_qhpe.rs:20:16\n   |\n\
    20 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found `isize`\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpizx_qhpe.rs:21:19\n\
    \   |\n21 |             max = i;\n   |                   ^ expected `isize`, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |        \
    \     max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpizx_qhpe.rs:22:23\n   |\n22 |             max_idx = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n22 |             max_idx = *i;\n   |       \
    \                +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 {\n        if\
    \ max_k == 0 {\n            break;\n        }\n        if max_idx < max_k {\n\
    \            max_k -= max_idx;\n        }\n        max_arr.resize(max_k);\n  \
    \      max_arr.push(arr[max_idx..]);\n        max_idx -= max_k;\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmss090lw.rs:24:22\n   |\n\
    24 |         if max_idx < max_k {\n   |                      ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n24 |         if max_idx < max_k.try_into().unwrap()\
    \ {\n   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpmss090lw.rs:25:22\n   |\n25 |             max_k -= max_idx;\n\
    \   |                      ^^^^^^^ expected `isize`, found `usize`\n\nerror[E0277]:\
    \ cannot subtract-assign `usize` from `isize`\n  --> /tmp/tmpmss090lw.rs:25:19\n\
    \   |\n25 |             max_k -= max_idx;\n   |                   ^^ no implementation\
    \ for `isize -= usize`\n   |\n   = help: the trait `SubAssign<usize>` is not implemented\
    \ for `isize`\n\nerror[E0061]: this function takes 2 arguments but 1 argument\
    \ was supplied\n    --> /tmp/tmpmss090lw.rs:27:17\n     |\n27   |         max_arr.resize(max_k);\n\
    \     |                 ^^^^^^ ----- supplied 1 argument\n     |             \
    \    |\n     |                 expected 2 arguments\n     |\nnote: associated\
    \ function defined here\n\nerror[E0277]: the trait bound `[isize]: Clone` is not\
    \ satisfied\n  --> /tmp/tmpmss090lw.rs:27:17\n   |\n27 |         max_arr.resize(max_k);\n\
    \   |                 ^^^^^^ the trait `Clone` is not implemented for `[isize]`\n\
    \nerror[E0277]: the size for values of type `[isize]` cannot be known at compilation\
    \ time\n  --> /tmp/tmpmss090lw.rs:28:22\n   |\n28 |         max_arr.push(arr[max_idx..]);\n\
    \   |                      ^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[isize]`\n\nerror[E0277]:\
    \ the size for values of type `[isize]` cannot be known at compilation time\n\
    \   --> /tmp/tmpmss090lw.rs:17:23\n    |\n17  |     let mut max_arr = vec![];\n\
    \    |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \    |\n    = help: the trait `Sized` is not implemented for `[isize]`\nnote:\
    \ required by `Vec::<T>::new`\n    = note: this error origi"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![arr[0]];\n    for i in 1..k {\n     \
    \   if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        }\n  \
    \  }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhmxrejw.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbhmxrejw.rs:22:12\n\
    \   |\n22 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbhmxrejw.rs:23:26\n   |\n23 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![];\n    let mut max_val = arr[0];\n \
    \   for i in 1..k {\n        if arr[i] > max_val {\n            max_val = arr[i];\n\
    \        }\n    }\n    for i in 0..k {\n        if arr[i] > max_val {\n      \
    \      max_arr.push(arr[i]);\n        }\n    }\n    max_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp07n7u5x3.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_val {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:24:23\n   |\n24 |  \
    \           max_val = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:28:12\n   |\n28 |  \
    \       if arr[i] > max_val {\n   |            ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp07n7u5x3.rs:29:26\n   |\n29 |  \
    \           max_arr.push(arr[i]);\n   |                          ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 5 previous errors\n\nSome errors have detailed explanati"
  stdout: ''
  timestamp: 1659747170
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 && max_k > 0 {\n\
    \        if arr[max_idx - 1] > arr[max_idx] {\n            max_arr.pop();\n  \
    \          max_k -= 1;\n        } else {\n            max_arr.push(arr[max_idx\
    \ - 1]);\n            max_k -= 1;\n        }\n        max_idx -= 1;\n    }\n \
    \   max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmp6glshx80.rs:21:31

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut max_idx = -1;\n    for ele in arr.iter() {\n        if max_len\
    \ < ele {\n            max_len = ele;\n            max_idx = ele;\n        }\n\
    \    }\n    max_arr.push(max_idx);\n    for ele in arr.iter() {\n        if max_len\
    \ == ele {\n            max_arr.push(ele);\n        }\n    }\n    max_arr\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5jk2lcjl.rs:21:22\n   |\n\
    21 |         if max_len < ele {\n   |                      ^^^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n21 |  \
    \       if max_len < *ele {\n   |                      +\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5jk2lcjl.rs:22:23\n   |\n22 |             max_len = ele;\n\
    \   |                       ^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n22 |             max_len = *ele;\n\
    \   |                       +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp5jk2lcjl.rs:23:23\n\
    \   |\n23 |             max_idx = ele;\n   |                       ^^^ expected\
    \ integer, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    23 |             max_idx = *ele;\n   |                       +\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp5jk2lcjl.rs:28:23\n   |\n28 |         if max_len\
    \ == ele {\n   |                       ^^^ expected `isize`, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n28 |         if max_len\
    \ == *ele {\n   |                       +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5jk2lcjl.rs:29:26\n   |\n29 |             max_arr.push(ele);\n\
    \   |                          ^^^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n29 |             max_arr.push(*ele);\n\
    \   |                          +\n\nerror: aborting due to 5 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = 0;\n    let mut min_idx = arr.len();\n    while\
    \ min_idx < arr.len() {\n        if arr[min_idx] > arr[min_idx - 1] {\n      \
    \      max_arr.resize(max_k);\n            max_arr[max_k - 1] = arr[min_idx -\
    \ 1];\n            max_k -= 1;\n            min_idx -= 1;\n        } else {\n\
    \            max_arr[max_k - 1] = arr[min_idx];\n            max_k -= 1;\n   \
    \     }\n    }\n    max_arr.resize(max_k);\n    max_arr\n}\n\nfn main() {\n  \
    \  let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 2 arguments but 1 argument was supplied\n\
    \    --> /tmp/tmpcxs2aapv.rs:23:21\n     |\n23   |             max_arr.resize(max_k);\n\
    \     |                     ^^^^^^ ----- supplied 1 argument\n     |         \
    \            |\n     |                     expected 2 arguments\n     |\nnote:\
    \ associated function defined here\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpcxs2aapv.rs:24:13\n   |\n24 |             max_arr[max_k\
    \ - 1] = arr[min_idx - 1];\n   |             ^^^^^^^^^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpcxs2aapv.rs:28:13\n   |\n28 |         \
    \    max_arr[max_k - 1] = arr[min_idx];\n   |             ^^^^^^^^^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0061]:\
    \ this function takes 2 arguments but 1 argument was supplied\n    --> /tmp/tmpcxs2aapv.rs:32:13\n\
    \     |\n32   |     max_arr.resize(max_k);\n     |             ^^^^^^ ----- supplied\
    \ 1 argument\n     |             |\n     |             expected 2 arguments\n\
    \     |\nnote: associated function defined here\n\nerror: aborting due to 4 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0277.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_len = k;\n        }\n \
    \       if max_len == k {\n            break;\n        }\n        if arr[i] >\
    \ max_arr[0] {\n            max_arr[0] = arr[i];\n        }\n        if max_len\
    \ == k {\n            break;\n        }\n        if arr[i] > max_arr[1] {\n  \
    \          max_arr[1] = arr[i];\n        }\n        if max_len == k {\n      \
    \      break;\n        }\n        i += 1;\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp33om07ni.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort_unstable();\n\
    \    let mut max_k = k;\n    let mut max_elem = max_arr[0];\n    for i in 1..max_k\
    \ {\n        if max_arr[i] > max_elem {\n            max_elem = max_arr[i];\n\
    \        }\n    }\n    max_arr.truncate(max_k);\n    max_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps895wizv.rs:22:12\n\
    \   |\n22 |         if max_arr[i] > max_elem {\n   |            ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmps895wizv.rs:23:24\n\
    \   |\n23 |             max_elem = max_arr[i];\n   |                        ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps895wizv.rs:26:22\n   |\n26 |\
    \     max_arr.truncate(max_k);\n   |                      ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n26 |     max_arr.truncate(max_k.try_into().unwrap());\n\
    \   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_num = arr[0];\n        let mut max_idx = 0;\n       \
    \ for i in 1..k {\n            if arr[i] > max_num {\n                max_num\
    \ = arr[i];\n                max_idx = i;\n            }\n        }\n        vec![max_num;\
    \ max_idx + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2bo2jeza.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2bo2jeza.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max_num {\n   |                ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp2bo2jeza.rs:24:27\n   |\n24 |  \
    \               max_num = arr[i];\n   |                           ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2bo2jeza.rs:28:23\n   |\n28 |         vec![max_num;\
    \ max_idx + 1]\n   |                       ^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n28 |         vec![max_num; (max_idx + 1).try_into().unwrap()]\n\
    \   |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = -1;\n    for &i in arr {\n        if i == max_k\
    \ {\n            max_arr.push(max_k);\n            max_k = 1;\n        } else\
    \ {\n            max_k *= i;\n        }\n        if max_idx < 0 || max_k > max_arr[max_idx]\
    \ {\n            max_arr.push(max_k);\n            max_idx = max_arr.len() - 1;\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp13iwv1ub.rs:20:9\n   |\n\
    20 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0277]: the\
    \ trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp13iwv1ub.rs:19:23\n\
    \   |\n19 |     let mut max_idx = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        arr\n    } else {\n\
    \        let mut max = arr[0];\n        let mut max_idx = 1;\n        for i in\
    \ 1..k {\n            if arr[i] > max {\n                max = arr[i];\n     \
    \           max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptrho_ytk.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptrho_ytk.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptrho_ytk.rs:24:23\n   |\n24 |  \
    \               max = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptrho_ytk.rs:28:19\n   |\n28 |         vec![max; max_idx + 1]\n\
    \   |                   ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n28 |         vec![max; (max_idx + 1).try_into().unwrap()]\n   | \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut max_element = arr[0];\n    for i in arr.iter().rev() {\n \
    \       if i >= max_element {\n            max_element = i;\n        }\n     \
    \   if max_len == 0 {\n            break;\n        }\n        if max_len < i {\n\
    \            max_len = i;\n        }\n    }\n    for i in 0..k {\n        if max_arr[i]\
    \ == max_element {\n            continue;\n        }\n        max_arr[i] = max_element;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2qy2fi9y.rs:21:17\n   |\n\
    21 |         if i >= max_element {\n   |                 ^^^^^^^^^^^\n   |   \
    \              |\n   |                 expected `&isize`, found `isize`\n   |\
    \                 help: consider borrowing here: `&max_element`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp2qy2fi9y.rs:22:27\n   |\n22 |             max_element\
    \ = i;\n   |                           ^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n22 |             max_element\
    \ = *i;\n   |                           +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp2qy2fi9y.rs:27:22\n   |\n27 |         if max_len < i {\n   |  \
    \                    ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n27 |         if max_len < *i {\n   |       \
    \               +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2qy2fi9y.rs:28:23\n\
    \   |\n28 |             max_len = i;\n   |                       ^ expected `isize`,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n28 |  \
    \           max_len = *i;\n   |                       +\n\nerror[E0277]: the type\
    \ `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp2qy2fi9y.rs:32:12\n   |\n\
    32 |         if max_arr[i] == max_element {\n   |            ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp2qy2fi9y.rs:35:9\n\
    \   |\n35 |         max_arr[i] = max_element;\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 6 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    for i in arr.iter().rev() {\n        if i > max_num {\n     \
    \       max_num = i;\n        }\n    }\n    for i in 0..k {\n        max_arr.push(max_num);\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo_cpy9my.rs:20:16\n   |\n\
    20 |         if i > max_num {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found `isize`\n   |            \
    \    help: consider borrowing here: `&max_num`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpo_cpy9my.rs:21:23\n   |\n21 |             max_num = i;\n   |  \
    \                     ^ expected `isize`, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n21 |             max_num = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i])\n      \
    \  {\n            max_arr.push(arr[max_i]);\n            max_k -= 1;\n       \
    \ }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfgnrnw4b.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr;\n    }\n    let mut max_num = arr[0];\n    let mut max_idx = 1;\n    for\
    \ i in 1..k {\n        if arr[i] > max_num {\n            max_num = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    vec![max_num; max_idx + 1]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpr5c_kwc7.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr5c_kwc7.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_num {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpr5c_kwc7.rs:24:23\n   |\n24 |  \
    \           max_num = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpr5c_kwc7.rs:28:19\n   |\n28 |     vec![max_num; max_idx + 1]\n\
    \   |                   ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n28 |     vec![max_num; (max_idx + 1).try_into().unwrap()]\n   | \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max_num = arr[0];\n        let mut max_idx = 1;\n       \
    \ for i in 1..k {\n            if arr[i] > max_num {\n                max_num\
    \ = arr[i];\n                max_idx = i;\n            }\n        }\n        vec![max_num;\
    \ max_idx + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv22qixzc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpv22qixzc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max_num {\n   |                ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpv22qixzc.rs:24:27\n   |\n24 |  \
    \               max_num = arr[i];\n   |                           ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpv22qixzc.rs:28:23\n   |\n28 |         vec![max_num;\
    \ max_idx + 1]\n   |                       ^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n28 |         vec![max_num; (max_idx + 1).try_into().unwrap()]\n\
    \   |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max {\n                max = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |                     ++++++++++++++++++++\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp9vt3kerc.rs:24:23\n   |\n24 |            \
    \     max = arr[i];\n   |                       ^^^^^^ slice indices are of type\
    \ `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp9vt3kerc.rs:28:19\n\
    \   |\n28 |         vec![max; max_idx + 1]\n   |                   ^^^^^^^^^^^\
    \ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a\
    \ `usize` and panic if the converted value doesn't fit\n   |\n28 |         vec![max;\
    \ (max_idx + 1).try_into().unwrap()]\n   |                   +           +++++++++++++++++++++\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ &i in arr {\n            if i > max {\n                max = i;\n          \
    \      max_idx = 1;\n            } else {\n                max_idx += 1;\n   \
    \         }\n        }\n        vec![max; k - max_idx]\n    }\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp12jtf2xn.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp12jtf2xn.rs:22:13\n   |\n22 |         for &i in arr {\n\
    \   |             ^^    --- this expression has type `isize`\n   |           \
    \  |\n   |             expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp12jtf2xn.rs:30:19\n   |\n30 |         vec![max; k - max_idx]\n\
    \   |                   ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n30 |         vec![max; (k - max_idx).try_into().unwrap()]\n   | \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i - max_k +\
    \ 1])\n        {\n            max_arr.push(arr[max_i - 1]);\n            max_k\
    \ -= 1;\n        } else {\n            max_arr.push(arr[max_i - 1]);\n       \
    \ }\n        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps0_ydabx.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps0_ydabx.rs:23:39\n   |\n23 |             .any(|&x| x >\
    \ arr[max_i - max_k + 1])\n   |                                       ^^^^^ expected\
    \ `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n\
    \  --> /tmp/tmps0_ydabx.rs:23:37\n   |\n23 |             .any(|&x| x > arr[max_i\
    \ - max_k + 1])\n   |                                     ^ no implementation\
    \ for `usize - isize`\n   |\n   = help: the trait `Sub<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max = arr[0];\n    let mut max_idx = 1;\n    for i in 1..k {\n\
    \        if arr[i] > max {\n            max = arr[i];\n            max_idx = i;\n\
    \        }\n    }\n    vec![max; max_idx + 1]\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpux6929fa.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpux6929fa.rs:23:12\n  \
    \ |\n23 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpux6929fa.rs:24:19\n   |\n24 |  \
    \           max = arr[i];\n   |                   ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpux6929fa.rs:28:15\n   |\n28 |     vec![max; max_idx + 1]\n   |\
    \               ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to a `usize` and panic if the converted value doesn't fit\n\
    \   |\n28 |     vec![max; (max_idx + 1).try_into().unwrap()]\n   |           \
    \    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        vec![]\n    } else\
    \ {\n        let mut max = arr[0];\n        let mut max_idx = 1;\n        for\
    \ &i in arr {\n            if i > max {\n                max = i;\n          \
    \      max_idx = 1;\n            }\n            if i == max {\n              \
    \  max_idx += 1;\n            }\n        }\n        vec![max; max_idx..k].clone()\n\
    \    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9nipc7h4.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp9nipc7h4.rs:22:13\n   |\n22 |         for &i in arr {\n\
    \   |             ^^    --- this expression has type `isize`\n   |           \
    \  |\n   |             expected `isize`, found reference\n   |\n   = note:   expected\
    \ type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp9nipc7h4.rs:31:19\n   |\n31 |         vec![max; max_idx..k].clone()\n\
    \   |                   ^^^^^^^^^^ expected `usize`, found struct `std::ops::Range`\n\
    \   |\n   = note: expected type `usize`\n            found struct `std::ops::Range<isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = 0;\n    let mut max_j = 0;\n    let mut max_val =\
    \ arr[0];\n    for &i in arr {\n        if i > max_val {\n            max_val\
    \ = i;\n            max_i = i;\n        }\n        if i == max_val {\n       \
    \     if max_k == k {\n                max_arr.push(max_i);\n                break;\n\
    \            }\n            max_arr.push(max_i);\n            max_k = k - 1;\n\
    \            max_i = 0;\n            max_val = arr[0];\n        }\n        if\
    \ i == max_val {\n            max_arr.push(max_i);\n            max_k = k - 1;\n\
    \            max_i = 0;\n            max_val = arr[0];\n        }\n        if\
    \ i > max_val {\n            max_val = i;\n            max_i = i;\n        }\n\
    \    }\n    if max_k == k {\n        max_arr.push(max_i);\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw8jclmit.rs:22:9\n   |\n\
    22 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ arr.get(max_i) > arr.get(max_i - 1) {\n            max_arr.push(arr.get(max_i));\n\
    \            max_k -= 1;\n        } else {\n            max_arr.push(arr.get(max_i\
    \ - 1));\n        }\n        max_i += 1;\n    }\n    max_arr.push(arr.get(max_k));\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkn_9q8oi.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpkn_9q8oi.rs:29:26\n  \
    \ |\n29 |     max_arr.push(arr.get(max_k));\n   |                          ^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkn_9q8oi.rs:30:5\n   |\n16 | fn maximum(arr:\
    \ Vec<isize>, k: isize) -> Vec<isize> {\n   |                                \
    \          ---------- expected `Vec<isize>` because of return type\n...\n30 |\
    \     max_arr\n   |     ^^^^^^^ expected `isize`, found enum `Option`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_elem = arr[0];\n    for i in 1..arr.len() {\n        if\
    \ arr[i] > max_elem {\n            max_elem = arr[i];\n        }\n        if max_k\
    \ == i {\n            max_arr.push(max_elem);\n        }\n        if max_k > i\
    \ {\n            max_k -= i;\n        }\n    }\n    max_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2_dv3xoi.rs:24:21\n   |\n\
    24 |         if max_k == i {\n   |                     ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n24 |         if max_k == i.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp2_dv3xoi.rs:27:20\n   |\n27 |         if max_k > i {\n\
    \   |                    ^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n27 |         if max_k > i.try_into().unwrap() {\n   |                 \
    \   ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2_dv3xoi.rs:28:22\n\
    \   |\n28 |             max_k -= i;\n   |                      ^ expected `isize`,\
    \ found `usize`\n\nerror[E0277]: cannot subtract-assign `usize` from `isize`\n\
    \  --> /tmp/tmp2_dv3xoi.rs:28:19\n   |\n28 |             max_k -= i;\n   |   \
    \                ^^ no implementation for `isize -= usize`\n   |\n   = help: the\
    \ trait `SubAssign<usize>` is not implemented for `isize`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut cur_max = arr[0];\n    let mut cur_max_idx = 1;\n    let mut\
    \ cur_max_val = arr[0];\n    for &i in arr {\n        if cur_max > i {\n     \
    \       cur_max = i;\n            cur_max_idx = cur_max_idx;\n        }\n    \
    \    if cur_max_val > i {\n            cur_max_val = i;\n        }\n        if\
    \ cur_max_idx > k {\n            break;\n        }\n    }\n    max_arr.push(cur_max);\n\
    \    max_arr.push(cur_max_val);\n    max_arr.push(cur_max_idx);\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptt16r_x5.rs:22:9\n   |\n\
    22 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 0;\n    for &i in arr {\n        if i > max {\n            max = i;\n      \
    \      max_idx = i;\n        }\n    }\n    let mut max_k = k;\n    let mut max_idx\
    \ = 0;\n    for &i in arr {\n        if i >= max {\n            if max_k == k\
    \ {\n                return vec![max];\n            }\n            max_k = k;\n\
    \            max_idx = i;\n        }\n    }\n    if max_k == k {\n        return\
    \ vec![max];\n    }\n    let mut max_k = k;\n    let mut max_idx = 0;\n    for\
    \ &i in arr {\n        if i >= max {\n            if max_k == k {\n          \
    \      return vec![max];\n            }\n            max_k = k;\n            max_idx\
    \ = i;\n        }\n    }\n    if max_k == k {\n        return vec![max];\n   \
    \ }\n    let mut max_k = k;\n    let mut max_idx = 0;\n    for &i in arr {\n \
    \       if i >= max {\n            if max_k == k {\n                return vec![max];\n\
    \            }\n            max_k = k;\n            max_idx = i;\n        }\n\
    \    }\n    if max_k == k {\n        return vec![max];\n    }\n    let mut max_k\
    \ = k;\n    let mut max_idx = 0;\n    for &i in arr {\n        if i >= max {\n\
    \            if max_k == k {\n                return vec![max];\n            }\n\
    \            max_k = k;\n            max_idx = i;\n        }\n    }\n    if max_k\
    \ == k {\n        return vec![max];\n    }\n    let mut max_k = k;\n    let mut\
    \ max_idx = 0;\n    for &i in arr {\n        if i >= max {\n            if max_k\
    \ == k {\n                return vec![max];\n            }\n            max_k\
    \ = k;\n            max_idx = i;\n        }\n    }\n    if max_k == k {\n    \
    \    return vec![max];\n    }\n    let mut max_k = k;\n    let mut max_idx = 0;\n\
    \    for &i in arr {\n        if i >= max {\n            if max_k == k {\n   \
    \             return vec![max];\n            }\n            max_k = k;\n     \
    \       max_idx = i;\n        }\n    }\n    if max_k == k {\n        return vec![max];\n\
    \    }\n    let mut max_k = k;\n    let mut max_idx = 0;\n    for &i in arr {\n\
    \        if i >= max {\n            if max_k == k {\n                return vec![max];\n\
    \            }\n            max_k = k;\n            max_idx = i;\n        }\n\
    \    }\n    if max_k == k {\n        return vec![max];\n    }\n    let mut max_k\
    \ = k;\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpibayv8st.rs:19:9\n   |\n\
    19 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpibayv8st.rs:27:9\n   |\n27 |     for &i in arr {\n   |\
    \         ^^    --- this expression has type `isize`\n   |         |\n   |   \
    \      expected `isize`, found reference\n   |\n   = note:   expected type `isize`\n\
    \           found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpibayv8st.rs:41:9\n\
    \   |\n41 |     for &i in arr {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpibayv8st.rs:55:9\n   |\n55 |     for &i in arr\
    \ {\n   |         ^^    --- this expression has type `isize`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpibayv8st.rs:69:9\n   |\n69 |     for &i in arr {\n   |        \
    \ ^^    --- this expression has type `isize`\n   |         |\n   |         expected\
    \ `isize`, found reference\n   |\n   = note:   expected type `isize`\n       \
    \    found reference `&_`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpibayv8st.rs:83:9\n\
    \   |\n83 |     for &i in arr {\n   |         ^^    --- this expression has type\
    \ `isize`\n   |         |\n   |         expected `isize`, found reference\n  \
    \ |\n   = note:   expected type `isize`\n           found reference `&_`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpibayv8st.rs:97:9\n   |\n97 |     for &i in arr\
    \ {\n   |         ^^    --- this expression has type `isize`\n   |         |\n\
    \   |         expected `isize`, found reference\n   |\n   = note:   expected type\
    \ `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched types\n\
    \   --> /tmp/tmpibayv8st.rs:111:9\n   "
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i])\n      \
    \  {\n            max_arr.pop();\n        }\n        max_arr.push(arr[max_i]);\n\
    \        max_i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ujk_smi.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        arr\n    } else {\n\
    \        let mut max = arr[0];\n        let mut max_idx = 1;\n        for i in\
    \ 1..k {\n            if arr[i] > max {\n                max = arr[i];\n     \
    \           max_idx = i;\n            }\n        }\n        vec![max; max_idx\
    \ + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptrho_ytk.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptrho_ytk.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max {\n   |                ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmptrho_ytk.rs:24:23\n   |\n24 |  \
    \               max = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptrho_ytk.rs:28:19\n   |\n28 |         vec![max; max_idx + 1]\n\
    \   |                   ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n28 |         vec![max; (max_idx + 1).try_into().unwrap()]\n   | \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 {\n        if\
    \ max_idx < k {\n            max_idx += k;\n        }\n        max_arr.resize(max_idx,\
    \ max_arr[max_idx - 1]);\n        max_k -= 1;\n        max_idx -= 1;\n    }\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqel_jefh.rs:21:22\n   |\n\
    21 |         if max_idx < k {\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |         if max_idx < k.try_into().unwrap()\
    \ {\n   |                      ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpqel_jefh.rs:22:24\n   |\n22 |             max_idx += k;\n\
    \   |                        ^ expected `usize`, found `isize`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `usize`\n  --> /tmp/tmpqel_jefh.rs:22:21\n   |\n\
    22 |             max_idx += k;\n   |                     ^^ no implementation\
    \ for `usize += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut min_arr = vec![];\n    let mut min_k = k;\n    let mut i =\
    \ 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0] {\n          \
    \  max_arr[0] = arr[i];\n            max_k = 0;\n        }\n        if arr[i]\
    \ < min_arr[0] {\n            min_arr[0] = arr[i];\n            min_k = 0;\n \
    \       }\n        if max_k == min_k {\n            max_arr.append(arr[i]);\n\
    \        }\n        if max_k > min_k {\n            max_arr.append(arr[i]);\n\
    \            max_k -= 1;\n        }\n        if max_k == min_k {\n           \
    \ min_arr.append(arr[i]);\n            min_k += 1;\n        }\n        i += 1;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsmnk54pc.rs:32:28\n   |\n\
    32 |             max_arr.append(arr[i]);\n   |                            ^^^^^^\
    \ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsmnk54pc.rs:35:28\n   |\n35 |\
    \             max_arr.append(arr[i]);\n   |                            ^^^^^^\
    \ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                           found type `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpsmnk54pc.rs:39:28\n   |\n39 |\
    \             min_arr.append(arr[i]);\n   |                            ^^^^^^\
    \ expected `&mut Vec<isize>`, found `isize`\n   |\n   = note: expected mutable\
    \ reference `&mut Vec<isize>`\n                           found type `isize`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() < k {\n        return vec![];\n\
    \    }\n    let mut max_arr = vec![];\n    let mut max_k = k;\n    let mut max_val\
    \ = arr[0];\n    for ele in arr {\n        if ele > max_val {\n            max_val\
    \ = ele;\n        }\n        if max_k == 0 {\n            break;\n        }\n\
    \        if ele > max_val {\n            max_arr = vec![max_val];\n          \
    \  max_k -= 1;\n        } else {\n            max_arr.push(ele);\n        }\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1pcinhgb.rs:17:20\n   |\n\
    17 |     if arr.len() < k {\n   |                    ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() < k.try_into().unwrap()\
    \ {\n   |                    ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    \n    while max_idx > 0 && max_k\
    \ > 0 {\n        if max_idx > max_k {\n            max_k = max_idx - 1;\n    \
    \    }\n        \n        if max_arr.get(max_k).unwrap() < arr.get(max_k).unwrap()\
    \ {\n            max_arr.insert(max_k, arr.get(max_k).unwrap());\n           \
    \ max_k -= 1;\n        }\n        \n        max_idx -= 1;\n    }\n    \n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7tk107ih.rs:22:22\n   |\n\
    22 |         if max_idx > max_k {\n   |                      ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n22 |         if max_idx > max_k.try_into().unwrap()\
    \ {\n   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp7tk107ih.rs:23:21\n   |\n23 |             max_k = max_idx\
    \ - 1;\n   |                     ^^^^^^^^^^^ expected `isize`, found `usize`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp7tk107ih.rs:26:24\n\
    \   |\n26 |         if max_arr.get(max_k).unwrap() < arr.get(max_k).unwrap() {\n\
    \   |                        ^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmp7tk107ih.rs:26:50\n   |\n26 |         if max_arr.get(max_k).unwrap()\
    \ < arr.get(max_k).unwrap() {\n   |                                          \
    \        ^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp7tk107ih.rs:27:28\n   |\n27 |  \
    \           max_arr.insert(max_k, arr.get(max_k).unwrap());\n   |            \
    \                ^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to a `usize` and panic if the converted value doesn't fit\n   |\n\
    27 |             max_arr.insert(max_k.try_into().unwrap(), arr.get(max_k).unwrap());\n\
    \   |                            ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the\
    \ type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp7tk107ih.rs:27:43\n\
    \   |\n27 |             max_arr.insert(max_k, arr.get(max_k).unwrap());\n   |\
    \                                           ^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = k - 1;\n        }\n\
    \        if arr[i] > max_arr[k] {\n            max_arr[k] = arr[i];\n        }\n\
    \        i += 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgrc8lok3.rs:25:21\n\
    \   |\n25 |         if arr[i] > max_arr[k] {\n   |                     ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpgrc8lok3.rs:26:13\n\
    \   |\n26 |             max_arr[k] = arr[i];\n   |             ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    for i in 0..arr.len() {\n        if max_len > arr.len() {\n      \
    \      max_len = arr.len();\n        }\n        if arr[i] > max_arr[0] {\n   \
    \         max_arr[0] = arr[i];\n        }\n        if arr[i] > max_arr[1] {\n\
    \            max_arr[1] = arr[i];\n        }\n        if arr[i] > max_arr[2] {\n\
    \            max_arr[2] = arr[i];\n        }\n        if arr[i] > max_arr[3] {\n\
    \            max_arr[3] = arr[i];\n        }\n        if arr[i] > max_arr[4] {\n\
    \            max_arr[4] = arr[i];\n        }\n        if arr[i] > max_arr[5] {\n\
    \            max_arr[5] = arr[i];\n        }\n        if arr[i] > max_arr[6] {\n\
    \            max_arr[6] = arr[i];\n        }\n        if arr[i] > max_arr[7] {\n\
    \            max_arr[7] = arr[i];\n        }\n        if arr[i] > max_arr[8] {\n\
    \            max_arr[8] = arr[i];\n        }\n        if arr[i] > max_arr[9] {\n\
    \            max_arr[9] = arr[i];\n        }\n        if arr[i] > max_arr[10]\
    \ {\n            max_arr[10] = arr[i];\n        }\n        if arr[i] > max_arr[11]\
    \ {\n            max_arr[11] = arr[i];\n        }\n        if arr[i] > max_arr[12]\
    \ {\n            max_arr[12] = arr[i];\n        }\n        if arr[i] > max_arr[13]\
    \ {\n            max_arr[13] = arr[i];\n        }\n        if arr[i] > max_arr[14]\
    \ {\n            max_arr[14] = arr[i];\n        }\n        if arr[i] > max_arr[15]\
    \ {\n            max_arr[15] = arr[i];\n        }\n        if arr[i] > max_arr[16]\
    \ {\n            max_arr[16] = arr[i];\n        }\n        if arr[i] > max_arr[17]\
    \ {\n            max_arr[17] = arr[i];\n        }\n        if arr[i] > max_arr[18]\
    \ {\n            max_arr[18] = arr[i];\n        }\n        if arr[i] > max_arr[19]\
    \ {\n            max_arr[19] = arr[i];\n        }\n        if arr[i] > max_arr[20]\
    \ {\n            max_arr[20] = arr[i];\n        }\n        if arr[i] > max_arr[21]\
    \ {\n            max_arr[21] = arr[i];\n        }\n        if arr[i] > max_arr[22]\
    \ {\n            max_arr[22] = arr[i];\n        }\n        if arr[i] > max_arr[23]\
    \ {\n            max_arr[23] = arr[i];\n        }\n        if arr[i] > max_arr[24]\
    \ {\n            max_arr[24] = arr[i];\n        }\n        if arr[i] > max_arr[25]\
    \ {\n            max_arr[25] = arr[i];\n        }\n        if arr[i] > max_arr[26]\
    \ {\n\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpfr958p51.rs:118:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    19  |     for i in 0..arr.len() {\n    |                           - unclosed\
    \ delimiter\n...\n101 |         if arr[i] > max_arr[26] {\n    |             \
    \                    - this delimiter might not be properly closed...\n102 | \n\
    103 | }\n    | - ...as it matches this but it has different indentation\n...\n\
    118 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpfr958p51.rs:20:22\n\
    \   |\n20 |         if max_len > arr.len() {\n   |                      ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n20 |         if\
    \ max_len > arr.len().try_into().unwrap() {\n   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfr958p51.rs:21:23\n   |\n21 |\
    \             max_len = arr.len();\n   |                       ^^^^^^^^^ expected\
    \ `isize`, found `usize`\n\nerror[E0308]: mismatched types\n   --> /tmp/tmpfr958p51.rs:19:5\n\
    \    |\n16  |   fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    | \
    \                                           ---------- expected `Vec<isize>` because\
    \ of return type\n...\n19  | /     for i in 0..arr.len() {\n20  | |         if\
    \ max_len > arr.len() {\n21  | |             max_len = arr.len();\n22  | |   \
    \      }\n...   |\n117 | |     assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400,\
    \ 0], 0), Vec::<isize>::new());\n118 | | }\n    | |__^ expected struct `Vec`,\
    \ found `()`\n    |\n    = note: expected struct `Vec<isize>`\n            found\
    \ unit type `()`\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 && max_k > 0 {\n\
    \        if arr[max_idx] > arr[max_idx - 1] {\n            max_k -= 1;\n     \
    \   } else {\n            max_idx -= 1;\n        }\n    }\n    max_arr.extend_from_slice(&arr[..max_idx]);\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmpd_ifmmea.rs:21:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = 0;\n    let mut min_idx = arr.len() - 1;\n    while\
    \ min_idx >= 0 && max_idx < arr.len() {\n        if arr[min_idx] > arr[max_idx]\
    \ {\n            max_arr.push(arr[min_idx]);\n            min_idx--;\n       \
    \ } else {\n            max_arr.push(arr[max_idx]);\n            max_idx++;\n\
    \        }\n    }\n    max_arr.push(arr[max_idx]);\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `;`\n  --> /tmp/tmp8r2o5zm8.rs:24:22\n\
    \   |\n24 |             min_idx--;\n   |                      ^ expected expression\n\
    \nerror: expected expression, found `+`\n  --> /tmp/tmp8r2o5zm8.rs:27:21\n   |\n\
    27 |             max_idx++;\n   |                     ^ expected expression\n\n\
    error: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        arr\n    } else {\n\
    \        let mut max_num = arr[0];\n        let mut max_idx = 1;\n        for\
    \ i in 1..k {\n            if arr[i] > max_num {\n                max_num = arr[i];\n\
    \                max_idx = i;\n            }\n        }\n        vec![max_num;\
    \ max_idx + 1]\n    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphyv177fv.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphyv177fv.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max_num {\n   |                ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmphyv177fv.rs:24:27\n   |\n24 |  \
    \               max_num = arr[i];\n   |                           ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmphyv177fv.rs:28:23\n   |\n28 |         vec![max_num;\
    \ max_idx + 1]\n   |                       ^^^^^^^^^^^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n28 |         vec![max_num; (max_idx + 1).try_into().unwrap()]\n\
    \   |                       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting\
    \ due to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    while max_idx > 0 && max_k > 0 {\n\
    \        if arr[max_idx] > arr[max_idx - 1] {\n            max_arr.pop();\n  \
    \          max_k -= 1;\n        } else {\n            max_arr.pop();\n       \
    \     max_k -= 1;\n        }\n        max_idx -= 1;\n    }\n    max_arr.push(arr[max_idx]);\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 3 but the
    index is 3'', /tmp/tmp2xp2h8pc.rs:21:12

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len() - 1;\n    while max_idx >= 0 && max_k\
    \ <= arr.len() {\n        if arr.get(max_idx) > arr.get(max_k) {\n           \
    \ max_arr.push(arr.get(max_idx));\n            max_k++;\n        } else {\n  \
    \          max_k--;\n        }\n        max_idx--;\n    }\n    max_arr\n}\n\n\
    fn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpgqfqou_4.rs:23:19\n\
    \   |\n23 |             max_k++;\n   |                   ^ expected expression\n\
    \nerror: expected expression, found `;`\n  --> /tmp/tmpgqfqou_4.rs:25:20\n   |\n\
    25 |             max_k--;\n   |                    ^ expected expression\n\nerror:\
    \ expected expression, found `;`\n  --> /tmp/tmpgqfqou_4.rs:27:18\n   |\n27 |\
    \         max_idx--;\n   |                  ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpgqfqou_4.rs:20:36\n   |\n20 |     while max_idx\
    \ >= 0 && max_k <= arr.len() {\n   |                                    ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n20 |     while max_idx\
    \ >= 0 && max_k <= arr.len().try_into().unwrap() {\n   |                     \
    \               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpgqfqou_4.rs:21:39\n   |\n21 |  \
    \       if arr.get(max_idx) > arr.get(max_k) {\n   |                         \
    \              ^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpgqfqou_4.rs:29:5\n   |\n16 | fn\
    \ maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |                   \
    \                       ---------- expected `Vec<isize>` because of return type\n\
    ...\n29 |     max_arr\n   |     ^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    for i in 0..k\
    \ {\n        max_arr.push(arr[i]);\n    }\n    for i in 0..k {\n        let mut\
    \ max_element = max_arr[i];\n        for j in i+1..k {\n            if max_element\
    \ < arr[j] {\n                max_element = arr[j];\n            }\n        }\n\
    \        max_arr[i] = max_element;\n    }\n    max_arr\n}\n\nfn main() {\n   \
    \ let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqm4ekqx9.rs:19:22\n\
    \   |\n19 |         max_arr.push(arr[i]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpqm4ekqx9.rs:22:31\n\
    \   |\n22 |         let mut max_element = max_arr[i];\n   |                  \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpqm4ekqx9.rs:24:30\n   |\n24 |             if max_element < arr[j]\
    \ {\n   |                              ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqm4ekqx9.rs:25:31\n   |\n25 |  \
    \               max_element = arr[j];\n   |                               ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpqm4ekqx9.rs:28:9\n\
    \   |\n28 |         max_arr[i] = max_element;\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous\
    \ e"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() < k {\n        return vec![];\n\
    \    }\n    let mut max_arr = vec![];\n    let mut max_idx = -1;\n    for i in\
    \ 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    for i in 0..k {\n        if arr[i]\
    \ > max_arr[max_idx] {\n            max_arr[max_idx] = arr[i];\n        }\n  \
    \  }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmph_yc4eno.rs:17:20\n   |\n\
    17 |     if arr.len() < k {\n   |                    ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() < k.try_into().unwrap()\
    \ {\n   |                    ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph_yc4eno.rs:23:12\n   |\n23 |  \
    \       if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph_yc4eno.rs:24:26\n   |\n24 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph_yc4eno.rs:29:12\n   |\n29 |  \
    \       if arr[i] > max_arr[max_idx] {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmph_yc4eno.rs:29:21\n   |\n29 |  \
    \       if arr[i] > max_arr[max_idx] {\n   |                     ^^^^^^^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmph_yc4eno.rs:30:13\n\
    \   |\n30 |      "
  stdout: ''
  timestamp: 1659747172
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = 0;\n    let mut max_j = 0;\n    let mut max_val =\
    \ arr[0];\n    for i in 0..arr.len() {\n        if max_k == 0 {\n            break;\n\
    \        }\n        if arr[i] > max_val {\n            max_val = arr[i];\n   \
    \         max_i = i;\n        }\n        if max_k == 1 {\n            break;\n\
    \        }\n        if arr[i] > max_val {\n            max_val = arr[i];\n   \
    \         max_j = i;\n        }\n        if max_k == 2 {\n            break;\n\
    \        }\n        if arr[i] > max_val {\n            max_val = arr[i];\n   \
    \         max_k = max_k - 1;\n        }\n    }\n    max_arr.push(arr[max_i]);\n\
    \    max_arr.push(arr[max_j]);\n    max_arr.push(max_val);\n    return max_arr;\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, -3, 5]`,\n right: `[-4, -3, 5]`', /tmp/tmpw2bha62r.rs:53:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    for i in 0..k\
    \ {\n        max_arr.push(arr[i]);\n    }\n    for i in 0..k {\n        let mut\
    \ max_element = max_arr[i];\n        for j in (i + 1)..k {\n            if max_element\
    \ < max_arr[j] {\n                max_element = max_arr[j];\n            }\n \
    \       }\n        max_arr[i] = max_element;\n    }\n    max_arr\n}\n\nfn main()\
    \ {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3),\
    \ vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n\
    \    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123,\
    \ -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfvyk9qk2.rs:19:22\n\
    \   |\n19 |         max_arr.push(arr[i]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpfvyk9qk2.rs:22:31\n\
    \   |\n22 |         let mut max_element = max_arr[i];\n   |                  \
    \             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpfvyk9qk2.rs:24:30\n   |\n24 |             if max_element < max_arr[j]\
    \ {\n   |                              ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpfvyk9qk2.rs:25:31\n   |\n25 |                 max_element\
    \ = max_arr[j];\n   |                               ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpfvyk9qk2.rs:28:9\n   |\n28 |         max_arr[i]\
    \ = max_element;\n   |         ^^^^^^^^^^ slice indices are of type `usize` or\
    \ ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror: aborting due to 5 previous errors\n\nF"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = arr.clone();\n    max_arr.sort_unstable();\n\
    \    max_arr.truncate(k);\n    max_arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9oz2zxdz.rs:19:22\n   |\n\
    19 |     max_arr.truncate(k);\n   |                      ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     max_arr.truncate(k.try_into().unwrap());\n\
    \   |                       ++++++++++++++++++++\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    vec![max; k - max_idx]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4xxeih7e.rs:25:19\n   |\n\
    25 |     vec![max; k - max_idx]\n   |                   ^^^^^^^ expected `isize`,\
    \ found `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp4xxeih7e.rs:25:15\n\
    \   |\n25 |     vec![max; k - max_idx]\n   |               ^^^^^^^^^^^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n25 |     vec![max; (k -\
    \ max_idx).try_into().unwrap()]\n   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: cannot subtract `usize` from `isize`\n  --> /tmp/tmp4xxeih7e.rs:25:17\n\
    \   |\n25 |     vec![max; k - max_idx]\n   |                 ^ no implementation\
    \ for `isize - usize`\n   |\n   = help: the trait `Sub<usize>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpr3ylvbq0.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpr3ylvbq0.rs:23:19\n   |\n23 |  \
    \           max = arr[i];\n   |                   ^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_num\
    \ = arr[0];\n    for num in arr {\n        if num > max_num {\n            max_num\
    \ = num;\n        }\n    }\n    for i in 0..k {\n        if max_arr[i] > max_num\
    \ {\n            max_arr[i] = max_num;\n        }\n    }\n    max_arr\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp70cn9_qw.rs:25:12\n\
    \   |\n25 |         if max_arr[i] > max_num {\n   |            ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmp70cn9_qw.rs:26:13\n\
    \   |\n26 |             max_arr[i] = max_num;\n   |             ^^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_num = arr[0];\n    let mut max_idx = 1;\n    for i in 1..k\
    \ {\n        if arr[i] > max_num {\n            max_num = arr[i];\n          \
    \  max_idx = i;\n        }\n    }\n    let mut max_arr = vec![];\n    for i in\
    \ 0..k {\n        if i == max_idx {\n            max_arr.push(max_num);\n    \
    \    } else {\n            max_arr.push(arr[i]);\n        }\n    }\n    max_arr\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_s_19qdr.rs:17:21\n   |\n\
    17 |     if arr.len() <= k {\n   |                     ^ expected `usize`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap()\
    \ {\n   |                     ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp_s_19qdr.rs:23:12\n  \
    \ |\n23 |         if arr[i] > max_num {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_s_19qdr.rs:24:23\n   |\n24 |  \
    \           max_num = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmp_s_19qdr.rs:33:26\n   |\n33 |  \
    \           max_arr.push(arr[i]);\n   |                          ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 1..k {\n        result[i] = arr[max_idx - i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfsstuodc.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpfsstuodc.rs:27:35\n   |\n27 |         result[i]\
    \ = arr[max_idx - i];\n   |                                   ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpfsstuodc.rs:27:33\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |                      \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_k = 0;\n        }\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 0;\n        }\n   \
    \     if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n           \
    \ max_k = 0;\n        }\n        if arr\n}\n\nfn main() {\n    let candidate =\
    \ maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmple0d3v8z.rs:129:3\n\
    \    |\n16  | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n    |   \
    \                                                  - unclosed delimiter\n...\n\
    20  |     while i < arr.len() {\n    |                         - this delimiter\
    \ might not be properly closed...\n...\n114 | }\n    | - ...as it matches this\
    \ but it has different indentation\n...\n129 | }\n    |   ^\n\nerror: expected\
    \ `{`, found `}`\n   --> /tmp/tmple0d3v8z.rs:114:1\n    |\n113 |         if arr\n\
    \    |         -- this `if` expression has a condition, but no block\n114 | }\n\
    \    | ^ expected `{`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmple0d3v8z.rs:16:42\n\
    \   |\n16 | fn maximum(arr: Vec<isize>, k: isize) -> Vec<isize> {\n   |    -------\
    \                               ^^^^^^^^^^ expected struct `Vec`, found `()`\n\
    \   |    |\n   |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n   |\n   = note: expected struct `Vec<isize>`\n           found\
    \ unit type `()`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = max_k - 1;\n      \
    \  }\n        if max_k == 0 {\n            break;\n        }\n        if arr[i]\
    \ > max_arr[1] {\n            max_arr[1] = arr[i];\n        }\n        i += 1;\n\
    \    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmpepdt9w_l.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbac5mlb.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_val = arr[0];\n    for val in arr {\n        if val >\
    \ max_val {\n            max_val = val;\n        }\n        if max_k == 0 {\n\
    \            break;\n        }\n        if val > max_val {\n            max_arr\
    \ = vec![max_val];\n            max_k -= 1;\n        } else {\n            max_arr.push(val);\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-3, -4, 5]`,\n right: `[-4, -3, 5]`', /tmp/tmp1o2ctyqh.rs:39:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.is_empty() {\n        return\
    \ arr;\n    }\n    let mut max_arr = vec![];\n    let mut max_idx = arr.len();\n\
    \    for i in 0..k {\n        if arr[i] > max_arr[0] {\n            max_arr[0]\
    \ = arr[i];\n            max_idx = 0;\n        }\n        if arr[i] > max_arr[max_idx]\
    \ {\n            max_arr[max_idx] = arr[i];\n            max_idx = max_idx;\n\
    \        }\n    }\n    max_arr.sort();\n    max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpl24a4jyu.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl24a4jyu.rs:24:26\n   |\n24 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl24a4jyu.rs:27:12\n   |\n27 |  \
    \       if arr[i] > max_arr[max_idx] {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpl24a4jyu.rs:28:32\n   |\n28 |  \
    \           max_arr[max_idx] = arr[i];\n   |                                ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result[i] = arr[max_idx - i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiem08xme.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiem08xme.rs:27:35\n   |\n27 |         result[i]\
    \ = arr[max_idx - i];\n   |                                   ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpiem08xme.rs:27:33\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |                      \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    for i in 0..k\
    \ {\n        max_arr.push(arr[i]);\n    }\n    for i in 0..k {\n        for j\
    \ in 0..k {\n            if arr[i] > arr[j] {\n                max_arr[i] = arr[i];\n\
    \            }\n        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate\
    \ = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n\
    \    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:19:22\n\
    \   |\n19 |         max_arr.push(arr[i]);\n   |                      ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:23:16\n\
    \   |\n23 |             if arr[i] > arr[j] {\n   |                ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:23:25\n\
    \   |\n23 |             if arr[i] > arr[j] {\n   |                         ^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\
    \nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:24:17\n\
    \   |\n24 |                 max_arr[i] = arr[i];\n   |                 ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpfgef838v.rs:24:30\n\
    \   |\n24 |                 max_arr[i] = arr[i];\n   |                       \
    \       ^^^^^^ slice indices are of type `usize` or ranges of `usize`\n   |\n\
    \   = help: the trait `SliceIndex<[isize]>` is not implemented for `isize`\n \
    \  = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<isize>`\n\nerror: aborting due to 5 previous errors\n\nFor more "
  stdout: ''
  timestamp: 1659747171
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if arr.len() <= k {\n        return arr\n   \
    \ }\n    let mut max_arr = vec![];\n    let mut max_k = k;\n    let mut max_idx\
    \ = arr.len() - 1;\n    while max_idx >= 0 && max_k <= arr.len() {\n        if\
    \ arr[max_idx] > arr[max_idx+max_k] {\n            max_arr.push(arr[max_idx]);\n\
    \            max_k++;\n        }\n        max_idx--;\n    }\n    max_arr.push(arr[max_idx]);\n\
    \    max_arr.sort();\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmpjv1vm_bh.rs:26:19\n\
    \   |\n26 |             max_k++;\n   |                   ^ expected expression\n\
    \nerror: expected expression, found `;`\n  --> /tmp/tmpjv1vm_bh.rs:28:18\n   |\n\
    28 |         max_idx--;\n   |                  ^ expected expression\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjv1vm_bh.rs:17:21\n   |\n17 |     if arr.len()\
    \ <= k {\n   |                     ^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n17 |     if arr.len() <= k.try_into().unwrap() {\n   |          \
    \           ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjv1vm_bh.rs:23:36\n\
    \   |\n23 |     while max_idx >= 0 && max_k <= arr.len() {\n   |             \
    \                       ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp:\
    \ you can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n23 |     while max_idx >= 0 && max_k <= arr.len().try_into().unwrap()\
    \ {\n   |                                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpjv1vm_bh.rs:24:39\n   |\n24 |  \
    \       if arr[max_idx] > arr[max_idx+max_k] {\n   |                         \
    \              ^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot add\
    \ `isize` to `usize`\n  --> /tmp/tmpjv1vm_bh.rs:24:38\n   |\n24 |         if arr[max_idx]\
    \ > arr[max_idx+max_k] {\n   |                                      ^ no implementation\
    \ for `usize + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `usize`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = -1;\n    for i in 0..k {\n        if max_idx < 0 || arr[i] > max_arr[k - 1\
    \ - i] {\n            max_arr[k] = arr[i];\n            max_idx = i;\n       \
    \ }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiadk6vxh.rs:20:27\n\
    \   |\n20 |         if max_idx < 0 || arr[i] > max_arr[k - 1 - i] {\n   |    \
    \                       ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpiadk6vxh.rs:20:36\n   |\n20 |         if max_idx <\
    \ 0 || arr[i] > max_arr[k - 1 - i] {\n   |                                   \
    \ ^^^^^^^^^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpiadk6vxh.rs:21:13\n   |\n21 |             max_arr[k] = arr[i];\n\
    \   |             ^^^^^^^^^^ slice indices are of type `usize` or ranges of `usize`\n\
    \   |\n   = help: the trait `SliceIndex<[_]>` is not implemented for `isize`\n\
    \   = note: required because of the requirements on the impl of `Index<isize>`\
    \ for `Vec<_>`\n\nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n\
    \  --> /tmp/tmpiadk6vxh.rs:21:26\n   |\n21 |             max_arr[k] = arr[i];\n\
    \   |                          ^^^^^^ slice indices are of type `usize` or ranges\
    \ of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_arr = vec![arr[0]];\n    for i in 1..k {\n     \
    \   if arr[i] > max_arr[0] {\n            max_arr[0] = arr[i];\n        }\n  \
    \  }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbhmxrejw.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpbhmxrejw.rs:22:12\n\
    \   |\n22 |         if arr[i] > max_arr[0] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpbhmxrejw.rs:23:26\n   |\n23 |  \
    \           max_arr[0] = arr[i];\n   |                          ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_pos = 0;\n    for pos in 0..arr.len() {\n        if pos\
    \ == max_pos {\n            max_arr.push(arr[pos]);\n        } else {\n      \
    \      if arr[pos] > max_arr[max_pos] {\n                max_arr.push(arr[pos]);\n\
    \                max_k = max_k - 1;\n            }\n        }\n        if max_k\
    \ == 0 {\n            break;\n        }\n    }\n    max_arr\n}\n\nfn main() {\n\
    \    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[-3, 5]`,\n right: `[-4, -3, 5]`', /tmp/tmp_jgzt3u9.rs:38:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k > arr.len() {\n        arr\n    } else {\n\
    \        let mut max_idx = arr.len();\n        let mut max_val = arr[0];\n   \
    \     for i in 1..k {\n            if arr[i] > max_val {\n                max_val\
    \ = arr[i];\n                max_idx = i;\n            }\n        }\n        arr.iter().take(max_idx).collect()\n\
    \    }\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq5uz0yd2.rs:17:12\n   |\n\
    17 |     if k > arr.len() {\n   |            ^^^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n17 |     if k > arr.len().try_into().unwrap()\
    \ {\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq5uz0yd2.rs:23:16\n   |\n23 |  \
    \           if arr[i] > max_val {\n   |                ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq5uz0yd2.rs:24:27\n   |\n24 |  \
    \               max_val = arr[i];\n   |                           ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq5uz0yd2.rs:25:27\n   |\n25 |              \
    \   max_idx = i;\n   |                           ^ expected `usize`, found `isize`\n\
    \nerror[E0277]: a value of type `Vec<isize>` cannot be built from an iterator\
    \ over elements of type `&isize`\n  --> /tmp/tmpq5uz0yd2.rs:28:34\n   |\n28 |\
    \         arr.iter().take(max_idx).collect()\n   |                           \
    \       ^^^^^^^ value of type `Vec<isize>` cannot be built from `std::iter::Iterator<Item=&isize>`\n\
    \   |\n   = help: the trait `FromIterator<&isize>` is not implemented for `Vec<isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_len\
    \ = k;\n    let mut max_idx = -1;\n    let mut min_idx = -1;\n    for idx in 0..arr.len()\
    \ {\n        if idx < k {\n            if arr[idx] > max_arr[0] {\n          \
    \      max_arr[0] = arr[idx];\n                max_idx = idx;\n            }\n\
    \        } else {\n            if arr[idx] > max_arr[0] {\n                max_arr[0]\
    \ = arr[idx];\n                max_idx = idx;\n            }\n            if arr[idx]\
    \ < min_arr[0] {\n                min_idx = idx;\n            }\n        }\n \
    \   }\n    max_arr.sort_unstable();\n    max_arr.truncate(max_len);\n    max_arr.push(min_idx);\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `min_arr` in this scope\n  --> /tmp/tmpbt9j5hfc.rs:32:27\n\
    \   |\n32 |             if arr[idx] < min_arr[0] {\n   |                     \
    \      ^^^^^^^ help: a local variable with a similar name exists: `max_arr`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpbt9j5hfc.rs:22:18\n   |\n22 |  \
    \       if idx < k {\n   |                  ^ expected `usize`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to a `usize` and panic if the converted\
    \ value doesn't fit\n   |\n22 |         if idx < k.try_into().unwrap() {\n   |\
    \                  ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpbt9j5hfc.rs:19:23\n   |\n19 |     let mut\
    \ max_idx = -1;\n   |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror[E0277]: the trait bound `usize: Neg` is not satisfied\n\
    \  --> /tmp/tmpbt9j5hfc.rs:20:23\n   |\n20 |     let mut min_idx = -1;\n   | \
    \                      ^^ the trait `Neg` is not implemented for `usize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpbt9j5hfc.rs:38:22\n   |\n38 |     max_arr.truncate(max_len);\n\
    \   |                      ^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n38 |     max_arr.truncate(max_len.try_into().unwrap());\n   |   \
    \                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpbt9j5hfc.rs:39:18\n   |\n39 |     max_arr.push(min_idx);\n   |\
    \                  ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can\
    \ convert a `usize` to an `isize` and panic if the converted value doesn't fit\n\
    \   |\n39 |     max_arr.push(min_idx.try_into().unwrap());\n   |             \
    \     ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_idx\
    \ = vec![];\n    for i in 0..k {\n        max_arr[i] = arr[i];\n        max_idx[i]\
    \ = i;\n    }\n    for i in 0..k {\n        let mut max_element = max_arr[i];\n\
    \        let mut max_idx = i;\n        for j in 0..k {\n            if max_element\
    \ < max_arr[j] {\n                max_element = max_arr[j];\n                max_idx\
    \ = j;\n            }\n        }\n        max_arr[max_idx] = max_element;\n  \
    \      max_idx[max_idx] = i;\n    }\n    for i in 0..k {\n        arr[i] = max_arr[i];\n\
    \    }\n    arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpq8bflr1_.rs:20:9\n\
    \   |\n20 |         max_arr[i] = arr[i];\n   |         ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq8bflr1_.rs:20:22\n   |\n20 |  \
    \       max_arr[i] = arr[i];\n   |                      ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[_]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpq8bflr1_.rs:21:9\n   |\n21 |   \
    \      max_idx[i] = i;\n   |         ^^^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmpq8bflr1_.rs:24:31\n   |\n24 |         let mut max_element\
    \ = max_arr[i];\n   |                               ^^^^^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[_]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]: the type `[_]` cannot\
    \ be indexed by `isize`\n  --> /tmp/tmpq8bflr1_.rs:27:30\n   |\n27 |         \
    \    if max_element < max_arr[j] {\n   |                              ^^^^^^^^^^\
    \ slice indices are of type `usize` or ranges of `usize`\n   |\n   = help: the\
    \ trait `SliceIndex<[_]>` is not implemented for `isize`\n   = note: required\
    \ because of the requirements on the impl of `Index<isize>` for `Vec<_>`\n\nerror[E0277]:\
    \ the type `[_]` cannot be indexed by `isize`\n  --> /tmp/tmpq8bflr1_.rs:28:31\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_i = arr.len();\n    while max_i < max_k {\n        if\
    \ max_arr\n            .iter()\n            .any(|&x| x > arr[max_i])\n      \
    \  {\n            max_arr.push(arr[max_i]);\n            max_k -= 1;\n       \
    \ }\n        max_i += 1;\n    }\n    max_arr.push(arr[max_i]);\n    max_k -= 1;\n\
    \    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp72k2nneo.rs:20:19\n   |\n\
    20 |     while max_i < max_k {\n   |                   ^^^^^ expected `usize`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to a `usize` and panic\
    \ if the converted value doesn't fit\n   |\n20 |     while max_i < max_k.try_into().unwrap()\
    \ {\n   |                   ~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() == 0 {\n        return\
    \ vec![];\n    }\n    let mut max_arr = vec![];\n    let mut max_len = k;\n  \
    \  let mut max_idx = arr.len() - 1;\n    let mut max_val = arr[0];\n    while\
    \ max_len > 0 && max_idx >= 0 {\n        if arr[*max_idx] > max_val {\n      \
    \      max_val = arr[*max_idx];\n            max_idx = *max_idx - 1;\n       \
    \ }\n        max_len -= 1;\n        if max_len == 0 {\n            max_arr.push(max_val);\n\
    \        }\n    }\n    max_arr\n}\n\nfn main() {\n    let candidate = maximum;\n\
    \    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4,\
    \ -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2,\
    \ 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3],\
    \ 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3],\
    \ 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8,\
    \ 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0,\
    \ 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmppq58_40z.rs:25:16\n\
    \   |\n25 |         if arr[*max_idx] > max_val {\n   |                ^^^^^^^^\n\
    \nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmppq58_40z.rs:26:27\n\
    \   |\n26 |             max_val = arr[*max_idx];\n   |                       \
    \    ^^^^^^^^\n\nerror[E0614]: type `usize` cannot be dereferenced\n  --> /tmp/tmppq58_40z.rs:27:23\n\
    \   |\n27 |             max_idx = *max_idx - 1;\n   |                       ^^^^^^^^\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0614`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 0..k {\n        result[i] = arr[max_idx - i];\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpiem08xme.rs:27:9\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |         ^^^^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpiem08xme.rs:27:35\n   |\n27 |         result[i]\
    \ = arr[max_idx - i];\n   |                                   ^ expected `usize`,\
    \ found `isize`\n\nerror[E0277]: cannot subtract `isize` from `usize`\n  --> /tmp/tmpiem08xme.rs:27:33\n\
    \   |\n27 |         result[i] = arr[max_idx - i];\n   |                      \
    \           ^ no implementation for `usize - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `usize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747170
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max = arr[0];\n    for i in 1..k {\n        if arr[i]\
    \ > max {\n            max = arr[i];\n        }\n    }\n    vec![max]\n}\n\nfn\
    \ main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4,\
    \ 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4,\
    \ 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmprbac5mlb.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                                ++++++++++++++++++++\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:22:12\n\
    \   |\n22 |         if arr[i] > max {\n   |            ^^^^^^ slice indices are\
    \ of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmprbac5mlb.rs:23:19\n   |\n23 |            \
    \ max = arr[i];\n   |                   ^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `isize`\n   = help: the trait `SliceIndex<[T]>` is implemented\
    \ for `usize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.len() <= k {\n        return\
    \ arr\n    }\n    let mut max_num = arr[0];\n    let mut max_idx = 1;\n    for\
    \ i in 1..k {\n        if arr[i] > max_num {\n            max_num = arr[i];\n\
    \            max_idx = i;\n        }\n    }\n    vec![max_num; max_idx + 1]\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn12sjclh.rs:17:31\n   |\n\
    17 |     if k == 0 || arr.len() <= k {\n   |                               ^ expected\
    \ `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to a `usize`\
    \ and panic if the converted value doesn't fit\n   |\n17 |     if k == 0 || arr.len()\
    \ <= k.try_into().unwrap() {\n   |                               ~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpn12sjclh.rs:23:12\n\
    \   |\n23 |         if arr[i] > max_num {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpn12sjclh.rs:24:23\n   |\n24 |  \
    \           max_num = arr[i];\n   |                       ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpn12sjclh.rs:28:19\n   |\n28 |     vec![max_num; max_idx + 1]\n\
    \   |                   ^^^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n   |\n28 |     vec![max_num; (max_idx + 1).try_into().unwrap()]\n   | \
    \                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut i = 0;\n    while i < arr.len() {\n        if arr[i] > max_arr[0]\
    \ {\n            max_arr[0] = arr[i];\n            max_k = 1;\n        }\n   \
    \     if arr[i] > max_arr[1] {\n            max_arr[1] = arr[i];\n           \
    \ max_k = 2;\n        }\n        if arr[i] > max_arr[2] {\n            max_arr[2]\
    \ = arr[i];\n            max_k = 3;\n        }\n        i += 1;\n    }\n    if\
    \ max_k > k {\n        max_k = k;\n    }\n    max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''index out of bounds: the len is 0 but the
    index is 0'', /tmp/tmp7tv1p_gs.rs:21:21

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747172
- exit_code: 101
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max_arr = vec![];\n    let mut max_k\
    \ = k;\n    let mut max_idx = arr.len();\n    \n    while max_idx > 0 && max_k\
    \ > 0 {\n        if max_arr.get(max_idx).unwrap() > arr.get(max_idx).unwrap()\
    \ {\n            max_arr.swap(max_idx, max_idx-1);\n            max_k -= 1;\n\
    \        }\n        max_idx -= 1;\n    }\n    max_arr\n}\n\nfn main() {\n    let\
    \ candidate = maximum;\n    assert_eq!(candidate(vec![-3, -4, 5], 3), vec![-4,\
    \ -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2), vec![4, 4]);\n    assert_eq!(candidate(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1), vec![2]);\n    assert_eq!(candidate(vec![123, -123,\
    \ 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n    assert_eq!(candidate(vec![-123,\
    \ 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n    assert_eq!(candidate(vec![5,\
    \ 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0, 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1,\
    \ 0, 2, 5, 3, -10], 2), vec![3, 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7],\
    \ 1), vec![5]);\n    assert_eq!(candidate(vec![4, -4], 2), vec![-4, 4]);\n   \
    \ assert_eq!(candidate(vec![-10, 10], 2), vec![-10, 10]);\n    assert_eq!(candidate(vec![1,\
    \ 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpkhb5tpy5.rs:22:33

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    if k == 0 || arr.is_empty() {\n        return\
    \ arr;\n    }\n    let mut max_idx = arr.len() - 1;\n    let mut max_val = arr[0];\n\
    \    for i in 1..arr.len() {\n        if arr[i] > max_val {\n            max_idx\
    \ = i;\n            max_val = arr[i];\n        }\n    }\n    let mut res = vec![max_val;\
    \ k];\n    for i in 0..k {\n        res[i] = arr[k - i - 1];\n    }\n    res\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8ajaq9ib.rs:28:33\n   |\n\
    28 |     let mut res = vec![max_val; k];\n   |                               \
    \  ^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize` to\
    \ a `usize` and panic if the converted value doesn't fit\n   |\n28 |     let mut\
    \ res = vec![max_val; k.try_into().unwrap()];\n   |                          \
    \       ~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `isize`\n  --> /tmp/tmp8ajaq9ib.rs:30:9\n   |\n30 |         res[i] = arr[k\
    \ - i - 1];\n   |         ^^^^^^ slice indices are of type `usize` or ranges of\
    \ `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not implemented\
    \ for `isize`\n   = note: required because of the requirements on the impl of\
    \ `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]` cannot be\
    \ indexed by `isize`\n  --> /tmp/tmp8ajaq9ib.rs:30:18\n   |\n30 |         res[i]\
    \ = arr[k - i - 1];\n   |                  ^^^^^^^^^^^^^^ slice indices are of\
    \ type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut result =\
    \ vec![max];\n    for i in 1..k {\n        result.push(arr[i]);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmp0037_2wk.rs:27:21\n\
    \   |\n27 |         result.push(arr[i]);\n   |                     ^^^^^^ slice\
    \ indices are of type `usize` or ranges of `usize`\n   |\n   = help: the trait\
    \ `SliceIndex<[isize]>` is not implemented for `isize`\n   = note: required because\
    \ of the requirements on the impl of `Index<isize>` for `Vec<isize>`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747172
- exit_code: 1
  program: "/// Given a vector arr of integers and a positive integer k, return a\
    \ sorted vector \n/// of length k with the maximum k numbers in arr.\n/// Example\
    \ 1:\n/// >>> maximum(vec![-3, -4, 5], 3)\n/// vec![-4, -3, 5]\n/// Example 2:\n\
    /// >>> maximum(vec![4, -4, 4], 2)\n/// vec![4, 4]\n/// Example 3:\n/// >>> maximum(vec![-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n/// vec![2]\n/// Note:\n/// 1. The length of the vector\
    \ will be in the range of [1, 1000].\n/// 2. The elements in the vector will be\
    \ in the range of [-1000, 1000].\n/// 3. 0 <= k <= len(arr)\nfn maximum(arr: Vec<isize>,\
    \ k: isize) -> Vec<isize> {\n    let mut max = arr[0];\n    let mut max_idx =\
    \ 1;\n    for i in 1..arr.len() {\n        if arr[i] > max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    let mut res = vec![max];\n\
    \    for i in 0..k {\n        res.push(arr[max_idx - i]);\n    }\n    res\n}\n\
    \nfn main() {\n    let candidate = maximum;\n    assert_eq!(candidate(vec![-3,\
    \ -4, 5], 3), vec![-4, -3, 5]);\n    assert_eq!(candidate(vec![4, -4, 4], 2),\
    \ vec![4, 4]);\n    assert_eq!(candidate(vec![-3, 2, 1, 2, -1, -2, 1], 1), vec![2]);\n\
    \    assert_eq!(candidate(vec![123, -123, 20, 0, 1, 2, -3], 3), vec![2, 20, 123]);\n\
    \    assert_eq!(candidate(vec![-123, 20, 0, 1, 2, -3], 4), vec![0, 1, 2, 20]);\n\
    \    assert_eq!(candidate(vec![5, 15, 0, 3, -13, -8, 0], 7), vec![-13, -8, 0,\
    \ 0, 3, 5, 15]);\n    assert_eq!(candidate(vec![-1, 0, 2, 5, 3, -10], 2), vec![3,\
    \ 5]);\n    assert_eq!(candidate(vec![1, 0, 5, -7], 1), vec![5]);\n    assert_eq!(candidate(vec![4,\
    \ -4], 2), vec![-4, 4]);\n    assert_eq!(candidate(vec![-10, 10], 2), vec![-10,\
    \ 10]);\n    assert_eq!(candidate(vec![1, 2, 3, -23, 243, -400, 0], 0), Vec::<isize>::new());\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8jxna0g2.rs:27:32\n   |\n\
    27 |         res.push(arr[max_idx - i]);\n   |                               \
    \ ^ expected `usize`, found `isize`\n\nerror[E0277]: cannot subtract `isize` from\
    \ `usize`\n  --> /tmp/tmp8jxna0g2.rs:27:30\n   |\n27 |         res.push(arr[max_idx\
    \ - i]);\n   |                              ^ no implementation for `usize - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `usize`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659747171
