language: rs
name: HumanEval_71_triangle_area
results:
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n  \
    \          a if b > c => b * b - c * a,\n            a if b < c => c * c - a *\
    \ b\n        }\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeyugmh1a.rs:16:27\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |             a if b > c => b * b - c * a,\n   |             \
    \              ^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |             a if b > c => (b\
    \ * b - c * a) as f64,\n   |                           ~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut s = 0.0;\n    if a\
    \ + b > c {\n        s = s + (a + b - c) * 0.5;\n    }\n    if a + c > b {\n \
    \       s = s + (a + c - b) * 0.5;\n    }\n    if b + c > a {\n        s = s +\
    \ (b + c - a) * 0.5;\n    }\n    s * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5219y_9m.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmp5219y_9m.rs:23:29\n   |\n23 |         s\
    \ = s + (a + b - c) * 0.5;\n   |                             ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp5219y_9m.rs:26:29\n\
    \   |\n26 |         s = s + (a + c - b) * 0.5;\n   |                         \
    \    ^ no implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp5219y_9m.rs:29:29\n   |\n29 |         s = s + (b + c - a) * 0.5;\n\
    \   |                             ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a + b) * (a + c) * (b + c);\n    area = area / 3.0;\n    area\
    \ = area.round();\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptwrqtaai.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmptwrqtaai.rs:22:17\n   |\n22 |     area\
    \ = area + (a + b) * (a + c) * (b + c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmptwrqtaai.rs:24:17\n   |\n24 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n21 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + b);\n    }\n    s / 2.0\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp77fi9jx_.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp77fi9jx_.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp77fi9jx_.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sof1yps.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1sof1yps.rs:23:12\n   |\n23 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n23 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) * 0.5\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9wp58in.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpd9wp58in.rs:21:17\n   |\n21 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s = s + (a + b - c) * (a + b - c);\n    }\n\
    \    if a + c > b {\n        s = s + (a + c - b) * (a + c - b);\n    }\n    if\
    \ b + c > a {\n        s = s + (b + c - a) * (b + c - a);\n    }\n    s / (a +\
    \ b + c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpjumqupdx.rs:14:15\n\
    \   |\n14 |         s = s + (a + b - c) * (a + b - c);\n   |               ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmpjumqupdx.rs:17:15\n   |\n17 |         s = s + (a + c - b) * (a\
    \ + c - b);\n   |               ^ no implementation for `{float} + isize`\n  \
    \ |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpjumqupdx.rs:20:15\n   |\n20 |\
    \         s = s + (b + c - a) * (b + c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmpjumqupdx.rs:22:7\n\
    \   |\n22 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /\
    \ isize`\n   |\n   = help: the trait `Div<isize>` is not implemented for `{float}`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b + c\
    \ > a {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp38ulmsxr.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp38ulmsxr.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp38ulmsxr.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp38ulmsxr.rs:19:21\n   |\n\
    19 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s = (a +\
    \ b + c) / 2;\n    if s == 0 {\n        return 0;\n    }\n    \n    let mut area\
    \ = 0.0;\n    while s > 0 {\n        area += s;\n        s /= 2.0;\n    }\n  \
    \  \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpudhg9r3x.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpudhg9r3x.rs:29:14\n   |\n29 |\
    \         area += s;\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot divide-assign `isize` by `{float}`\n  --> /tmp/tmpudhg9r3x.rs:30:11\n\
    \   |\n30 |         s /= 2.0;\n   |           ^^ no implementation for `isize\
    \ /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 3 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (c - a) * (b - a);\n    }\n\
    \    if a + c > b {\n        area = area + (b - a) * (c - a);\n    }\n    if b\
    \ + c > a {\n        area = area + (a - b) * (c - b);\n    }\n    area = area\
    \ / 2.0;\n    area = area.round();\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp9ej1or04.rs:14:21\n\
    \   |\n14 |         area = area + (c - a) * (b - a);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmp9ej1or04.rs:17:21\n   |\n17 |         area = area + (b - a) * (c\
    \ - a);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp9ej1or04.rs:20:21\n\
    \   |\n20 |         area = area + (a - b) * (c - b);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0689]: can't call method `round`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmp9ej1or04.rs:23:17\n   |\n\
    23 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n12 |     let mut area: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * a);\n    area = area + (b * c) - (a * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area / 2.0;\n    area = round(area,\
    \ 2);\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpevnba4y3.rs:26:12\n\
    \   |\n26 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpevnba4y3.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpevnba4y3.rs:22:17\n   |\n22 |     area\
    \ = area + (a * b) - (c * a);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpevnba4y3.rs:23:17\n\
    \   |\n23 |     area = area + (b * c) - (a * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpevnba4y3.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 5 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area\
    \ = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area\
    \ / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\
    \    area = area / 2.0;\n    area = area / 2.0;\n    area = area / 2.0;\n\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5th00rq8.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5th00rq8.rs:23:12\n   |\n23 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n23 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp5th00rq8.rs:11:51\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |    -------------                        \
    \          ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b + c\
    \ > a {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp38ulmsxr.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp38ulmsxr.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp38ulmsxr.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp38ulmsxr.rs:19:21\n   |\n\
    19 |         (a * b + c) / 2.0\n   |                     ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b + c\
    \ > a {\n        -1\n    } else {\n        ((a + b + c) / 2)\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around block return value\n  --> /tmp/tmp16g6v31q.rs:19:9\n\
    \   |\n19 |         ((a + b + c) / 2)\n   |         ^^^^^^^^^^^^^^^^^ help: remove\
    \ these parentheses\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp16g6v31q.rs:13:9\n   |\n11 | fn\
    \ triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |                 \
    \                                  --- expected `f64` because of return type\n\
    12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |         |\n  \
    \ |         expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp16g6v31q.rs:15:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp16g6v31q.rs:17:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n17 |       \
    \  -1\n   |         ^^\n   |         |\n   |         expected `f64`, found integer\n\
    \   |         help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp16g6v31q.rs:19:9\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n19 |         ((a + b + c) / 2)\n\
    \   |         ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n19 |         (((a + b + c) / 2))\
    \ as f64\n   |\n\nerror: aborting due to 4 previous errors; 1 warning emitted\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        c if c > a + b => a,\n        c if c > a => b,\n        c if\
    \ c > b => c,\n        _ => return -1.0,\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg5j07n0c.rs:13:27\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     match a + b + c {\n13 |         c if c > a + b => a,\n   |  \
    \                         ^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n13 |         c if c > a + b => a\
    \ as f64,\n   |                           ~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a +\
    \ c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    (a * b\
    \ * c) / ((a * b) + c * c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.8571428571428571`,\n right: `6.0`', /tmp/tmpbxmv42mv.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4otm3ey4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp4otm3ey4.rs:21:17\n   |\n21 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5g9xy7nz.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s\n   |     ^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |     s as f64\n   |\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += b * b - a * a;\n    }\n    if a > c {\n\
    \        area += c * c - a * a;\n    }\n    if b > c {\n        area += a * a\
    \ - b * b;\n    }\n    \n    area /= 2.0;\n    \n    area = round(area * 100.0)\
    \ / 100.0;\n    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp3lm3of3c.rs:36:12\n\
    \   |\n36 |     area = round(area * 100.0) / 100.0;\n   |            ^^^^^ not\
    \ found in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3lm3of3c.rs:13:16\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n12 |     if a + b > c {\n13 |         return -1;\n   |        \
    \        ^^\n   |                |\n   |                expected `f64`, found\
    \ integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp3lm3of3c.rs:25:14\n  \
    \ |\n25 |         area += b * b - a * a;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp3lm3of3c.rs:28:14\n   |\n28 |         area += c * c - a * a;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp3lm3of3c.rs:31:14\n  \
    \ |\n31 |         area += a * a - b * b;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a as f64;\n        b = b as f64;\n        c = c as f64;\n\
    \    }\n    if a + c > b {\n        a = a as f64;\n        c = c as f64;\n   \
    \ }\n    if b + c > a {\n        b = b as f64;\n        c = c as f64;\n    }\n\
    \    (a * b * c).round() as f64\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `60.0`,\n right: `6.0`', /tmp/tmpm97mtrx_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    a + b + c\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.0`,\n right: `6.0`', /tmp/tmpy_qu4k6j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpfg80fudh.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s = (a +\
    \ b + c) / 2;\n    if s == 0 {\n        return 0;\n    }\n    \n    let mut area:\
    \ f64 = s * s;\n    \n    if a > b {\n        area -= (b - c) * (s - a);\n   \
    \ }\n    if a > c {\n        area -= (c - a) * (s - b);\n    }\n    if b > c {\n\
    \        area -= (c - b) * (s - c);\n    }\n    \n    area /= 2;\n    \n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxtict98y.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpxtict98y.rs:27:25\n   |\n27 |     let mut area: f64 = s\
    \ * s;\n   |                   ---   ^^^^^ expected `f64`, found `isize`\n   |\
    \                   |\n   |                   expected due to this\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n27 |     let mut area: f64 = (s\
    \ * s) as f64;\n   |                         ~~~~~~~~~~~~~~\n\nerror[E0277]: cannot\
    \ subtract-assign `isize` from `f64`\n  --> /tmp/tmpxtict98y.rs:30:14\n   |\n\
    30 |         area -= (b - c) * (s - a);\n   |              ^^ no implementation\
    \ for `f64 -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot subtract-assign `isize` from `f64`\n  -->\
    \ /tmp/tmpxtict98y.rs:33:14\n   |\n33 |         area -= (c - a) * (s - b);\n \
    \  |              ^^ no implementation for `f64 -= isize`\n   |\n   = help: the\
    \ trait `SubAssign<isize>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ subtract-assign `isize` from `f64`\n  --> /tmp/tmpxtict98y.rs:36:14\n   |\n\
    36 |         area -= (c - b) * (s - c);\n   |              ^^ no implementation\
    \ for `f64 -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot divide-assign `f64` by `{integer}`\n  -->\
    \ /tmp/tmpxtict98y.rs:39:10\n   |\n39 |     area /= 2;\n   |          ^^ no implementation\
    \ for `f64 /= {integer}`\n   |\n   = help: the trait `DivAssign<{integer}>` is\
    \ not implemented for `f64`\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more inform"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    if s == 1 {\n        return 1.0;\n    }\n    if s ==\
    \ 2 {\n        return 0.0;\n    }\n    if s == 3 {\n        return 0.0;\n    }\n\
    \    if s == 4 {\n        return 0.0;\n    }\n    if s == 5 {\n        return\
    \ 0.0;\n    }\n    if s == 6 {\n        return 0.0;\n    }\n    if s == 7 {\n\
    \        return 0.0;\n    }\n    if s == 8 {\n        return 0.0;\n    }\n   \
    \ if s == 9 {\n        return 0.0;\n    }\n    if s == 10 {\n        return 0.0;\n\
    \    }\n    if s == 11 {\n        return 0.0;\n    }\n    if s == 12 {\n     \
    \   return 0.0;\n    }\n    if s == 13 {\n        return 0.0;\n    }\n    if s\
    \ == 14 {\n        return 0.0;\n    }\n    if s == 15 {\n        return 0.0;\n\
    \    }\n    if s == 16 {\n        return 0.0;\n    }\n    if s == 17 {\n     \
    \   return 0.0;\n    }\n    if s == 18 {\n        return 0.0;\n    }\n    if s\
    \ == 19 {\n        return 0.0;\n    }\n    if s == 20 {\n        return 0.0;\n\
    \    }\n    if s == 21 {\n        return 0.0;\n    }\n    if s == 22 {\n     \
    \   return 0.0;\n    }\n    if s == 23 {\n        return 0.0;\n    }\n    if s\
    \ == 24 {\n        return 0.0;\n    }\n    if s == 25 {\n        return 0.0;\n\
    \    }\n    if s == 26 {\n        return 0.0;\n    }\n    if s == 27 {\n     \
    \   return 0.0;\n    }\n    if s == 28 {\n        return 0.0;\n    }\n    if s\
    \ == 29 {\n        return 0.0;\n    }\n    if s == 30 {\n        return 0.0;\n\
    \    }\n    if s == 31 {\n        return 0.0;\n    }\n    if s == 32 {\n     \
    \   return 0.0;\n    }\n    if s == 33 {\n        return 0.0;\n    }\n    if s\
    \ == 34 {\n        return 0.0;\n    }\n    if s == 35 {\n        return 0.0;\n\
    \    }\n    if s == 36 {\n        return 0.0;\n    }\n    if s == 37 {\n     \
    \   return 0.0;\n    }\n    if s == 38 {\n        return 0.0;\n    }\n    if s\
    \ == 39 {\n        return 0.0;\n    }\n    if s == 40 {\n        return 0.0;\n\
    \    }\n    if s == 41 {\n        return 0.0;\n    }\n    if s == 42 {\n     \
    \   return 0.0;\n    }\n    if s == 43 {\n        return 0.0;\n    }\n    if s\
    \ == 44 {\n        return 0.0;\n    }\n    if s == \n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpztkpoy64.rs:152:1\n\
    \    |\n152 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    (a * b * c) / ((a *\
    \ b) + c * a)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `20.0`,\n right: `6.0`', /tmp/tmpha4o4yf4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp3umduh5k.rs:86:1\n  \
    \ |\n86 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += c / a;\n    }\n    \n    if a > c {\n \
    \       area += b / a;\n    }\n    \n    if b > c {\n        area += a / b;\n\
    \    }\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplx3a71gf.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmplx3a71gf.rs:25:14\n   |\n25 |\
    \         area += c / a;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmplx3a71gf.rs:29:14\n   |\n29 |         area += b / a;\n   |         \
    \     ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmplx3a71gf.rs:33:14\n   |\n33 |\
    \         area += a / b;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a + b\
    \ + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpdp4r3lk_.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = area + (b - c) * (b + c) / 2.0;\n  \
    \  }\n    \n    if a + c > b {\n        area = area + (c - a) * (c + a) / 2.0;\n\
    \    }\n    \n    if b + c > a {\n        area = area + (a - b) * (a + b) / 2.0;\n\
    \    }\n    \n    area = area / 2.0;\n    \n    area = round(area, 2);\n    \n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpr3bs0roi.rs:38:12\n\
    \   |\n38 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpr3bs0roi.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr3bs0roi.rs:25:41\n   |\n25 |   \
    \      area = area + (b - c) * (b + c) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr3bs0roi.rs:29:41\n   |\n29 |   \
    \      area = area + (c - a) * (c + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr3bs0roi.rs:33:41\n   |\n33 |   \
    \      area = area + (a - b) * (a + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror: aborting due to\
    \ 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308, E0425.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhj6nxg5.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplhj6nxg5.rs:22:12\n   |\n22 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        (a * b) / (a + b + c)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe0wox778.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0wox778.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a * b) / (a + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a * b) / (a + b + c)) as f64\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b * b - c * c;\n    }\n  \
    \  if a + c > b {\n        area = area + c * c - b * b;\n    }\n    if b + c >\
    \ a {\n        area = area + b * b - c * c;\n    }\n    area = area / 2.0;\n \
    \   if area < 0.0 {\n        area = -1.0;\n    }\n    area = area.round();\n \
    \   area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp5yxzxslw.rs:14:21\n\
    \   |\n14 |         area = area + b * b - c * c;\n   |                     ^ no\
    \ implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmp5yxzxslw.rs:17:21\n   |\n17 |         area = area + c * c - b *\
    \ b;\n   |                     ^ no implementation for `{float} + isize`\n   |\n\
    \   = help: the trait `Add<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmp5yxzxslw.rs:20:21\n   |\n20 |\
    \         area = area + b * b - c * c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmp5yxzxslw.rs:26:17\n   |\n26 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n12 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0689.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    let mut product: f64 = 0.0;\n    \n    if a + b > c {\n    \
    \    sum = a + b;\n        product = c;\n    } else {\n        sum = c;\n    \
    \    product = a + b;\n    }\n    \n    if product > sum {\n        product =\
    \ sum;\n    }\n    \n    product / 2.0\n}\n\nfn main() {\n    let candidate =\
    \ triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3vy04jx1.rs:16:15\n   |\n\
    16 |         sum = a + b;\n   |               ^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |         sum\
    \ = (a + b) as f64;\n   |               ~~~~~~~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3vy04jx1.rs:17:19\n   |\n17 |         product = c;\n  \
    \ |                   ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n17 |         product = c as f64;\n   |         \
    \          ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp3vy04jx1.rs:19:15\n\
    \   |\n19 |         sum = c;\n   |               ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n19 |         sum\
    \ = c as f64;\n   |               ~~~~~~~~\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp3vy04jx1.rs:20:19\n   |\n20 |         product = a + b;\n   |  \
    \                 ^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n20 |         product = (a + b) as f64;\n   |   \
    \                ~~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        c => if a + b > c { c } else { a },\n        b => if a + c >\
    \ b { b } else { a },\n        a => if b + c > a { a } else { b },\n        _\
    \ => -1.0,\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpem8yj4dc.rs:13:29\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     match a + b + c {\n13 |         c => if a + b > c { c } else\
    \ { a },\n   |                             ^ expected `f64`, found `isize`\n \
    \  |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         c =>\
    \ if a + b > c { c as f64 } else { a },\n   |                             ~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpem8yj4dc.rs:13:40\n   |\n11 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    12 |     match a + b + c {\n13 |         c => if a + b > c { c } else { a },\n\
    \   |                                        ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n13 |         c =>\
    \ if a + b > c { c } else { a as f64 },\n   |                                \
    \        ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpem8yj4dc.rs:14:29\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n14 |         b => if a + c > b { b } else { a },\n   |   \
    \                          ^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n14 |         b => if a + c > b {\
    \ b as f64 } else { a },\n   |                             ~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpem8yj4dc.rs:14:40\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n14 |      "
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    let mut\
    \ s = 0.0;\n    if a + b > c {\n        a = b;\n        b = c;\n        c = a;\n\
    \    }\n    if a + c > b {\n        a = c;\n        c = b;\n        b = a;\n \
    \   }\n    if b + c > a {\n        b = c;\n        c = a;\n        a = b;\n  \
    \  }\n    s = (a * b + c * a + b * c) as f64;\n    if s > 0.0 {\n        s /=\
    \ 2.0;\n    }\n    s \n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `32.5`,\n right: `6.0`', /tmp/tmpy4koaq3_.rs:40:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (c - b) * (c - a);\n    }\n\
    \    if a + c > b {\n        area = area + (b - a) * (b - c);\n    }\n    if a\
    \ + b > c {\n        area = area + (c - a) * (c - b);\n    }\n    area\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpbeg20gnq.rs:14:21\n\
    \   |\n14 |         area = area + (c - b) * (c - a);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmpbeg20gnq.rs:17:21\n   |\n17 |         area = area + (b - a) * (b\
    \ - c);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpbeg20gnq.rs:20:21\n\
    \   |\n20 |         area = area + (c - a) * (c - b);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 3 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = area + (b - c) * 0.5;\n    }\n    if\
    \ a + c > b {\n        area = area + (c - a) * 0.5;\n    }\n    if b + c > a {\n\
    \        area = area + (a - b) * 0.5;\n    }\n    \n    area = area / 2.0;\n \
    \   area = area.round();\n    \n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5qpkr1uu.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp5qpkr1uu.rs:25:31\n   |\n25 | \
    \        area = area + (b - c) * 0.5;\n   |                               ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp5qpkr1uu.rs:28:31\n   |\n28 |         area = area + (c - a) * 0.5;\n\
    \   |                               ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\n\
    error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp5qpkr1uu.rs:31:31\n\
    \   |\n31 |         area = area + (a - b) * 0.5;\n   |                       \
    \        ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n\nerror[E0689]: can't call method\
    \ `round` on ambiguous numeric type `{float}`\n  --> /tmp/tmp5qpkr1uu.rs:35:17\n\
    \   |\n35 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `f32`\n   |\n22 |     let mut\
    \ area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0689.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n   \
    \ let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w\
    \ = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n \
    \   let mut a = 0.0;\n    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut\
    \ d = 0.0;\n    let mut e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n\
    \    let mut h = 0.0;\n    let mut i = 0.0;\n    let mut j = 0.0;\n    let mut\
    \ k = 0.0;\n    let mut l = 0.0;\n    let mut m = 0.0;\n    let mut n = 0.0;\n\
    \    let mut o = 0.0;\n    let mut p = 0.0;\n    let mut q = 0.0;\n    let mut\
    \ r = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n\
    \    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut a = 0.0;\n    let mut b = 0.0;\n\
    \    let mut c = 0.0;\n    let mut d = 0.0;\n    let mut e = 0.0;\n    let mut\
    \ f = 0.0;\n    let mut g = 0.0;\n    let mut h = 0.0;\n    let mut i = 0.0;\n\
    \    let mut j = 0.0;\n    let mut k = 0.0;\n    let mut l = 0.0;\n    let mut\
    \ m = 0.0;\n    let mut n = 0.0;\n    let mut o = 0.0;\n    let mut p = 0.0;\n\
    \    let mut q = 0.0;\n    let mut r = 0.0;\n    let mut s = 0.0;\n    let mut\
    \ t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ a = 0.0;\n    let mut b = 0.0;\n    let mut c = 0.0;\n    let mut d = 0.0;\n\
    \    let mut e = 0.0;\n    let mut f = 0.0;\n    let mut g = 0.0;\n    let mut\
    \ h = 0.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpue_57hw_.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpue_57hw_.rs:11:51\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |    -------------                        \
    \          ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    let mut product: f64 = 0.0;\n    if a + b > c {\n        sum\
    \ = a + b;\n        product = a * b as f64;\n    } else {\n        sum = c;\n\
    \        product = a * b as f64;\n    }\n    if product > sum {\n        product\
    \ = sum;\n    }\n    product = product / 2.0;\n    product = product * product;\n\
    \    product = product / 2.0;\n    product = product * product;\n    product =\
    \ product / 2.0;\n    product = product * product;\n    product = product / 2.0;\n\
    \    product = product * product;\n    product = product / 2.0;\n    product =\
    \ product * product;\n    product = product / 2.0;\n    product = product * product;\n\
    \    product = product / 2.0;\n    product = product * product;\n    product =\
    \ product / 2.0;\n    product = product * product;\n    product = product / 2.0;\n\
    \    product = product * product;\n    product = product / 2.0;\n    product =\
    \ product * product;\n    product = product / 2.0;\n    product = product * product;\n\
    \    product = product / 2.0;\n    product = product * product;\n    product =\
    \ product / 2.0;\n    product = product * product;\n    product = product / 2.0;\n\
    \    product = product * product;\n    product = product / 2.0;\n    product =\
    \ product * product;\n    product = product / 2.0;\n    product = product * product;\n\
    \    product = product / 2.0;\n    product = product * product;\n    product =\
    \ product / 2.0;\n    product = product * product;\n    product = product / 2.0;\n\
    \    product = product * product;\n    product = product / 2.0;\n    product =\
    \ product * product;\n    product = product / 2.0;\n    product = product * product;\n\
    \    product = product / 2.0;\n    product = product * product;\n    product =\
    \ product / 2.0;\n    product = product * product;\n    product = product / 2.0;\n\
    \    product = product * product;\n    product = product / 2.0;\n    product =\
    \ product * product;\n    product = product / 2.0;\n    product = product * product;\n\
    \    product = product / 2.0;\n    product = product * product;\n    product =\
    \ product / 2.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n   \
    \ assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxfv2x72z.rs:15:15\n   |\n\
    15 |         sum = a + b;\n   |               ^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         sum\
    \ = (a + b) as f64;\n   |               ~~~~~~~~~~~~~~\n\nerror[E0277]: cannot\
    \ multiply `isize` by `f64`\n  --> /tmp/tmpxfv2x72z.rs:16:21\n   |\n16 |     \
    \    product = a * b as f64;\n   |                     ^ no implementation for\
    \ `isize * f64`\n   |\n   = help: the trait `Mul<f64>` is not implemented for\
    \ `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxfv2x72z.rs:18:15\n\
    \   |\n18 |         sum = c;\n   |               ^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n18 |         sum\
    \ = c as f64;\n   |               ~~~~~~~~\n\nerror[E0277]: cannot multiply `isize`\
    \ by `f64`\n  --> /tmp/tmpxfv2x72z.rs:19:21\n   |\n19 |         product = a *\
    \ b as f64;\n   |                     ^ no implementation for `isize * f64`\n\
    \   |\n   = help: the trait `Mul<f64>` is not implemented for `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpxfv2x72z.rs:11:51\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |    -------------                 \
    \                 ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly\
    \ returns `()` as its body has no tail or `return` expression\n\nerror: aborting\
    \ due to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwcvtri0.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbwcvtri0.rs:22:12\n   |\n22 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    a + b + c\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.0`,\n right: `6.0`', /tmp/tmpy_qu4k6j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area\
    \ += a * b\n    area += a * c\n    area += b * c\n    area /= 3.0\n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `area`\n  --> /tmp/tmprf8dib47.rs:22:18\n  \
    \ |\n22 |     area += a * b\n   |                  ^ help: add `;` here\n23 |\
    \     area += a * c\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmprf8dib47.rs:23:18\n   |\n23 |     area += a * c\n   |\
    \                  ^ help: add `;` here\n24 |     area += b * c\n   |     ----\
    \ unexpected token\n\nerror: expected `;`, found `area`\n  --> /tmp/tmprf8dib47.rs:24:18\n\
    \   |\n24 |     area += b * c\n   |                  ^ help: add `;` here\n25\
    \ |     area /= 3.0\n   |     ---- unexpected token\n\nerror: expected `;`, found\
    \ `area`\n  --> /tmp/tmprf8dib47.rs:25:16\n   |\n25 |     area /= 3.0\n   |  \
    \              ^ help: add `;` here\n26 |     area\n   |     ---- unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmprf8dib47.rs:13:16\n   |\n11 |\
    \ fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |              \
    \                                     --- expected `f64` because of return type\n\
    12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n   |\
    \                |\n   |                expected `f64`, found integer\n   |  \
    \              help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmprf8dib47.rs:22:10\n   |\n22 |     area +=\
    \ a * b\n   |          ^^ no implementation for `{float} += isize`\n   |\n   =\
    \ help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmprf8dib47.rs:23:10\n  \
    \ |\n23 |     area += a * c\n   |          ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmprf8dib47.rs:24:10\n\
    \   |\n24 |     area += b * c\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 8 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        _ => 2.0 * (a + b + c) / 3.0,\n    }\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmphhhokwoj.rs:14:18\n\
    \   |\n14 |         _ => 2.0 * (a + b + c) / 3.0,\n   |                  ^ no\
    \ implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += (b - a) * c / 2.0;\n    }\n    if a > c\
    \ {\n        area += (b - a) * (c - a) / 2.0;\n    }\n    if b > c {\n       \
    \ area += (b - a) * (c - a) / 2.0;\n    }\n    \n    area += (b - a) * (c - a)\
    \ / 2.0;\n    \n    area = area.round();\n    \n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1oh2und1.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp1oh2und1.rs:25:29\n   |\n25 |   \
    \      area += (b - a) * c / 2.0;\n   |                             ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp1oh2und1.rs:28:35\n\
    \   |\n28 |         area += (b - a) * (c - a) / 2.0;\n   |                   \
    \                ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp1oh2und1.rs:31:35\n   |\n31 |   \
    \      area += (b - a) * (c - a) / 2.0;\n   |                                \
    \   ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmp1oh2und1.rs:34:31\n   |\n34 |     area += (b - a) * (c - a) / 2.0;\n\
    \   |                               ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error[E0689]: can't call method `round` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmp1oh2und1.rs:36:17\n   |\n36 |     area = area.round();\n   |  \
    \               ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    let mut area = 0.0;\n    area += a * b;\n    area +=\
    \ b * c;\n    area += c * s;\n    area /= s;\n    area\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphkkyaqc0.rs:20:10\n\
    \   |\n20 |     area += a * b;\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmphkkyaqc0.rs:21:10\n   |\n21 |     area += b * c;\n   |          ^^ no\
    \ implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `{float}`\n  --> /tmp/tmphkkyaqc0.rs:22:10\n   |\n22 |     area += c * s;\n\
    \   |          ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ divide-assign `{float}` by `isize`\n  --> /tmp/tmphkkyaqc0.rs:23:10\n   |\n\
    23 |     area /= s;\n   |          ^^ no implementation for `{float} /= isize`\n\
    \   |\n   = help: the trait `DivAssign<isize>` is not implemented for `{float}`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area = area + (b - a) * (b + c - a) / (2.0 * b\
    \ + c);\n    }\n    \n    if a > c {\n        area = area + (c - a) * (a + b -\
    \ c) / (2.0 * c + a);\n    }\n    \n    if b > c {\n        area = area + (c -\
    \ b) * (a + c - b) / (2.0 * c + b);\n    }\n    \n    area = area.round();\n \
    \   \n    if area < 0.0 {\n        area = 0.0;\n    }\n    \n    area\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyk9o8j9h.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply\
    \ `{float}` by `isize`\n  --> /tmp/tmpyk9o8j9h.rs:25:52\n   |\n25 |         area\
    \ = area + (b - a) * (b + c - a) / (2.0 * b + c);\n   |                      \
    \                              ^ no implementation for `{float} * isize`\n   |\n\
    \   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpyk9o8j9h.rs:29:52\n   |\n\
    29 |         area = area + (c - a) * (a + b - c) / (2.0 * c + a);\n   |      \
    \                                              ^ no implementation for `{float}\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmpyk9o8j9h.rs:33:52\n\
    \   |\n33 |         area = area + (c - b) * (a + c - b) / (2.0 * c + b);\n   |\
    \                                                    ^ no implementation for `{float}\
    \ * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented for `{float}`\n\
    \nerror[E0689]: can't call method `round` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmpyk9o8j9h.rs:36:17\n   |\n36 |     area = area.round();\n   |  \
    \               ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b * c / a;\n    }\n    if\
    \ a + c > b {\n        area = area + c * a / b;\n    }\n    if b + c > a {\n \
    \       area = area + c * b / a;\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpr7sxg9wg.rs:14:21\n\
    \   |\n14 |         area = area + b * c / a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpr7sxg9wg.rs:17:21\n\
    \   |\n17 |         area = area + c * a / b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpr7sxg9wg.rs:20:21\n\
    \   |\n20 |         area = area + c * b / a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b - c;\n    }\n    if a +\
    \ c > b {\n        area = area + c - b;\n    }\n    if b + c > a {\n        area\
    \ = area + c - a;\n    }\n    area = area / 2.0;\n    area = area.round();\n \
    \   area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpq8rvo172.rs:14:21\n\
    \   |\n14 |         area = area + b - c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpq8rvo172.rs:17:21\n\
    \   |\n17 |         area = area + c - b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpq8rvo172.rs:20:21\n\
    \   |\n20 |         area = area + c - a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmpq8rvo172.rs:23:17\n   |\n23 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n12 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0689.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4otm3ey4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp4otm3ey4.rs:21:17\n   |\n21 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n \
    \   }\n    if b + c > a {\n        return -1.0\n    }\n    let mut area: f64 =\
    \ 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwfk7qag6.rs:22:12\n   |\n\
    22 |     area = (a * b) - (c * a);\n   |            ^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    22 |     area = ((a * b) - (c * a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = 0.0;\n    let mut area_product = 0.0;\n    let mut side1_sum = 0.0;\n    let\
    \ mut side2_sum = 0.0;\n    let mut side3_sum = 0.0;\n    let mut side1_product\
    \ = 0.0;\n    let mut side2_product = 0.0;\n    let mut side3_product = 0.0;\n\
    \    let mut side1_length = 0.0;\n    let mut side2_length = 0.0;\n    let mut\
    \ side3_length = 0.0;\n    let mut side1_area = 0.0;\n    let mut side2_area =\
    \ 0.0;\n    let mut side3_area = 0.0;\n    let mut side1_area_rounded = 0.0;\n\
    \    let mut side2_area_rounded = 0.0;\n    let mut side3_area_rounded = 0.0;\n\
    \    let mut side1_area_rounded_rounded = 0.0;\n    let mut side2_area_rounded_rounded\
    \ = 0.0;\n    let mut side3_area_rounded_rounded = 0.0;\n    let mut side1_area_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side2_area_rounded_rounded_rounded = 0.0;\n    let mut side3_area_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side1_area_rounded_rounded_rounded_rounded = 0.0;\n    let\
    \ mut side2_area_rounded_rounded_rounded_rounded = 0.0;\n    let mut side3_area_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side1_area_rounded_rounded_rounded_rounded_rounded = 0.0;\n\
    \    let mut side2_area_rounded_rounded_rounded_rounded_rounded = 0.0;\n    let\
    \ mut side3_area_rounded_rounded_rounded_rounded_rounded = 0.0;\n    let mut side1_area_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side2_area_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side3_area_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side1_area_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side2_area_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side3_area_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side1_area_rounded_rounded_rounded_rounded_rounded_rounded_rounded_rounded\
    \ = 0.0;\n    let mut side\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp6k1ey4aj.rs:48:17\n   |\n\
    48 |     let mut side\n   |                 ^ help: add `;` here\n49 | }\n   |\
    \ - unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp6k1ey4aj.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area = area + (a - b) * (b - c);\n    }\n    if\
    \ a > c {\n        area = area + (a - c) * (c - b);\n    }\n    if b > c {\n \
    \       area = area + (b - c) * (c - a);\n    }\n    \n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw708ooyf.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpw708ooyf.rs:25:21\n   |\n25 |      \
    \   area = area + (a - b) * (b - c);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpw708ooyf.rs:28:21\n\
    \   |\n28 |         area = area + (a - c) * (c - b);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmpw708ooyf.rs:31:21\n   |\n31 |         area = area + (b - c) * (c\
    \ - a);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0689]: can't call method `round` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmpw708ooyf.rs:34:17\n   |\n34 |     area = area.round();\n   |  \
    \               ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z\
    \ = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n \
    \   let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp3umduh5k.rs:86:1\n  \
    \ |\n86 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if b + c > a {\n        -1\n    } else if c + a\
    \ > b {\n        -1\n    } else {\n        (a * b + c * a + b * c) / (2.0 * a)\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeuxsnaxj.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeuxsnaxj.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeuxsnaxj.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot multiply `{float}` by `isize`\n  --> /tmp/tmpeuxsnaxj.rs:19:40\n   |\n\
    19 |         (a * b + c * a + b * c) / (2.0 * a)\n   |                       \
    \                 ^ no implementation for `{float} * isize`\n   |\n   = help:\
    \ the trait `Mul<isize>` is not implemented for `{float}`\n\nerror: aborting due\
    \ to 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a + b + c) / 2.0;\n    area = area + (a - b - c) / 2.0;\n\
    \    area = area + (b - a - c) / 2.0;\n    area = area - (a + b + c) / 2.0;\n\
    \    area = area - (a - b - c) / 2.0;\n    area = area - (b - a - c) / 2.0;\n\
    \    area = area / 2.0;\n    area = area.round();\n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpac8w_3md.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpac8w_3md.rs:22:31\n   |\n22 |   \
    \  area = area + (a + b + c) / 2.0;\n   |                               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpac8w_3md.rs:23:31\n\
    \   |\n23 |     area = area + (a - b - c) / 2.0;\n   |                       \
    \        ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpac8w_3md.rs:24:31\n   |\n24 |     area =\
    \ area + (b - a - c) / 2.0;\n   |                               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpac8w_3md.rs:25:31\n\
    \   |\n25 |     area = area - (a + b + c) / 2.0;\n   |                       \
    \        ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmpac8w_3md.rs:26:31\n   |\n26 |     area =\
    \ area - (a - b - c) / 2.0;\n   |                               ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpac8w_3md.rs:27:31\n\
    \   |\n27 |     area = area - (b - a - c) / 2.0;\n   |                       \
    \        ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Di"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1.0\n    }\n    if a + c > b {\n        return -1.0\n \
    \   }\n    if b + c > a {\n        return -1.0\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += a * b;\n    }\n    \n    if a\
    \ < c {\n        area += a * c;\n    }\n    \n    if b < c {\n        area +=\
    \ b * c;\n    }\n    \n    area /= 2.0;\n    \n    area.round()\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmphxdnuocu.rs:25:14\n\
    \   |\n25 |         area += a * b;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmphxdnuocu.rs:29:14\n   |\n29 |         area += a * c;\n   |         \
    \     ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmphxdnuocu.rs:33:14\n   |\n33 |\
    \         area += b * c;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmphxdnuocu.rs:38:10\n   |\n38 |     area.round()\n\
    \   |          ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0689.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b - c;\n    }\n    if a +\
    \ c > b {\n        area = area + c - b;\n    }\n    if b + c > a {\n        area\
    \ = area + c - a;\n    }\n    area = area / 2.0;\n    area = round(area, 2);\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmphr0a0zhy.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmphr0a0zhy.rs:14:21\n\
    \   |\n14 |         area = area + b - c;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmphr0a0zhy.rs:17:21\n\
    \   |\n17 |         area = area + c - b;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmphr0a0zhy.rs:20:21\n\
    \   |\n20 |         area = area + c - a;\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0425.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a +\
    \ c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    (a * b\
    \ * c) / ((a * b) + c * c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.8571428571428571`,\n right: `6.0`', /tmp/tmpbxmv42mv.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (c - a + b) * (b - c);\n \
    \   }\n    if a + c > b {\n        area = area + (b - a + c) * (c - b);\n    }\n\
    \    if b + c > a {\n        area = area + (c - b + a) * (a - c);\n    }\n   \
    \ area = area / 2.0;\n    area = round(area, 2);\n    area\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpm42aq5ur.rs:23:12\n\
    \   |\n23 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpm42aq5ur.rs:14:21\n\
    \   |\n14 |         area = area + (c - a + b) * (b - c);\n   |               \
    \      ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmpm42aq5ur.rs:17:21\n   |\n17 |         area = area + (b - a + c)\
    \ * (c - b);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpm42aq5ur.rs:20:21\n\
    \   |\n20 |         area = area + (c - b + a) * (a - c);\n   |               \
    \      ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwcvtri0.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbwcvtri0.rs:22:12\n   |\n22 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64;\n\
    \    use std::cmp::Ordering;\n    \n    if a + b > c {\n        return -1;\n \
    \   }\n    \n    if a + c > b {\n        return -1;\n    }\n    \n    if b + c\
    \ > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n    \n    if\
    \ a > b {\n        area += b * c / a;\n    }\n    \n    if a > c {\n        area\
    \ += c * a / b;\n    }\n    \n    if b > c {\n        area += a * c / b;\n   \
    \ }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unused import: `std::f64`\n  --> /tmp/tmpwor8pr8h.rs:12:9\n  \
    \ |\n12 |     use std::f64;\n   |         ^^^^^^^^\n   |\n   = note: `#[warn(unused_imports)]`\
    \ on by default\n\nwarning: unused import: `std::cmp::Ordering`\n  --> /tmp/tmpwor8pr8h.rs:13:9\n\
    \   |\n13 |     use std::cmp::Ordering;\n   |         ^^^^^^^^^^^^^^^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwor8pr8h.rs:16:16\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n16 |       \
    \  return -1;\n   |                ^^\n   |                |\n   |           \
    \     expected `f64`, found integer\n   |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwor8pr8h.rs:30:14\n\
    \   |\n30 |         area += b * c / a;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpwor8pr8h.rs:34:14\n   |\n34 |         area += c * a / b;\n   |\
    \              ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpwor8pr8h.rs:38:14\n   |\n38 |\
    \         area += a * c / b;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 4 previous errors; 2 warnings emitted\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a < b {\n        area += a * b\n    }\n    \n    if a < c {\n  \
    \      area += a * c\n    }\n    \n    if b < c {\n        area += b * c\n   \
    \ }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwyyipbdn.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpwyyipbdn.rs:25:14\n   |\n25 |         area\
    \ += a * b\n   |              ^^ no implementation for `{float} += isize`\n  \
    \ |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwyyipbdn.rs:29:14\n\
    \   |\n29 |         area += a * c\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpwyyipbdn.rs:33:14\n   |\n33 |         area += b * c\n   |          \
    \    ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpfg80fudh.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    (a * b * c) / ((a *\
    \ b) + (c * c))\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.9523809523809523`,\n right: `6.0`', /tmp/tmpcw1i__tx.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += (b - a) * c / 2.0;\n    }\n    \n    if\
    \ a > c {\n        area += (b - c) * a / 2.0;\n    }\n    \n    if b > c {\n \
    \       area += (b - c) * b / 2.0;\n    }\n    \n    if area > 0.0 {\n       \
    \ area = round(area as f64 * 100.0) / 100.0;\n    }\n    \n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpqwir3mv1.rs:37:16\n\
    \   |\n37 |         area = round(area as f64 * 100.0) / 100.0;\n   |         \
    \       ^^^^^ not found in this scope\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpqwir3mv1.rs:13:16\n   |\n11 | fn triangle_area(a: isize, b: isize, c:\
    \ isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n12 |     if a + b > c {\n13 |       \
    \  return -1;\n   |                ^^\n   |                |\n   |           \
    \     expected `f64`, found integer\n   |                help: use a float literal:\
    \ `-1.0`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpqwir3mv1.rs:25:29\n\
    \   |\n25 |         area += (b - a) * c / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n\
    \  --> /tmp/tmpqwir3mv1.rs:29:29\n   |\n29 |         area += (b - c) * a / 2.0;\n\
    \   |                             ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpqwir3mv1.rs:33:29\n\
    \   |\n33 |         area += (b - c) * b / 2.0;\n   |                         \
    \    ^ no implementation for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        (a * b) / (a + b + c)\n    }\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe0wox778.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe0wox778.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         (a * b) / (a + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         ((a * b) / (a + b + c)) as f64\n   |\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (b * c);\n    area = area + (a * c);\n    area = area + (a\
    \ * b);\n    area = area + (b * a);\n    area = area / 3.0;\n    area = area.round();\n\
    \    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6v9edmb9.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp6v9edmb9.rs:22:17\n   |\n22 |     area\
    \ = area + (b * c);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6v9edmb9.rs:23:17\n\
    \   |\n23 |     area = area + (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6v9edmb9.rs:24:17\n\
    \   |\n24 |     area = area + (a * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp6v9edmb9.rs:25:17\n\
    \   |\n25 |     area = area + (b * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmp6v9edmb9.rs:27:17\n   |\n27 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n21 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z\
    \ = 0.0;\n    let mut u1 = 0.0;\n    let mut v1 = 0.0;\n    let mut w1 = 0.0;\n\
    \    let mut x2 = 0.0;\n    let mut y2 = 0.0;\n    let mut z2 = 0.0;\n    let\
    \ mut u2 = 0.0;\n    let mut v2 = 0.0;\n    let mut w2 = 0.0;\n    let mut x3\
    \ = 0.0;\n    let mut y3 = 0.0;\n    let mut z3 = 0.0;\n    let mut u3 = 0.0;\n\
    \    let mut v3 = 0.0;\n    let mut w3 = 0.0;\n    let mut x4 = 0.0;\n    let\
    \ mut y4 = 0.0;\n    let mut z4 = 0.0;\n    let mut u4 = 0.0;\n    let mut v4\
    \ = 0.0;\n    let mut w4 = 0.0;\n    let mut x5 = 0.0;\n    let mut y5 = 0.0;\n\
    \    let mut z5 = 0.0;\n    let mut u5 = 0.0;\n    let mut v5 = 0.0;\n    let\
    \ mut w5 = 0.0;\n    let mut x6 = 0.0;\n    let mut y6 = 0.0;\n    let mut z6\
    \ = 0.0;\n    let mut u6 = 0.0;\n    let mut v6 = 0.0;\n    let mut w6 = 0.0;\n\
    \    let mut x7 = 0.0;\n    let mut y7 = 0.0;\n    let mut z7 = 0.0;\n    let\
    \ mut u7 = 0.0;\n    let mut v7 = 0.0;\n    let mut w7 = 0.0;\n    let mut x8\
    \ = 0.0;\n    let mut y8 = 0.0;\n    let mut z8 = 0.0;\n    let mut u8 = 0.0;\n\
    \    let mut v8 = 0.0;\n    let mut w8 = 0.0;\n    let mut x9 = 0.0;\n    let\
    \ mut y9 = 0.0;\n    let mut z9 = 0.0;\n    let mut u9 = 0.0;\n    let mut v9\
    \ = 0.0;\n    let mut w9 = 0.0;\n    let mut x10 = 0.0;\n    let mut y10 = 0.0;\n\
    \    let mut z10 = 0.0;\n    let mut u10 = 0.0;\n    let mut v10 = 0.0;\n    let\
    \ mut w10 = 0.0;\n    let mut x11\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmp1w31_ls8.rs:77:16\n   |\n\
    77 |     let mut x11\n   |                ^ help: add `;` here\n78 | }\n   | -\
    \ unexpected token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp1w31_ls8.rs:11:51\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    -------------\
    \                                  ^^^ expected `f64`, found `()`\n   |    |\n\
    \   |    implicitly returns `()` as its body has no tail or `return` expression\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    a + b + c\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdnau9ijg.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdnau9ijg.rs:21:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n21 |     (a + b + c) as f64\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        (a * b + c * a + b * b - c * c) / (2.0\
    \ * b)\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpla1z77av.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0277]: cannot multiply `{float}` by `isize`\n  -->\
    \ /tmp/tmpla1z77av.rs:15:48\n   |\n15 |         (a * b + c * a + b * b - c * c)\
    \ / (2.0 * b)\n   |                                                ^ no implementation\
    \ for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n   \
    \ let mut c = c as f64;\n    if a + b > c {\n        s = 0.0;\n        t = 0.0;\n\
    \        w = 0.0;\n    } else {\n        s = (a * b + c * t) / (b * b);\n    \
    \    t = (a * c - b * s) / (b * b);\n        w = (a * c + b * s) / (b * b);\n\
    \    }\n    if w > 0.0 {\n        u = s / w;\n        v = t / w;\n    } else {\n\
    \        u = s;\n        v = t;\n    }\n    if u > 0.0 {\n        return u;\n\
    \    }\n    if v > 0.0 {\n        return v;\n    }\n    return -1.0;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpvzywd_w9.rs:47:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    if a + b > c {\n        s = b * b - c;\n        w = b\
    \ * c;\n    } else {\n        s = a * a - b * b;\n        w = a * b;\n    }\n\
    \    if s > 0.0 {\n        t = s / w;\n        u = 1.0 - t;\n        v = t * t;\n\
    \    }\n    if u > 0.0 {\n        return u * u * w;\n    } else {\n        return\
    \ -1.0 * v * v;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2okz6d5v.rs:18:13\n   |\n\
    18 |         s = b * b - c;\n   |             ^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2okz6d5v.rs:19:13\n\
    \   |\n19 |         w = b * c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2okz6d5v.rs:21:13\n\
    \   |\n21 |         s = a * a - b * b;\n   |             ^^^^^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp2okz6d5v.rs:22:13\n   |\n22 |         w = a * b;\n   |             ^^^^^\
    \ expected floating-point number, found `isize`\n\nerror: aborting due to 4 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut s = 0.0;\n  \
    \  let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    \n    s =\
    \ a + b + c;\n    t = a + c;\n    u = b + c;\n    v = a;\n    \n    if s > t {\n\
    \        return -1\n    }\n    \n    if s > u {\n        return -1\n    }\n  \
    \  \n    if s > v {\n        return -1\n    }\n    \n    if t > u {\n        return\
    \ -1\n    }\n    \n    if t > v {\n        return -1\n    }\n    \n    if u >\
    \ v {\n        return -1\n    }\n    \n    if u > t {\n        return -1\n   \
    \ }\n    \n    if v > t {\n        return -1\n    }\n    \n    if v > u {\n  \
    \      return -1\n    }\n    \n    if u > t {\n        return -1\n    }\n    \n\
    \    if t > v {\n        return -1\n    }\n    \n    if t > u {\n        return\
    \ -1\n    }\n    \n    if u > v {\n        return -1\n    }\n    \n    if v >\
    \ t {\n        return -1\n    }\n    \n    if v > u {\n        return -1\n   \
    \ }\n    \n    if u > t {\n        return -1\n    }\n    \n    if t > v {\n  \
    \      return -1\n    }\n    \n    if t > u {\n        return -1\n    }\n    \n\
    \    if u > v {\n        return -1\n    }\n    \n    if v > t {\n        return\
    \ -1\n    }\n    \n    if v > u {\n        return -1\n    }\n    \n    if u >\
    \ t {\n        return -1\n    }\n    \n    if t > v {\n        return -1\n   \
    \ }\n    \n    if t > u {\n        return -1\n    }\n    \n    if u > v {\n  \
    \      return -1\n    }\n    \n    if v > t {\n        return -1\n    }\n    \n\
    \    if v > u {\n        return -1\n    }\n    \n    if u > t {\n        return\
    \ -1\n    }\n    \n    if t > v {\n        return -1\n    }\n    \n    if t >\
    \ u {\n        return -1\n    }\n    \n    if u > v {\n        return -1\n   \
    \ }\n    \n    if v > t {\n        return -1\n    }\n    \n    if v > u {\n  \
    \      return -1\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1bzeidcr.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1bzeidcr.rs:27:9\n   |\n27 |     s = a + b + c;\n   | \
    \        ^^^^^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bzeidcr.rs:28:9\n   |\n28 |     t = a + c;\n\
    \   |         ^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bzeidcr.rs:29:9\n   |\n29 |     u = b + c;\n\
    \   |         ^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp1bzeidcr.rs:30:9\n   |\n30 |     v = a;\n  \
    \ |         ^ expected floating-point number, found `isize`\n\nerror[E0317]: `if`\
    \ may be missing an `else` clause\n   --> /tmp/tmp1bzeidcr.rs:160:5\n    |\n11\
    \  |   fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    |        \
    \                                             --- expected `f64` because of this\
    \ return type\n...\n160 | /     if v > u {\n161 | |         return -1\n162 | |\
    \     }\n    | |_____^ expected `f64`, found `()`\n    |\n    = note: `if` expressions\
    \ without `else` evaluate to `()`\n    = help: consider adding an `else` block\
    \ that evaluates to the expected type\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0317.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a +\
    \ c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    a + b\
    \ + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11.0`,\n right: `6.0`', /tmp/tmp3z5ui_v4.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    a + b + c\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdnau9ijg.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdnau9ijg.rs:21:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n21 |     (a + b + c) as f64\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a as f64;\n        b = b as f64;\n        c = c as f64;\n\
    \    }\n    if a + c > b {\n        a = a as f64;\n        c = c as f64;\n   \
    \ }\n    if b + c > a {\n        b = b as f64;\n        c = c as f64;\n    }\n\
    \    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12.0`,\n right: `6.0`', /tmp/tmpe9tdlh6t.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a + b as f64;\n    }\n    if a + c > b {\n        b = a\
    \ + c as f64;\n    }\n    if b + c > a {\n        c = b + c as f64;\n    }\n \
    \   (a * b * c) / ((a * b) + c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `14.138613861386139`,\n right: `6.0`', /tmp/tmp1ti4ltzy.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum:\
    \ f64 = 0.0;\n    let mut area_product: f64 = 0.0;\n    let mut area_product2:\
    \ f64 = 0.0;\n    let mut area_product3: f64 = 0.0;\n\n    if a + b > c {\n  \
    \      area_product = area_product2 = area_product3 = 0.0;\n    } else {\n   \
    \     area_product = area_product2 = area_product3 = (a * b) / c;\n    }\n\n \
    \   if a + c > b {\n        area_product2 = area_product3 = 0.0;\n    } else {\n\
    \        area_product2 = (a * c) / b;\n    }\n\n    if b + c > a {\n        area_product3\
    \ = 0.0;\n    } else {\n        area_product3 = (b * c) / a;\n    }\n\n    area_sum\
    \ += area_product;\n    area_sum += area_product2;\n    area_sum += area_product3;\n\
    \n    area_sum.round()\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps_axzx_f.rs:18:40\n   |\n\
    18 |         area_product = area_product2 = area_product3 = 0.0;\n   |       \
    \                                 ^^^^^^^^^^^^^^^^^^^ expected `f64`, found `()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps_axzx_f.rs:18:24\n   |\n18 |\
    \         area_product = area_product2 = area_product3 = 0.0;\n   |          \
    \              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `()`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps_axzx_f.rs:20:56\n   |\n20 |\
    \         area_product = area_product2 = area_product3 = (a * b) / c;\n   |  \
    \                                                      ^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    20 |         area_product = area_product2 = area_product3 = ((a * b) / c) as f64;\n\
    \   |                                                        ~~~~~~~~~~~~~~~~~~~~\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmps_axzx_f.rs:20:40\n   |\n20 |\
    \         area_product = area_product2 = area_product3 = (a * b) / c;\n   |  \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps_axzx_f.rs:20:24\n\
    \   |\n20 |         area_product = area_product2 = area_product3 = (a * b) / c;\n\
    \   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `()`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmps_axzx_f.rs:24:25\n\
    \   |\n24 |         area_product2 = area_product3 = 0.0;\n   |               \
    \          ^^^^^^^^^^^^^^^^^^^ expected `f64`, found `()`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmps_axzx_f.rs:26:25\n   |\n26 |         area_product2 = (a\
    \ * c) / b;\n   |                         ^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n26 |         area_product2\
    \ = ((a * c) / b) as f64;\n   |    "
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a < b {\n        area = area + (b - a);\n    }\n    if a < c {\n\
    \        area = area + (c - a);\n    }\n    if b < c {\n        area = area +\
    \ (c - b);\n    }\n    \n    area = area / 2.0;\n    area = area.round();\n  \
    \  \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyfwftntd.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpyfwftntd.rs:25:21\n   |\n25 |      \
    \   area = area + (b - a);\n   |                     ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpyfwftntd.rs:28:21\n\
    \   |\n28 |         area = area + (c - a);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpyfwftntd.rs:31:21\n\
    \   |\n31 |         area = area + (c - b);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmpyfwftntd.rs:35:17\n   |\n35 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2576x4ey.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp2576x4ey.rs:22:19\n   |\n22 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2576x4ey.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2576x4ey.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    area += a * b * c / 6.0;\n    area += a * c;\n    area += b * c;\n    area\
    \ /= 2.0;\n    \n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo8jok8i6.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpo8jok8i6.rs:23:23\n   |\n23 |   \
    \  area += a * b * c / 6.0;\n   |                       ^ no implementation for\
    \ `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpo8jok8i6.rs:24:10\n\
    \   |\n24 |     area += a * c;\n   |          ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpo8jok8i6.rs:25:10\n   |\n25 |     area += b * c;\n   |          ^^ no\
    \ implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sof1yps.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1sof1yps.rs:23:12\n   |\n23 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n23 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += b * (b - a)\n    }\n    if a > c {\n  \
    \      area += c * (c - a)\n    }\n    if b > c {\n        area += a * (a - b)\n\
    \    }\n    \n    area /= 2.0;\n    \n    area = area.round();\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0_ss5_hk.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmp0_ss5_hk.rs:25:14\n   |\n25 |         area\
    \ += b * (b - a)\n   |              ^^ no implementation for `{float} += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp0_ss5_hk.rs:28:14\n\
    \   |\n28 |         area += c * (c - a)\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmp0_ss5_hk.rs:31:14\n   |\n31 |         area += a * (a - b)\n   |\
    \              ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0689]: can't\
    \ call method `round` on ambiguous numeric type `{float}`\n  --> /tmp/tmp0_ss5_hk.rs:36:17\n\
    \   |\n36 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `f32`\n   |\n22 |     let mut\
    \ area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0689.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    if a + b > c {\n        sum = a + b - c;\n    } else {\n   \
    \     sum = a + c;\n    }\n    if a + c > b {\n        sum += a + c - b;\n   \
    \ } else {\n        sum += b + c;\n    }\n    sum\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0p8_rw_j.rs:14:15\n   |\n\
    14 |         sum = a + b - c;\n   |               ^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n14 |      \
    \   sum = (a + b - c) as f64;\n   |               ~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp0p8_rw_j.rs:16:15\n   |\n16 |         sum =\
    \ a + c;\n   |               ^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n16 |         sum = (a + c) as f64;\n\
    \   |               ~~~~~~~~~~~~~~\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `f64`\n  --> /tmp/tmp0p8_rw_j.rs:19:13\n   |\n19 |         sum += a + c -\
    \ b;\n   |             ^^ no implementation for `f64 += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmp0p8_rw_j.rs:21:13\n   |\n21 |   \
    \      sum += b + c;\n   |             ^^ no implementation for `f64 += isize`\n\
    \   |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        2 => 1.0,\n        _ =>\
    \ a * b * c / (a + b + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpgl4f_ddl.rs:16:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         2 => 1.0,\n\
    \   | |              --- this is found to be of type `f64`\n16 | |         _ =>\
    \ a * b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n17 | |     }\n   | |_____- `match` arms have incompatible\
    \ types\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n16 |      \
    \   _ => (a * b * c / (a + b + c)) as f64,\n   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = area + (b - c) * (b + c) / 2.0;\n  \
    \  }\n    \n    if a + c > b {\n        area = area + (c - a) * (c + a) / 2.0;\n\
    \    }\n    \n    if b + c > a {\n        area = area + (a - b) * (a + b) / 2.0;\n\
    \    }\n    \n    area = area / 2.0;\n    \n    area = area.round();\n    \n \
    \   return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppy1z2zh_.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmppy1z2zh_.rs:25:41\n   |\n25 |   \
    \      area = area + (b - c) * (b + c) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmppy1z2zh_.rs:29:41\n   |\n29 |   \
    \      area = area + (c - a) * (c + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmppy1z2zh_.rs:33:41\n   |\n33 |   \
    \      area = area + (a - b) * (a + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0689]: can't call\
    \ method `round` on ambiguous numeric type `{float}`\n  --> /tmp/tmppy1z2zh_.rs:38:17\n\
    \   |\n38 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp:\
    \ you must specify a type for this binding, like `f32`\n   |\n22 |     let mut\
    \ area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308, E0689.\nFor\
    \ more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpfg80fudh.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a as f64;\n        b = b as f64;\n        c = c as f64;\n\
    \    }\n    if a + c > b {\n        a = a as f64;\n        c = c as f64;\n   \
    \ }\n    if b + c > a {\n        b = b as f64;\n        c = c as f64;\n    }\n\
    \    (a * b + c) as f64 / 2\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `f64` by `{integer}`\n  --> /tmp/tmp_1h7r_me.rs:28:24\n\
    \   |\n28 |     (a * b + c) as f64 / 2\n   |                        ^ no implementation\
    \ for `f64 / {integer}`\n   |\n   = help: the trait `Div<{integer}>` is not implemented\
    \ for `f64`\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b + c);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c + b);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a + b);\n    }\n    s / (a + b + c)\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptta5o06b.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b + c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptta5o06b.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptta5o06b.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a + b);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmptta5o06b.rs:22:7\n\
    \   |\n22 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /\
    \ isize`\n   |\n   = help: the trait `Div<isize>` is not implemented for `{float}`\n\
    \nerror: aborting due to 4 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else if a + c > b {\n        -1\n    } else if b + c\
    \ > a {\n        -1\n    } else {\n        (a * b + c) / 2\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvcmyblk0.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvcmyblk0.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         -1\n   |         ^^\n   |         |\n   |   \
    \      expected `f64`, found integer\n   |         help: use a float literal:\
    \ `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpvcmyblk0.rs:17:9\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n...\n17 |         -1\n   |         ^^\n   |         |\n   |         expected\
    \ `f64`, found integer\n   |         help: use a float literal: `-1.0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpvcmyblk0.rs:19:9\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n19 |       \
    \  (a * b + c) / 2\n   |         ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n19 |         ((a\
    \ * b + c) / 2) as f64\n   |\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s = (a +\
    \ b + c) / 2;\n    if s == 0 {\n        return 0;\n    }\n    \n    let mut area\
    \ = 0.0;\n    \n    if a < b {\n        area += ((b - a) * (s - a));\n    }\n\
    \    if a < c {\n        area += ((c - a) * (s - a));\n    }\n    if b < c {\n\
    \        area += ((c - b) * (s - b));\n    }\n    \n    return area / s;\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpjxwnqbhr.rs:30:17\n\
    \   |\n30 |         area += ((b - a) * (s - a));\n   |                 ^^^^^^^^^^^^^^^^^^^\
    \ help: remove these parentheses\n   |\n   = note: `#[warn(unused_parens)]` on\
    \ by default\n\nwarning: unnecessary parentheses around assigned value\n  -->\
    \ /tmp/tmpjxwnqbhr.rs:33:17\n   |\n33 |         area += ((c - a) * (s - a));\n\
    \   |                 ^^^^^^^^^^^^^^^^^^^ help: remove these parentheses\n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmpjxwnqbhr.rs:36:17\n\
    \   |\n36 |         area += ((c - b) * (s - b));\n   |                 ^^^^^^^^^^^^^^^^^^^\
    \ help: remove these parentheses\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjxwnqbhr.rs:13:16\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n12 |     if a + b > c {\n13 |         return -1;\n   |        \
    \        ^^\n   |                |\n   |                expected `f64`, found\
    \ integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpjxwnqbhr.rs:30:14\n  \
    \ |\n30 |         area += ((b - a) * (s - a));\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpjxwnqbhr.rs:33:14\n   |\n33 |         area += ((c - a) * (s - a));\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpjxwnqbhr.rs:36:14\n  \
    \ |\n36 |         area += ((c - b) * (s - b));\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n\
    \  --> /tmp/tmpjxwnqbhr.rs:39:17\n   |\n39 |     return area / s;\n   |      \
    \       "
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = (a * b) / c;\n    }\n    \n    if a\
    \ + c > b {\n        area = (a * c) / b;\n    }\n    \n    if b + c > a {\n  \
    \      area = (b * c) / a;\n    }\n    \n    area = area.round();\n    \n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpifoc0_n_.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpifoc0_n_.rs:25:16\n   |\n25 |         area = (a * b) /\
    \ c;\n   |                ^^^^^^^^^^^ expected floating-point number, found `isize`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpifoc0_n_.rs:29:16\n   |\n29 |\
    \         area = (a * c) / b;\n   |                ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpifoc0_n_.rs:33:16\n\
    \   |\n33 |         area = (b * c) / a;\n   |                ^^^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0689]: can't call method `round`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmpifoc0_n_.rs:36:17\n   |\n\
    36 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n22 |     let mut area: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s = (a +\
    \ b + c) / 2;\n    let mut t = (a + b + c) / 2;\n    \n    while s > t {\n   \
    \     if s > t {\n            t += 1;\n        }\n        s -= 1;\n    }\n   \
    \ \n    if s == t {\n        return s;\n    }\n    \n    return -1;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwmhaedv1.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2576x4ey.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmp2576x4ey.rs:22:19\n   |\n22 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2576x4ey.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp2576x4ey.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a as f64;\n        b = b as f64;\n        c = c as f64;\n\
    \    }\n    if a + c > b {\n        a = a as f64;\n        c = c as f64;\n   \
    \ }\n    if b + c > a {\n        b = b as f64;\n        c = c as f64;\n    }\n\
    \    if a + b + c > 0 {\n        let area = (a * b * c) as f64;\n        area\
    \ = area.round() as f64;\n        return area;\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6t8skp0x.rs:28:20\n   |\n\
    28 |     if a + b + c > 0 {\n   |                    ^\n   |                 \
    \   |\n   |                    expected `f64`, found integer\n   |           \
    \         help: use a float literal: `0.0`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp6t8skp0x.rs:33:5\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n33 |     -1\n   |     ^^ expected\
    \ `f64`, found integer\n   |\nhelp: use a float literal\n   |\n33 |     -1.0\n\
    \   |\nhelp: parentheses are required to parse this as an expression\n   |\n28\
    \ ~     (if a + b + c > 0 {\n29 |         let area = (a * b * c) as f64;\n30 |\
    \         area = area.round() as f64;\n31 |         return area;\n32 ~     })\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4otm3ey4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp4otm3ey4.rs:21:17\n   |\n21 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphcsyjy73.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a + b\
    \ + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpdp4r3lk_.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += (b - a) * (b - c);\n    }\n    \n    if\
    \ a > c {\n        area += (b - a) * (c - b);\n    }\n    \n    if b > c {\n \
    \       area += (b - a) * (a - c);\n    }\n    \n    area /= 2.0;\n    \n    area\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8sgj8hl9.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp8sgj8hl9.rs:25:14\n   |\n25 |\
    \         area += (b - a) * (b - c);\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmp8sgj8hl9.rs:29:14\n   |\n29 |         area += (b - a) * (c - b);\n \
    \  |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp8sgj8hl9.rs:33:14\n  \
    \ |\n33 |         area += (b - a) * (a - c);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b + c) / 2\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl_8kj5hp.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpl_8kj5hp.rs:21:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |     (a * b + c)\
    \ / 2\n   |     ^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n21 |     ((a * b + c) / 2) as f64\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphcsyjy73.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut s = 0.0;\n  \
    \  if a > b {\n        s += b - a;\n    }\n    if a > c {\n        s += c - a;\n\
    \    }\n    if b > c {\n        s += c - b;\n    }\n    \n    if s == 0.0 {\n\
    \        return 0.0\n    }\n    \n    s /= 2.0;\n    \n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqis3svhy.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpqis3svhy.rs:24:11\n   |\n24 |         s\
    \ += b - a;\n   |           ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpqis3svhy.rs:27:11\n\
    \   |\n27 |         s += c - a;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpqis3svhy.rs:30:11\n   |\n30 |         s += c - b;\n   |           ^^\
    \ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.,\n        x => if a + b > c { x } else { c },\n     \
    \   y => if a + c > b { y } else { b },\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp31c9a83.rs:14:29\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         x => if a + b > c { x } else { c },\n   |          \
    \                   ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n14 |         x => if a + b > c { x as f64 } else\
    \ { c },\n   |                             ~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpp31c9a83.rs:14:40\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n14 |         x => if\
    \ a + b > c { x } else { c },\n   |                                        ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |         x => if a + b > c { x } else { c as f64 },\n   |                \
    \                        ~~~~~~~~\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp31c9a83.rs:15:29\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         y => if a + c > b { y } else { b },\n   |   \
    \                          ^ expected `f64`, found `isize`\n   |\nhelp: you can\
    \ convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n15 |         y => if a + c > b {\
    \ y as f64 } else { b },\n   |                             ~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp31c9a83.rs:15:40\n   |\n11 | fn triangle_area(a:\
    \ isize, b: isize, c: isize) -> f64 {\n   |                                  \
    \                 --- expected `f64` because of return type\n...\n15 |       \
    \  y => if a + c > b { y } else { b },\n   |   "
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = 0.0;\n    if a + b > c {\n        area_sum += (a + b - c) * 0.5;\n    }\n\
    \    if a + c > b {\n        area_sum += (a + c - b) * 0.5;\n    }\n    if b +\
    \ c > a {\n        area_sum += (b + c - a) * 0.5;\n    }\n    area_sum\n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpr6h3uxjo.rs:14:33\n\
    \   |\n14 |         area_sum += (a + b - c) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpr6h3uxjo.rs:17:33\n   |\n17 |         area_sum\
    \ += (a + c - b) * 0.5;\n   |                                 ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpr6h3uxjo.rs:20:33\n\
    \   |\n20 |         area_sum += (b + c - a) * 0.5;\n   |                     \
    \            ^ no implementation for `isize * {float}`\n   |\n   = help: the trait\
    \ `Mul<{float}>` is not implemented for `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a +\
    \ c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    (a * b\
    \ * c) / ((a * b) + (c * c))\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.8571428571428571`,\n right: `6.0`', /tmp/tmp9zgvhmxu.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += b * b - 4 * a * c;\n    }\n    else {\n\
    \        area += a * a - 4 * b * c;\n    }\n    \n    if a > c {\n        area\
    \ += a * a - 4 * b * c;\n    }\n    else {\n        area += b * b - 4 * a * c;\n\
    \    }\n    \n    area /= 2.0;\n    \n    area = area.round();\n    \n    return\
    \ area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzter47se.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpzter47se.rs:25:14\n   |\n25 |         area\
    \ += b * b - 4 * a * c;\n   |              ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpzter47se.rs:28:14\n\
    \   |\n28 |         area += a * a - 4 * b * c;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpzter47se.rs:32:14\n   |\n32 |         area += a * a - 4 * b * c;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpzter47se.rs:35:14\n  \
    \ |\n35 |         area += b * b - 4 * a * c;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmpzter47se.rs:40:17\n   |\n40 |     area\
    \ = area.round();\n   |                 ^^^^^\n   |\nhelp: you must specify a\
    \ type for this binding, like `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n\
    \   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 6 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        2 => a,\n        _ => a,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmp4yjc51n3.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         2 => a,\n\
    \   | |              ^ expected `f64`, found `isize`\n16 | |         _ => a,\n\
    17 | |     }\n   | |_____- `match` arms have incompatible types\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n15 |         2 => a as f64,\n  \
    \ |              ~~~~~~~~\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z\
    \ = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n \
    \   let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n\
    \    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut\
    \ v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n\
    \    let mut z = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut\
    \ u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n\
    \    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n    let mut\
    \ t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n\
    \    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpctes13xn.rs:86:1\n  \
    \ |\n86 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    a + b + c\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdnau9ijg.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdnau9ijg.rs:21:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n21 |     (a + b + c) as f64\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp_slkik3v.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_slkik3v.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:22:17\n   |\n22 |     area\
    \ = area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:25:17\n\
    \   |\n25 |     area = area + (c * b) - (a * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    \n    if a + b > c {\n        s = 0.0;\n    } else {\n\
    \        s = (a * b) / c;\n    }\n    \n    if a + c > b {\n        t = 0.0;\n\
    \    } else {\n        t = (c * a) / b;\n    }\n    \n    if b + c > a {\n   \
    \     u = 0.0;\n    } else {\n        u = (a * b) / c;\n    }\n    \n    if a\
    \ + b > c {\n        v = 0.0;\n    } else {\n        v = (c * a) / b;\n    }\n\
    \    \n    if b + c > a {\n        w = 0.0;\n    } else {\n        w = (a * b)\
    \ / c;\n    }\n    \n    if s + t + u + v + w > 0.0 {\n        return s * t +\
    \ u * v + w * s\n    } else {\n        return -1.0;\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp__c9_y93.rs:21:13\n   |\n\
    21 |         s = (a * b) / c;\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp__c9_y93.rs:27:13\n\
    \   |\n27 |         t = (c * a) / b;\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp__c9_y93.rs:33:13\n\
    \   |\n33 |         u = (a * b) / c;\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp__c9_y93.rs:39:13\n\
    \   |\n39 |         v = (c * a) / b;\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp__c9_y93.rs:45:13\n\
    \   |\n45 |         w = (a * b) / c;\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 5 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += b * b - 4 * a * c;\n    }\n    if a > c\
    \ {\n        area += a * c - 4 * a * b;\n    }\n    if b > c {\n        area +=\
    \ a * c - b * b + 4 * a * a;\n    }\n    \n    if area < 0.0 {\n        area =\
    \ 0.0;\n    }\n    \n    area /= 2.0;\n    \n    area\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq_zqrces.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpq_zqrces.rs:25:14\n   |\n25 |\
    \         area += b * b - 4 * a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpq_zqrces.rs:28:14\n   |\n28 |         area += a * c - 4 * a * b;\n \
    \  |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpq_zqrces.rs:31:14\n  \
    \ |\n31 |         area += a * c - b * b + 4 * a * a;\n   |              ^^ no\
    \ implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += b * (c - a);\n    }\n    if a > c {\n \
    \       area += c * (b - a);\n    }\n    if b > c {\n        area += a * (c -\
    \ b);\n    }\n    \n    area = area.round() as f64;\n    \n    return area;\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6q1a34wd.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp6q1a34wd.rs:25:14\n   |\n25 |\
    \         area += b * (c - a);\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmp6q1a34wd.rs:28:14\n   |\n28 |         area += c * (b - a);\n   |   \
    \           ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp6q1a34wd.rs:31:14\n   |\n31 |\
    \         area += a * (c - b);\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmp6q1a34wd.rs:34:17\n   |\n34 |     area = area.round()\
    \ as f64;\n   |                 ^^^^^\n   |\nhelp: you must specify a type for\
    \ this binding, like `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |    \
    \     ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome errors\
    \ have detailed explanations: E0277, E0308, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        a + b + c\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgxddn0w9.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgxddn0w9.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         (a + b + c) as f64\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a < b {\n        area += a * b;\n    }\n    \n    if a < c {\n \
    \       area += a * c;\n    }\n    \n    if b < c {\n        area += b * c;\n\
    \    }\n    \n    area / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5e4467x8.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmp5e4467x8.rs:25:14\n   |\n25 |         area\
    \ += a * b;\n   |              ^^ no implementation for `{float} += isize`\n \
    \  |\n   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmp5e4467x8.rs:29:14\n\
    \   |\n29 |         area += a * c;\n   |              ^^ no implementation for\
    \ `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmp5e4467x8.rs:33:14\n   |\n33 |         area += b * c;\n   |         \
    \     ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n\nerror: aborting due to\
    \ 4 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a + b > c {\n        area = area + (a - b) * (c - a);\n    }\n \
    \   if a + c > b {\n        area = area + (a - b) * (b - c);\n    }\n    if b\
    \ + c > a {\n        area = area + (b - a) * (c - b);\n    }\n    \n    area =\
    \ area / 2.0;\n    \n    area = area.round();\n    \n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9rahylye.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp9rahylye.rs:25:21\n   |\n25 |      \
    \   area = area + (a - b) * (c - a);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp9rahylye.rs:28:21\n\
    \   |\n28 |         area = area + (a - b) * (b - c);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmp9rahylye.rs:31:21\n   |\n31 |         area = area + (b - a) * (c\
    \ - b);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0689]: can't call method `round` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmp9rahylye.rs:36:17\n   |\n36 |     area = area.round();\n   |  \
    \               ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s = 0.0;\n\
    \    if a > b {\n        s += (a - b) * (b - c);\n    }\n    if a > c {\n    \
    \    s += (a - c) * (c - b);\n    }\n    if b > c {\n        s += (b - c) * (c\
    \ - a);\n    }\n    \n    s / (a + b + c)\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp101lilqy.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp101lilqy.rs:24:11\n   |\n24 |\
    \         s += (a - b) * (b - c);\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmp101lilqy.rs:27:11\n   |\n27 |         s += (a - c) * (c - b);\n   |\
    \           ^^ no implementation for `{float} += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmp101lilqy.rs:30:11\n   |\n30 |\
    \         s += (b - c) * (c - a);\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmp101lilqy.rs:33:7\n\
    \   |\n33 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /\
    \ isize`\n   |\n   = help: the trait `Div<isize>` is not implemented for `{float}`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / 3.0,\n\
    \    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpfg80fudh.rs:15:24\n\
    \   |\n15 |         _ => a * b * c / 3.0,\n   |                        ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4otm3ey4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp4otm3ey4.rs:21:17\n   |\n21 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c * a) / 2.0\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwxjt_tvj.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpwxjt_tvj.rs:21:21\n   |\n21 |   \
    \  (a * b + c * a) / 2.0\n   |                     ^ no implementation for `isize\
    \ / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented for\
    \ `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n   \
    \ if a > b {\n        s += a * b / c;\n    }\n    if a > c {\n        s += a *\
    \ c / b;\n    }\n    if b > c {\n        s += b * c / a;\n    }\n    s * 0.5\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwlubjl_2.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpwlubjl_2.rs:23:11\n   |\n23 |\
    \         s += a * b / c;\n   |           ^^ no implementation for `{float} +=\
    \ isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented for\
    \ `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwlubjl_2.rs:26:11\n\
    \   |\n26 |         s += a * c / b;\n   |           ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpwlubjl_2.rs:29:11\n   |\n29 |         s += b * c / a;\n   |        \
    \   ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    a + b + c\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.0`,\n right: `6.0`', /tmp/tmpy_qu4k6j.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z\
    \ = 0.0;\n    let mut a = a as f64;\n    let mut b = b as f64;\n    let mut c\
    \ = c as f64;\n    if a + b > c {\n        s += c;\n        t = b;\n    } else\
    \ {\n        s += a;\n        t = c;\n    }\n    if a + c > b {\n        s +=\
    \ b;\n        t = c;\n    } else {\n        s += a;\n        t = b;\n    }\n \
    \   if b + c > a {\n        s += c;\n        t = a;\n    } else {\n        s +=\
    \ b;\n        t = a;\n    }\n    if a + b > c {\n        s += c;\n        t =\
    \ b;\n    } else {\n        s += a;\n        t = c;\n    }\n    if a + c > b {\n\
    \        s += b;\n        t = c;\n    } else {\n        s += a;\n        t = b;\n\
    \    }\n    if b + c > a {\n        s += c;\n        t = a;\n    } else {\n  \
    \      s += b;\n        t = a;\n    }\n    if a + b > c {\n        s += c;\n \
    \       t = b;\n    } else {\n        s += a;\n        t = c;\n    }\n    if a\
    \ + c > b {\n        s += b;\n        t = c;\n    } else {\n        s += a;\n\
    \        t = b;\n    }\n    if b + c > a {\n        s += c;\n        t = a;\n\
    \    } else {\n        s += b;\n        t = a;\n    }\n    if a + b > c {\n  \
    \      s += c;\n        t = b;\n    } else {\n        s += a;\n        t = c;\n\
    \    }\n    if a + c > b {\n        s += b;\n        t = c;\n    } else {\n  \
    \      s += a;\n        t = b;\n    }\n    if b + c > a {\n        s += c;\n \
    \       t = a;\n    } else {\n        s += b;\n        t = a;\n    }\n    if a\
    \ + b > c {\n        s += c;\n        t = b;\n    } else {\n        s += a;\n\
    \        t = c;\n    }\n    if a + c > b {\n        s += b;\n        t = c;\n\
    \    } else {\n        s += a;\n        t = b;\n    }\n    if b + c > a {\n  \
    \      s += c;\n        t = a;\n    } else {\n        s += b;\n        t = a;\n\
    \    }\n    if a + b > c {\n        s += c;\n        t = b;\n    } else {\n  \
    \      s += a;\n        t = c;\n    }\n    if a + c > b {\n        s += b;\n \
    \       t = c;\n    } else {\n        s += a;\n        t = b;\n    }\n    if \n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `}`\n   --> /tmp/tmpqv8h8cxv.rs:143:1\n\
    \    |\n143 | }\n    | ^ expected expression\n\nerror: aborting due to previous\
    \ error\n\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    area = area + (b * b);\n    area = area + (c * c);\n    area = area\
    \ + (a * a);\n    \n    area = area.sqrt();\n    area = area.round();\n    \n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_sfskco5.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `{float}`\n  --> /tmp/tmp_sfskco5.rs:24:17\n   |\n24 |     area =\
    \ area + (b * b);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_sfskco5.rs:25:17\n\
    \   |\n25 |     area = area + (c * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_sfskco5.rs:26:17\n\
    \   |\n26 |     area = area + (a * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `sqrt` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmp_sfskco5.rs:28:17\n   |\n28 |     area = area.sqrt();\n\
    \   |                 ^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror[E0689]: can't call method `round` on ambiguous numeric type `{float}`\n\
    \  --> /tmp/tmp_sfskco5.rs:29:17\n   |\n29 |     area = area.round();\n   |  \
    \               ^^^^^\n   |\nhelp: you must specify a type for this binding, like\
    \ `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 6 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    s / 2.0\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmphcsyjy73.rs:19:7\n\
    \   |\n19 |     s / 2.0\n   |       ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c * a) * (a +\
    \ b + c) * (a + c + b)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp3_0vi2tr.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp3_0vi2tr.rs:21:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |     (a * b + c\
    \ * a) * (a + b + c) * (a + c + b)\n   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n21 |     ((a * b + c * a) * (a + b + c) * (a + c + b)) as f64\n\
    \   |\n\nerror: aborting due to 2 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        a + b + c\n    }\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgxddn0w9.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgxddn0w9.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         a + b + c\n   |         ^^^^^^^^^ expected `f64`,\
    \ found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |         (a + b + c) as f64\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmplhj6nxg5.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmplhj6nxg5.rs:22:12\n   |\n22 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => a * b * c / (a + b\
    \ + c),\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpdp4r3lk_.rs:15:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         _ => a *\
    \ b * c / (a + b + c),\n   | |              ^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`,\
    \ found `isize`\n16 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n15 |         _ =>\
    \ (a * b * c / (a + b + c)) as f64,\n   |              ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.,\n        _ => if a + b > c { c } else { b },\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpttc2bgmj.rs:14:29\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n14 |         _ => if a + b > c { c } else { b },\n   |          \
    \                   ^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n14 |         _ => if a + b > c { c as f64 } else\
    \ { b },\n   |                             ~~~~~~~~\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpttc2bgmj.rs:14:40\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n14 |         _ => if\
    \ a + b > c { c } else { b },\n   |                                        ^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    14 |         _ => if a + b > c { c } else { b as f64 },\n   |                \
    \                        ~~~~~~~~\n\nerror: aborting due to 2 previous errors\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = b - c;\n    }\n    if a + c > b {\n        b = c - a;\n\
    \    }\n    if b + c > a {\n        c = a - b;\n    }\n    (a * b * c) / ((a *\
    \ b) + c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-2.2222222222222223`,\n right: `6.0`', /tmp/tmpcpwb31di.rs:29:5\nnote: run\
    \ with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut s = (a +\
    \ b + c) / 2;\n    let mut area = 0.0;\n    \n    if s > 0 {\n        area +=\
    \ s / a;\n    }\n    \n    if s > 1 {\n        area += s / b;\n    }\n    \n \
    \   if s > 2 {\n        area += s / c;\n    }\n    \n    area as f64\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpzl_e8k_4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpzl_e8k_4.rs:26:14\n   |\n26 |\
    \         area += s / a;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpzl_e8k_4.rs:30:14\n   |\n30 |         area += s / b;\n   |         \
    \     ^^ no implementation for `{float} += isize`\n   |\n   = help: the trait\
    \ `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `{float}`\n  --> /tmp/tmpzl_e8k_4.rs:34:14\n   |\n34 |\
    \         area += s / c;\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    if a + b > c {\n        s = b * b - c;\n   \
    \ } else {\n        s = a * a - b * b;\n    }\n    if s > 0.0 {\n        t = s\
    \ / 2.0;\n    }\n    if t > 0.0 {\n        return t * sqrt(t);\n    } else {\n\
    \        return -1.0;\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `sqrt` in this scope\n  --> /tmp/tmpa4vrrkb_.rs:23:20\n\
    \   |\n23 |         return t * sqrt(t);\n   |                    ^^^^ not found\
    \ in this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vrrkb_.rs:15:13\n\
    \   |\n15 |         s = b * b - c;\n   |             ^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpa4vrrkb_.rs:17:13\n\
    \   |\n17 |         s = a * a - b * b;\n   |             ^^^^^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (b * c);\n    area = area + (a * c);\n    area = area + (a\
    \ * b);\n    area = area - (a * b) - (b * a);\n    area = area / 2.0;\n    area\
    \ = f64::round(area * 100.0) / 100.0;\n    return area;\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqe73ix05.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpqe73ix05.rs:22:17\n   |\n22 |     area\
    \ = area + (b * c);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpqe73ix05.rs:23:17\n\
    \   |\n23 |     area = area + (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpqe73ix05.rs:24:17\n\
    \   |\n24 |     area = area + (a * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot subtract `isize` from `{float}`\n  -->\
    \ /tmp/tmpqe73ix05.rs:25:17\n   |\n25 |     area = area - (a * b) - (b * a);\n\
    \   |                 ^ no implementation for `{float} - isize`\n   |\n   = help:\
    \ the trait `Sub<isize>` is not implemented for `{float}`\n\nerror: aborting due\
    \ to 5 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += (b - c) * (a + b - c);\n    }\n    \n \
    \   if a > c {\n        area += (b - a) * (a + c - b);\n    }\n    \n    if b\
    \ > c {\n        area += (c - a) * (b + c - a);\n    }\n    \n    area /= 2.0;\n\
    \    \n    area = area.round();\n    \n    return area;\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu2rjewyc.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpu2rjewyc.rs:25:14\n   |\n25 |         area\
    \ += (b - c) * (a + b - c);\n   |              ^^ no implementation for `{float}\
    \ += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n  -->\
    \ /tmp/tmpu2rjewyc.rs:29:14\n   |\n29 |         area += (b - a) * (a + c - b);\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpu2rjewyc.rs:33:14\n  \
    \ |\n33 |         area += (c - a) * (b + c - a);\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmpu2rjewyc.rs:38:17\n   |\n38 |     area\
    \ = area.round();\n   |                 ^^^^^\n   |\nhelp: you must specify a\
    \ type for this binding, like `f32`\n   |\n22 |     let mut area: f32 = 0.0;\n\
    \   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sof1yps.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1sof1yps.rs:23:12\n   |\n23 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n23 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        2 => 1.0,\n        3 =>\
    \ a,\n        4 => b,\n        5 => c,\n        6 => a + b,\n        7 => a +\
    \ c,\n        8 => b + c,\n        _ => -1.0,\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `match` arms have incompatible types\n  --> /tmp/tmpxjomz728.rs:16:14\n\
    \   |\n12 | /     match a + b + c {\n13 | |         0 => 0.0,\n   | |        \
    \      --- this is found to be of type `f64`\n14 | |         1 => 1.0,\n   | |\
    \              --- this is found to be of type `f64`\n15 | |         2 => 1.0,\n\
    \   | |              --- this is found to be of type `f64`\n16 | |         3 =>\
    \ a,\n   | |              ^ expected `f64`, found `isize`\n...  |\n22 | |    \
    \     _ => -1.0,\n23 | |     }\n   | |_____- `match` arms have incompatible types\n\
    \   |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |         3 =>\
    \ a as f64,\n   |              ~~~~~~~~\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        1 => 1.0,\n        _ => match a + b {\n  \
    \          a if a > c => 0.0,\n            b if b > c => 1.0,\n            _ =>\
    \ 2.0 * (a + b + c) / 3.0,\n        },\n    }\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `{float}` by `isize`\n  --> /tmp/tmp1ucpf0_y.rs:18:22\n\
    \   |\n18 |             _ => 2.0 * (a + b + c) / 3.0,\n   |                  \
    \    ^ no implementation for `{float} * isize`\n   |\n   = help: the trait `Mul<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        _ => if a + b > c { \n            a / b +\
    \ c / a \n        } else {\n            c / a + b / c \n        },\n    }\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdkpoau_v.rs:15:13\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n15 |             a / b + c / a \n   |             ^^^^^^^^^^^^^ expected\
    \ `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing\
    \ the floating point representation of the integer, rounded if necessary\n   |\n\
    15 |             (a / b + c / a) as f64 \n   |\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpdkpoau_v.rs:17:13\n   |\n11 | fn triangle_area(a: isize, b: isize,\
    \ c: isize) -> f64 {\n   |                                                   ---\
    \ expected `f64` because of return type\n...\n17 |             c / a + b / c \n\
    \   |             ^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you\
    \ can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n17 |             (c / a + b / c)\
    \ as f64 \n   |\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        (a * b + c) / 2.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0azvoay2.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp0azvoay2.rs:15:21\n\
    \   |\n15 |         (a * b + c) / 2.0\n   |                     ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    use std::f64::consts::PI;\n\
    \    use std::f64::consts::E;\n    use std::f64::consts::NAN;\n    use std::f64::consts::INFINITY;\n\
    \    use std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n\
    \    use std::f64::consts::NAN;\n    use std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n\
    \    use std::f64::consts::INFINITY;\n    use std::f64::consts::NAN;\n    use\
    \ std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n    use\
    \ std::f64::consts::INFINITY;\n    use std::f64::consts::NAN;\n    use std::f64::consts::EPSILON;\n\
    \    use std::f64::consts::MINUS_INFINITY;\n    use std::f64::consts::INFINITY;\n\
    \    use std::f64::consts::NAN;\n    use std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n\
    \    use std::f64::consts::INFINITY;\n    use std::f64::consts::NAN;\n    use\
    \ std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n    use\
    \ std::f64::consts::INFINITY;\n    use std::f64::consts::NAN;\n    use std::f64::consts::EPSILON;\n\
    \    use std::f64::consts::MINUS_INFINITY;\n    use std::f64::consts::INFINITY;\n\
    \    use std::f64::consts::NAN;\n    use std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n\
    \    use std::f64::consts::INFINITY;\n    use std::f64::consts::NAN;\n    use\
    \ std::f64::consts::EPSILON;\n    use std::f64::consts::MINUS_INFINITY;\n    use\
    \ std::f64::consts::INFINITY;\n    use std::f64::consts::NAN;\n    use std::f64::consts::EPSILON;\n\
    \    use std::f64::consts::MINUS_INFINITY;\n    use std::\n}\n\nfn main() {\n\
    \    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found `}`\n  --> /tmp/tmpxep7g8aj.rs:54:1\n\
    \   |\n54 | }\n   | ^ expected identifier\n\nerror[E0432]: unresolved import `std::f64::consts::NAN`\n\
    \  --> /tmp/tmpxep7g8aj.rs:14:9\n   |\n14 |     use std::f64::consts::NAN;\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^^ no `NAN` in `f64::consts`\n\nerror[E0432]:\
    \ unresolved import `std::f64::consts::INFINITY`\n  --> /tmp/tmpxep7g8aj.rs:15:9\n\
    \   |\n15 |     use std::f64::consts::INFINITY;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ no `INFINITY` in `f64::consts`\n\nerror[E0432]: unresolved import `std::f64::consts::EPSILON`\n\
    \  --> /tmp/tmpxep7g8aj.rs:16:9\n   |\n16 |     use std::f64::consts::EPSILON;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ no `EPSILON` in `f64::consts`\n\nerror[E0432]:\
    \ unresolved import `std::f64::consts::MINUS_INFINITY`\n  --> /tmp/tmpxep7g8aj.rs:17:9\n\
    \   |\n17 |     use std::f64::consts::MINUS_INFINITY;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ no `MINUS_INFINITY` in `f64::consts`\n\nerror[E0432]: unresolved import `std::f64::consts::NAN`\n\
    \  --> /tmp/tmpxep7g8aj.rs:18:9\n   |\n18 |     use std::f64::consts::NAN;\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^^ no `NAN` in `f64::consts`\n\nerror[E0432]:\
    \ unresolved import `std::f64::consts::EPSILON`\n  --> /tmp/tmpxep7g8aj.rs:19:9\n\
    \   |\n19 |     use std::f64::consts::EPSILON;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ no `EPSILON` in `f64::consts`\n\nerror[E0432]: unresolved import `std::f64::consts::MINUS_INFINITY`\n\
    \  --> /tmp/tmpxep7g8aj.rs:20:9\n   |\n20 |     use std::f64::consts::MINUS_INFINITY;\n\
    \   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no `MINUS_INFINITY` in `f64::consts`\n\
    \nerror[E0432]: unresolved import `std::f64::consts::INFINITY`\n  --> /tmp/tmpxep7g8aj.rs:21:9\n\
    \   |\n21 |     use std::f64::consts::INFINITY;\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ no `INFINITY` in `f64::consts`\n\nerror[E0432]: unresolved import `std::f64::consts::NAN`\n\
    \  --> /tmp/tmpxep7g8aj.rs:22:9\n   |\n22 |     use std::f64::consts::NAN;\n \
    \  |         ^^^^^^^^^^^^^^^^^^^^^ no `NAN` in `f64::consts`\n\nerror[E0432]:\
    \ unresolved import `std::f64::consts::EPSILON`\n  --> /tm"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n   \
    \ let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z\
    \ = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n \
    \   let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n\
    \    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut\
    \ x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n\
    \    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut\
    \ w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n\
    \    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut\
    \ v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n\
    \    let mut z = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut\
    \ u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n\
    \    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n    let mut\
    \ t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w = 0.0;\n\
    \    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n    let mut\
    \ s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n\
    \    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut\
    \ z = 0.0;\n    let mut s = 0.0;\n    let mut t = 0.0;\n    let mut u = 0.0;\n\
    \    let mut v = 0.0;\n    let mut w = 0.0;\n    let mut x = 0.0;\n    let mut\
    \ y = 0.0;\n    let mut z = 0.0;\n    let mut s = 0.0;\n    let \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmpctes13xn.rs:86:1\n  \
    \ |\n86 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n   \
    \ let mut t = 0.0;\n    let mut u = 0.0;\n    let mut v = 0.0;\n    let mut w\
    \ = 0.0;\n    let mut x = 0.0;\n    let mut y = 0.0;\n    let mut z = 0.0;\n \
    \   let mut u1 = 0.0;\n    let mut v1 = 0.0;\n    let mut w1 = 0.0;\n    let mut\
    \ x1 = 0.0;\n    let mut y1 = 0.0;\n    let mut z1 = 0.0;\n    let mut u2 = 0.0;\n\
    \    let mut v2 = 0.0;\n    let mut w2 = 0.0;\n    let mut x2 = 0.0;\n    let\
    \ mut y2 = 0.0;\n    let mut z2 = 0.0;\n    let mut u3 = 0.0;\n    let mut v3\
    \ = 0.0;\n    let mut w3 = 0.0;\n    let mut x3 = 0.0;\n    let mut y3 = 0.0;\n\
    \    let mut z3 = 0.0;\n    let mut u4 = 0.0;\n    let mut v4 = 0.0;\n    let\
    \ mut w4 = 0.0;\n    let mut x4 = 0.0;\n    let mut y4 = 0.0;\n    let mut z4\
    \ = 0.0;\n    let mut u5 = 0.0;\n    let mut v5 = 0.0;\n    let mut w5 = 0.0;\n\
    \    let mut x5 = 0.0;\n    let mut y5 = 0.0;\n    let mut z5 = 0.0;\n    let\
    \ mut u6 = 0.0;\n    let mut v6 = 0.0;\n    let mut w6 = 0.0;\n    let mut x6\
    \ = 0.0;\n    let mut y6 = 0.0;\n    let mut z6 = 0.0;\n    let mut u7 = 0.0;\n\
    \    let mut v7 = 0.0;\n    let mut w7 = 0.0;\n    let mut x7 = 0.0;\n    let\
    \ mut y7 = 0.0;\n    let mut z7 = 0.0;\n    let mut u8 = 0.0;\n    let mut v8\
    \ = 0.0;\n    let mut w8 = 0.0;\n    let mut x8 = 0.0;\n    let mut y8 = 0.0;\n\
    \    let mut z8 = 0.0;\n    let mut u9 = 0.0;\n    let mut v9 = 0.0;\n    let\
    \ mut w9 = 0.0;\n    let mut x9 = 0.0;\n    let mut y9 = 0.0;\n    let mu\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpt9x23mgu.rs:82:11\n   |\n\
    82 |     let mu\n   |           ^ help: add `;` here\n83 | }\n   | - unexpected\
    \ token\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpt9x23mgu.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt9x23mgu.rs:11:51\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |    -------------                        \
    \          ^^^ expected `f64`, found `()`\n   |    |\n   |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 3 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s = s + (b - c) * (b - a);\n    }\n    if\
    \ a + c > b {\n        s = s + (c - b) * (c - a);\n    }\n    if b + c > a {\n\
    \        s = s + (a - b) * (a - c);\n    }\n    s * 0.5\n}\n\nfn main() {\n  \
    \  let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptvl6jcky.rs:14:15\n\
    \   |\n14 |         s = s + (b - c) * (b - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptvl6jcky.rs:17:15\n\
    \   |\n17 |         s = s + (c - b) * (c - a);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmptvl6jcky.rs:20:15\n\
    \   |\n20 |         s = s + (a - b) * (a - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s = s + (c - b) * (a - b) / (a - c);\n   \
    \ }\n    if a + c > b {\n        s = s + (b - c) * (a - c) / (a - b);\n    }\n\
    \    if b + c > a {\n        s = s + (c - a) * (b - a) / (b - c);\n    }\n   \
    \ s\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpt9rbykxj.rs:14:15\n\
    \   |\n14 |         s = s + (c - b) * (a - b) / (a - c);\n   |               ^\
    \ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmpt9rbykxj.rs:17:15\n   |\n17 |         s = s + (b - c) * (a - c)\
    \ / (a - b);\n   |               ^ no implementation for `{float} + isize`\n \
    \  |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add `isize` to `{float}`\n  --> /tmp/tmpt9rbykxj.rs:20:15\n   |\n20 |\
    \         s = s + (c - a) * (b - a) / (b - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area = area + (a - b) * (b - c);\n    }\n    else\
    \ {\n        area = area + (b - a) * (c - b);\n    }\n    \n    if a > c {\n \
    \       area = area + (a - c) * (c - b);\n    }\n    else {\n        area = area\
    \ + (c - a) * (b - c);\n    }\n    \n    area = area / 2.0;\n    \n    area =\
    \ round(area, 2);\n    \n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp8tqi_8ka.rs:40:12\n\
    \   |\n40 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp8tqi_8ka.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp8tqi_8ka.rs:25:21\n   |\n25 |      \
    \   area = area + (a - b) * (b - c);\n   |                     ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8tqi_8ka.rs:28:21\n\
    \   |\n28 |         area = area + (b - a) * (c - b);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmp8tqi_8ka.rs:32:21\n   |\n32 |         area = area + (a - c) * (c\
    \ - b);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp8tqi_8ka.rs:35:21\n\
    \   |\n35 |         area = area + (c - a) * (b - c);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror: aborting due to 6 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum:\
    \ f64 = 0.0;\n    \n    if a + b > c {\n        sum = a + b - c;\n    } else {\n\
    \        sum = a + c;\n    }\n    \n    if a + c > b {\n        sum += c;\n  \
    \  } else {\n        sum += b;\n    }\n    \n    sum\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp_bzbi7nx.rs:15:15\n   |\n\
    15 |         sum = a + b - c;\n   |               ^^^^^^^^^ expected `f64`, found\
    \ `isize`\n   |\nhelp: you can convert an `isize` to an `f64`, producing the floating\
    \ point representation of the integer, rounded if necessary\n   |\n15 |      \
    \   sum = (a + b - c) as f64;\n   |               ~~~~~~~~~~~~~~~~~~\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp_bzbi7nx.rs:17:15\n   |\n17 |         sum =\
    \ a + c;\n   |               ^^^^^ expected `f64`, found `isize`\n   |\nhelp:\
    \ you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n17 |         sum = (a + c) as f64;\n\
    \   |               ~~~~~~~~~~~~~~\n\nerror[E0277]: cannot add-assign `isize`\
    \ to `f64`\n  --> /tmp/tmp_bzbi7nx.rs:21:13\n   |\n21 |         sum += c;\n  \
    \ |             ^^ no implementation for `f64 += isize`\n   |\n   = help: the\
    \ trait `AddAssign<isize>` is not implemented for `f64`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmp_bzbi7nx.rs:23:13\n   |\n23 |   \
    \      sum += b;\n   |             ^^ no implementation for `f64 += isize`\n \
    \  |\n   = help: the trait `AddAssign<isize>` is not implemented for `f64`\n\n\
    error: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + b * (c - a + b) / 2.0;\n \
    \   }\n    if a + c > b {\n        area = area + c * (b - a + c) / 2.0;\n    }\n\
    \    if b + c > a {\n        area = area + a * (c - b + a) / 2.0;\n    }\n   \
    \ area\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmp4l6logbf.rs:14:39\n\
    \   |\n14 |         area = area + b * (c - a + b) / 2.0;\n   |               \
    \                        ^ no implementation for `isize / {float}`\n   |\n   =\
    \ help: the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmp4l6logbf.rs:17:39\n   |\n\
    17 |         area = area + c * (b - a + c) / 2.0;\n   |                      \
    \                 ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmp4l6logbf.rs:20:39\n   |\n20 |   \
    \      area = area + a * (c - b + a) / 2.0;\n   |                            \
    \           ^ no implementation for `isize / {float}`\n   |\n   = help: the trait\
    \ `Div<{float}>` is not implemented for `isize`\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    if s == 1 {\n        return 1.0;\n    }\n    if s ==\
    \ 2 {\n        return 2.0;\n    }\n    if s == 3 {\n        return 3.0;\n    }\n\
    \    if s == 4 {\n        return 4.0;\n    }\n    if s == 5 {\n        return\
    \ 5.0;\n    }\n    if s == 6 {\n        return 6.0;\n    }\n    if s == 7 {\n\
    \        return 7.0;\n    }\n    if s == 8 {\n        return 8.0;\n    }\n   \
    \ if s == 9 {\n        return 9.0;\n    }\n    if s == 10 {\n        return 10.0;\n\
    \    }\n    if s == 11 {\n        return 11.0;\n    }\n    if s == 12 {\n    \
    \    return 12.0;\n    }\n    if s == 13 {\n        return 13.0;\n    }\n    if\
    \ s == 14 {\n        return 14.0;\n    }\n    if s == 15 {\n        return 15.0;\n\
    \    }\n    if s == 16 {\n        return 16.0;\n    }\n    if s == 17 {\n    \
    \    return 17.0;\n    }\n    if s == 18 {\n        return 18.0;\n    }\n    if\
    \ s == 19 {\n        return 19.0;\n    }\n    if s == 20 {\n        return 20.0;\n\
    \    }\n    if s == 21 {\n        return 21.0;\n    }\n    if s == 22 {\n    \
    \    return 22.0;\n    }\n    if s == 23 {\n        return 23.0;\n    }\n    if\
    \ s == 24 {\n        return 24.0;\n    }\n    if s == 25 {\n        return 25.0;\n\
    \    }\n    if s == 26 {\n        return 26.0;\n    }\n    if s == 27 {\n    \
    \    return 27.0;\n    }\n    if s == 28 {\n        return 28.0;\n    }\n    if\
    \ s == 29 {\n        return 29.0;\n    }\n    if s == 30 {\n        return 30.0;\n\
    \    }\n    if s == 31 {\n        return 31.0;\n    }\n    if s == 32 {\n    \
    \    return 32.0;\n    }\n    if s == 33 {\n        return 33.0;\n    }\n    if\
    \ s == 34 {\n        return 34.0;\n    }\n    if s == 35 {\n        return 35.0;\n\
    \    }\n    if s == 36 {\n        return 36.0;\n    }\n    if s == 37 {\n    \
    \    return 37.0;\n    }\n    if s == 38 {\n        return 38.0;\n    }\n    if\
    \ s == 39 {\n        return 39.0;\n    }\n    if s == 40 {\n        return 40.0;\n\
    \    }\n    if s == 41 {\n        return 41.0;\n    }\n    if s == 42 {\n    \
    \    return 42.0;\n    }\n    if s == 43 {\n        return 43.0;\n    }\n    if\
    \ s == 44 {\n        return 44.0;\n\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmpf_txezi7.rs:164:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n148 |     if s == 44 {\n    |                - this delimiter might not be\
    \ properly closed...\n...\n151 | }\n    | - ...as it matches this but it has different\
    \ indentation\n...\n164 | }\n    |   ^\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpf_txezi7.rs:11:51\n   |\n11 | fn triangle_area(a: isize, b: isize, c:\
    \ isize) -> f64 {\n   |    -------------                                  ^^^\
    \ expected `f64`, found `()`\n   |    |\n   |    implicitly returns `()` as its\
    \ body has no tail or `return` expression\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    (a * b + c) / 2.0\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4otm3ey4.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot divide\
    \ `isize` by `{float}`\n  --> /tmp/tmp4otm3ey4.rs:21:17\n   |\n21 |     (a * b\
    \ + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area = 0.0;\n\
    \    \n    if a > b {\n        area += b * b - 4 * a * c;\n    }\n    if a > c\
    \ {\n        area += c * c - 4 * a * b;\n    }\n    if b > c {\n        area +=\
    \ a * a - 4 * b * c;\n    }\n    \n    if area < 0.0 {\n        area = 0.0;\n\
    \    }\n    \n    area = round(area / 2.0);\n    \n    return area;\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpwndaqeaf.rs:38:12\n\
    \   |\n38 |     area = round(area / 2.0);\n   |            ^^^^^ not found in\
    \ this scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpwndaqeaf.rs:13:16\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n12 |     if a + b > c {\n13 |         return -1;\n   |        \
    \        ^^\n   |                |\n   |                expected `f64`, found\
    \ integer\n   |                help: use a float literal: `-1.0`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwndaqeaf.rs:25:14\n  \
    \ |\n25 |         area += b * b - 4 * a * c;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror[E0277]: cannot add-assign `isize` to `{float}`\n\
    \  --> /tmp/tmpwndaqeaf.rs:28:14\n   |\n28 |         area += c * c - 4 * a * b;\n\
    \   |              ^^ no implementation for `{float} += isize`\n   |\n   = help:\
    \ the trait `AddAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]:\
    \ cannot add-assign `isize` to `{float}`\n  --> /tmp/tmpwndaqeaf.rs:31:14\n  \
    \ |\n31 |         area += a * a - 4 * b * c;\n   |              ^^ no implementation\
    \ for `{float} += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not\
    \ implemented for `{float}`\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0277, E0308, E0425.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area_sum\
    \ = 0.0;\n    let mut area_product = 0.0;\n    let mut area_product2 = 0.0;\n\
    \    let mut area_product3 = 0.0;\n    let mut area_product4 = 0.0;\n    let mut\
    \ area_product5 = 0.0;\n    let mut area_product6 = 0.0;\n    let mut area_product7\
    \ = 0.0;\n    let mut area_product8 = 0.0;\n    let mut area_product9 = 0.0;\n\
    \    let mut area_product10 = 0.0;\n    let mut area_product11 = 0.0;\n    let\
    \ mut area_product12 = 0.0;\n    let mut area_product13 = 0.0;\n    let mut area_product14\
    \ = 0.0;\n    let mut area_product15 = 0.0;\n    let mut area_product16 = 0.0;\n\
    \    let mut area_product17 = 0.0;\n    let mut area_product18 = 0.0;\n    let\
    \ mut area_product19 = 0.0;\n    let mut area_product20 = 0.0;\n    let mut area_product21\
    \ = 0.0;\n    let mut area_product22 = 0.0;\n    let mut area_product23 = 0.0;\n\
    \    let mut area_product24 = 0.0;\n    let mut area_product25 = 0.0;\n    let\
    \ mut area_product26 = 0.0;\n    let mut area_product27 = 0.0;\n    let mut area_product28\
    \ = 0.0;\n    let mut area_product29 = 0.0;\n    let mut area_product30 = 0.0;\n\
    \    let mut area_product31 = 0.0;\n    let mut area_product32 = 0.0;\n    let\
    \ mut area_product33 = 0.0;\n    let mut area_product34 = 0.0;\n    let mut area_product35\
    \ = 0.0;\n    let mut area_product36 = 0.0;\n    let mut area_product37 = 0.0;\n\
    \    let mut area_product38 = 0.0;\n    let mut area_product39 = 0.0;\n    let\
    \ mut area_product40 = 0.0;\n    let mut area_product41 = 0.0;\n    let mut area_product42\
    \ = 0.0;\n    let mut area_product43 = 0.0;\n    let mut area_product44 = 0.0;\n\
    \    let mut area_product45 = 0.0;\n    let mut area_product46 = 0.0;\n    let\
    \ mut area_product47 = 0.0;\n    let mut area_product48 = 0.0;\n    let mut area_product49\
    \ = 0.0;\n    let mut area_product50 = 0.0;\n    let mut area_product51 = 0.0;\n\
    \    let mut area_product52 = 0.0;\n    let mut area_product53 = 0.0;\n    let\
    \ mut area_product54 = 0.0;\n    let mut area_product55 = 0.0;\n    let \n}\n\n\
    fn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `}`\n  --> /tmp/tmp7vgfmclr.rs:69:1\n  \
    \ |\n69 | }\n   | ^ expected pattern\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area\
    \ += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n    area\
    \ /= 3.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n  \
    \  assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n\
    \    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2),\
    \ 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv0mwrgr_.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot multiply\
    \ `isize` by `{float}`\n  --> /tmp/tmpv0mwrgr_.rs:22:19\n   |\n22 |     area +=\
    \ a * b * 0.5;\n   |                   ^ no implementation for `isize * {float}`\n\
    \   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\n\
    error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpv0mwrgr_.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpv0mwrgr_.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut s = (a + b + c)\
    \ / 2;\n    if s == 0 {\n        return 0;\n    }\n    let mut area: f64 = 0.0;\n\
    \    while s > 0 {\n        area += s * (s - a) * (s - b) * (s - c);\n       \
    \ s /= 2.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdvynap0g.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add-assign `isize` to `f64`\n  --> /tmp/tmpdvynap0g.rs:27:14\n   |\n27 |   \
    \      area += s * (s - a) * (s - b) * (s - c);\n   |              ^^ no implementation\
    \ for `f64 += isize`\n   |\n   = help: the trait `AddAssign<isize>` is not implemented\
    \ for `f64`\n\nerror[E0277]: cannot divide-assign `isize` by `{float}`\n  -->\
    \ /tmp/tmpdvynap0g.rs:28:11\n   |\n28 |         s /= 2.0;\n   |           ^^ no\
    \ implementation for `isize /= {float}`\n   |\n   = help: the trait `DivAssign<{float}>`\
    \ is not implemented for `isize`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (b * c);\n    area = area + (a * c);\n    area = area + (a\
    \ * b);\n    area = area - (a * b);\n    area = area - (a * c);\n    area = area\
    \ - (b * c);\n    area = area / 2.0;\n    area = round(area, 2);\n    area\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmpubffzl61.rs:29:12\n\
    \   |\n29 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpubffzl61.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmpubffzl61.rs:22:17\n   |\n22 |     area\
    \ = area + (b * c);\n   |                 ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpubffzl61.rs:23:17\n\
    \   |\n23 |     area = area + (a * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmpubffzl61.rs:24:17\n\
    \   |\n24 |     area = area + (a * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot subtract `isize` from `{float}`\n  -->\
    \ /tmp/tmpubffzl61.rs:25:17\n   |\n25 |     area = area - (a * b);\n   |     \
    \            ^ no implementation for `{float} - isize`\n   |\n   = help: the trait\
    \ `Sub<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot subtract\
    \ `isize` from `{float}`\n  --> /tmp/tmpubffzl61.rs:26:17\n   |\n26 |     area\
    \ = area - (a * c);\n   |                 ^ no implementation for `{float} - isize`\n\
    \   |\n   = help: the trait `Sub<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot subtract `isize` from `{float}`\n  --> /tmp/tmpubffzl61.rs:27:17\n\
    \   |\n27 |     area = area - (b * c);\n   |                 ^ no implementation\
    \ for `{float} - isiz"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) * 0.5\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd9wp58in.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpd9wp58in.rs:21:17\n   |\n21 | \
    \    (a * b + c) * 0.5\n   |                 ^ no implementation for `isize *\
    \ {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        _ => if a + b > c { a / 2.0 } else { b / 2.0\
    \ },\n    }\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpatvwofgk.rs:14:31\n\
    \   |\n14 |         _ => if a + b > c { a / 2.0 } else { b / 2.0 },\n   |    \
    \                           ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpatvwofgk.rs:14:48\n   |\n\
    14 |         _ => if a + b > c { a / 2.0 } else { b / 2.0 },\n   |           \
    \                                     ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    if a + b > c {\n        t = b - c;\n       \
    \ s = t * t / 2.0;\n    } else {\n        t = a - c;\n        s = t * t / 2.0;\n\
    \    }\n    if a + c > b {\n        t = b - c;\n        s = s + t * t / 2.0;\n\
    \    } else {\n        t = a - c;\n        s = s + t * t / 2.0;\n    }\n    if\
    \ b + c > a {\n        t = b - c;\n        s = s + t * t / 2.0;\n    } else {\n\
    \        t = a - c;\n        s = s + t * t / 2.0;\n    }\n    s * 0.5\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp79x2jlg0.rs:15:13\n   |\n\
    15 |         t = b - c;\n   |             ^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79x2jlg0.rs:18:13\n\
    \   |\n18 |         t = a - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79x2jlg0.rs:22:13\n\
    \   |\n22 |         t = b - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79x2jlg0.rs:25:13\n\
    \   |\n25 |         t = a - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79x2jlg0.rs:29:13\n\
    \   |\n29 |         t = b - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp79x2jlg0.rs:32:13\n\
    \   |\n32 |         t = a - c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror: aborting due to 6 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    match a + b\
    \ + c {\n        0 => 0.0,\n        x => if x > c { -1.0 } else { 1.0 },\n   \
    \     _ => if a + b > c { -1.0 } else { 1.0 },\n    }\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1.0`,\n right: `6.0`', /tmp/tmpj41rtpjf.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwcvtri0.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbwcvtri0.rs:22:12\n   |\n22 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s += (a + b - c) * 0.5;\n    }\n    if a +\
    \ c > b {\n        s += (a + c - b) * 0.5;\n    }\n    if b + c > a {\n      \
    \  s += (b + c - a) * 0.5;\n    }\n    s * 0.5\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmp7xmiy2j0.rs:14:26\n\
    \   |\n14 |         s += (a + b - c) * 0.5;\n   |                          ^ no\
    \ implementation for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>`\
    \ is not implemented for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n\
    \  --> /tmp/tmp7xmiy2j0.rs:17:26\n   |\n17 |         s += (a + c - b) * 0.5;\n\
    \   |                          ^ no implementation for `isize * {float}`\n   |\n\
    \   = help: the trait `Mul<{float}>` is not implemented for `isize`\n\nerror[E0277]:\
    \ cannot multiply `isize` by `{float}`\n  --> /tmp/tmp7xmiy2j0.rs:20:26\n   |\n\
    20 |         s += (b + c - a) * 0.5;\n   |                          ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    \n    let mut area: f64\
    \ = 0.0;\n    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    \n    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1sof1yps.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp1sof1yps.rs:23:12\n   |\n23 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n23 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area: f64 = 0.0;\n\
    \    area = (a * b) - (c * a);\n    area = area / 2.0;\n    area = area.round();\n\
    \    return area;\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbwcvtri0.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpbwcvtri0.rs:22:12\n   |\n22 |     area = (a * b) - (c *\
    \ a);\n   |            ^^^^^^^^^^^^^^^^^ expected `f64`, found `isize`\n   |\n\
    help: you can convert an `isize` to an `f64`, producing the floating point representation\
    \ of the integer, rounded if necessary\n   |\n22 |     area = ((a * b) - (c *\
    \ a)) as f64;\n   |            ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        ((a + b) * c) / 2.0\n    }\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc8dzfg8t.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpc8dzfg8t.rs:15:23\n\
    \   |\n15 |         ((a + b) * c) / 2.0\n   |                       ^ no implementation\
    \ for `isize / {float}`\n   |\n   = help: the trait `Div<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    if a + b > c {\n        s = b * b - c;\n    }\n    else if b + c >\
    \ a {\n        s = a * a - b * b;\n    }\n    else if c + a > b {\n        s =\
    \ a * a - b * b;\n    }\n    else if a + c > b {\n        s = a * a - b * b;\n\
    \    }\n    else if b + a > c {\n        s = a * a - b * b;\n    }\n    else if\
    \ c + b > a {\n        s = a * a - b * b;\n    }\n    else if a + b > c {\n  \
    \      s = a * a - b * b;\n    }\n    else if b + c > a {\n        s = a * a -\
    \ b * b;\n    }\n    else if c + a > b {\n        s = a * a - b * b;\n    }\n\
    \    else if a + c > b {\n        s = a * a - b * b;\n    }\n    else if b + a\
    \ > c {\n        s = a * a - b * b;\n    }\n    else if c + b > a {\n        s\
    \ = a * a - b * b;\n    }\n    else if a + b > c {\n        s = a * a - b * b;\n\
    \    }\n    else if b + c > a {\n        s = a * a - b * b;\n    }\n    else if\
    \ c + a > b {\n        s = a * a - b * b;\n    }\n    else if a + c > b {\n  \
    \      s = a * a - b * b;\n    }\n    else if b + a > c {\n        s = a * a -\
    \ b * b;\n    }\n    else if c + b > a {\n        s = a * a - b * b;\n    }\n\
    \    else if a + b > c {\n        s = a * a - b * b;\n    }\n    else if b + c\
    \ > a {\n        s = a * a - b * b;\n    }\n    else if c + a > b {\n        s\
    \ = a * a - b * b;\n    }\n    else if a + c > b {\n        s = a * a - b * b;\n\
    \    }\n    else if b + a > c {\n        s = a * a - b * b;\n    }\n    else if\
    \ c + b > a {\n        s = a * a - b * b;\n    }\n    else if a + b > c {\n  \
    \      s = a * a - b * b;\n    }\n    else if b + c > a {\n        s = a * a -\
    \ b * b;\n    }\n    else if c + a > b {\n        s = a * a - b * \n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmptyzhg_ep.rs:106:3\n\
    \    |\n11  | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    | \
    \                                                      - unclosed delimiter\n\
    ...\n91  |     else if c + a > b {\n    |                       - this delimiter\
    \ might not be properly closed...\n92  |         s = a * a - b * \n93  | }\n \
    \   | - ...as it matches this but it has different indentation\n...\n106 | }\n\
    \    |   ^\n\nerror: expected expression, found `}`\n  --> /tmp/tmptyzhg_ep.rs:93:1\n\
    \   |\n93 | }\n   | ^ expected expression\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmptyzhg_ep.rs:14:13\n   |\n14 |         s = b * b - c;\n   |    \
    \         ^^^^^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptyzhg_ep.rs:17:13\n   |\n17 |         s = a\
    \ * a - b * b;\n   |             ^^^^^^^^^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptyzhg_ep.rs:20:13\n\
    \   |\n20 |         s = a * a - b * b;\n   |             ^^^^^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptyzhg_ep.rs:23:13\n   |\n23 |         s = a * a - b * b;\n   |     \
    \        ^^^^^^^^^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptyzhg_ep.rs:26:13\n   |\n26 |         s = a\
    \ * a - b * b;\n   |             ^^^^^^^^^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptyzhg_ep.rs:29:13\n\
    \   |\n29 |         s = a * a - b * b;\n   |             ^^^^^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmptyzhg_ep.rs:32:13\n   |\n32 |         s = a * a - b * b;\n   |     \
    \        ^^^^^^^^^^^^^ expected floating-point number, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmptyzhg_ep.rs:35:13\n   |\n35 |         s = a\
    \ * a - b * b;\n   |             ^^^^^^^^^^^^^ expected floating-point number,\
    \ found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptyzhg_ep.rs:"
  stdout: ''
  timestamp: 1659749756
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area += a * b * 0.5;\n    area += a * c * 0.5;\n    area += b * c * 0.5;\n\
    \    area /= 2.0;\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqc_pvnf6.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ multiply `isize` by `{float}`\n  --> /tmp/tmpqc_pvnf6.rs:22:19\n   |\n22 | \
    \    area += a * b * 0.5;\n   |                   ^ no implementation for `isize\
    \ * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented for\
    \ `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpqc_pvnf6.rs:23:19\n\
    \   |\n23 |     area += a * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror[E0277]: cannot multiply `isize` by `{float}`\n  --> /tmp/tmpqc_pvnf6.rs:24:19\n\
    \   |\n24 |     area += b * c * 0.5;\n   |                   ^ no implementation\
    \ for `isize * {float}`\n   |\n   = help: the trait `Mul<{float}>` is not implemented\
    \ for `isize`\n\nerror: aborting due to 4 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (b - c) * (b + c) / 2.0;\n\
    \    } else {\n        area = area + (c - a) * (c + a) / 2.0;\n    }\n    if a\
    \ + c > b {\n        area = area + (a - b) * (a + b) / 2.0;\n    } else {\n  \
    \      area = area + (b - a) * (b + a) / 2.0;\n    }\n    if a + b > c {\n   \
    \     area = area + (c - a) * (c + a) / 2.0;\n    } else {\n        area = area\
    \ + (b - a) * (b + a) / 2.0;\n    }\n    area\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot divide `isize` by `{float}`\n  --> /tmp/tmpr71m84c3.rs:14:41\n\
    \   |\n14 |         area = area + (b - c) * (b + c) / 2.0;\n   |             \
    \                            ^ no implementation for `isize / {float}`\n   |\n\
    \   = help: the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]:\
    \ cannot divide `isize` by `{float}`\n  --> /tmp/tmpr71m84c3.rs:16:41\n   |\n\
    16 |         area = area + (c - a) * (c + a) / 2.0;\n   |                    \
    \                     ^ no implementation for `isize / {float}`\n   |\n   = help:\
    \ the trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr71m84c3.rs:19:41\n   |\n19 |   \
    \      area = area + (a - b) * (a + b) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr71m84c3.rs:21:41\n   |\n21 |   \
    \      area = area + (b - a) * (b + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr71m84c3.rs:24:41\n   |\n24 |   \
    \      area = area + (c - a) * (c + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpr71m84c3.rs:26:41\n   |\n26 |   \
    \      area = area + (b - a) * (b + a) / 2.0;\n   |                          \
    \               ^ no implementation for `isize / {float}`\n   |\n   = help: the\
    \ trait `Div<{float}>` is not implemented for `isize`\n\nerror: aborting due to\
    \ 6 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    s * s\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpd60ci160.rs:16:5\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n...\n16 |     s * s\n   |     ^^^^^ expected `f64`, found `isize`\n  \
    \ |\nhelp: you can convert an `isize` to an `f64`, producing the floating point\
    \ representation of the integer, rounded if necessary\n   |\n16 |     (s * s)\
    \ as f64\n   |\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749753
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        -1\n    } else {\n        ((a + b) * c) / (a + b + c)\n    }\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp2mv10g_z.rs:13:9\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         -1\n   |         ^^\n   |      \
    \   |\n   |         expected `f64`, found integer\n   |         help: use a float\
    \ literal: `-1.0`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp2mv10g_z.rs:15:9\n\
    \   |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |    \
    \                                               --- expected `f64` because of\
    \ return type\n...\n15 |         ((a + b) * c) / (a + b + c)\n   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected `f64`, found `isize`\n   |\nhelp: you can convert an `isize` to an\
    \ `f64`, producing the floating point representation of the integer, rounded if\
    \ necessary\n   |\n15 |         (((a + b) * c) / (a + b + c)) as f64\n   |\n\n\
    error: aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a as f64;\n        b = b as f64;\n        c = c as f64;\n\
    \    }\n    if a + c > b {\n        a = a as f64;\n        c = c as f64;\n   \
    \ }\n    if b + c > a {\n        b = b as f64;\n        c = c as f64;\n    }\n\
    \    a + b + c\n}\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12.0`,\n right: `6.0`', /tmp/tmpe9tdlh6t.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut sum\
    \ = a;\n    sum += b;\n    sum += c;\n    sum.sqrt()\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `sqrt` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmpma17g_06.rs:15:9\n   |\n15 |     sum.sqrt()\n   |     \
    \    ^^^^ method not found in `isize`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut area\
    \ = 0.0;\n    if a + b > c {\n        area = area + (c - b) * (c - a);\n    }\n\
    \    if a + c > b {\n        area = area + (b - a) * (b - c);\n    }\n    if b\
    \ + c > a {\n        area = area + (a - b) * (a - c);\n    }\n    area = area\
    \ / 2.0;\n    area = area.round();\n    return area;\n}\n\nfn main() {\n    let\
    \ candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp51ycu42e.rs:14:21\n\
    \   |\n14 |         area = area + (c - b) * (c - a);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n\
    \  --> /tmp/tmp51ycu42e.rs:17:21\n   |\n17 |         area = area + (b - a) * (b\
    \ - c);\n   |                     ^ no implementation for `{float} + isize`\n\
    \   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\n\
    error[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp51ycu42e.rs:20:21\n\
    \   |\n20 |         area = area + (a - b) * (a - c);\n   |                   \
    \  ^ no implementation for `{float} + isize`\n   |\n   = help: the trait `Add<isize>`\
    \ is not implemented for `{float}`\n\nerror[E0689]: can't call method `round`\
    \ on ambiguous numeric type `{float}`\n  --> /tmp/tmp51ycu42e.rs:23:17\n   |\n\
    23 |     area = area.round();\n   |                 ^^^^^\n   |\nhelp: you must\
    \ specify a type for this binding, like `f32`\n   |\n12 |     let mut area: f32\
    \ = 0.0;\n   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0689.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut s = (a + b + c) / 2;\n\
    \    if s == 0 {\n        return 0;\n    }\n    let mut area = 0.0;\n    while\
    \ s > 0 {\n        area += s;\n        s /= 2;\n    }\n    area\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpojbpfysj.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add-assign\
    \ `isize` to `{float}`\n  --> /tmp/tmpojbpfysj.rs:27:14\n   |\n27 |         area\
    \ += s;\n   |              ^^ no implementation for `{float} += isize`\n   |\n\
    \   = help: the trait `AddAssign<isize>` is not implemented for `{float}`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut s = 0.0;\n   \
    \ if a + b > c {\n        s = s + (a - b) * (c - b);\n    }\n    if a + c > b\
    \ {\n        s = s + (a - c) * (b - c);\n    }\n    if b + c > a {\n        s\
    \ = s + (b - c) * (a - c);\n    }\n    s / (a + b + c)\n}\n\nfn main() {\n   \
    \ let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n \
    \   assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppd1mt4bu.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmppd1mt4bu.rs:23:15\n   |\n23 |      \
    \   s = s + (a - b) * (c - b);\n   |               ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmppd1mt4bu.rs:26:15\n\
    \   |\n26 |         s = s + (a - c) * (b - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmppd1mt4bu.rs:29:15\n\
    \   |\n29 |         s = s + (b - c) * (a - c);\n   |               ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmppd1mt4bu.rs:31:7\n\
    \   |\n31 |     s / (a + b + c)\n   |       ^ no implementation for `{float} /\
    \ isize`\n   |\n   = help: the trait `Div<isize>` is not implemented for `{float}`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ a + b + c;\n    if s > 0 {\n        s /= 2;\n    }\n    if s == 0 {\n      \
    \  return 0.0;\n    }\n    let mut area = 0.0;\n    if a > b {\n        if b >\
    \ c {\n            area = s * s;\n        } else {\n            area = s * s -\
    \ c;\n        }\n    } else {\n        if c > a {\n            area = s * s -\
    \ b;\n        } else {\n            area = s * s - a;\n        }\n    }\n    area\
    \ = area.round() as f64;\n    return area;\n}\n\nfn main() {\n    let candidate\
    \ = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1,\
    \ 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk0_tmphh.rs:22:20\n   |\n\
    22 |             area = s * s;\n   |                    ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpk0_tmphh.rs:24:20\n\
    \   |\n24 |             area = s * s - c;\n   |                    ^^^^^^^^^ expected\
    \ floating-point number, found `isize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk0_tmphh.rs:28:20\n   |\n28 |             area = s * s - b;\n   |  \
    \                  ^^^^^^^^^ expected floating-point number, found `isize`\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmpk0_tmphh.rs:30:20\n   |\n30 |  \
    \           area = s * s - a;\n   |                    ^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0689]: can't call method `round` on ambiguous\
    \ numeric type `{float}`\n  --> /tmp/tmpk0_tmphh.rs:33:17\n   |\n33 |     area\
    \ = area.round() as f64;\n   |                 ^^^^^\n   |\nhelp: you must specify\
    \ a type for this binding, like `f32`\n   |\n19 |     let mut area: f32 = 0.0;\n\
    \   |         ~~~~~~~~~~~~~\n\nerror: aborting due to 5 previous errors\n\nSome\
    \ errors have detailed explanations: E0308, E0689.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    a + b + c\n}\n\nfn main()\
    \ {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4, 5), 6.0);\n\
    \    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4, 8, 5),\
    \ 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdnau9ijg.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpdnau9ijg.rs:21:5\n   |\n11 | fn triangle_area(a: isize,\
    \ b: isize, c: isize) -> f64 {\n   |                                         \
    \          --- expected `f64` because of return type\n...\n21 |     a + b + c\n\
    \   |     ^^^^^^^^^ expected `f64`, found `isize`\n   |\nhelp: you can convert\
    \ an `isize` to an `f64`, producing the floating point representation of the integer,\
    \ rounded if necessary\n   |\n21 |     (a + b + c) as f64\n   |\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    (a * b + c) / 2.0\n}\n\
    \nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfko5hr7w.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ divide `isize` by `{float}`\n  --> /tmp/tmpfko5hr7w.rs:21:17\n   |\n21 |   \
    \  (a * b + c) / 2.0\n   |                 ^ no implementation for `isize / {float}`\n\
    \   |\n   = help: the trait `Div<{float}>` is not implemented for `isize`\n\n\
    error: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749754
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut s =\
    \ 0.0;\n    let mut t = 0.0;\n    if a + b > c {\n        s = c - (a + b);\n \
    \   } else {\n        s = a + b;\n    }\n    if a + c > b {\n        t = c - (a\
    \ + c);\n    } else {\n        t = a + c;\n    }\n    if b + c > a {\n       \
    \ t -= (b + c);\n    } else {\n        t -= (b + c);\n    }\n    s / (t * t)\n\
    }\n\nfn main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3,\
    \ 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "warning: unnecessary parentheses around assigned value\n  --> /tmp/tmpw8mdqtr3.rs:25:14\n\
    \   |\n25 |         t -= (b + c);\n   |              ^^^^^^^ help: remove these\
    \ parentheses\n   |\n   = note: `#[warn(unused_parens)]` on by default\n\nwarning:\
    \ unnecessary parentheses around assigned value\n  --> /tmp/tmpw8mdqtr3.rs:27:14\n\
    \   |\n27 |         t -= (b + c);\n   |              ^^^^^^^ help: remove these\
    \ parentheses\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8mdqtr3.rs:15:13\n\
    \   |\n15 |         s = c - (a + b);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8mdqtr3.rs:17:13\n\
    \   |\n17 |         s = a + b;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8mdqtr3.rs:20:13\n\
    \   |\n20 |         t = c - (a + c);\n   |             ^^^^^^^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpw8mdqtr3.rs:22:13\n\
    \   |\n22 |         t = a + c;\n   |             ^^^^^ expected floating-point\
    \ number, found `isize`\n\nerror[E0277]: cannot subtract-assign `isize` from `{float}`\n\
    \  --> /tmp/tmpw8mdqtr3.rs:25:11\n   |\n25 |         t -= (b + c);\n   |     \
    \      ^^ no implementation for `{float} -= isize`\n   |\n   = help: the trait\
    \ `SubAssign<isize>` is not implemented for `{float}`\n\nerror[E0277]: cannot\
    \ subtract-assign `isize` from `{float}`\n  --> /tmp/tmpw8mdqtr3.rs:27:11\n  \
    \ |\n27 |         t -= (b + c);\n   |           ^^ no implementation for `{float}\
    \ -= isize`\n   |\n   = help: the trait `SubAssign<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 6 previous errors; 2 warnings emitted\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1;\n    }\n    if a + c > b {\n        return -1;\n   \
    \ }\n    if b + c > a {\n        return -1;\n    }\n    let mut area = 0.0;\n\
    \    area = area + (a * b) - (c * c);\n    area = area + (a * c) - (b * b);\n\
    \    area = area + (c * a) - (b * c);\n    area = area + (c * b) - (a * a);\n\
    \    area = area / 2.0;\n    area = round(area, 2);\n    return area;\n}\n\nfn\
    \ main() {\n    let candidate = triangle_area;\n    assert_eq!(candidate(3, 4,\
    \ 5), 6.0);\n    assert_eq!(candidate(1, 2, 10), -1.0);\n    assert_eq!(candidate(4,\
    \ 8, 5), 8.18);\n    assert_eq!(candidate(2, 2, 2), 1.73);\n    assert_eq!(candidate(1,\
    \ 2, 3), -1.0);\n    assert_eq!(candidate(10, 5, 7), 16.25);\n    assert_eq!(candidate(2,\
    \ 6, 3), -1.0);\n    assert_eq!(candidate(1, 1, 1), 0.43);\n    assert_eq!(candidate(2,\
    \ 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `round` in this scope\n  --> /tmp/tmp_slkik3v.rs:27:12\n\
    \   |\n27 |     area = round(area, 2);\n   |            ^^^^^ not found in this\
    \ scope\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp_slkik3v.rs:13:16\n \
    \  |\n11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |     \
    \                                              --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1;\n   |               \
    \ ^^\n   |                |\n   |                expected `f64`, found integer\n\
    \   |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot\
    \ add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:22:17\n   |\n22 |     area\
    \ = area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:23:17\n\
    \   |\n23 |     area = area + (a * c) - (b * b);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:24:17\n\
    \   |\n24 |     area = area + (c * a) - (b * c);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0277]: cannot add `isize` to `{float}`\n  --> /tmp/tmp_slkik3v.rs:25:17\n\
    \   |\n25 |     area = area + (c * b) - (a * a);\n   |                 ^ no implementation\
    \ for `{float} + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented\
    \ for `{float}`\n\nerror: aborting due to 6 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308, E0425.\nFor more information about an error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 1
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    if a + b >\
    \ c {\n        return -1\n    }\n    if a + c > b {\n        return -1\n    }\n\
    \    if b + c > a {\n        return -1\n    }\n    let mut area = 0.0;\n    area\
    \ = area + (a * b) - (c * c);\n    area = area / (a * b + c * c);\n    area =\
    \ area.round();\n    area\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpigdhv75e.rs:13:16\n   |\n\
    11 | fn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n   |           \
    \                                        --- expected `f64` because of return\
    \ type\n12 |     if a + b > c {\n13 |         return -1\n   |                ^^\n\
    \   |                |\n   |                expected `f64`, found integer\n  \
    \ |                help: use a float literal: `-1.0`\n\nerror[E0277]: cannot add\
    \ `isize` to `{float}`\n  --> /tmp/tmpigdhv75e.rs:22:17\n   |\n22 |     area =\
    \ area + (a * b) - (c * c);\n   |                 ^ no implementation for `{float}\
    \ + isize`\n   |\n   = help: the trait `Add<isize>` is not implemented for `{float}`\n\
    \nerror[E0277]: cannot divide `{float}` by `isize`\n  --> /tmp/tmpigdhv75e.rs:23:17\n\
    \   |\n23 |     area = area / (a * b + c * c);\n   |                 ^ no implementation\
    \ for `{float} / isize`\n   |\n   = help: the trait `Div<isize>` is not implemented\
    \ for `{float}`\n\nerror[E0689]: can't call method `round` on ambiguous numeric\
    \ type `{float}`\n  --> /tmp/tmpigdhv75e.rs:24:17\n   |\n24 |     area = area.round();\n\
    \   |                 ^^^^^\n   |\nhelp: you must specify a type for this binding,\
    \ like `f32`\n   |\n21 |     let mut area: f32 = 0.0;\n   |         ~~~~~~~~~~~~~\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308, E0689.\nFor more information about an error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1659749755
- exit_code: 101
  program: "/// Given the lengths of the three sides of a triangle. Return the area\
    \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
    \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
    \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
    /// >>> triangle_area(3, 4, 5)\n/// 6.0\n/// >>> triangle_area(1, 2, 10)\n///\
    \ -1\nfn triangle_area(a: isize, b: isize, c: isize) -> f64 {\n    let mut a =\
    \ a as f64;\n    let mut b = b as f64;\n    let mut c = c as f64;\n    if a +\
    \ b > c {\n        a = a + b - c;\n    }\n    if a + c > b {\n        b = a +\
    \ c - b;\n    }\n    if b + c > a {\n        c = b + c - a;\n    }\n    (a * b\
    \ * c) / ((a * b) + c * c)\n}\n\nfn main() {\n    let candidate = triangle_area;\n\
    \    assert_eq!(candidate(3, 4, 5), 6.0);\n    assert_eq!(candidate(1, 2, 10),\
    \ -1.0);\n    assert_eq!(candidate(4, 8, 5), 8.18);\n    assert_eq!(candidate(2,\
    \ 2, 2), 1.73);\n    assert_eq!(candidate(1, 2, 3), -1.0);\n    assert_eq!(candidate(10,\
    \ 5, 7), 16.25);\n    assert_eq!(candidate(2, 6, 3), -1.0);\n    assert_eq!(candidate(1,\
    \ 1, 1), 0.43);\n    assert_eq!(candidate(2, 2, 10), -1.0);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0.8571428571428571`,\n right: `6.0`', /tmp/tmpbxmv42mv.rs:29:5\nnote: run with\
    \ `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659749754
