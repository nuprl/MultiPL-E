language: rs
name: HumanEval_135_can_arrange
results:
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3mur4wv.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpk3mur4wv.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk3mur4wv.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqkng8yva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3mur4wv.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpk3mur4wv.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk3mur4wv.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut index = 0;\n    for el in arr.iter()\
    \ {\n        if el > max {\n            max = el;\n            index = el;\n \
    \       }\n    }\n    index\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgog5algu.rs:14:17\n   |\n\
    14 |         if el > max {\n   |                 ^^^\n   |                 |\n\
    \   |                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgog5algu.rs:15:19\n\
    \   |\n15 |             max = el;\n   |                   ^^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |  \
    \           max = *el;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpgog5algu.rs:16:21\n   |\n16 |             index = el;\n   |   \
    \                  ^^ expected integer, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n16 |             index = *el;\n   |                     +\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut idx: usize = 0;\n    for\
    \ &x in arr {\n        if x > max {\n            max = x;\n            idx = x;\n\
    \        }\n    }\n    if idx == arr.len() {\n        return -1;\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ycgyon6.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ycgyon6.rs:16:19\n   |\n16 |             idx = x;\n  \
    \ |                   ^ expected `usize`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin0ivthh.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin0ivthh.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqkng8yva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdti_cgui.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdti_cgui.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdti_cgui.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n       \
    \ if i > max {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:13:16\n   |\n\
    13 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:14:19\n\
    \   |\n14 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     max = *i;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    if max == 0 {\n        return -1;\n    }\n    max\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpm89gylgk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp0j32p2vr.rs:11:19\n\
    \   |\n11 |     let mut max = -1;\n   |                   ^^ the trait `Neg` is\
    \ not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0j32p2vr.rs:20:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     max.try_into().unwrap()\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n       \
    \ if *i <= max {\n            return -1;\n        }\n        if *i > max {\n \
    \           max = *i;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpbvqks2ka.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7kpfz1w.rs:14:21\n   |\n\
    14 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpc7kpfz1w.rs:11:23\n   |\n11 |     let mut largest\
    \ = -1;\n   |                       ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7kpfz1w.rs:19:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin0ivthh.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut index = 0;\n    for el in\
    \ arr.iter().rev() {\n        if el > arr[largest] {\n            largest = index;\n\
    \        }\n        index += 1;\n    }\n    largest\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp0p3pg2bg.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp0p3pg2bg.rs:14:17\n   |\n14 |         if el > arr[largest] {\n   | \
    \                ^^^^^^^^^^^^\n   |                 |\n   |                 expected\
    \ `&isize`, found `isize`\n   |                 help: consider borrowing here:\
    \ `&arr[largest]`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0p3pg2bg.rs:19:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpeuvbrbwq.rs:14:21\n   |\n\
    14 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpeuvbrbwq.rs:11:23\n   |\n11 |     let mut largest\
    \ = -1;\n   |                       ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpeuvbrbwq.rs:20:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7kpfz1w.rs:14:21\n   |\n\
    14 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpc7kpfz1w.rs:11:23\n   |\n11 |     let mut largest\
    \ = -1;\n   |                       ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7kpfz1w.rs:19:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \            max_val = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbd05h921.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = i;\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3uylfvr.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            break;\n        }\n        max =\
    \ arr[i];\n        i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmprj_ti5k5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_index = 0;\n    for &i in\
    \ arr {\n        if i > max {\n            max = i;\n            max_index = 0;\n\
    \        }\n        if i == max {\n            max_index += 1;\n        }\n  \
    \  }\n    max - 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphpwno1nc.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdti_cgui.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdti_cgui.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdti_cgui.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3mur4wv.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpk3mur4wv.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk3mur4wv.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for &i in arr {\n        if i > max_value {\n            max_value = i;\n\
    \            max_index = i;\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_rfxqa6.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x > max_val {\n            max_val = x;\n\
    \            max_idx = arr.len() - 1;\n        }\n    }\n    max_idx\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvbqe1twz.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max_idx\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     max_idx.try_into().unwrap()\n   |\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpvbqe1twz.rs:11:23\n   |\n11 |     let mut\
    \ max_idx = -1;\n   |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n       \
    \ if i > max {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:13:16\n   |\n\
    13 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:14:19\n\
    \   |\n14 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     max = *i;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut index = 0;\n    while index\
    \ < arr.len() {\n        if arr[index] > arr[index + 1] {\n            largest\
    \ = index;\n        }\n        index += 1;\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpzw4lne9t.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzw4lne9t.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut index = 0;\n    for &i in\
    \ arr {\n        if i > largest {\n            largest = i;\n        }\n     \
    \   if i == largest {\n            index = i;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg3tssbku.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max = i;\n        }\n     \
    \   i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpouq8k3ov.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n19 |     max.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i > max {\n            max = i;\n            max_idx = i;\n  \
    \      }\n    }\n    if max_idx == -1 {\n        return -1;\n    }\n    max +\
    \ 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp84lc8fbd.rs:14:16\n   |\n\
    14 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp84lc8fbd.rs:15:19\n\
    \   |\n15 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |        \
    \     max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp84lc8fbd.rs:16:23\n   |\n16 |             max_idx = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n16 |             max_idx = *i;\n   |       \
    \                +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[largest] {\n            largest = i;\n        }\n\
    \        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp8da6drtk.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8da6drtk.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_idx = -1;\n    let mut i\
    \ = 0;\n    while i < arr.len() {\n        if arr[i] >= max {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n        i += 1;\n    }\n   \
    \ max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp_suh0r9r.rs:12:23\n\
    \   |\n12 |     let mut max_idx = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp_suh0r9r.rs:21:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n21 |     max_idx\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     max_idx.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqkng8yva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp0j32p2vr.rs:11:19\n\
    \   |\n11 |     let mut max = -1;\n   |                   ^^ the trait `Neg` is\
    \ not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0j32p2vr.rs:20:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     max.try_into().unwrap()\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut max_index: usize = 0;\n\
    \    for &i in arr {\n        if i > max {\n            max = i;\n           \
    \ max_index = i;\n        }\n    }\n    if max > 0 {\n        max_index\n    }\
    \ else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt9bp702k.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt9bp702k.rs:16:25\n   |\n16 |             max_index = i;\n\
    \   |                         ^ expected `usize`, found `isize`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpt9bp702k.rs:20:9\n   |\n10 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |                                    ----- expected\
    \ `isize` because of return type\n...\n20 |         max_index\n   |         ^^^^^^^^^\
    \ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize` to an\
    \ `isize` and panic if the converted value doesn't fit\n   |\n20 |         max_index.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprl0dejjl.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprl0dejjl.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc7kpfz1w.rs:14:21\n   |\n\
    14 |         if arr[i] > arr[i..].iter().max().unwrap() {\n   |              \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n14 |         if arr[i] > *arr[i..].iter().max().unwrap()\
    \ {\n   |                     +\n\nerror[E0277]: the trait bound `usize: Neg`\
    \ is not satisfied\n  --> /tmp/tmpc7kpfz1w.rs:11:23\n   |\n11 |     let mut largest\
    \ = -1;\n   |                       ^^ the trait `Neg` is not implemented for\
    \ `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpc7kpfz1w.rs:19:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    largest\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n19 |     largest.try_into().unwrap()\n   |\n\nerror: aborting due\
    \ to 3 previous errors\n\nSome errors have detailed explanations: E0277, E0308.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \        } else {\n            max_val = x;\n        }\n    }\n    max_idx\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpndr8bu_n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max - 1\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7elyhn_i.rs:20:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     max\
    \ - 1\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     (max - 1).try_into().unwrap()\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmphryypdx5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        }\n\
    \        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpz1rspc7w.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz1rspc7w.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ idx in arr.iter().rev() {\n        if idx > max_idx {\n            max_idx =\
    \ idx;\n            max_val = arr[idx];\n        }\n    }\n    max_idx\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6umzivg6.rs:14:18\n   |\n\
    14 |         if idx > max_idx {\n   |                  ^^^^^^^\n   |         \
    \         |\n   |                  expected `&isize`, found integer\n   |    \
    \              help: consider borrowing here: `&max_idx`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6umzivg6.rs:15:23\n   |\n15 |             max_idx = idx;\n\
    \   |                       ^^^ expected integer, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n15 |             max_idx = *idx;\n\
    \   |                       +\n\nerror[E0277]: the type `[isize]` cannot be indexed\
    \ by `&isize`\n  --> /tmp/tmp6umzivg6.rs:16:23\n   |\n16 |             max_val\
    \ = arr[idx];\n   |                       ^^^^^^^^ slice indices are of type `usize`\
    \ or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>` is not\
    \ implemented for `&isize`\n   = note: required because of the requirements on\
    \ the impl of `Index<&isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut largest = -1;\n    for el in arr.iter()\
    \ {\n        if el > i {\n            largest = i;\n        }\n        i += 1;\n\
    \    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5l4wgq5g.rs:14:17\n   |\n\
    14 |         if el > i {\n   |                 ^\n   |                 |\n   |\
    \                 expected `&isize`, found integer\n   |                 help:\
    \ consider borrowing here: `&i`\n\nerror: aborting due to previous error\n\nFor\
    \ more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = i;\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd62kqlf.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n       \
    \ if i > max {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:13:16\n   |\n\
    13 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:14:19\n\
    \   |\n14 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     max = *i;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        }\n\
    \        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpz1rspc7w.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz1rspc7w.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max = i;\n        }\n     \
    \   i += 1;\n    }\n    max - 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvht3qkd5.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max\
    \ - 1\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     (max - 1).try_into().unwrap()\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprl0dejjl.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprl0dejjl.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            max = i;\n        }\n    \
    \    i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpp8w3q04v.rs:11:19\n\
    \   |\n11 |     let mut max = -1;\n   |                   ^^ the trait `Neg` is\
    \ not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpp8w3q04v.rs:19:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n19 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     max.try_into().unwrap()\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut max2: isize = 0;\n    let\
    \ mut max3: isize = 0;\n    let mut max4: isize = 0;\n    let mut max5: isize\
    \ = 0;\n    let mut max6: isize = 0;\n    let mut max7: isize = 0;\n    let mut\
    \ max8: isize = 0;\n    let mut max9: isize = 0;\n    let mut max10: isize = 0;\n\
    \    let mut max11: isize = 0;\n    let mut max12: isize = 0;\n    let mut max13:\
    \ isize = 0;\n    let mut max14: isize = 0;\n    let mut max15: isize = 0;\n \
    \   let mut max16: isize = 0;\n    let mut max17: isize = 0;\n    let mut max18:\
    \ isize = 0;\n    let mut max19: isize = 0;\n    let mut max20: isize = 0;\n \
    \   let mut max21: isize = 0;\n    let mut max22: isize = 0;\n    let mut max23:\
    \ isize = 0;\n    let mut max24: isize = 0;\n    let mut max25: isize = 0;\n \
    \   let mut max26: isize = 0;\n    let mut max27: isize = 0;\n    let mut max28:\
    \ isize = 0;\n    let mut max29: isize = 0;\n    let mut max30: isize = 0;\n \
    \   let mut max31: isize = 0;\n    let mut max32: isize = 0;\n    let mut max33:\
    \ isize = 0;\n    let mut max34: isize = 0;\n    let mut max35: isize = 0;\n \
    \   let mut max36: isize = 0;\n    let mut max37: isize = 0;\n    let mut max38:\
    \ isize = 0;\n    let mut max39: isize = 0;\n    let mut max40: isize = 0;\n \
    \   let mut max41: isize = 0;\n    let mut max42: isize = 0;\n    let mut max43:\
    \ isize = 0;\n    let mut max44: isize = 0;\n    let mut max45: isize = 0;\n \
    \   let mut max46: isize = 0;\n    let mut max47: isize = 0;\n    let mut max48:\
    \ isize = 0;\n    let mut max49: isize = 0;\n    let mut max50: isize = 0;\n \
    \   let mut max51: isize = 0;\n    let mut max52: i\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected `;`, found `}`\n  --> /tmp/tmpmwq7y15e.rs:62:21\n   |\n\
    62 |     let mut max52: i\n   |                     ^ help: add `;` here\n63 |\
    \ }\n   | - unexpected token\n\nerror[E0412]: cannot find type `i` in this scope\n\
    \  --> /tmp/tmpmwq7y15e.rs:62:20\n   |\n62 |     let mut max52: i\n   |      \
    \              ^ help: a builtin type with a similar name exists: `i8`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpmwq7y15e.rs:10:36\n   |\n10 | fn can_arrange(arr:\
    \ Vec<isize>) -> isize {\n   |    -----------                     ^^^^^ expected\
    \ `isize`, found `()`\n   |    |\n   |    implicitly returns `()` as its body\
    \ has no tail or `return` expression\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0308, E0412.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max = i;\n        }\n     \
    \   i += 1;\n    }\n    if max < arr.len() {\n        -1\n    } else {\n     \
    \   max\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpuqdk4t0p.rs:22:9\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n22 |        \
    \ max\n   |         ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    22 |         max.try_into().unwrap()\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut idx: usize = 0;\n    for\
    \ &i in arr {\n        if i > max {\n            max = i;\n            idx = i;\n\
    \        }\n    }\n    if idx == arr.len() {\n        return -1;\n    }\n    return\
    \ idx;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz0xgpbyi.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz0xgpbyi.rs:16:19\n   |\n16 |             idx = i;\n  \
    \ |                   ^ expected `usize`, found `isize`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz0xgpbyi.rs:22:12\n   |\n10 | fn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n   |                                    ----- expected `isize` because\
    \ of return type\n...\n22 |     return idx;\n   |            ^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n22 |     return idx.try_into().unwrap();\n\
    \   |            ~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for &x in arr.iter() {\n        if x > max_value {\n            max_value\
    \ = x;\n            max_index = x;\n        }\n    }\n    max_index\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp0mg5jew0.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = arr[i];\n        } else {\n\
    \            break;\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpl971eqdl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr {\n        if x > max_val {\n            max_val = x;\n          \
    \  max_idx = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxgjegzd.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max = i;\n        }\n     \
    \   i += 1;\n    }\n    max - 1\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvht3qkd5.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max\
    \ - 1\n   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     (max - 1).try_into().unwrap()\n   |\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if i > max {\n            max = i;\n            max_idx = i;\n  \
    \      }\n    }\n    if max_idx == -1 {\n        -1\n    } else {\n        max_idx\n\
    \    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsupu83kh.rs:14:16\n   |\n\
    14 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpsupu83kh.rs:15:19\n\
    \   |\n15 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n15 |        \
    \     max = *i;\n   |                   +\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpsupu83kh.rs:16:23\n   |\n16 |             max_idx = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n16 |             max_idx = *i;\n   |       \
    \                +\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i-1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpxz4p6nrj.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxz4p6nrj.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[largest] {\n            largest = i;\n        }\n\
    \        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp8da6drtk.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8da6drtk.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdti_cgui.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdti_cgui.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdti_cgui.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpifsjqx5l.rs:20:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n20 |     max.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut index = 0;\n    for &i in\
    \ arr {\n        if i > largest {\n            largest = i;\n        }\n     \
    \   if i == largest {\n            index = i;\n        }\n    }\n    index\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg3tssbku.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr {\n        if x > max_val {\n            max_idx = x;\n          \
    \  max_val = x;\n        }\n    }\n    if max_idx == -1 {\n        -1\n    } else\
    \ {\n        max_idx\n    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9fqevi2g.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqkng8yva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut index = 0;\n    while index\
    \ < arr.len() {\n        if arr[index] > arr[index + 1] {\n            largest\
    \ = index;\n        }\n        index += 1\n    }\n    largest\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpoc6zvp09.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpoc6zvp09.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut i: isize = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] > arr[i + 1] {\n            max = i;\n  \
    \      } else {\n            i += 1;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpmyevyxfq.rs:13:15\n   |\n\
    13 |     while i < arr.len() {\n   |               ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     while i < arr.len().try_into().unwrap()\
    \ {\n   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpmyevyxfq.rs:14:12\n  \
    \ |\n14 |         if arr[i] > arr[i + 1] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpmyevyxfq.rs:14:21\n   |\n14 |  \
    \       if arr[i] > arr[i + 1] {\n   |                     ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter() {\n        if x > max_val {\n            max_val = x;\n   \
    \         max_idx = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmptc__s923.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for i in arr.iter().rev() {\n        if *i > max_value {\n            max_value\
    \ = *i;\n            max_index = i;\n        }\n    }\n    max_index\n}\n\nfn\
    \ main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphn7czy7d.rs:16:25\n   |\n\
    16 |             max_index = i;\n   |                         ^ expected integer,\
    \ found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n16 |  \
    \           max_index = *i;\n   |                         +\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdti_cgui.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdti_cgui.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdti_cgui.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            i += 1;\n        } else {\n\
    \            largest = i;\n        }\n    }\n    largest\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpidkis7p9.rs:20:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     largest.try_into().unwrap()\n   |\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpidkis7p9.rs:11:23\n   |\n11 |     let mut\
    \ largest = -1;\n   |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    for i in arr.iter().rev() {\n       \
    \ if i > max {\n            max = i;\n        }\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:13:16\n   |\n\
    13 |         if i > max {\n   |                ^^^\n   |                |\n  \
    \ |                expected `&isize`, found integer\n   |                help:\
    \ consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpto77gbmi.rs:14:19\n\
    \   |\n14 |             max = i;\n   |                   ^ expected integer, found\
    \ `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n14 |        \
    \     max = *i;\n   |                   +\n\nerror: aborting due to 2 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut cur = 0;\n    for &x in arr.iter()\
    \ {\n        if x > max {\n            max = x;\n        }\n        if x == cur\
    \ {\n            return -1;\n        }\n        cur = x;\n    }\n    max\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpkoxt2uwb.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &i in arr.iter().rev() {\n        if i > max_val {\n            max_idx = i;\n\
    \            max_val = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpsb4cnfh3.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut largest = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp73g91sz9.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpifsjqx5l.rs:20:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n20 |     max.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for i in arr.iter().rev()\
    \ {\n        if *i > *max {\n            max = *i;\n            max_idx = i;\n\
    \        }\n    }\n    if max_idx == -1 {\n        -1\n    } else {\n        max_idx\n\
    \    }\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0614]: type `{integer}` cannot be dereferenced\n  --> /tmp/tmp8g3b48jv.rs:14:17\n\
    \   |\n14 |         if *i > *max {\n   |                 ^^^^\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp8g3b48jv.rs:16:23\n   |\n16 |             max_idx\
    \ = i;\n   |                       ^ expected integer, found `&isize`\n   |\n\
    help: consider dereferencing the borrow\n   |\n16 |             max_idx = *i;\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0308, E0614.\nFor more information about\
    \ an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &i in arr {\n        if i > max_val {\n            max_idx = i;\n          \
    \  max_val = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r_7k9s0.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            return i;\n        }\n        max\
    \ = arr[i];\n        i += 1;\n    }\n    -1\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxq23i9tf.rs:15:20\n   |\n\
    15 |             return i;\n   |                    ^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n15 |             return i.try_into().unwrap();\n\
    \   |                    ~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &i in arr {\n        if i > max_val {\n            max_idx = i;\n          \
    \  max_val = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r_7k9s0.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprl0dejjl.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprl0dejjl.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for &i in arr {\n        if i > max_value {\n            max_value = i;\n\
    \            max_index = i;\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp1_rfxqa6.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \            max_val = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbd05h921.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[largest] {\n            largest = i;\n        }\n\
    \        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp8da6drtk.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp8da6drtk.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr {\n        if x > max_val {\n            max_val = x;\n          \
    \  max_idx = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpsxgjegzd.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for &x in arr.iter().rev() {\n        if x <= max_value {\n            max_value\
    \ = x;\n            max_index = arr.len() - 1;\n        }\n    }\n    max_index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv6fn9b9m.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max_index\n\
    \   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     max_index.try_into().unwrap()\n   |\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --> /tmp/tmpv6fn9b9m.rs:11:25\n   |\n11 | \
    \    let mut max_index = -1;\n   |                         ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[i + 1] {\n            max = i;\n        }\n    \
    \    i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpstu3ii__.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n19 |     max.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter() {\n        if x > max_val {\n            max_val = x;\n   \
    \         max_idx = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmptc__s923.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmp0j32p2vr.rs:11:19\n\
    \   |\n11 |     let mut max = -1;\n   |                   ^^ the trait `Neg` is\
    \ not implemented for `usize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp0j32p2vr.rs:20:5\n\
    \   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                 \
    \                   ----- expected `isize` because of return type\n...\n20 | \
    \    max\n   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    20 |     max.try_into().unwrap()\n   |\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for &i in\
    \ arr {\n        if i > max {\n            max = i;\n            max_idx = i;\n\
    \        }\n    }\n    if max_idx == -1 {\n        return -1;\n    }\n    return\
    \ max_idx;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4n7t1lci.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut i: isize = 0;\n    while\
    \ i < arr.len() {\n        if arr[i] > arr[i + 1] {\n            max = i;\n  \
    \      }\n        i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqv1trtlt.rs:13:15\n   |\n\
    13 |     while i < arr.len() {\n   |               ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n13 |     while i < arr.len().try_into().unwrap()\
    \ {\n   |               ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror[E0277]: the type\
    \ `[isize]` cannot be indexed by `isize`\n  --> /tmp/tmpqv1trtlt.rs:14:12\n  \
    \ |\n14 |         if arr[i] > arr[i + 1] {\n   |            ^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror[E0277]: the type `[isize]`\
    \ cannot be indexed by `isize`\n  --> /tmp/tmpqv1trtlt.rs:14:21\n   |\n14 |  \
    \       if arr[i] > arr[i + 1] {\n   |                     ^^^^^^^^^^ slice indices\
    \ are of type `usize` or ranges of `usize`\n   |\n   = help: the trait `SliceIndex<[isize]>`\
    \ is not implemented for `isize`\n   = note: required because of the requirements\
    \ on the impl of `Index<isize>` for `Vec<isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = i;\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3uylfvr.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin0ivthh.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = i;\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmptd62kqlf.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &i in arr {\n        if i > max_val {\n            max_idx = i;\n          \
    \  max_val = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r_7k9s0.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            break;\n        }\n        max =\
    \ arr[i];\n        i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `4`,\n right: `3`', /tmp/tmprj_ti5k5.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut maxidx: usize = 0;\n  \
    \  for idx in arr.iter().rev() {\n        if idx > max {\n            max = idx;\n\
    \            maxidx = idx;\n        }\n    }\n    if maxidx == arr.len() {\n \
    \       return -1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp5dn9xiu5.rs:14:18\n   |\n\
    14 |         if idx > max {\n   |                  ^^^\n   |                 \
    \ |\n   |                  expected `&isize`, found `isize`\n   |            \
    \      help: consider borrowing here: `&max`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp5dn9xiu5.rs:15:19\n   |\n15 |             max = idx;\n   |    \
    \               ^^^ expected `isize`, found `&isize`\n   |\nhelp: consider dereferencing\
    \ the borrow\n   |\n15 |             max = *idx;\n   |                   +\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmp5dn9xiu5.rs:16:22\n   |\n16 |  \
    \           maxidx = idx;\n   |                      ^^^ expected `usize`, found\
    \ `&isize`\n\nerror: aborting due to 3 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \        } else {\n            max_val = x;\n        }\n    }\n    max_idx\n}\n\
    \nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpndr8bu_n.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = i;\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3uylfvr.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut j = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[j] {\n            j = i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    arr.len() - j\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdddjs67k.rs:20:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n20 |     arr.len()\
    \ - j\n   |     ^^^^^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you\
    \ can convert a `usize` to an `isize` and panic if the converted value doesn't\
    \ fit\n   |\n20 |     (arr.len() - j).try_into().unwrap()\n   |\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[max] {\n            max = i;\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpqxt2tudf.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max\n\
    \   |     ^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert a `usize`\
    \ to an `isize` and panic if the converted value doesn't fit\n   |\n19 |     max.try_into().unwrap()\n\
    \   |\n\nerror: aborting due to previous error\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdti_cgui.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdti_cgui.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdti_cgui.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            i += 1;\n        } else {\n\
    \            largest = i;\n            break;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpo7n429i7.rs:21:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n21 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     largest.try_into().unwrap()\n   |\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpo7n429i7.rs:11:23\n   |\n11 |     let mut\
    \ largest = -1;\n   |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for &x in arr {\n        if x <= max_value {\n            max_value = x;\n\
    \            max_index = x;\n        }\n    }\n    max_index\n}\n\nfn main() {\n\
    \    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmps7rmqe4i.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmphryypdx5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut largest = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxj366w4j.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpxj366w4j.rs:12:23\n\
    \   |\n12 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxj366w4j.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3mur4wv.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpk3mur4wv.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk3mur4wv.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut idx: usize = 0;\n    for\
    \ &x in arr {\n        if x > max {\n            max = x;\n            idx = x;\n\
    \        }\n    }\n    if idx == arr.len() {\n        return -1;\n    }\n    max\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6ycgyon6.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp6ycgyon6.rs:16:19\n   |\n16 |             idx = x;\n  \
    \ |                   ^ expected `usize`, found `isize`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqkng8yva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \            max_val = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbd05h921.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i-1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpxz4p6nrj.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpxz4p6nrj.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut idx: usize = 0;\n    for\
    \ &x in arr {\n        if x <= max {\n            max = x;\n            idx =\
    \ 1;\n        } else {\n            idx++;\n        }\n    }\n    if idx == arr.len()\
    \ {\n        return -1;\n    }\n    max\n}\n\nfn main() {\n    let candidate =\
    \ can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error: expected expression, found `+`\n  --> /tmp/tmph_twid48.rs:18:17\n\
    \   |\n18 |             idx++;\n   |                 ^ expected expression\n\n\
    error[E0308]: mismatched types\n  --> /tmp/tmph_twid48.rs:13:9\n   |\n13 |   \
    \  for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprl0dejjl.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprl0dejjl.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \        }\n        if x == max_val + 1 {\n            max_idx = x;\n        }\n\
    \    }\n    max_idx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmp7h5np1qt.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[i+1] {\n            i += 1;\n        } else {\n\
    \            largest = i;\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmphhydlg0h.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmphhydlg0h.rs:21:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n21 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n21 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = arr[i];\n        } else {\n\
    \            break;\n        }\n        i += 1;\n    }\n    max\n}\n\nfn main()\
    \ {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4,\
    \ 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `3`', /tmp/tmpl971eqdl.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        } else {\n            i += 1;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdti_cgui.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpdti_cgui.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdti_cgui.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprl0dejjl.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprl0dejjl.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpbwrl4a1t.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &i in arr {\n        if i > max_val {\n            max_idx = i;\n          \
    \  max_val = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7r_7k9s0.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_index = -1;\n    let mut max_value = arr[0];\n \
    \   for &x in arr.iter().rev() {\n        if x > max_value {\n            max_value\
    \ = x;\n            max_index = arr.len() - 1;\n        }\n    }\n    max_index\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpawhad3tl.rs:19:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n19 |     max_index\n\
    \   |     ^^^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    19 |     max_index.try_into().unwrap()\n   |\n\nerror[E0277]: the trait bound\
    \ `usize: Neg` is not satisfied\n  --> /tmp/tmpawhad3tl.rs:11:25\n   |\n11 | \
    \    let mut max_index = -1;\n   |                         ^^ the trait `Neg`\
    \ is not implemented for `usize`\n\nerror: aborting due to 2 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            max = i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdl8ziw_x.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        }\n\
    \        i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpz1rspc7w.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpz1rspc7w.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut max_idx = -1;\n    for &i in\
    \ arr {\n        if i > max {\n            max = i;\n            max_idx = i;\n\
    \        }\n    }\n    if max_idx == -1 {\n        return -1;\n    }\n    return\
    \ max_idx;\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4n7t1lci.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut index = 0;\n    for &x in arr\
    \ {\n        if x > max {\n            max = x;\n        }\n        if x == max\
    \ {\n            index = x;\n        }\n    }\n    index\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpdt7qe_gm.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmphryypdx5.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter() {\n        if x > max_val {\n            max_val = x;\n   \
    \         max_idx = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let\
    \ candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmptc__s923.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &i in arr {\n        if i > max_val {\n            max_val = i;\n          \
    \  max_idx = i;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8gh94okn.rs:13:9\n   |\n\
    13 |     for &i in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i + 1] {\n            largest = i;\n        } else\
    \ {\n            i += 1;\n        }\n    }\n    largest\n}\n\nfn main() {\n  \
    \  let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmprl0dejjl.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmprl0dejjl.rs:20:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n20 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n20 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] <= arr[i + 1] {\n            i += 1;\n        } else {\n\
    \            largest = i;\n            break;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_wmeue7.rs:21:5\n   |\n\
    10 | fn can_arrange(arr: Vec<isize>) -> isize {\n   |                        \
    \            ----- expected `isize` because of return type\n...\n21 |     largest\n\
    \   |     ^^^^^^^ expected `isize`, found `usize`\n   |\nhelp: you can convert\
    \ a `usize` to an `isize` and panic if the converted value doesn't fit\n   |\n\
    21 |     largest.try_into().unwrap()\n   |\n\nerror[E0277]: the trait bound `usize:\
    \ Neg` is not satisfied\n  --> /tmp/tmpw_wmeue7.rs:11:23\n   |\n11 |     let mut\
    \ largest = -1;\n   |                       ^^ the trait `Neg` is not implemented\
    \ for `usize`\n\nerror: aborting due to 2 previous errors\n\nSome errors have\
    \ detailed explanations: E0277, E0308.\nFor more information about an error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > arr[i + 1] {\n            largest = i;\n        }\n \
    \       i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpve_ep4gm.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpve_ep4gm.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max_idx = -1;\n    let mut max_val = arr[0];\n    for\
    \ &x in arr.iter().rev() {\n        if x <= max_val {\n            max_idx = x;\n\
    \            max_val = x;\n        }\n    }\n    max_idx\n}\n\nfn main() {\n \
    \   let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbd05h921.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] >= max {\n            max = arr[i];\n        }\n      \
    \  i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpqkng8yva.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    for i in arr.iter().rev() {\n   \
    \     if i > largest {\n            largest = i;\n        }\n    }\n    largest\n\
    }\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt4tly0k0.rs:13:16\n   |\n\
    13 |         if i > largest {\n   |                ^^^^^^^\n   |             \
    \   |\n   |                expected `&isize`, found integer\n   |            \
    \    help: consider borrowing here: `&largest`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpt4tly0k0.rs:14:23\n   |\n14 |             largest = i;\n   |  \
    \                     ^ expected integer, found `&isize`\n   |\nhelp: consider\
    \ dereferencing the borrow\n   |\n14 |             largest = *i;\n   |       \
    \                +\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max: isize = 0;\n    let mut maxidx = 0;\n    for &i\
    \ in arr.iter() {\n        if i > max {\n            max = i;\n            maxidx\
    \ = i;\n        }\n    }\n    if maxidx == arr.len() {\n        return -1;\n \
    \   }\n    maxidx\n}\n\nfn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp7irg8u_6.rs:19:18\n   |\n\
    19 |     if maxidx == arr.len() {\n   |                  ^^^^^^^^^ expected `isize`,\
    \ found `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic\
    \ if the converted value doesn't fit\n   |\n19 |     if maxidx == arr.len().try_into().unwrap()\
    \ {\n   |                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut cur = 0;\n    for &x in arr {\n\
    \        if x > max {\n            max = x;\n        }\n        if x == max {\n\
    \            cur += 1;\n        }\n    }\n    max\n}\n\nfn main() {\n    let candidate\
    \ = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpc3o5ib_d.rs:13:9\n   |\n\
    13 |     for &x in arr {\n   |         ^^    --- this expression has type `isize`\n\
    \   |         |\n   |         expected `isize`, found reference\n   |\n   = note:\
    \   expected type `isize`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1659746911
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] >= arr[i..].iter().max().unwrap() {\n            largest\
    \ = i;\n        }\n        i += 1;\n    }\n    largest\n}\n\nfn main() {\n   \
    \ let candidate = can_arrange;\n    assert_eq!(candidate(vec![1, 2, 4, 3, 5]),\
    \ 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3mur4wv.rs:14:22\n   |\n\
    14 |         if arr[i] >= arr[i..].iter().max().unwrap() {\n   |             \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n  \
    \ |\nhelp: consider dereferencing the borrow\n   |\n14 |         if arr[i] >=\
    \ *arr[i..].iter().max().unwrap() {\n   |                      +\n\nerror[E0277]:\
    \ the trait bound `usize: Neg` is not satisfied\n  --> /tmp/tmpk3mur4wv.rs:11:23\n\
    \   |\n11 |     let mut largest = -1;\n   |                       ^^ the trait\
    \ `Neg` is not implemented for `usize`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk3mur4wv.rs:19:5\n   |\n10 | fn can_arrange(arr: Vec<isize>) -> isize\
    \ {\n   |                                    ----- expected `isize` because of\
    \ return type\n...\n19 |     largest\n   |     ^^^^^^^ expected `isize`, found\
    \ `usize`\n   |\nhelp: you can convert a `usize` to an `isize` and panic if the\
    \ converted value doesn't fit\n   |\n19 |     largest.try_into().unwrap()\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut i = 0;\n    let mut max = -1;\n    while i < arr.len()\
    \ {\n        if arr[i] <= max {\n            max = i;\n        }\n        i +=\
    \ 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n   \
    \ assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpv3uylfvr.rs:15:19\n   |\n\
    15 |             max = i;\n   |                   ^ expected `isize`, found `usize`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin0ivthh.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = 0;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    if max == 0 {\n        return -1;\n    }\n    max\n}\n\n\
    fn main() {\n    let candidate = can_arrange;\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1, 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1,\
    \ 4, 2, 5, 6, 7, 8, 9, 10]), 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]),\
    \ 4);\n    assert_eq!(candidate(Vec::<isize>::new()), -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmpm89gylgk.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 101
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut max = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > max {\n            max = arr[i];\n        }\n       \
    \ i += 1;\n    }\n    max\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `5`,\n right: `3`', /tmp/tmp99zmscze.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1659746910
- exit_code: 1
  program: "/// Create a function which returns the largest index of an element which\n\
    /// is not greater than or equal to the element immediately preceding it. If\n\
    /// no such element exists then return -1. The given vector will not contain\n\
    /// duplicate values.\n/// Examples:\n/// >>> can_arrange(vec![1, 2, 4, 3, 5])\n\
    /// 3\n/// >>> can_arrange(vec![1, 2, 3])\n/// -1\nfn can_arrange(arr: Vec<isize>)\
    \ -> isize {\n    let mut largest = -1;\n    let mut i = 0;\n    while i < arr.len()\
    \ {\n        if arr[i] > largest {\n            largest = i;\n        }\n    \
    \    i += 1;\n    }\n    largest\n}\n\nfn main() {\n    let candidate = can_arrange;\n\
    \    assert_eq!(candidate(vec![1, 2, 4, 3, 5]), 3);\n    assert_eq!(candidate(vec![1,\
    \ 2, 4, 5]), -1);\n    assert_eq!(candidate(vec![1, 4, 2, 5, 6, 7, 8, 9, 10]),\
    \ 2);\n    assert_eq!(candidate(vec![4, 8, 5, 7, 3]), 4);\n    assert_eq!(candidate(Vec::<isize>::new()),\
    \ -1);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpin0ivthh.rs:15:23\n   |\n\
    15 |             largest = i;\n   |                       ^ expected `isize`,\
    \ found `usize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1659746910
