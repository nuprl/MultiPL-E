name: HumanEval_48_is_palindrome
language: rs
prompt: "/// Checks if given string is a palindrome\n/// >>> is_palindrome(String::from(\"\
  \"))\n/// true\n/// >>> is_palindrome(String::from(\"aba\"))\n/// true\n/// >>>\
  \ is_palindrome(String::from(\"aaaaa\"))\n/// true\n/// >>> is_palindrome(String::from(\"\
  zbcd\"))\n/// false\nfn is_palindrome(text: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = is_palindrome;\n    assert_eq!(candidate(String::from(\"\
  \")), true);\n    assert_eq!(candidate(String::from(\"aba\")), true);\n    assert_eq!(candidate(String::from(\"\
  aaaaa\")), true);\n    assert_eq!(candidate(String::from(\"zbcd\")), false);\n \
  \   assert_eq!(candidate(String::from(\"xywyx\")), true);\n    assert_eq!(candidate(String::from(\"\
  xywyz\")), false);\n    assert_eq!(candidate(String::from(\"xywzx\")), false);\n\
  }\n"
completions: ["    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.eq_ignore_ascii_case(&text)",
  "    let mut reversed = String::new();\n    let mut it = text.char_indices().rev();\n\
    \    let mut i = 0;\n    while i < it.len() {\n        reversed.push(*it[i]);\n\
    \        i += 1;\n    }\n    reversed == text", "    let mut text = text.to_lowercase();\n\
    \    let mut reversed = text.chars().fold(String::new(), |mut reversed, c| {\n\
    \        reversed.push(*c);\n        reversed\n    });\n    reversed.chars().fold(true,\
    \ |mut is_palindrome, char| {\n        if char == reversed.chars().next().unwrap()\
    \ {\n            is_palindrome = true;\n        }\n        is_palindrome\n   \
    \ })", "    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed == text", "   \
    \ let mut reversed = text.chars().cloned().rev().collect::<String>();\n    reversed.cmp(&text)\
    \ == Ordering::Equal", "    let mut s = text;\n    s.reverse();\n    s == text",
  "    let mut text = text.to_lowercase();\n    let mut reversed = String::new();\n\
    \    let mut i = 0;\n    while i < text.len() {\n        reversed.push_str(&text[text.len()\
    \ - i - 1].to_string());\n        i += 1;\n    }\n    reversed.is_equal(text)",
  "    let mut s = text;\n    s.reverse();\n    s == text", "    let mut text = text.to_string();\n\
    \    let mut reversed = text.chars().fold(String::new(), |mut acc, c| {\n    \
    \    acc.push_str(&c.to_string());\n        acc\n    });\n    reversed.reverse();\n\
    \    text == reversed", "    let mut s = text;\n    s.reverse();\n    s == text",
  "    let mut text = text.to_lowercase();\n    let mut reversed = text.chars().fold(String::new(),\
    \ |mut acc, c| {\n        acc.push_str(&c.to_string());\n        acc\n    });\n\
    \    reversed.reverse();\n    text == reversed", "    let mut s = text;\n    let\
    \ mut i = 0;\n    let mut j = s.len() - 1;\n    while i < j {\n        if s[i]\
    \ != s[j] {\n            return false;\n        }\n        i += 1;\n        j\
    \ -= 1;\n    }\n    true", "    let mut text = text.to_lowercase();\n    let mut\
    \ reversed = String::new();\n    let mut i = 0;\n    while i < text.len() {\n\
    \        reversed.push_str(&text[text.len() - i - 1].to_string());\n        i\
    \ += 1;\n    }\n    reversed == text", "    let mut s = text.to_lowercase();\n\
    \    s.reverse();\n    s == text", "    let mut text = text.to_string();\n   \
    \ text.rev();\n    text == text", "    let mut reversed = text;\n    reversed.reverse();\n\
    \    reversed == text", "    let mut reversed = text.chars().cloned().rev().collect::<String>();\n\
    \    reversed.cmp(&text) == Ordering::Equal", "    let mut s = text.to_string();\n\
    \    s.reverse();\n    s == text", "    let mut text = text.to_lowercase();\n\
    \    let mut reversed = text.chars().fold(String::new(), |mut acc, c| {\n    \
    \    acc.push_str(&c.to_string());\n        acc\n    });\n    reversed.reverse();\n\
    \    text == reversed", "    let mut reversed = text.chars().fold(String::new(),\
    \ |mut acc, c| {\n        acc.push_str(&c.to_string());\n        acc\n    });\n\
    \    reversed.chars().fold(true, |acc, c| {\n        if *c != *acc.chars().last().unwrap()\
    \ {\n            acc = false;\n        }\n        acc\n    })"]
stop_tokens:
- "\n}"
